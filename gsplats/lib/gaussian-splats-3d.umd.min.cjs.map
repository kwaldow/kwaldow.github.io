{"version":3,"file":"gaussian-splats-3d.umd.min.cjs","sources":["../src/loaders/UncompressedSplatArray.js","../src/AbortablePromise.js","../src/Util.js","../src/loaders/SplatBuffer.js","../src/loaders/ply/CompressedPlyParser.js","../src/loaders/ply/PlyParser.js","../src/loaders/SplatPartitioner.js","../src/loaders/SplatBufferGenerator.js","../src/loaders/LoaderStatus.js","../src/Constants.js","../src/loaders/ply/PlyLoader.js","../src/loaders/splat/SplatParser.js","../src/loaders/splat/SplatLoader.js","../src/loaders/ksplat/KSplatLoader.js","../src/loaders/SceneFormat.js","../src/loaders/Utils.js","../src/OrbitControls.js","../src/ui/LoadingSpinner.js","../src/ui/Util.js","../src/ui/LoadingProgressBar.js","../src/ui/InfoPanel.js","../src/ArrowHelper.js","../src/SceneHelper.js","../src/raycaster/Ray.js","../src/raycaster/Hit.js","../src/raycaster/Raycaster.js","../src/SplatScene.js","../src/splattree/SplatTree.js","../src/three-shim/WebGLExtensions.js","../src/three-shim/WebGLCapabilities.js","../src/SceneRevealMode.js","../src/SplatMesh.js","../src/worker/SortWorker.js","../src/webxr/WebXRMode.js","../src/webxr/VRButton.js","../src/webxr/ARButton.js","../src/RenderMode.js","../src/Viewer.js","../src/worker/sorter.wasm","../src/DropInViewer.js"],"sourcesContent":["\r\nexport class UncompressedSplatArray {\r\n\r\n    static OFFSET = {\r\n        X: 0,\r\n        Y: 1,\r\n        Z: 2,\r\n        SCALE0: 3,\r\n        SCALE1: 4,\r\n        SCALE2: 5,\r\n        ROTATION0: 6,\r\n        ROTATION1: 7,\r\n        ROTATION2: 8,\r\n        ROTATION3: 9,\r\n        FDC0: 10,\r\n        FDC1: 11,\r\n        FDC2: 12,\r\n        OPACITY: 13\r\n    };\r\n\r\n    constructor() {\r\n        this.splats = [];\r\n        this.splatCount = 0;\r\n    }\r\n\r\n    static createSplat() {\r\n        return [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0];\r\n    }\r\n\r\n    addSplat(splat) {\r\n        this.splats.push(splat);\r\n        this.splatCount++;\r\n    }\r\n\r\n    getSplat(index) {\r\n        return this.splats[index];\r\n    }\r\n\r\n    addDefaultSplat() {\r\n        const newSplat = UncompressedSplatArray.createSplat();\r\n        this.addSplat(newSplat);\r\n        return newSplat;\r\n    }\r\n\r\n    addSplatFromComonents(x, y, z, scale0, scale1, scale2, rot0, rot1, rot2, rot3, r, g, b, opacity) {\r\n        const newSplat = [x, y, z, scale0, scale1, scale2, rot0, rot1, rot2, rot3, r, g, b, opacity];\r\n        this.addSplat(newSplat);\r\n        return newSplat;\r\n    }\r\n\r\n    addSplatFromArray(src, srcIndex) {\r\n        const srcSplat = src.splats[srcIndex];\r\n        this.addSplatFromComonents(srcSplat[0], srcSplat[1], srcSplat[2], srcSplat[3], srcSplat[4], srcSplat[5],\r\n                                   srcSplat[6], srcSplat[7], srcSplat[8], srcSplat[9],\r\n                                   srcSplat[10], srcSplat[11], srcSplat[12], srcSplat[13]);\r\n    }\r\n}\r\n","/**\r\n * AbortablePromise: A quick & dirty wrapper for JavaScript's Promise class that allows the underlying\r\n * asynchronous operation to be cancelled. It is only meant for simple situations where no complex promise\r\n * chaining or merging occurs. It needs a significant amount of work to truly replicate the full\r\n * functionality of JavaScript's Promise class. Look at Util.fetchWithProgress() for example usage.\r\n *\r\n * This class was primarily added to allow splat scene downloads to be cancelled. It has not been tested\r\n * very thoroughly and the implementation is kinda janky. If you can at all help it, please avoid using it :)\r\n */\r\nexport class AbortablePromise {\r\n\r\n    static idGen = 0;\r\n\r\n    constructor(promiseFunc, abortHandler) {\r\n\r\n        let promiseResolve;\r\n        let promiseReject;\r\n        this.promise = new Promise((resolve, reject) => {\r\n            promiseResolve = resolve.bind(this);\r\n            promiseReject = reject.bind(this);\r\n        });\r\n\r\n        const resolve = (...args) => {\r\n            promiseResolve(...args);\r\n        };\r\n\r\n        const reject = (error) => {\r\n            promiseReject(error);\r\n        };\r\n\r\n        promiseFunc(resolve.bind(this), reject.bind(this));\r\n        this.abortHandler = abortHandler;\r\n        this.id = AbortablePromise.idGen++;\r\n    }\r\n\r\n    then(onResolve) {\r\n        return new AbortablePromise((resolve, reject) => {\r\n            this.promise = this.promise\r\n            .then((...args) => {\r\n                const onResolveResult = onResolve(...args);\r\n                if (onResolveResult instanceof Promise || onResolveResult instanceof AbortablePromise) {\r\n                    onResolveResult.then((...args2) => {\r\n                        resolve(...args2);\r\n                    });\r\n                } else {\r\n                    resolve(onResolveResult);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                reject(error);\r\n            });\r\n        }, this.abortHandler);\r\n    }\r\n\r\n    catch(onFail) {\r\n        return new AbortablePromise((resolve) => {\r\n            this.promise = this.promise.then((...args) => {\r\n                resolve(...args);\r\n            })\r\n            .catch(onFail);\r\n        }, this.abortHandler);\r\n    }\r\n\r\n    abort() {\r\n        if (this.abortHandler) this.abortHandler();\r\n    }\r\n\r\n}\r\n\r\nexport class AbortedPromiseError extends Error {\r\n\r\n    constructor(msg) {\r\n        super(msg);\r\n    }\r\n\r\n}\r\n","import { AbortablePromise, AbortedPromiseError } from './AbortablePromise.js';\r\n\r\nexport const floatToHalf = function() {\r\n\r\n    const floatView = new Float32Array(1);\r\n    const int32View = new Int32Array(floatView.buffer);\r\n\r\n    return function(val) {\r\n        floatView[0] = val;\r\n        const x = int32View[0];\r\n\r\n        let bits = (x >> 16) & 0x8000;\r\n        let m = (x >> 12) & 0x07ff;\r\n        const e = (x >> 23) & 0xff;\r\n\r\n        if (e < 103) return bits;\r\n\r\n        if (e > 142) {\r\n            bits |= 0x7c00;\r\n            bits |= ((e == 255) ? 0 : 1) && (x & 0x007fffff);\r\n            return bits;\r\n        }\r\n\r\n        if (e < 113) {\r\n            m |= 0x0800;\r\n            bits |= (m >> (114 - e)) + ((m >> (113 - e)) & 1);\r\n            return bits;\r\n        }\r\n\r\n        bits |= (( e - 112) << 10) | (m >> 1);\r\n        bits += m & 1;\r\n        return bits;\r\n    };\r\n\r\n}();\r\n\r\nexport const uintEncodedFloat = function() {\r\n\r\n    const floatView = new Float32Array(1);\r\n    const int32View = new Int32Array(floatView.buffer);\r\n\r\n    return function(f) {\r\n        floatView[0] = f;\r\n        return int32View[0];\r\n    };\r\n\r\n}();\r\n\r\nexport const rgbaToInteger = function(r, g, b, a) {\r\n    return r + (g << 8) + (b << 16) + (a << 24);\r\n};\r\n\r\nexport const rgbaArrayToInteger = function(arr, offset) {\r\n    return arr[offset] + (arr[offset + 1] << 8) + (arr[offset + 2] << 16) + (arr[offset + 3] << 24);\r\n};\r\n\r\nexport const fetchWithProgress = function(path, onProgress, saveChunks = true) {\r\n\r\n    const abortController = new AbortController();\r\n    const signal = abortController.signal;\r\n    let aborted = false;\r\n    let rejectFunc = null;\r\n    const abortHandler = () => {\r\n        abortController.abort();\r\n        rejectFunc(new AbortedPromiseError('Fetch aborted.'));\r\n        aborted = true;\r\n    };\r\n\r\n    return new AbortablePromise((resolve, reject) => {\r\n        rejectFunc = reject;\r\n        fetch(path, { signal })\r\n        .then(async (data) => {\r\n            const reader = data.body.getReader();\r\n            let bytesDownloaded = 0;\r\n            let _fileSize = data.headers.get('Content-Length');\r\n            let fileSize = _fileSize ? parseInt(_fileSize) : undefined;\r\n\r\n            const chunks = [];\r\n\r\n            while (!aborted) {\r\n                try {\r\n                    const { value: chunk, done } = await reader.read();\r\n                    if (done) {\r\n                        if (onProgress) {\r\n                            onProgress(100, '100%', chunk, fileSize);\r\n                        }\r\n                        if (saveChunks) {\r\n                            const buffer = new Blob(chunks).arrayBuffer();\r\n                            resolve(buffer);\r\n                        } else {\r\n                            resolve();\r\n                        }\r\n                        break;\r\n                    }\r\n                    bytesDownloaded += chunk.length;\r\n                    let percent;\r\n                    let percentLabel;\r\n                    if (fileSize !== undefined) {\r\n                        percent = bytesDownloaded / fileSize * 100;\r\n                        percentLabel = `${percent.toFixed(2)}%`;\r\n                    }\r\n                    if (saveChunks) chunks.push(chunk);\r\n                    if (onProgress) {\r\n                        const cancelSaveChucnks = onProgress(percent, percentLabel, chunk, fileSize);\r\n                        if (cancelSaveChucnks) saveChunks = false;\r\n                    }\r\n                } catch (error) {\r\n                    reject(error);\r\n                    break;\r\n                }\r\n            }\r\n        });\r\n    }, abortHandler);\r\n\r\n};\r\n\r\nexport const clamp = function(val, min, max) {\r\n    return Math.max(Math.min(val, max), min);\r\n};\r\n\r\nexport const getCurrentTime = function() {\r\n    return performance.now() / 1000;\r\n};\r\n\r\nexport const disposeAllMeshes = (object3D) => {\r\n    if (object3D.geometry) {\r\n        object3D.geometry.dispose();\r\n        object3D.geometry = null;\r\n    }\r\n    if (object3D.material) {\r\n        object3D.material.dispose();\r\n        object3D.material = null;\r\n    }\r\n    if (object3D.children) {\r\n        for (let child of object3D.children) {\r\n            disposeAllMeshes(child);\r\n        }\r\n    }\r\n};\r\n\r\nexport const delayedExecute = (func, fast) => {\r\n    return new Promise((resolve) => {\r\n        window.setTimeout(() => {\r\n            resolve(func());\r\n        }, fast ? 1 : 50);\r\n    });\r\n};\r\n","import * as THREE from 'three';\r\nimport { UncompressedSplatArray } from './UncompressedSplatArray.js';\r\nimport { clamp } from '../Util.js';\r\n\r\n/**\r\n * SplatBuffer: Container for splat data from a single scene/file and capable of (mediocre) compression.\r\n */\r\nexport class SplatBuffer {\r\n\r\n    static CurrentMajorVersion = 0;\r\n    static CurrentMinorVersion = 1;\r\n\r\n    static CenterComponentCount = 3;\r\n    static ScaleComponentCount = 3;\r\n    static RotationComponentCount = 4;\r\n    static ColorComponentCount = 4;\r\n    static CovarianceComponentCount = 6;\r\n\r\n    static SplatScaleOffsetFloat = 3;\r\n    static SplatRotationOffsetFloat = 6;\r\n\r\n    static CompressionLevels = {\r\n        0: {\r\n            BytesPerCenter: 12,\r\n            BytesPerColor: 4,\r\n            BytesPerScale: 12,\r\n            BytesPerRotation: 16,\r\n            BytesPerSplat: 44,\r\n            ScaleRange: 1\r\n        },\r\n        1: {\r\n            BytesPerCenter: 6,\r\n            BytesPerColor: 4,\r\n            BytesPerScale: 6,\r\n            BytesPerRotation: 8,\r\n            BytesPerSplat: 24,\r\n            ScaleRange: 32767\r\n        }\r\n    };\r\n\r\n    static CovarianceSizeFloats = 6;\r\n\r\n    static HeaderSizeBytes = 4096;\r\n    static SectionHeaderSizeBytes = 1024;\r\n\r\n    static BucketStorageSizeBytes = 12;\r\n    static BucketStorageSizeFloats = 3;\r\n\r\n    static BucketBlockSize = 5.0;\r\n    static BucketSize = 256;\r\n\r\n    constructor(bufferData, secLoadedCountsToMax = true) {\r\n        this.constructFromBuffer(bufferData, secLoadedCountsToMax);\r\n    }\r\n\r\n    fbf(f) {\r\n        if (this.compressionLevel === 0) {\r\n            return f;\r\n        } else {\r\n            return THREE.DataUtils.fromHalfFloat(f);\r\n        }\r\n    };\r\n\r\n    getSplatCount() {\r\n        return this.splatCount;\r\n    }\r\n\r\n    getMaxSplatCount() {\r\n        return this.maxSplatCount;\r\n    }\r\n\r\n    getBucketIndex(section, localSplatIndex) {\r\n        let bucketIndex;\r\n        const maxSplatIndexInFullBuckets = section.fullBucketCount * section.bucketSize;\r\n        if (localSplatIndex < maxSplatIndexInFullBuckets) {\r\n            bucketIndex = Math.floor(localSplatIndex / section.bucketSize);\r\n        } else {\r\n            let bucketSplatIndex = maxSplatIndexInFullBuckets;\r\n            bucketIndex = section.fullBucketCount;\r\n            let partiallyFullBucketIndex = 0;\r\n            while (bucketSplatIndex < section.splatCount) {\r\n                let currentPartiallyFilledBucketSize = section.partiallyFilledBucketLengths[partiallyFullBucketIndex];\r\n                if (localSplatIndex >= bucketSplatIndex && localSplatIndex < bucketSplatIndex + currentPartiallyFilledBucketSize) {\r\n                    break;\r\n                }\r\n                bucketSplatIndex += currentPartiallyFilledBucketSize;\r\n                bucketIndex++;\r\n                partiallyFullBucketIndex++;\r\n            }\r\n        }\r\n        return bucketIndex;\r\n    }\r\n\r\n    getSplatCenter(globalSplatIndex, outCenter, transform) {\r\n        const sectionIndex = this.globalSplatIndexToSectionMap[globalSplatIndex];\r\n        const section = this.sections[sectionIndex];\r\n        const localSplatIndex = globalSplatIndex - section.splatCountOffset;\r\n        if (this.compressionLevel === 1) {\r\n            const centerBase = localSplatIndex * this.uint16PerSplat;\r\n            const bucketIndex = this.getBucketIndex(section, localSplatIndex);\r\n            const bucketBase = bucketIndex * SplatBuffer.BucketStorageSizeFloats;\r\n            const sf = section.compressionScaleFactor;\r\n            const sr = section.compressionScaleRange;\r\n            outCenter.x = (section.dataArrayUint16[centerBase] - sr) * sf + section.bucketArray[bucketBase];\r\n            outCenter.y = (section.dataArrayUint16[centerBase + 1] - sr) * sf + section.bucketArray[bucketBase + 1];\r\n            outCenter.z = (section.dataArrayUint16[centerBase + 2] - sr) * sf + section.bucketArray[bucketBase + 2];\r\n        } else {\r\n            const centerBase = localSplatIndex * this.float32PerSplat;\r\n            outCenter.x = section.dataArrayFloat32[centerBase];\r\n            outCenter.y = section.dataArrayFloat32[centerBase + 1];\r\n            outCenter.z = section.dataArrayFloat32[centerBase + 2];\r\n        }\r\n        if (transform) outCenter.applyMatrix4(transform);\r\n    }\r\n\r\n    getSplatScaleAndRotation = function() {\r\n\r\n        const scaleMatrix = new THREE.Matrix4();\r\n        const rotationMatrix = new THREE.Matrix4();\r\n        const tempMatrix = new THREE.Matrix4();\r\n        const tempPosition = new THREE.Vector3();\r\n\r\n        return function(index, outScale, outRotation, transform) {\r\n            const sectionIndex = this.globalSplatIndexToSectionMap[index];\r\n            const section = this.sections[sectionIndex];\r\n            const localSplatIndex = index - section.splatCountOffset;\r\n\r\n            const floatsPerSplat = this.compressionLevel === 1 ? this.uint16PerSplat : this.float32PerSplat;\r\n\r\n            const sectionFloatArray = this.compressionLevel === 1 ? section.dataArrayUint16 : section.dataArrayFloat32;\r\n            const splatFloatBase = floatsPerSplat * localSplatIndex;\r\n\r\n            const scaleBase = splatFloatBase + SplatBuffer.SplatScaleOffsetFloat;\r\n            outScale.set(this.fbf(sectionFloatArray[scaleBase]),\r\n                         this.fbf(sectionFloatArray[scaleBase + 1]),\r\n                         this.fbf(sectionFloatArray[scaleBase + 2]));\r\n\r\n            const rotationBase = splatFloatBase + SplatBuffer.SplatRotationOffsetFloat;\r\n            outRotation.set(this.fbf(sectionFloatArray[rotationBase + 1]),\r\n                            this.fbf(sectionFloatArray[rotationBase + 2]),\r\n                            this.fbf(sectionFloatArray[rotationBase + 3]),\r\n                            this.fbf(sectionFloatArray[rotationBase]));\r\n\r\n            if (transform) {\r\n                scaleMatrix.makeScale(outScale.x, outScale.y, outScale.z);\r\n                rotationMatrix.makeRotationFromQuaternion(outRotation);\r\n                tempMatrix.copy(scaleMatrix).multiply(rotationMatrix).multiply(transform);\r\n                tempMatrix.decompose(tempPosition, outRotation, outScale);\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    getSplatColor(globalSplatIndex, outColor, transform) {\r\n        const sectionIndex = this.globalSplatIndexToSectionMap[globalSplatIndex];\r\n        const section = this.sections[sectionIndex];\r\n        const localSplatIndex = globalSplatIndex - section.splatCountOffset;\r\n        const colorBase = this.bytesPerSplat * localSplatIndex + this.bytesPerCenter + this.bytesPerScale + this.bytesPerRotation;\r\n        outColor.set(section.dataArrayUint8[colorBase], section.dataArrayUint8[colorBase + 1],\r\n                     section.dataArrayUint8[colorBase + 2], section.dataArrayUint8[colorBase + 3]);\r\n        // TODO: apply transform for spherical harmonics\r\n    }\r\n\r\n    fillSplatCenterArray(outCenterArray, transform, srcFrom, srcTo, destFrom) {\r\n        const splatCount = this.splatCount;\r\n\r\n        srcFrom = srcFrom || 0;\r\n        srcTo = srcTo || splatCount - 1;\r\n        if (destFrom === undefined) destFrom = srcFrom;\r\n\r\n        const center = new THREE.Vector3();\r\n        for (let i = srcFrom; i <= srcTo; i++) {\r\n            const sectionIndex = this.globalSplatIndexToSectionMap[i];\r\n            const section = this.sections[sectionIndex];\r\n            const localSplatIndex = i - section.splatCountOffset;\r\n            const centerDestBase = (i - srcFrom + destFrom) * SplatBuffer.CenterComponentCount;\r\n            if (this.compressionLevel === 1) {\r\n                const centerBase = localSplatIndex * this.uint16PerSplat;\r\n                const bucketIndex = this.getBucketIndex(section, localSplatIndex);\r\n                const bucketBase = bucketIndex * SplatBuffer.BucketStorageSizeFloats;\r\n                const sf = section.compressionScaleFactor;\r\n                const sr = section.compressionScaleRange;\r\n                center.x = (section.dataArrayUint16[centerBase] - sr) * sf + section.bucketArray[bucketBase];\r\n                center.y = (section.dataArrayUint16[centerBase + 1] - sr) * sf + section.bucketArray[bucketBase + 1];\r\n                center.z = (section.dataArrayUint16[centerBase + 2] - sr) * sf + section.bucketArray[bucketBase + 2];\r\n            } else {\r\n                const centerBase = localSplatIndex * this.float32PerSplat;\r\n                center.x = section.dataArrayFloat32[centerBase];\r\n                center.y = section.dataArrayFloat32[centerBase + 1];\r\n                center.z = section.dataArrayFloat32[centerBase + 2];\r\n            }\r\n            if (transform) {\r\n                center.applyMatrix4(transform);\r\n            }\r\n            outCenterArray[centerDestBase] = center.x;\r\n            outCenterArray[centerDestBase + 1] = center.y;\r\n            outCenterArray[centerDestBase + 2] = center.z;\r\n        }\r\n    }\r\n\r\n    static computeCovariance = function() {\r\n\r\n        const tempMatrix4 = new THREE.Matrix4();\r\n        const scaleMatrix = new THREE.Matrix3();\r\n        const rotationMatrix = new THREE.Matrix3();\r\n        const covarianceMatrix = new THREE.Matrix3();\r\n        const transformedCovariance = new THREE.Matrix3();\r\n        const transform3x3 = new THREE.Matrix3();\r\n        const transform3x3Transpose = new THREE.Matrix3();\r\n        const thf = THREE.DataUtils.toHalfFloat.bind(THREE.DataUtils);\r\n\r\n        return function(scale, rotation, transform, outCovariance, outOffset = 0, desiredOutputCompressionLevel) {\r\n\r\n            tempMatrix4.makeScale(scale.x, scale.y, scale.z);\r\n            scaleMatrix.setFromMatrix4(tempMatrix4);\r\n\r\n            tempMatrix4.makeRotationFromQuaternion(rotation);\r\n            rotationMatrix.setFromMatrix4(tempMatrix4);\r\n\r\n            covarianceMatrix.copy(rotationMatrix).multiply(scaleMatrix);\r\n            transformedCovariance.copy(covarianceMatrix).transpose().premultiply(covarianceMatrix);\r\n\r\n            if (transform) {\r\n                transform3x3.setFromMatrix4(transform);\r\n                transform3x3Transpose.copy(transform3x3).transpose();\r\n                transformedCovariance.multiply(transform3x3Transpose);\r\n                transformedCovariance.premultiply(transform3x3);\r\n            }\r\n\r\n            if (desiredOutputCompressionLevel === 1) {\r\n                outCovariance[outOffset] = thf(transformedCovariance.elements[0]);\r\n                outCovariance[outOffset + 1] = thf(transformedCovariance.elements[3]);\r\n                outCovariance[outOffset + 2] = thf(transformedCovariance.elements[6]);\r\n                outCovariance[outOffset + 3] = thf(transformedCovariance.elements[4]);\r\n                outCovariance[outOffset + 4] = thf(transformedCovariance.elements[7]);\r\n                outCovariance[outOffset + 5] = thf(transformedCovariance.elements[8]);\r\n            } else {\r\n                outCovariance[outOffset] = transformedCovariance.elements[0];\r\n                outCovariance[outOffset + 1] = transformedCovariance.elements[3];\r\n                outCovariance[outOffset + 2] = transformedCovariance.elements[6];\r\n                outCovariance[outOffset + 3] = transformedCovariance.elements[4];\r\n                outCovariance[outOffset + 4] = transformedCovariance.elements[7];\r\n                outCovariance[outOffset + 5] = transformedCovariance.elements[8];\r\n            }\r\n\r\n        };\r\n\r\n    }();\r\n\r\n    fillSplatCovarianceArray(covarianceArray, transform, srcFrom, srcTo, destFrom, desiredOutputCompressionLevel) {\r\n        const splatCount = this.splatCount;\r\n\r\n        const scale = new THREE.Vector3();\r\n        const rotation = new THREE.Quaternion();\r\n\r\n        srcFrom = srcFrom || 0;\r\n        srcTo = srcTo || splatCount - 1;\r\n        if (destFrom === undefined) destFrom = srcFrom;\r\n        const floatsPerSplat = this.compressionLevel === 1 ? this.uint16PerSplat : this.float32PerSplat;\r\n\r\n        for (let i = srcFrom; i <= srcTo; i++) {\r\n            const sectionIndex = this.globalSplatIndexToSectionMap[i];\r\n            const section = this.sections[sectionIndex];\r\n            const localSplatIndex = i - section.splatCountOffset;\r\n\r\n            const sectionFloatArray = this.compressionLevel === 1 ? section.dataArrayUint16 : section.dataArrayFloat32;\r\n            const splatFloatBase = floatsPerSplat * localSplatIndex;\r\n            const covarianceDestBase = (i - srcFrom + destFrom) * SplatBuffer.CovarianceComponentCount;\r\n\r\n            const scaleBase = splatFloatBase + SplatBuffer.SplatScaleOffsetFloat;\r\n            scale.set(this.fbf(sectionFloatArray[scaleBase]),\r\n                      this.fbf(sectionFloatArray[scaleBase + 1]),\r\n                      this.fbf(sectionFloatArray[scaleBase + 2]));\r\n\r\n            const rotationBase = splatFloatBase + SplatBuffer.SplatRotationOffsetFloat;\r\n            rotation.set(this.fbf(sectionFloatArray[rotationBase + 1]),\r\n                         this.fbf(sectionFloatArray[rotationBase + 2]),\r\n                         this.fbf(sectionFloatArray[rotationBase + 3]),\r\n                         this.fbf(sectionFloatArray[rotationBase]));\r\n\r\n            SplatBuffer.computeCovariance(scale, rotation, transform, covarianceArray, covarianceDestBase, desiredOutputCompressionLevel);\r\n        }\r\n    }\r\n\r\n    fillSplatColorArray(outColorArray, minimumAlpha, transform, srcFrom, srcTo, destFrom) {\r\n        const splatCount = this.splatCount;\r\n\r\n        srcFrom = srcFrom || 0;\r\n        srcTo = srcTo || splatCount - 1;\r\n        if (destFrom === undefined) destFrom = srcFrom;\r\n        const splatColorOffset = this.bytesPerCenter + this.bytesPerScale + this.bytesPerRotation;\r\n\r\n        for (let i = srcFrom; i <= srcTo; i++) {\r\n\r\n            const sectionIndex = this.globalSplatIndexToSectionMap[i];\r\n            const section = this.sections[sectionIndex];\r\n            const localSplatIndex = i - section.splatCountOffset;\r\n\r\n            const colorSrcBase = this.bytesPerSplat * localSplatIndex + splatColorOffset;\r\n            const colorDestBase = (i - srcFrom + destFrom) * SplatBuffer.ColorComponentCount;\r\n\r\n            let alpha = section.dataArrayUint8[colorSrcBase + 3];\r\n            alpha = (alpha >= minimumAlpha) ? alpha : 0;\r\n\r\n            outColorArray[colorDestBase] = section.dataArrayUint8[colorSrcBase];\r\n            outColorArray[colorDestBase + 1] = section.dataArrayUint8[colorSrcBase + 1];\r\n            outColorArray[colorDestBase + 2] = section.dataArrayUint8[colorSrcBase + 2];\r\n            outColorArray[colorDestBase + 3] = alpha;\r\n\r\n            // TODO: implement application of transform for spherical harmonics\r\n        }\r\n    }\r\n\r\n    static parseHeader(buffer) {\r\n        const headerArrayUint8 = new Uint8Array(buffer, 0, SplatBuffer.HeaderSizeBytes);\r\n        const headerArrayUint16 = new Uint16Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 2);\r\n        const headerArrayUint32 = new Uint32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\r\n        const headerArrayFloat32 = new Float32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\r\n        const versionMajor = headerArrayUint8[0];\r\n        const versionMinor = headerArrayUint8[1];\r\n        const maxSectionCount = headerArrayUint32[1];\r\n        const sectionCount = headerArrayUint32[2];\r\n        const maxSplatCount = headerArrayUint32[3];\r\n        const splatCount = headerArrayUint32[4];\r\n        const compressionLevel = headerArrayUint16[10];\r\n        const sceneCenter = new THREE.Vector3(headerArrayFloat32[6], headerArrayFloat32[7], headerArrayFloat32[8]);\r\n\r\n        return {\r\n            versionMajor,\r\n            versionMinor,\r\n            maxSectionCount,\r\n            sectionCount,\r\n            maxSplatCount,\r\n            splatCount,\r\n            compressionLevel,\r\n            sceneCenter\r\n        };\r\n    }\r\n\r\n    static writeHeaderCountsToBuffer(sectionCount, splatCount, buffer) {\r\n        const headerArrayUint32 = new Uint32Array(buffer);\r\n        headerArrayUint32[2] = sectionCount;\r\n        headerArrayUint32[4] = splatCount;\r\n    }\r\n\r\n    static writeHeaderToBuffer(header, buffer) {\r\n        const headerArrayUint8 = new Uint8Array(buffer);\r\n        const headerArrayUint32 = new Uint32Array(buffer);\r\n        const headerArrayFloat32 = new Float32Array(buffer);\r\n        const headerArrayUint16 = new Uint16Array(buffer);\r\n        headerArrayUint8[0] = header.versionMajor;\r\n        headerArrayUint8[1] = header.versionMinor;\r\n        headerArrayUint8[2] = 0; // unused for now\r\n        headerArrayUint8[3] = 0; // unused for now\r\n        headerArrayUint32[1] = header.maxSectionCount;\r\n        headerArrayUint32[2] = header.sectionCount;\r\n        headerArrayUint32[3] = header.maxSplatCount;\r\n        headerArrayUint32[4] = header.splatCount;\r\n        headerArrayUint16[10] = header.compressionLevel;\r\n        headerArrayFloat32[6] = header.sceneCenter.x;\r\n        headerArrayFloat32[7] = header.sceneCenter.y;\r\n        headerArrayFloat32[8] = header.sceneCenter.z;\r\n    }\r\n\r\n    static parseSectionHeaders(header, buffer, offset = 0, secLoadedCountsToMax) {\r\n        const compressionLevel = header.compressionLevel;\r\n        const bytesPerCenter = SplatBuffer.CompressionLevels[compressionLevel].BytesPerCenter;\r\n        const bytesPerColor = SplatBuffer.CompressionLevels[compressionLevel].BytesPerColor;\r\n        const bytesPerScale = SplatBuffer.CompressionLevels[compressionLevel].BytesPerScale;\r\n        const bytesPerRotation = SplatBuffer.CompressionLevels[compressionLevel].BytesPerRotation;\r\n\r\n        const maxSectionCount = header.maxSectionCount;\r\n        const sectionHeaderArrayUint16 = new Uint16Array(buffer, offset, maxSectionCount * SplatBuffer.SectionHeaderSizeBytes / 2);\r\n        const sectionHeaderArrayUint32 = new Uint32Array(buffer, offset, maxSectionCount * SplatBuffer.SectionHeaderSizeBytes / 4);\r\n        const sectionHeaderArrayFloat32 = new Float32Array(buffer, offset, maxSectionCount * SplatBuffer.SectionHeaderSizeBytes / 4);\r\n\r\n        const sectionHeaders = [];\r\n        let sectionHeaderBase = 0;\r\n        let sectionHeaderBaseUint16 = sectionHeaderBase / 2;\r\n        let sectionHeaderBaseUint32 = sectionHeaderBase / 4;\r\n        let sectionBase = SplatBuffer.HeaderSizeBytes + header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes;\r\n        let splatCountOffset = 0;\r\n        for (let i = 0; i < maxSectionCount; i++) {\r\n            const maxSplatCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 1];\r\n            const bucketSize = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 2];\r\n            const bucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 3];\r\n            const bucketBlockSize = sectionHeaderArrayFloat32[sectionHeaderBaseUint32 + 4];\r\n            const halfBucketBlockSize = bucketBlockSize / 2.0;\r\n            const bucketStorageSizeBytes = sectionHeaderArrayUint16[sectionHeaderBaseUint16 + 10];\r\n            const compressionScaleRange = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 6] ||\r\n                                          SplatBuffer.CompressionLevels[compressionLevel].ScaleRange;\r\n            const fullBucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 8];\r\n            const partiallyFilledBucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 9];\r\n            const bucketsMetaDataSizeBytes = partiallyFilledBucketCount * 4;\r\n            const bucketsStorageSizeBytes = bucketStorageSizeBytes * bucketCount + bucketsMetaDataSizeBytes;\r\n\r\n            const splatDataStorageSizeBytes = (bytesPerCenter + bytesPerScale + bytesPerRotation + bytesPerColor) * maxSplatCount;\r\n            const storageSizeBytes = splatDataStorageSizeBytes + bucketsStorageSizeBytes;\r\n            const sectionHeader = {\r\n                splatCountOffset: splatCountOffset,\r\n                splatCount: secLoadedCountsToMax ? maxSplatCount : 0,\r\n                maxSplatCount: maxSplatCount,\r\n                bucketSize: bucketSize,\r\n                bucketCount: bucketCount,\r\n                bucketBlockSize: bucketBlockSize,\r\n                halfBucketBlockSize: halfBucketBlockSize,\r\n                bucketStorageSizeBytes: bucketStorageSizeBytes,\r\n                bucketsStorageSizeBytes: bucketsStorageSizeBytes,\r\n                splatDataStorageSizeBytes: splatDataStorageSizeBytes,\r\n                storageSizeBytes: storageSizeBytes,\r\n                compressionScaleRange: compressionScaleRange,\r\n                compressionScaleFactor: halfBucketBlockSize / compressionScaleRange,\r\n                base: sectionBase,\r\n                bucketsBase: sectionBase + bucketsMetaDataSizeBytes,\r\n                dataBase: sectionBase + bucketsStorageSizeBytes,\r\n                fullBucketCount: fullBucketCount,\r\n                partiallyFilledBucketCount: partiallyFilledBucketCount\r\n            };\r\n            sectionHeaders[i] = sectionHeader;\r\n            sectionBase += storageSizeBytes;\r\n            sectionHeaderBase += SplatBuffer.SectionHeaderSizeBytes;\r\n            sectionHeaderBaseUint16 = sectionHeaderBase / 2;\r\n            sectionHeaderBaseUint32 = sectionHeaderBase / 4;\r\n            splatCountOffset += maxSplatCount;\r\n        }\r\n\r\n        return sectionHeaders;\r\n    }\r\n\r\n\r\n    static writeSectionHeaderToBuffer(sectionHeader, compressionLevel, buffer, offset = 0) {\r\n        const sectionHeadeArrayUint16 = new Uint16Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 2);\r\n        const sectionHeadeArrayUint32 = new Uint32Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 4);\r\n        const sectionHeadeArrayFloat32 = new Float32Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 4);\r\n\r\n        sectionHeadeArrayUint32[0] = sectionHeader.splatCount;\r\n        sectionHeadeArrayUint32[1] = sectionHeader.maxSplatCount;\r\n        sectionHeadeArrayUint32[2] = compressionLevel === 1 ? sectionHeader.bucketSize : 0;\r\n        sectionHeadeArrayUint32[3] = compressionLevel === 1 ? sectionHeader.bucketCount : 0;\r\n        sectionHeadeArrayFloat32[4] = compressionLevel === 1 ? sectionHeader.bucketBlockSize : 0.0;\r\n        sectionHeadeArrayUint16[10] = compressionLevel === 1 ? SplatBuffer.BucketStorageSizeBytes : 0;\r\n        sectionHeadeArrayUint32[6] = compressionLevel === 1 ? sectionHeader.compressionScaleRange : 0;\r\n        sectionHeadeArrayUint32[7] = sectionHeader.storageSizeBytes;\r\n        sectionHeadeArrayUint32[8] = compressionLevel === 1 ? sectionHeader.fullBucketCount : 0;\r\n        sectionHeadeArrayUint32[9] = compressionLevel === 1 ? sectionHeader.partiallyFilledBucketCount : 0;\r\n    }\r\n\r\n    static writeSectionHeaderSplatCountToBuffer(splatCount, buffer, offset = 0) {\r\n        const sectionHeadeArrayUint32 = new Uint32Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 4);\r\n        sectionHeadeArrayUint32[0] = splatCount;\r\n    }\r\n\r\n    constructFromBuffer(bufferData, secLoadedCountsToMax) {\r\n        this.bufferData = bufferData;\r\n\r\n        this.globalSplatIndexToLocalSplatIndexMap = [];\r\n        this.globalSplatIndexToSectionMap = [];\r\n\r\n        const header = SplatBuffer.parseHeader(this.bufferData);\r\n        this.versionMajor = header.versionMajor;\r\n        this.versionMinor = header.versionMinor;\r\n        this.maxSectionCount = header.maxSectionCount;\r\n        this.sectionCount = secLoadedCountsToMax ? header.maxSectionCount : 0;\r\n        this.maxSplatCount = header.maxSplatCount;\r\n        this.splatCount = secLoadedCountsToMax ? header.maxSplatCount : 0;\r\n        this.compressionLevel = header.compressionLevel;\r\n        this.sceneCenter = new THREE.Vector3().copy(header.sceneCenter);\r\n\r\n        this.bytesPerCenter = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerCenter;\r\n        this.bytesPerScale = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerScale;\r\n        this.bytesPerRotation = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerRotation;\r\n        this.bytesPerColor = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerColor;\r\n        this.bytesPerSplat = this.bytesPerCenter + this.bytesPerScale + this.bytesPerRotation + this.bytesPerColor;\r\n\r\n        this.float32PerSplat = this.bytesPerSplat / 4;\r\n        this.uint32PerSplat = this.bytesPerSplat / 4;\r\n        this.uint16PerSplat = this.bytesPerSplat / 2;\r\n\r\n        this.sections = SplatBuffer.parseSectionHeaders(header, this.bufferData, SplatBuffer.HeaderSizeBytes, secLoadedCountsToMax);\r\n\r\n        this.linkBufferArrays();\r\n        this.buildMaps();\r\n    }\r\n\r\n\r\n    linkBufferArrays() {\r\n        for (let i = 0; i < this.maxSectionCount; i++) {\r\n            const section = this.sections[i];\r\n            section.dataArrayUint8 = new Uint8Array(this.bufferData, section.dataBase, section.maxSplatCount * this.bytesPerSplat);\r\n            section.dataArrayUint16 = new Uint16Array(this.bufferData, section.dataBase, section.maxSplatCount * this.uint16PerSplat);\r\n            section.dataArrayUint32 = new Uint32Array(this.bufferData, section.dataBase, section.maxSplatCount * this.uint32PerSplat);\r\n            section.dataArrayFloat32 = new Float32Array(this.bufferData, section.dataBase, section.maxSplatCount * this.float32PerSplat);\r\n            section.bucketArray = new Float32Array(this.bufferData, section.bucketsBase,\r\n                                                   section.bucketCount * SplatBuffer.BucketStorageSizeFloats);\r\n            if (section.partiallyFilledBucketCount > 0) {\r\n                section.partiallyFilledBucketLengths = new Uint32Array(this.bufferData, section.base,\r\n                                                                       section.partiallyFilledBucketCount);\r\n            }\r\n        }\r\n    }\r\n\r\n    buildMaps() {\r\n        let cumulativeSplatCount = 0;\r\n        for (let i = 0; i < this.maxSectionCount; i++) {\r\n            const section = this.sections[i];\r\n            for (let j = 0; j < section.maxSplatCount; j++) {\r\n                const globalSplatIndex = cumulativeSplatCount + j;\r\n                this.globalSplatIndexToLocalSplatIndexMap[globalSplatIndex] = j;\r\n                this.globalSplatIndexToSectionMap[globalSplatIndex] = i;\r\n            }\r\n            cumulativeSplatCount += section.maxSplatCount;\r\n        }\r\n    }\r\n\r\n    updateLoadedCounts(newSectionCount, newSplatCount) {\r\n        SplatBuffer.writeHeaderCountsToBuffer(newSectionCount, newSplatCount, this.bufferData);\r\n        this.sectionCount = newSectionCount;\r\n        this.splatCount = newSplatCount;\r\n    }\r\n\r\n    updateSectionLoadedCounts(sectionIndex, newSplatCount) {\r\n        const sectionHeaderOffset = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * sectionIndex;\r\n        SplatBuffer.writeSectionHeaderSplatCountToBuffer(newSplatCount, this.bufferData, sectionHeaderOffset);\r\n        this.sections[sectionIndex].splatCount = newSplatCount;\r\n    }\r\n\r\n    static generateFromUncompressedSplatArrays(splatArrays, minimumAlpha, compressionLevel,\r\n                                               sceneCenter, blockSize, bucketSize, options = []) {\r\n\r\n        const bytesPerCenter = SplatBuffer.CompressionLevels[compressionLevel].BytesPerCenter;\r\n        const bytesPerScale = SplatBuffer.CompressionLevels[compressionLevel].BytesPerScale;\r\n        const bytesPerRotation = SplatBuffer.CompressionLevels[compressionLevel].BytesPerRotation;\r\n        const bytesPerColor = SplatBuffer.CompressionLevels[compressionLevel].BytesPerColor;\r\n        const bytesPerSplat = bytesPerCenter + bytesPerScale + bytesPerRotation + bytesPerColor;\r\n        const compressionScaleRange = SplatBuffer.CompressionLevels[compressionLevel].ScaleRange;\r\n\r\n        const sectionBuffers = [];\r\n        const sectionHeaderBuffers = [];\r\n        let totalSplatCount = 0;\r\n\r\n        const tempRotation = new THREE.Quaternion();\r\n        const thf = THREE.DataUtils.toHalfFloat.bind(THREE.DataUtils);\r\n\r\n        for (let sa = 0; sa < splatArrays.length; sa ++) {\r\n            const splatArray = splatArrays[sa];\r\n\r\n            const sectionOptions = options[sa] || {};\r\n\r\n            const sectionBlockSize = (sectionOptions.blockSizeFactor || 1) * (blockSize || SplatBuffer.BucketBlockSize);\r\n            const sectionBucketSize = Math.ceil((sectionOptions.bucketSizeFactor || 1) * (bucketSize || SplatBuffer.BucketSize));\r\n\r\n            const validSplats = new UncompressedSplatArray();\r\n\r\n            for (let i = 0; i < splatArray.splatCount; i++) {\r\n                const targetSplat = splatArray.splats[i];\r\n                let alpha;\r\n                if (targetSplat[UncompressedSplatArray.OFFSET.OPACITY]) {\r\n                    alpha = targetSplat[UncompressedSplatArray.OFFSET.OPACITY];\r\n                } else {\r\n                    alpha = 255;\r\n                }\r\n                if (alpha >= minimumAlpha) {\r\n                    validSplats.addSplatFromComonents(targetSplat[UncompressedSplatArray.OFFSET.X],\r\n                                                      targetSplat[UncompressedSplatArray.OFFSET.Y],\r\n                                                      targetSplat[UncompressedSplatArray.OFFSET.Z],\r\n                                                      targetSplat[UncompressedSplatArray.OFFSET.SCALE0],\r\n                                                      targetSplat[UncompressedSplatArray.OFFSET.SCALE1],\r\n                                                      targetSplat[UncompressedSplatArray.OFFSET.SCALE2],\r\n                                                      targetSplat[UncompressedSplatArray.OFFSET.ROTATION0],\r\n                                                      targetSplat[UncompressedSplatArray.OFFSET.ROTATION1],\r\n                                                      targetSplat[UncompressedSplatArray.OFFSET.ROTATION2],\r\n                                                      targetSplat[UncompressedSplatArray.OFFSET.ROTATION3],\r\n                                                      targetSplat[UncompressedSplatArray.OFFSET.FDC0],\r\n                                                      targetSplat[UncompressedSplatArray.OFFSET.FDC1],\r\n                                                      targetSplat[UncompressedSplatArray.OFFSET.FDC2],\r\n                                                      targetSplat[UncompressedSplatArray.OFFSET.OPACITY]);\r\n                }\r\n            }\r\n\r\n            const bucketInfo = SplatBuffer.computeBucketsForUncompressedSplatArray(validSplats, sectionBlockSize, sectionBucketSize);\r\n            const fullBucketCount = bucketInfo.fullBuckets.length;\r\n            const partiallyFullBucketLengths = bucketInfo.partiallyFullBuckets.map((bucket) => bucket.splats.length);\r\n            const partiallyFilledBucketCount = partiallyFullBucketLengths.length;\r\n            const buckets = [...bucketInfo.fullBuckets, ...bucketInfo.partiallyFullBuckets];\r\n\r\n            const sectionDataSizeBytes = validSplats.splats.length * bytesPerSplat;\r\n            const bucketMetaDataSizeBytes = partiallyFilledBucketCount * 4;\r\n            const bucketDataBytes = compressionLevel === 1 ? buckets.length *\r\n                                                             SplatBuffer.BucketStorageSizeBytes + bucketMetaDataSizeBytes : 0;\r\n            const sectionSizeBytes = sectionDataSizeBytes + bucketDataBytes;\r\n            const sectionBuffer = new ArrayBuffer(sectionSizeBytes);\r\n\r\n            const blockHalfSize = sectionBlockSize / 2.0;\r\n            const compressionScaleFactor = compressionScaleRange / blockHalfSize;\r\n            const doubleCompressionScaleRange = compressionScaleRange * 2 + 1;\r\n\r\n            const bucketCenter = new THREE.Vector3();\r\n            const bucketCenterDelta = new THREE.Vector3();\r\n            let outSplatCount = 0;\r\n            for (let b = 0; b < buckets.length; b++) {\r\n                const bucket = buckets[b];\r\n                bucketCenter.fromArray(bucket.center);\r\n                for (let i = 0; i < bucket.splats.length; i++) {\r\n                    let row = bucket.splats[i];\r\n                    const targetSplat = validSplats.splats[row];\r\n\r\n                    const centerBase = bucketDataBytes + outSplatCount * bytesPerSplat;\r\n                    const scaleBase = centerBase + bytesPerCenter;\r\n                    const rotationBase = scaleBase + bytesPerScale;\r\n                    const colorBase = rotationBase + bytesPerRotation;\r\n                    if (compressionLevel === 0) {\r\n                        const center = new Float32Array(sectionBuffer, centerBase, SplatBuffer.CenterComponentCount);\r\n                        const rot = new Float32Array(sectionBuffer, rotationBase, SplatBuffer.RotationComponentCount);\r\n                        const scale = new Float32Array(sectionBuffer, scaleBase, SplatBuffer.ScaleComponentCount);\r\n                        if (targetSplat[UncompressedSplatArray.OFFSET.SCALE0] !== undefined) {\r\n                            tempRotation.set(targetSplat[UncompressedSplatArray.OFFSET.ROTATION0],\r\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION1],\r\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION2],\r\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION3]);\r\n                            tempRotation.normalize();\r\n                            rot.set([tempRotation.x, tempRotation.y, tempRotation.z, tempRotation.w]);\r\n                            scale.set([targetSplat[UncompressedSplatArray.OFFSET.SCALE0],\r\n                                       targetSplat[UncompressedSplatArray.OFFSET.SCALE1],\r\n                                       targetSplat[UncompressedSplatArray.OFFSET.SCALE2]]);\r\n                        } else {\r\n                            rot.set([1.0, 0.0, 0.0, 0.0]);\r\n                            scale.set([0.01, 0.01, 0.01]);\r\n                        }\r\n                        center.set([targetSplat[UncompressedSplatArray.OFFSET.X],\r\n                                    targetSplat[UncompressedSplatArray.OFFSET.Y],\r\n                                    targetSplat[UncompressedSplatArray.OFFSET.Z]]);\r\n                    } else {\r\n                        const center = new Uint16Array(sectionBuffer, centerBase, SplatBuffer.CenterComponentCount);\r\n                        const rot = new Uint16Array(sectionBuffer, rotationBase, SplatBuffer.RotationComponentCount);\r\n                        const scale = new Uint16Array(sectionBuffer, scaleBase, SplatBuffer.ScaleComponentCount);\r\n\r\n                        if (targetSplat[UncompressedSplatArray.OFFSET.SCALE0] !== undefined) {\r\n                            tempRotation.set(targetSplat[UncompressedSplatArray.OFFSET.ROTATION0],\r\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION1],\r\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION2],\r\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION3]);\r\n                            tempRotation.normalize();\r\n                            rot.set([thf(tempRotation.x), thf(tempRotation.y), thf(tempRotation.z), thf(tempRotation.w)]);\r\n                            scale.set([thf(targetSplat[UncompressedSplatArray.OFFSET.SCALE0]),\r\n                                       thf(targetSplat[UncompressedSplatArray.OFFSET.SCALE1]),\r\n                                       thf(targetSplat[UncompressedSplatArray.OFFSET.SCALE2])]);\r\n                        } else {\r\n                            rot.set([thf(1.), 0, 0, 0]);\r\n                            scale.set([thf(0.01), thf(0.01), thf(0.01)]);\r\n                        }\r\n                        bucketCenterDelta.set(targetSplat[UncompressedSplatArray.OFFSET.X],\r\n                                              targetSplat[UncompressedSplatArray.OFFSET.Y],\r\n                                              targetSplat[UncompressedSplatArray.OFFSET.Z]).sub(bucketCenter);\r\n                        bucketCenterDelta.x = Math.round(bucketCenterDelta.x * compressionScaleFactor) + compressionScaleRange;\r\n                        bucketCenterDelta.x = clamp(bucketCenterDelta.x, 0, doubleCompressionScaleRange);\r\n                        bucketCenterDelta.y = Math.round(bucketCenterDelta.y * compressionScaleFactor) + compressionScaleRange;\r\n                        bucketCenterDelta.y = clamp(bucketCenterDelta.y, 0, doubleCompressionScaleRange);\r\n                        bucketCenterDelta.z = Math.round(bucketCenterDelta.z * compressionScaleFactor) + compressionScaleRange;\r\n                        bucketCenterDelta.z = clamp(bucketCenterDelta.z, 0, doubleCompressionScaleRange);\r\n                        center.set([bucketCenterDelta.x, bucketCenterDelta.y, bucketCenterDelta.z]);\r\n                    }\r\n\r\n                    const rgba = new Uint8ClampedArray(sectionBuffer, colorBase, 4);\r\n\r\n                    if (targetSplat[UncompressedSplatArray.OFFSET.FDC0] !== undefined) {\r\n                        rgba.set([targetSplat[UncompressedSplatArray.OFFSET.FDC0],\r\n                                  targetSplat[UncompressedSplatArray.OFFSET.FDC1],\r\n                                  targetSplat[UncompressedSplatArray.OFFSET.FDC2]]);\r\n                    } else {\r\n                        rgba.set([255, 0, 0]);\r\n                    }\r\n                    if (targetSplat[UncompressedSplatArray.OFFSET.OPACITY] !== undefined) {\r\n                        rgba[3] = targetSplat[UncompressedSplatArray.OFFSET.OPACITY];\r\n                    } else {\r\n                        rgba[3] = 255;\r\n                    }\r\n\r\n                    outSplatCount++;\r\n                }\r\n            }\r\n            totalSplatCount += outSplatCount;\r\n\r\n            if (compressionLevel === 1) {\r\n                const bucketMetaDataArray = new Uint32Array(sectionBuffer);\r\n                for (let pfb = 0; pfb < partiallyFullBucketLengths.length; pfb ++) {\r\n                    bucketMetaDataArray[pfb] = partiallyFullBucketLengths[pfb];\r\n                }\r\n                const bucketArray = new Float32Array(sectionBuffer, bucketMetaDataSizeBytes,\r\n                                                     buckets.length * SplatBuffer.BucketStorageSizeFloats);\r\n                for (let b = 0; b < buckets.length; b++) {\r\n                    const bucket = buckets[b];\r\n                    const base = b * 3;\r\n                    bucketArray[base] = bucket.center[0];\r\n                    bucketArray[base + 1] = bucket.center[1];\r\n                    bucketArray[base + 2] = bucket.center[2];\r\n                }\r\n            }\r\n            sectionBuffers.push(sectionBuffer);\r\n\r\n            const sectionHeaderBuffer = new ArrayBuffer(SplatBuffer.SectionHeaderSizeBytes);\r\n            SplatBuffer.writeSectionHeaderToBuffer({\r\n                maxSplatCount: outSplatCount,\r\n                splatCount: outSplatCount,\r\n                bucketSize: sectionBucketSize,\r\n                bucketCount: buckets.length,\r\n                bucketBlockSize: sectionBlockSize,\r\n                compressionScaleRange: compressionScaleRange,\r\n                storageSizeBytes: sectionSizeBytes,\r\n                fullBucketCount: fullBucketCount,\r\n                partiallyFilledBucketCount: partiallyFilledBucketCount\r\n            }, compressionLevel, sectionHeaderBuffer, 0);\r\n            sectionHeaderBuffers.push(sectionHeaderBuffer);\r\n\r\n        }\r\n\r\n        let sectionsCumulativeSizeBytes = 0;\r\n        for (let sectionBuffer of sectionBuffers) sectionsCumulativeSizeBytes += sectionBuffer.byteLength;\r\n        const unifiedBufferSize = SplatBuffer.HeaderSizeBytes +\r\n                                  SplatBuffer.SectionHeaderSizeBytes * sectionBuffers.length + sectionsCumulativeSizeBytes;\r\n        const unifiedBuffer = new ArrayBuffer(unifiedBufferSize);\r\n\r\n        SplatBuffer.writeHeaderToBuffer({\r\n            versionMajor: 0,\r\n            versionMinor: 1,\r\n            maxSectionCount: sectionBuffers.length,\r\n            sectionCount: sectionBuffers.length,\r\n            maxSplatCount: totalSplatCount,\r\n            splatCount: totalSplatCount,\r\n            compressionLevel: compressionLevel,\r\n            sceneCenter: sceneCenter\r\n        }, unifiedBuffer);\r\n\r\n        let currentUnifiedBase = SplatBuffer.HeaderSizeBytes;\r\n        for (let sectionHeaderBuffer of sectionHeaderBuffers) {\r\n            new Uint8Array(unifiedBuffer, currentUnifiedBase, SplatBuffer.SectionHeaderSizeBytes).set(new Uint8Array(sectionHeaderBuffer));\r\n            currentUnifiedBase += SplatBuffer.SectionHeaderSizeBytes;\r\n        }\r\n\r\n        for (let sectionBuffer of sectionBuffers) {\r\n            new Uint8Array(unifiedBuffer, currentUnifiedBase, sectionBuffer.byteLength).set(new Uint8Array(sectionBuffer));\r\n            currentUnifiedBase += sectionBuffer.byteLength;\r\n        }\r\n\r\n        const splatBuffer = new SplatBuffer(unifiedBuffer);\r\n        return splatBuffer;\r\n    }\r\n\r\n    static computeBucketsForUncompressedSplatArray(splatArray, blockSize, bucketSize) {\r\n        let splatCount = splatArray.splatCount;\r\n        const halfBlockSize = blockSize / 2.0;\r\n\r\n        const min = new THREE.Vector3();\r\n        const max = new THREE.Vector3();\r\n\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const targetSplat = splatArray.splats[i];\r\n            const center = [targetSplat[UncompressedSplatArray.OFFSET.X],\r\n                            targetSplat[UncompressedSplatArray.OFFSET.Y],\r\n                            targetSplat[UncompressedSplatArray.OFFSET.Z]];\r\n            if (i === 0 || center[0] < min.x) min.x = center[0];\r\n            if (i === 0 || center[0] > max.x) max.x = center[0];\r\n            if (i === 0 || center[1] < min.y) min.y = center[1];\r\n            if (i === 0 || center[1] > max.y) max.y = center[1];\r\n            if (i === 0 || center[2] < min.z) min.z = center[2];\r\n            if (i === 0 || center[2] > max.z) max.z = center[2];\r\n        }\r\n\r\n        const dimensions = new THREE.Vector3().copy(max).sub(min);\r\n        const yBlocks = Math.ceil(dimensions.y / blockSize);\r\n        const zBlocks = Math.ceil(dimensions.z / blockSize);\r\n\r\n        const blockCenter = new THREE.Vector3();\r\n        const fullBuckets = [];\r\n        const partiallyFullBuckets = {};\r\n\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const targetSplat = splatArray.splats[i];\r\n            const center = [targetSplat[UncompressedSplatArray.OFFSET.X],\r\n                            targetSplat[UncompressedSplatArray.OFFSET.Y],\r\n                            targetSplat[UncompressedSplatArray.OFFSET.Z]];\r\n            const xBlock = Math.floor((center[0] - min.x) / blockSize);\r\n            const yBlock = Math.floor((center[1] - min.y) / blockSize);\r\n            const zBlock = Math.floor((center[2] - min.z) / blockSize);\r\n\r\n            blockCenter.x = xBlock * blockSize + min.x + halfBlockSize;\r\n            blockCenter.y = yBlock * blockSize + min.y + halfBlockSize;\r\n            blockCenter.z = zBlock * blockSize + min.z + halfBlockSize;\r\n\r\n            const bucketId = xBlock * (yBlocks * zBlocks) + yBlock * zBlocks + zBlock;\r\n            let bucket = partiallyFullBuckets[bucketId];\r\n            if (!bucket) {\r\n                partiallyFullBuckets[bucketId] = bucket = {\r\n                    'splats': [],\r\n                    'center': blockCenter.toArray()\r\n                };\r\n            }\r\n\r\n            bucket.splats.push(i);\r\n            if (bucket.splats.length >= bucketSize) {\r\n                fullBuckets.push(bucket);\r\n                partiallyFullBuckets[bucketId] = null;\r\n            }\r\n        }\r\n\r\n        const partiallyFullBucketArray = [];\r\n        for (let bucketId in partiallyFullBuckets) {\r\n            if (partiallyFullBuckets.hasOwnProperty(bucketId)) {\r\n                const bucket = partiallyFullBuckets[bucketId];\r\n                if (bucket) {\r\n                    partiallyFullBucketArray.push(bucket);\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            'fullBuckets': fullBuckets,\r\n            'partiallyFullBuckets': partiallyFullBucketArray,\r\n        };\r\n    }\r\n\r\n}\r\n","import { UncompressedSplatArray } from '../UncompressedSplatArray.js';\r\nimport { SplatBuffer } from '../SplatBuffer.js';\r\nimport { clamp } from '../../Util.js';\r\nimport * as THREE from 'three';\r\n\r\nconst HeaderMagicBytes = new Uint8Array([112, 108, 121, 10]);\r\nconst HeaderEndTokenBytes = new Uint8Array([10, 101, 110, 100, 95, 104, 101, 97, 100, 101, 114, 10]);\r\nconst HeaderEndToken = 'end_header';\r\n\r\nconst DataTypeMap = new Map([\r\n  ['char', Int8Array],\r\n  ['uchar', Uint8Array],\r\n  ['short', Int16Array],\r\n  ['ushort', Uint16Array],\r\n  ['int', Int32Array],\r\n  ['uint', Uint32Array],\r\n  ['float', Float32Array],\r\n  ['double', Float64Array],\r\n]);\r\n\r\nconst unpackUnorm = (value, bits) => {\r\n  const t = (1 << bits) - 1;\r\n  return (value & t) / t;\r\n};\r\n\r\nconst unpack111011 = (result, value) => {\r\n  result.x = unpackUnorm(value >>> 21, 11);\r\n  result.y = unpackUnorm(value >>> 11, 10);\r\n  result.z = unpackUnorm(value, 11);\r\n};\r\n\r\nconst unpack8888 = (result, value) => {\r\n  result.x = unpackUnorm(value >>> 24, 8);\r\n  result.y = unpackUnorm(value >>> 16, 8);\r\n  result.z = unpackUnorm(value >>> 8, 8);\r\n  result.w = unpackUnorm(value, 8);\r\n};\r\n\r\n// unpack quaternion with 2,10,10,10 format (largest element, 3x10bit element)\r\nconst unpackRot = (result, value) => {\r\n  const norm = 1.0 / (Math.sqrt(2) * 0.5);\r\n  const a = (unpackUnorm(value >>> 20, 10) - 0.5) * norm;\r\n  const b = (unpackUnorm(value >>> 10, 10) - 0.5) * norm;\r\n  const c = (unpackUnorm(value, 10) - 0.5) * norm;\r\n  const m = Math.sqrt(1.0 - (a * a + b * b + c * c));\r\n\r\n  switch (value >>> 30) {\r\n    case 0:\r\n      result.set(m, a, b, c);\r\n      break;\r\n    case 1:\r\n      result.set(a, m, b, c);\r\n      break;\r\n    case 2:\r\n      result.set(a, b, m, c);\r\n      break;\r\n    case 3:\r\n      result.set(a, b, c, m);\r\n      break;\r\n  }\r\n};\r\n\r\nconst lerp = (a, b, t) => {\r\n  return a * (1 - t) + b * t;\r\n};\r\n\r\nconst getElementPropStorage = (element, name) => {\r\n  return element.properties.find((p) => p.name === name && p.storage)\r\n    ?.storage;\r\n};\r\n\r\nexport class CompressedPlyParser {\r\n\r\n  static decodeHeaderText(headerText) {\r\n\r\n    let element;\r\n    let chunkElement;\r\n    let vertexElement;\r\n\r\n    const headerLines = headerText.split('\\n').filter((line) => !line.startsWith('comment '));\r\n\r\n    let bytesPerSplat = 0;\r\n    let done = false;\r\n    for (let i = 1; i < headerLines.length; ++i) {\r\n      const words = headerLines[i].split(' ');\r\n\r\n      switch (words[0]) {\r\n        case 'format':\r\n          if (words[1] !== 'binary_little_endian') {\r\n            throw new Error('Unsupported ply format');\r\n          }\r\n          break;\r\n        case 'element':\r\n          element = {\r\n            name: words[1],\r\n            count: parseInt(words[2], 10),\r\n            properties: [],\r\n            storageSizeBytes: 0\r\n          };\r\n          if (element.name === 'chunk') chunkElement = element;\r\n          else if (element.name === 'vertex') vertexElement = element;\r\n          break;\r\n        case 'property': {\r\n          if (!DataTypeMap.has(words[1])) {\r\n            throw new Error(\r\n              `Unrecognized property data type '${words[1]}' in ply header`\r\n            );\r\n          }\r\n          const StorageType = DataTypeMap.get(words[1]);\r\n          const storageSizeByes = StorageType.BYTES_PER_ELEMENT * element.count;\r\n          if (element.name === 'vertex') bytesPerSplat += StorageType.BYTES_PER_ELEMENT;\r\n          element.properties.push({\r\n            type: words[1],\r\n            name: words[2],\r\n            storage: null,\r\n            byteSize: StorageType.BYTES_PER_ELEMENT,\r\n            storageSizeByes: storageSizeByes\r\n          });\r\n          element.storageSizeBytes += storageSizeByes;\r\n          break;\r\n        }\r\n        case HeaderEndToken:\r\n          done = true;\r\n        break;\r\n        default:\r\n          throw new Error(\r\n            `Unrecognized header value '${words[0]}' in ply header`\r\n          );\r\n      }\r\n      if (done) break;\r\n    }\r\n\r\n    return {\r\n      'chunkElement': chunkElement,\r\n      'vertexElement': vertexElement,\r\n      'bytesPerSplat': bytesPerSplat,\r\n      'headerSizeBytes': headerText.indexOf(HeaderEndToken) + HeaderEndToken.length + 1,\r\n    };\r\n  }\r\n\r\n  static decodeHeader(plyBuffer) {\r\n\r\n    /**\r\n     * Searches for the first occurrence of a sequence within a buffer.\r\n     * @example\r\n     * find(new Uint8Array([1, 2, 3, 4]), new Uint8Array([3, 4])); // 2\r\n     * @param {Uint8Array} buf - The buffer in which to search.\r\n     * @param {Uint8Array} search - The sequence to search for.\r\n     * @return {number} The index of the first occurrence of the search sequence in the buffer, or -1 if not found.\r\n     */\r\n    const find = (buf, search) => {\r\n      const endIndex = buf.length - search.length;\r\n      let i;\r\n      let j;\r\n      for (i = 0; i <= endIndex; ++i) {\r\n        for (j = 0; j < search.length; ++j) {\r\n          if (buf[i + j] !== search[j]) {\r\n            break;\r\n          }\r\n        }\r\n        if (j === search.length) {\r\n          return i;\r\n        }\r\n      }\r\n      return -1;\r\n    };\r\n\r\n    /**\r\n     * Checks if array 'a' starts with the same elements as array 'b'.\r\n     * @example\r\n     * startsWith(new Uint8Array([1, 2, 3, 4]), new Uint8Array([1, 2])); // true\r\n     * @param {Uint8Array} a - The array to check against.\r\n     * @param {Uint8Array} b - The array of elements to look for at the start of 'a'.\r\n     * @return {boolean} - True if 'a' starts with all elements of 'b', otherwise false.\r\n     */\r\n    const startsWith = (a, b) => {\r\n      if (a.length < b.length) {\r\n        return false;\r\n      }\r\n\r\n      for (let i = 0; i < b.length; ++i) {\r\n        if (a[i] !== b[i]) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    };\r\n\r\n    let buf = new Uint8Array(plyBuffer);\r\n    let endHeaderTokenOffset;\r\n\r\n    if (buf.length >= HeaderMagicBytes.length && !startsWith(buf, HeaderMagicBytes)) {\r\n      throw new Error('Invalid PLY header');\r\n    }\r\n\r\n    endHeaderTokenOffset = find(buf, HeaderEndTokenBytes);\r\n    if (endHeaderTokenOffset === -1) {\r\n      throw new Error('End of PLY header not found');\r\n    }\r\n\r\n    const headerText = new TextDecoder('ascii').decode(\r\n      buf.slice(0, endHeaderTokenOffset)\r\n    );\r\n\r\n    const {chunkElement, vertexElement, bytesPerSplat} = CompressedPlyParser.decodeHeaderText(headerText);\r\n\r\n    return {\r\n      'headerSizeBytes': endHeaderTokenOffset + HeaderEndTokenBytes.length,\r\n      'bytesPerSplat': bytesPerSplat,\r\n      'chunkElement': chunkElement,\r\n      'vertexElement': vertexElement\r\n    };\r\n  }\r\n\r\n  static readElementData(element, readBuffer, readOffset, fromIndex, toIndex, propertyFilter = null) {\r\n\r\n    let dataView = readBuffer instanceof DataView ? readBuffer : new DataView(readBuffer);\r\n\r\n    fromIndex = fromIndex || 0;\r\n    toIndex = toIndex || element.count - 1;\r\n    for (let e = fromIndex; e <= toIndex; ++e) {\r\n      for (let j = 0; j < element.properties.length; ++j) {\r\n        const property = element.properties[j];\r\n\r\n        const StorageType = DataTypeMap.get(property.type);\r\n        const requiredStorageSizeBytes = StorageType.BYTES_PER_ELEMENT * element.count;\r\n        if ((!property.storage || property.storage.byteLength < requiredStorageSizeBytes) &&\r\n            (!propertyFilter || propertyFilter(property.name))) {\r\n          property.storage = new StorageType(element.count);\r\n        }\r\n\r\n        if (property.storage) {\r\n          switch (property.type) {\r\n            case 'char':\r\n              property.storage[e] = dataView.getInt8(readOffset);\r\n              break;\r\n            case 'uchar':\r\n              property.storage[e] = dataView.getUint8(readOffset);\r\n              break;\r\n            case 'short':\r\n              property.storage[e] = dataView.getInt16(readOffset, true);\r\n              break;\r\n            case 'ushort':\r\n              property.storage[e] = dataView.getUint16(readOffset, true);\r\n              break;\r\n            case 'int':\r\n              property.storage[e] = dataView.getInt32(readOffset, true);\r\n              break;\r\n            case 'uint':\r\n              property.storage[e] = dataView.getUint32(readOffset, true);\r\n              break;\r\n            case 'float':\r\n              property.storage[e] = dataView.getFloat32(readOffset, true);\r\n              break;\r\n            case 'double':\r\n              property.storage[e] = dataView.getFloat64(readOffset, true);\r\n              break;\r\n          }\r\n        }\r\n\r\n        readOffset += property.byteSize;\r\n      }\r\n    }\r\n\r\n    return readOffset;\r\n  }\r\n\r\n  static readPly(plyBuffer, propertyFilter = null) {\r\n\r\n    const header = CompressedPlyParser.decodeHeader(plyBuffer);\r\n\r\n    let readIndex = CompressedPlyParser.readElementData(header.chunkElement, plyBuffer, header.headerSizeBytes, null, null, propertyFilter);\r\n    CompressedPlyParser.readElementData(header.vertexElement, plyBuffer, readIndex, null, null, propertyFilter);\r\n\r\n    return {\r\n      'chunkElement': header.chunkElement,\r\n      'vertexElement': header.vertexElement\r\n    };\r\n  }\r\n\r\n  static getElementStorageArrays(chunkElement, vertexElement) {\r\n    const minX = getElementPropStorage(chunkElement, 'min_x');\r\n    const minY = getElementPropStorage(chunkElement, 'min_y');\r\n    const minZ = getElementPropStorage(chunkElement, 'min_z');\r\n    const maxX = getElementPropStorage(chunkElement, 'max_x');\r\n    const maxY = getElementPropStorage(chunkElement, 'max_y');\r\n    const maxZ = getElementPropStorage(chunkElement, 'max_z');\r\n    const minScaleX = getElementPropStorage(chunkElement, 'min_scale_x');\r\n    const minScaleY = getElementPropStorage(chunkElement, 'min_scale_y');\r\n    const minScaleZ = getElementPropStorage(chunkElement, 'min_scale_z');\r\n    const maxScaleX = getElementPropStorage(chunkElement, 'max_scale_x');\r\n    const maxScaleY = getElementPropStorage(chunkElement, 'max_scale_y');\r\n    const maxScaleZ = getElementPropStorage(chunkElement, 'max_scale_z');\r\n    const position = getElementPropStorage(vertexElement, 'packed_position');\r\n    const rotation = getElementPropStorage(vertexElement, 'packed_rotation');\r\n    const scale = getElementPropStorage(vertexElement, 'packed_scale');\r\n    const color = getElementPropStorage(vertexElement, 'packed_color');\r\n    return {\r\n      positionExtremes: {\r\n        minX, maxX,\r\n        minY, maxY,\r\n        minZ, maxZ\r\n      },\r\n      scaleExtremes: {\r\n        minScaleX, maxScaleX, minScaleY,\r\n        maxScaleY, minScaleZ, maxScaleZ\r\n      },\r\n      position,\r\n      rotation,\r\n      scale,\r\n      color\r\n    };\r\n  }\r\n\r\n  static decompressSplat = function() {\r\n\r\n    const p = new THREE.Vector3();\r\n    const r = new THREE.Quaternion();\r\n    const s = new THREE.Vector3();\r\n    const c = new THREE.Vector4();\r\n\r\n    const OFFSET = UncompressedSplatArray.OFFSET;\r\n\r\n    return function(index, chunkSplatIndexOffset, positionArray, positionExtremes, scaleArray, scaleExtremes,\r\n                    rotationArray, colorArray, outSplat) {\r\n      outSplat = outSplat || UncompressedSplatArray.createSplat();\r\n\r\n      const chunkIndex = Math.floor((chunkSplatIndexOffset + index) / 256);\r\n\r\n      unpack111011(p, positionArray[index]);\r\n      unpackRot(r, rotationArray[index]);\r\n      unpack111011(s, scaleArray[index]);\r\n      unpack8888(c, colorArray[index]);\r\n\r\n      outSplat[OFFSET.X] = lerp(positionExtremes.minX[chunkIndex], positionExtremes.maxX[chunkIndex], p.x);\r\n      outSplat[OFFSET.Y] = lerp(positionExtremes.minY[chunkIndex], positionExtremes.maxY[chunkIndex], p.y);\r\n      outSplat[OFFSET.Z] = lerp(positionExtremes.minZ[chunkIndex], positionExtremes.maxZ[chunkIndex], p.z);\r\n\r\n      outSplat[OFFSET.ROTATION0] = r.x;\r\n      outSplat[OFFSET.ROTATION1] = r.y;\r\n      outSplat[OFFSET.ROTATION2] = r.z;\r\n      outSplat[OFFSET.ROTATION3] = r.w;\r\n\r\n      outSplat[OFFSET.SCALE0] = Math.exp(lerp(scaleExtremes.minScaleX[chunkIndex], scaleExtremes.maxScaleX[chunkIndex], s.x));\r\n      outSplat[OFFSET.SCALE1] = Math.exp(lerp(scaleExtremes.minScaleY[chunkIndex], scaleExtremes.maxScaleY[chunkIndex], s.y));\r\n      outSplat[OFFSET.SCALE2] = Math.exp(lerp(scaleExtremes.minScaleZ[chunkIndex], scaleExtremes.maxScaleZ[chunkIndex], s.z));\r\n\r\n      outSplat[OFFSET.FDC0] = clamp(Math.floor(c.x * 255), 0, 255);\r\n      outSplat[OFFSET.FDC1] = clamp(Math.floor(c.y * 255), 0, 255);\r\n      outSplat[OFFSET.FDC2] = clamp(Math.floor(c.z * 255), 0, 255);\r\n      outSplat[OFFSET.OPACITY] = clamp(Math.floor(c.w * 255), 0, 255);\r\n\r\n      return outSplat;\r\n    };\r\n\r\n  }();\r\n\r\n  static parseToUncompressedSplatBufferSection(chunkElement, vertexElement, fromIndex, toIndex, chunkSplatIndexOffset,\r\n                                               vertexDataBuffer, veretxReadOffset, outBuffer, outOffset, propertyFilter = null) {\r\n\r\n    CompressedPlyParser.readElementData(vertexElement, vertexDataBuffer, veretxReadOffset, fromIndex, toIndex, propertyFilter);\r\n\r\n    const outBytesPerCenter = SplatBuffer.CompressionLevels[0].BytesPerCenter;\r\n    const outBytesPerScale = SplatBuffer.CompressionLevels[0].BytesPerScale;\r\n    const outBytesPerRotation = SplatBuffer.CompressionLevels[0].BytesPerRotation;\r\n    const outBytesPerSplat = SplatBuffer.CompressionLevels[0].BytesPerSplat;\r\n\r\n    const { positionExtremes, scaleExtremes, position, rotation, scale, color } =\r\n      CompressedPlyParser.getElementStorageArrays(chunkElement, vertexElement);\r\n\r\n    const OFFSET = UncompressedSplatArray.OFFSET;\r\n    const tempSplat = UncompressedSplatArray.createSplat();\r\n\r\n    for (let i = fromIndex; i <= toIndex; ++i) {\r\n\r\n      CompressedPlyParser.decompressSplat(i, chunkSplatIndexOffset, position, positionExtremes,\r\n                                          scale, scaleExtremes, rotation, color, tempSplat);\r\n\r\n      const outBase = i * outBytesPerSplat + outOffset;\r\n      const outCenter = new Float32Array(outBuffer, outBase, 3);\r\n      const outScale = new Float32Array(outBuffer, outBase + outBytesPerCenter, 3);\r\n      const outRotation = new Float32Array(outBuffer, outBase + outBytesPerCenter + outBytesPerScale, 4);\r\n      const outColor = new Uint8Array(outBuffer, outBase + outBytesPerCenter + outBytesPerScale + outBytesPerRotation, 4);\r\n\r\n      outCenter[0] = tempSplat[OFFSET.X];\r\n      outCenter[1] = tempSplat[OFFSET.Y];\r\n      outCenter[2] = tempSplat[OFFSET.Z];\r\n\r\n      outScale[0] = tempSplat[OFFSET.SCALE0];\r\n      outScale[1] = tempSplat[OFFSET.SCALE1];\r\n      outScale[2] = tempSplat[OFFSET.SCALE2];\r\n\r\n      outRotation[0] = tempSplat[OFFSET.ROTATION0];\r\n      outRotation[1] = tempSplat[OFFSET.ROTATION1];\r\n      outRotation[2] = tempSplat[OFFSET.ROTATION2];\r\n      outRotation[3] = tempSplat[OFFSET.ROTATION3];\r\n\r\n      outColor[0] = tempSplat[OFFSET.FDC0];\r\n      outColor[1] = tempSplat[OFFSET.FDC1];\r\n      outColor[2] = tempSplat[OFFSET.FDC2];\r\n      outColor[3] = tempSplat[OFFSET.OPACITY];\r\n    }\r\n  }\r\n\r\n  static parseToUncompressedSplatArray(plyBuffer) {\r\n    const { chunkElement, vertexElement } = CompressedPlyParser.readPly(plyBuffer);\r\n\r\n    const splatArray = new UncompressedSplatArray();\r\n\r\n    const { positionExtremes, scaleExtremes, position, rotation, scale, color } =\r\n      CompressedPlyParser.getElementStorageArrays(chunkElement, vertexElement);\r\n\r\n    for (let i = 0; i < vertexElement.count; ++i) {\r\n\r\n      splatArray.addDefaultSplat();\r\n      const newSplat = splatArray.getSplat(splatArray.splatCount - 1);\r\n\r\n      CompressedPlyParser.decompressSplat(i, 0, position, positionExtremes, scale, scaleExtremes, rotation, color, newSplat);\r\n    }\r\n\r\n    const mat = new THREE.Matrix4();\r\n    mat.identity();\r\n\r\n    return splatArray;\r\n  }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\r\nimport { CompressedPlyParser } from './CompressedPlyParser.js';\r\nimport { SplatBuffer } from '../SplatBuffer.js';\r\nimport { clamp } from '../../Util.js';\r\n\r\nexport class PlyParser {\r\n\r\n    static HeaderEndToken = 'end_header';\r\n\r\n    static Fields = ['scale_0', 'scale_1', 'scale_2', 'rot_0', 'rot_1', 'rot_2', 'rot_3',\r\n                     'x', 'y', 'z', 'f_dc_0', 'f_dc_1', 'f_dc_2', 'red', 'green', 'blue', 'opacity'];\r\n\r\n    static checkTextForEndHeader(endHeaderTestText) {\r\n        if (endHeaderTestText.includes(PlyParser.HeaderEndToken)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    static checkBufferForEndHeader(buffer, searchOfset, chunkSize, decoder) {\r\n        const endHeaderTestChunk = new Uint8Array(buffer, Math.max(0, searchOfset - chunkSize), chunkSize);\r\n        const endHeaderTestText = decoder.decode(endHeaderTestChunk);\r\n        return PlyParser.checkTextForEndHeader(endHeaderTestText);\r\n    }\r\n\r\n    static decodeHeaderText(headerText) {\r\n        const headerLines = headerText.split('\\n');\r\n\r\n        const prunedLines = [];\r\n\r\n        let splatCount = 0;\r\n        let propertyTypes = {};\r\n        let compressed = false;\r\n\r\n        for (let i = 0; i < headerLines.length; i++) {\r\n            const line = headerLines[i].trim();\r\n            prunedLines.push(line);\r\n            if (line.startsWith('element chunk') || line.match(/[A-Za-z]*packed_[A-Za-z]*/)) {\r\n                compressed = true;\r\n            } else if (line.startsWith('element vertex')) {\r\n                const splatCountMatch = line.match(/\\d+/);\r\n                if (splatCountMatch) {\r\n                    splatCount = parseInt(splatCountMatch[0]);\r\n                }\r\n            } else if (line.startsWith('property')) {\r\n                const propertyMatch = line.match(/(\\w+)\\s+(\\w+)\\s+(\\w+)/);\r\n                if (propertyMatch) {\r\n                    const propertyType = propertyMatch[2];\r\n                    const propertyName = propertyMatch[3];\r\n                    propertyTypes[propertyName] = propertyType;\r\n                }\r\n            } else if (line === PlyParser.HeaderEndToken) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        let bytesPerSplat = 0;\r\n        let fieldOffsets = {};\r\n        const fieldSize = {\r\n            'double': 8,\r\n            'int': 4,\r\n            'uint': 4,\r\n            'float': 4,\r\n            'short': 2,\r\n            'ushort': 2,\r\n            'uchar': 1,\r\n        };\r\n\r\n        for (let fieldName in propertyTypes) {\r\n            if (propertyTypes.hasOwnProperty(fieldName)) {\r\n                const type = propertyTypes[fieldName];\r\n                fieldOffsets[fieldName] = bytesPerSplat;\r\n                bytesPerSplat += fieldSize[type];\r\n            }\r\n        }\r\n\r\n        return {\r\n            'splatCount': splatCount,\r\n            'propertyTypes': propertyTypes,\r\n            'compressed': compressed,\r\n            'headerText': headerText,\r\n            'headerLines': prunedLines,\r\n            'headerSizeBytes': headerText.indexOf(PlyParser.HeaderEndToken) + PlyParser.HeaderEndToken.length + 1,\r\n            'bytesPerSplat': bytesPerSplat,\r\n            'fieldOffsets': fieldOffsets\r\n        };\r\n    }\r\n\r\n    static decodeHeadeFromBuffer(plyBuffer) {\r\n        const decoder = new TextDecoder();\r\n        let headerOffset = 0;\r\n        let headerText = '';\r\n        const readChunkSize = 100;\r\n\r\n        while (true) {\r\n            if (headerOffset + readChunkSize >= plyBuffer.byteLength) {\r\n                throw new Error('End of file reached while searching for end of header');\r\n            }\r\n            const headerChunk = new Uint8Array(plyBuffer, headerOffset, readChunkSize);\r\n            headerText += decoder.decode(headerChunk);\r\n            headerOffset += readChunkSize;\r\n\r\n            if (PlyParser.checkBufferForEndHeader(plyBuffer, headerOffset, readChunkSize * 2, decoder)) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return PlyParser.decodeHeaderText(headerText);\r\n\r\n    }\r\n\r\n    static findVertexData(plyBuffer, header) {\r\n        return new DataView(plyBuffer, header.headerSizeBytes);\r\n    }\r\n\r\n    static readRawVertexFast(vertexData, offset, fieldOffsets, propertiesToRead, propertyTypes, outVertex) {\r\n        let rawVertex = outVertex || {};\r\n        for (let property of propertiesToRead) {\r\n            const propertyType = propertyTypes[property];\r\n            if (propertyType === 'float') {\r\n                rawVertex[property] = vertexData.getFloat32(offset + fieldOffsets[property], true);\r\n            } else if (propertyType === 'uchar') {\r\n                rawVertex[property] = vertexData.getUint8(offset + fieldOffsets[property]) / 255.0;\r\n            }\r\n        }\r\n    }\r\n\r\n    static parseToUncompressedSplatBufferSection(header, fromSplat, toSplat, vertexData, vertexDataOffset, toBuffer, toOffset) {\r\n        const outBytesPerCenter = SplatBuffer.CompressionLevels[0].BytesPerCenter;\r\n        const outBytesPerScale = SplatBuffer.CompressionLevels[0].BytesPerScale;\r\n        const outBytesPerRotation = SplatBuffer.CompressionLevels[0].BytesPerRotation;\r\n        const outBytesPerSplat = SplatBuffer.CompressionLevels[0].BytesPerSplat;\r\n\r\n        for (let i = fromSplat; i <= toSplat; i++) {\r\n\r\n            const parsedSplat = PlyParser.parseToUncompressedSplat(vertexData, i, header, vertexDataOffset);\r\n\r\n            const outBase = i * outBytesPerSplat + toOffset;\r\n            const outCenter = new Float32Array(toBuffer, outBase, 3);\r\n            const outScale = new Float32Array(toBuffer, outBase + outBytesPerCenter, 3);\r\n            const outRotation = new Float32Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale, 4);\r\n            const outColor = new Uint8Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale + outBytesPerRotation, 4);\r\n\r\n            outCenter[0] = parsedSplat[UncompressedSplatArray.OFFSET.X];\r\n            outCenter[1] = parsedSplat[UncompressedSplatArray.OFFSET.Y];\r\n            outCenter[2] = parsedSplat[UncompressedSplatArray.OFFSET.Z];\r\n\r\n            outScale[0] = parsedSplat[UncompressedSplatArray.OFFSET.SCALE0];\r\n            outScale[1] = parsedSplat[UncompressedSplatArray.OFFSET.SCALE1];\r\n            outScale[2] = parsedSplat[UncompressedSplatArray.OFFSET.SCALE2];\r\n\r\n            outRotation[0] = parsedSplat[UncompressedSplatArray.OFFSET.ROTATION0];\r\n            outRotation[1] = parsedSplat[UncompressedSplatArray.OFFSET.ROTATION1];\r\n            outRotation[2] = parsedSplat[UncompressedSplatArray.OFFSET.ROTATION2];\r\n            outRotation[3] = parsedSplat[UncompressedSplatArray.OFFSET.ROTATION3];\r\n\r\n            outColor[0] = parsedSplat[UncompressedSplatArray.OFFSET.FDC0];\r\n            outColor[1] = parsedSplat[UncompressedSplatArray.OFFSET.FDC1];\r\n            outColor[2] = parsedSplat[UncompressedSplatArray.OFFSET.FDC2];\r\n            outColor[3] = parsedSplat[UncompressedSplatArray.OFFSET.OPACITY];\r\n        }\r\n    }\r\n\r\n    static parseToUncompressedSplat = function() {\r\n\r\n        let rawVertex = {};\r\n        const tempRotation = new THREE.Quaternion();\r\n\r\n        return function(vertexData, row, header, vertexDataOffset = 0) {\r\n            PlyParser.readRawVertexFast(vertexData, row * header.bytesPerSplat + vertexDataOffset, header.fieldOffsets,\r\n                                        PlyParser.Fields, header.propertyTypes, rawVertex);\r\n            const newSplat = UncompressedSplatArray.createSplat();\r\n            if (rawVertex['scale_0'] !== undefined) {\r\n                newSplat[UncompressedSplatArray.OFFSET.SCALE0] = Math.exp(rawVertex['scale_0']);\r\n                newSplat[UncompressedSplatArray.OFFSET.SCALE1] = Math.exp(rawVertex['scale_1']);\r\n                newSplat[UncompressedSplatArray.OFFSET.SCALE2] = Math.exp(rawVertex['scale_2']);\r\n            } else {\r\n                newSplat[UncompressedSplatArray.OFFSET.SCALE0] = 0.01;\r\n                newSplat[UncompressedSplatArray.OFFSET.SCALE1] = 0.01;\r\n                newSplat[UncompressedSplatArray.OFFSET.SCALE2] = 0.01;\r\n            }\r\n\r\n            if (rawVertex['f_dc_0'] !== undefined) {\r\n                const SH_C0 = 0.28209479177387814;\r\n                newSplat[UncompressedSplatArray.OFFSET.FDC0] = (0.5 + SH_C0 * rawVertex['f_dc_0']) * 255;\r\n                newSplat[UncompressedSplatArray.OFFSET.FDC1] = (0.5 + SH_C0 * rawVertex['f_dc_1']) * 255;\r\n                newSplat[UncompressedSplatArray.OFFSET.FDC2] = (0.5 + SH_C0 * rawVertex['f_dc_2']) * 255;\r\n            } else if (rawVertex['red'] !== undefined) {\r\n                newSplat[UncompressedSplatArray.OFFSET.FDC0] = rawVertex['red'] * 255;\r\n                newSplat[UncompressedSplatArray.OFFSET.FDC1] = rawVertex['green'] * 255;\r\n                newSplat[UncompressedSplatArray.OFFSET.FDC2] = rawVertex['blue'] * 255;\r\n            } else {\r\n                newSplat[UncompressedSplatArray.OFFSET.FDC0] = 0;\r\n                newSplat[UncompressedSplatArray.OFFSET.FDC1] = 0;\r\n                newSplat[UncompressedSplatArray.OFFSET.FDC2] = 0;\r\n            }\r\n            if (rawVertex['opacity'] !== undefined) {\r\n                newSplat[UncompressedSplatArray.OFFSET.OPACITY] = (1 / (1 + Math.exp(-rawVertex['opacity']))) * 255;\r\n            }\r\n\r\n            newSplat[UncompressedSplatArray.OFFSET.FDC0] = clamp(Math.floor(newSplat[UncompressedSplatArray.OFFSET.FDC0]), 0, 255);\r\n            newSplat[UncompressedSplatArray.OFFSET.FDC1] = clamp(Math.floor(newSplat[UncompressedSplatArray.OFFSET.FDC1]), 0, 255);\r\n            newSplat[UncompressedSplatArray.OFFSET.FDC2] = clamp(Math.floor(newSplat[UncompressedSplatArray.OFFSET.FDC2]), 0, 255);\r\n            newSplat[UncompressedSplatArray.OFFSET.OPACITY] = clamp(Math.floor(newSplat[UncompressedSplatArray.OFFSET.OPACITY]), 0, 255);\r\n\r\n            tempRotation.set(rawVertex['rot_0'], rawVertex['rot_1'], rawVertex['rot_2'], rawVertex['rot_3']);\r\n            tempRotation.normalize();\r\n\r\n            newSplat[UncompressedSplatArray.OFFSET.ROTATION0] = tempRotation.x;\r\n            newSplat[UncompressedSplatArray.OFFSET.ROTATION1] = tempRotation.y;\r\n            newSplat[UncompressedSplatArray.OFFSET.ROTATION2] = tempRotation.z;\r\n            newSplat[UncompressedSplatArray.OFFSET.ROTATION3] = tempRotation.w;\r\n\r\n            newSplat[UncompressedSplatArray.OFFSET.X] = rawVertex['x'];\r\n            newSplat[UncompressedSplatArray.OFFSET.Y] = rawVertex['y'];\r\n            newSplat[UncompressedSplatArray.OFFSET.Z] = rawVertex['z'];\r\n\r\n            return newSplat;\r\n        };\r\n\r\n    }();\r\n\r\n    static parseToUncompressedSplatArray(plyBuffer) {\r\n\r\n        const header = PlyParser.decodeHeadeFromBuffer(plyBuffer);\r\n\r\n        if (header.compressed) {\r\n\r\n            return CompressedPlyParser.parseToUncompressedSplatArray(plyBuffer);\r\n\r\n        } else {\r\n\r\n            const splatCount = header.splatCount;\r\n\r\n            const vertexData = PlyParser.findVertexData(plyBuffer, header);\r\n\r\n            // TODO: Eventually properly support multiple degree spherical harmonics\r\n            // figure out the SH degree from the number of coefficients\r\n            /* let nRestCoeffs = 0;\r\n            for (const propertyName in header.propertyTypes) {\r\n                if (propertyName.startsWith('f_rest_')) {\r\n                    nRestCoeffs += 1;\r\n                }\r\n            }\r\n            const nCoeffsPerColor = nRestCoeffs / 3;*/\r\n\r\n            // const sphericalHarmonicsDegree = Math.sqrt(nCoeffsPerColor + 1) - 1;\r\n            // const sphericalHarmonicsDegree = 0;\r\n            // console.log('Detected degree', sphericalHarmonicsDegree, 'with ', nCoeffsPerColor, 'coefficients per color');\r\n\r\n            // figure out the order in which spherical harmonics should be read\r\n            /* const shFeatureOrder = [];\r\n            for (let rgb = 0; rgb < 3; ++rgb) {\r\n                shFeatureOrder.push(`f_dc_${rgb}`);\r\n            }\r\n            for (let i = 0; i < nCoeffsPerColor; ++i) {\r\n                for (let rgb = 0; rgb < 3; ++rgb) {\r\n                    shFeatureOrder.push(`f_rest_${rgb * nCoeffsPerColor + i}`);\r\n                }\r\n            }*/\r\n\r\n            const splatArray = new UncompressedSplatArray();\r\n\r\n            for (let row = 0; row < splatCount; row++) {\r\n                const newSplat = PlyParser.parseToUncompressedSplat(vertexData, row, header);\r\n                splatArray.addSplat(newSplat);\r\n            }\r\n\r\n            return splatArray;\r\n        }\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { UncompressedSplatArray } from './UncompressedSplatArray.js';\r\nimport { SplatBuffer } from './SplatBuffer.js';\r\n\r\nexport class SplatPartitioner {\r\n\r\n    constructor(sectionCount, sectionFilters, groupingParameters, partitionGenerator) {\r\n        this.sectionCount = sectionCount;\r\n        this.sectionFilters = sectionFilters;\r\n        this.groupingParameters = groupingParameters;\r\n        this.partitionGenerator = partitionGenerator;\r\n    }\r\n\r\n    partitionUncompressedSplatArray(splatArray) {\r\n        let groupingParameters;\r\n        let sectionCount;\r\n        let sectionFilters;\r\n        if (this.partitionGenerator) {\r\n            const results = this.partitionGenerator(splatArray);\r\n            groupingParameters = results.groupingParameters;\r\n            sectionCount = results.sectionCount;\r\n            sectionFilters = results.sectionFilters;\r\n        } else {\r\n            groupingParameters = this.groupingParameters;\r\n            sectionCount = this.sectionCount;\r\n            sectionFilters = this.sectionFilters;\r\n        }\r\n\r\n        const newArrays = [];\r\n        for (let s = 0; s < sectionCount; s++) {\r\n            const sectionSplats = new UncompressedSplatArray();\r\n            const sectionFilter = sectionFilters[s];\r\n            for (let i = 0; i < splatArray.splatCount; i++) {\r\n                if (sectionFilter(i)) {\r\n                    sectionSplats.addSplatFromArray(splatArray, i);\r\n                }\r\n            }\r\n            newArrays.push(sectionSplats);\r\n        }\r\n        return {\r\n            splatArrays: newArrays,\r\n            parameters: groupingParameters\r\n        };\r\n    }\r\n\r\n    static getStandardPartitioner(partitionSize = 0, sceneCenter = new THREE.Vector3(),\r\n                                  blockSize = SplatBuffer.BucketBlockSize, bucketSize = SplatBuffer.BucketSize) {\r\n        const partitionGenerator = (splatArray) => {\r\n\r\n            if (partitionSize <= 0) partitionSize = splatArray.splatCount;\r\n\r\n            const centerA = new THREE.Vector3();\r\n            const centerB = new THREE.Vector3();\r\n            const clampDistance = 0.5;\r\n            const clampPoint = (point) => {\r\n                point.x = Math.floor(point.x / clampDistance) * clampDistance;\r\n                point.y = Math.floor(point.y / clampDistance) * clampDistance;\r\n                point.z = Math.floor(point.z / clampDistance) * clampDistance;\r\n            };\r\n            splatArray.splats.sort((a, b) => {\r\n                centerA.set(a[UncompressedSplatArray.OFFSET.X],\r\n                            a[UncompressedSplatArray.OFFSET.Y],\r\n                            a[UncompressedSplatArray.OFFSET.Z]).sub(sceneCenter);\r\n                clampPoint(centerA);\r\n                const centerADist = centerA.lengthSq();\r\n                centerB.set(b[UncompressedSplatArray.OFFSET.X],\r\n                            b[UncompressedSplatArray.OFFSET.Y],\r\n                            b[UncompressedSplatArray.OFFSET.Z]).sub(sceneCenter);\r\n                clampPoint(centerB);\r\n                const centerBDist = centerB.lengthSq();\r\n                if (centerADist > centerBDist) return 1;\r\n                else return -1;\r\n            });\r\n\r\n            const sectionFilters = [];\r\n            const groupingParameters = [];\r\n            partitionSize = Math.min(splatArray.splatCount, partitionSize);\r\n            const patitionCount = Math.ceil(splatArray.splatCount / partitionSize);\r\n            let currentStartSplat = 0;\r\n            for (let i = 0; i < patitionCount; i ++) {\r\n                let startSplat = currentStartSplat;\r\n                sectionFilters.push((splatIndex) => {\r\n                    return splatIndex >= startSplat && splatIndex < startSplat + partitionSize;\r\n                });\r\n                groupingParameters.push({\r\n                    'blocksSize': blockSize,\r\n                    'bucketSize': bucketSize,\r\n                });\r\n                currentStartSplat += partitionSize;\r\n            }\r\n            return {\r\n                'sectionCount': sectionFilters.length,\r\n                sectionFilters,\r\n                groupingParameters\r\n            };\r\n        };\r\n        return new SplatPartitioner(undefined, undefined, undefined, partitionGenerator);\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { SplatPartitioner } from './SplatPartitioner.js';\r\nimport { SplatBuffer } from './SplatBuffer.js';\r\n\r\nexport class SplatBufferGenerator {\r\n\r\n    constructor(splatPartitioner, alphaRemovalThreshold, compressionLevel, sectionSize, sceneCenter, blockSize, bucketSize) {\r\n        this.splatPartitioner = splatPartitioner;\r\n        this.alphaRemovalThreshold = alphaRemovalThreshold;\r\n        this.compressionLevel = compressionLevel;\r\n        this.sectionSize = sectionSize;\r\n        this.sceneCenter = sceneCenter ? new THREE.Vector3().copy(sceneCenter) : undefined;\r\n        this.blockSize = blockSize;\r\n        this.bucketSize = bucketSize;\r\n    }\r\n\r\n    generateFromUncompressedSplatArray(splatArray) {\r\n        const partitionResults = this.splatPartitioner.partitionUncompressedSplatArray(splatArray);\r\n        return SplatBuffer.generateFromUncompressedSplatArrays(partitionResults.splatArrays,\r\n                                                               this.alphaRemovalThreshold, this.compressionLevel,\r\n                                                               this.sceneCenter, this.blockSize, this.bucketSize,\r\n                                                               partitionResults.parameters);\r\n    }\r\n\r\n    static getStandardGenerator(alphaRemovalThreshold = 1, compressionLevel = 1, sectionSize = 0, sceneCenter = new THREE.Vector3(),\r\n                                blockSize = SplatBuffer.BucketBlockSize, bucketSize = SplatBuffer.BucketSize) {\r\n        const splatPartitioner = SplatPartitioner.getStandardPartitioner(sectionSize, sceneCenter, blockSize, bucketSize);\r\n        return new SplatBufferGenerator(splatPartitioner, alphaRemovalThreshold, compressionLevel,\r\n                                        sectionSize, sceneCenter, blockSize, bucketSize);\r\n    }\r\n}\r\n","export const LoaderStatus = {\r\n    'Downloading': 0,\r\n    'Processing': 1,\r\n    'Done': 2\r\n};\r\n","export class Constants {\r\n\r\n    static DepthMapRange = 1 << 16;\r\n    static MemoryPageSize = 65536;\r\n    static BytesPerFloat = 4;\r\n    static BytesPerInt = 4;\r\n    static MaxScenes = 32;\r\n    static StreamingSectionSize = 524288;\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { PlyParser } from './PlyParser.js';\r\nimport { CompressedPlyParser } from './CompressedPlyParser.js';\r\nimport { fetchWithProgress, delayedExecute } from '../../Util.js';\r\nimport { SplatBuffer } from '../SplatBuffer.js';\r\nimport { SplatBufferGenerator } from '../SplatBufferGenerator.js';\r\nimport { LoaderStatus } from '../LoaderStatus.js';\r\nimport { Constants } from '../../Constants.js';\r\n\r\nfunction storeChunksInBuffer(chunks, buffer) {\r\n    let inBytes = 0;\r\n    for (let chunk of chunks) inBytes += chunk.sizeBytes;\r\n\r\n    if (!buffer || buffer.byteLength < inBytes) {\r\n        buffer = new ArrayBuffer(inBytes);\r\n    }\r\n\r\n    let offset = 0;\r\n    for (let chunk of chunks) {\r\n        new Uint8Array(buffer, offset, chunk.sizeBytes).set(chunk.data);\r\n        offset += chunk.sizeBytes;\r\n    }\r\n\r\n    return buffer;\r\n}\r\n\r\nexport class PlyLoader {\r\n\r\n    static loadFromURL(fileName, onProgress, streamLoadData, onStreamedSectionProgress, minimumAlpha, compressionLevel,\r\n                       sectionSize, sceneCenter, blockSize, bucketSize) {\r\n\r\n        const streamedSectionSizeBytes = Constants.StreamingSectionSize;\r\n        const splatDataOffsetBytes = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes;\r\n        const sectionCount = 1;\r\n\r\n        let streamBufferIn;\r\n        let streamBufferOut;\r\n        let streamedSplatBuffer;\r\n        let compressedPlyHeaderChunksBuffer;\r\n        let maxSplatCount = 0;\r\n        let splatCount = 0;\r\n\r\n        let headerLoaded = false;\r\n        let readyToLoadSplatData = false;\r\n        let compressed = false;\r\n\r\n        let streamLoadCompleteResolver;\r\n        let streamLoadPromise = new Promise((resolve) => {\r\n            streamLoadCompleteResolver = resolve;\r\n        });\r\n\r\n        let numBytesStreamed = 0;\r\n        let numBytesParsed = 0;\r\n        let numBytesDownloaded = 0;\r\n        let headerText = '';\r\n        let header = null;\r\n        let chunks = [];\r\n\r\n        const textDecoder = new TextDecoder();\r\n\r\n        const localOnProgress = (percent, percentLabel, chunkData) => {\r\n            const loadComplete = percent >= 100;\r\n            if (streamLoadData) {\r\n\r\n                if (chunkData) {\r\n                    chunks.push({\r\n                        'data': chunkData,\r\n                        'sizeBytes': chunkData.byteLength,\r\n                        'startBytes': numBytesDownloaded,\r\n                        'endBytes': numBytesDownloaded + chunkData.byteLength\r\n                    });\r\n                    numBytesDownloaded += chunkData.byteLength;\r\n                }\r\n\r\n                if (!headerLoaded) {\r\n                    headerText += textDecoder.decode(chunkData);\r\n                    if (PlyParser.checkTextForEndHeader(headerText)) {\r\n                        header = PlyParser.decodeHeaderText(headerText);\r\n                        compressed = header.compressed;\r\n\r\n                        if (compressed) {\r\n                            header = CompressedPlyParser.decodeHeaderText(headerText);\r\n                            maxSplatCount = header.vertexElement.count;\r\n                        } else {\r\n                            maxSplatCount = header.splatCount;\r\n                            readyToLoadSplatData = true;\r\n                        }\r\n\r\n                        const splatBufferSizeBytes = splatDataOffsetBytes + SplatBuffer.CompressionLevels[0].BytesPerSplat * maxSplatCount;\r\n                        streamBufferOut = new ArrayBuffer(splatBufferSizeBytes);\r\n                        SplatBuffer.writeHeaderToBuffer({\r\n                            versionMajor: SplatBuffer.CurrentMajorVersion,\r\n                            versionMinor: SplatBuffer.CurrentMinorVersion,\r\n                            maxSectionCount: sectionCount,\r\n                            sectionCount: sectionCount,\r\n                            maxSplatCount: maxSplatCount,\r\n                            splatCount: splatCount,\r\n                            compressionLevel: 0,\r\n                            sceneCenter: new THREE.Vector3()\r\n                        }, streamBufferOut);\r\n\r\n                        numBytesStreamed = header.headerSizeBytes;\r\n                        numBytesParsed = header.headerSizeBytes;\r\n                        headerLoaded = true;\r\n                    }\r\n                } else if (compressed && !readyToLoadSplatData) {\r\n                    const sizeRequiredForHeaderAndChunks = header.headerSizeBytes + header.chunkElement.storageSizeBytes;\r\n                    compressedPlyHeaderChunksBuffer = storeChunksInBuffer(chunks, compressedPlyHeaderChunksBuffer);\r\n                    if (compressedPlyHeaderChunksBuffer.byteLength >= sizeRequiredForHeaderAndChunks) {\r\n                        CompressedPlyParser.readElementData(header.chunkElement, compressedPlyHeaderChunksBuffer, header.headerSizeBytes);\r\n                        numBytesStreamed = sizeRequiredForHeaderAndChunks;\r\n                        numBytesParsed = sizeRequiredForHeaderAndChunks;\r\n                        readyToLoadSplatData = true;\r\n                    }\r\n                }\r\n\r\n                if (headerLoaded && readyToLoadSplatData) {\r\n\r\n                    if (chunks.length > 0) {\r\n\r\n                        streamBufferIn = storeChunksInBuffer(chunks, streamBufferIn);\r\n\r\n                        const bytesLoadedSinceLastStreamedSection = numBytesDownloaded - numBytesStreamed;\r\n                        if (bytesLoadedSinceLastStreamedSection > streamedSectionSizeBytes || loadComplete) {\r\n                            const numBytesToProcess = numBytesDownloaded - numBytesParsed;\r\n                            const addedSplatCount = Math.floor(numBytesToProcess / header.bytesPerSplat);\r\n                            const numBytesToParse = addedSplatCount * header.bytesPerSplat;\r\n                            const numBytesLeftOver = numBytesToProcess - numBytesToParse;\r\n                            const newSplatCount = splatCount + addedSplatCount;\r\n                            const parsedDataViewOffset = numBytesParsed - chunks[0].startBytes;\r\n                            const dataToParse = new DataView(streamBufferIn, parsedDataViewOffset, numBytesToParse);\r\n\r\n                            const outOffset = splatCount * SplatBuffer.CompressionLevels[0].BytesPerSplat + splatDataOffsetBytes;\r\n\r\n                            if (compressed) {\r\n                                CompressedPlyParser.parseToUncompressedSplatBufferSection(header.chunkElement, header.vertexElement, 0,\r\n                                                                                          addedSplatCount - 1, splatCount,\r\n                                                                                          dataToParse, 0, streamBufferOut, outOffset);\r\n                            } else {\r\n                                PlyParser.parseToUncompressedSplatBufferSection(header, 0, addedSplatCount - 1,\r\n                                                                                dataToParse, 0, streamBufferOut, outOffset);\r\n                            }\r\n\r\n                            splatCount = newSplatCount;\r\n                            if (!streamedSplatBuffer) {\r\n                                SplatBuffer.writeSectionHeaderToBuffer({\r\n                                    maxSplatCount: maxSplatCount,\r\n                                    splatCount: splatCount,\r\n                                    bucketSize: 0,\r\n                                    bucketCount: 0,\r\n                                    bucketBlockSize: 0,\r\n                                    compressionScaleRange: 0,\r\n                                    storageSizeBytes: 0,\r\n                                    fullBucketCount: 0,\r\n                                    partiallyFilledBucketCount: 0\r\n                                }, 0, streamBufferOut, SplatBuffer.HeaderSizeBytes);\r\n                                streamedSplatBuffer = new SplatBuffer(streamBufferOut, false);\r\n                            }\r\n                            streamedSplatBuffer.updateLoadedCounts(1, splatCount);\r\n                            onStreamedSectionProgress(streamedSplatBuffer, loadComplete);\r\n                            numBytesStreamed += streamedSectionSizeBytes;\r\n                            numBytesParsed += numBytesToParse;\r\n\r\n                            if (numBytesLeftOver === 0) {\r\n                                chunks = [];\r\n                            } else {\r\n                                let keepChunks = [];\r\n                                let keepSize = 0;\r\n                                for (let i = chunks.length - 1; i >= 0; i--) {\r\n                                    const chunk = chunks[i];\r\n                                    keepSize += chunk.sizeBytes;\r\n                                    keepChunks.unshift(chunk);\r\n                                    if (keepSize >= numBytesLeftOver) break;\r\n                                }\r\n                                chunks = keepChunks;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (loadComplete) {\r\n                        streamLoadCompleteResolver(streamedSplatBuffer);\r\n                    }\r\n                }\r\n\r\n            }\r\n            if (onProgress) onProgress(percent, percentLabel, LoaderStatus.Downloading);\r\n        };\r\n\r\n        return fetchWithProgress(fileName, localOnProgress, !streamLoadData).then((plyFileData) => {\r\n            if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\r\n            const loadPromise = streamLoadData ? streamLoadPromise : PlyLoader.loadFromFileData(plyFileData, minimumAlpha, compressionLevel,\r\n                                                                                        sectionSize, sceneCenter, blockSize, bucketSize);\r\n            return loadPromise.then((splatBuffer) => {\r\n                if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\r\n                return splatBuffer;\r\n            });\r\n        });\r\n    }\r\n\r\n    static loadFromFileData(plyFileData, minimumAlpha, compressionLevel, sectionSize, sceneCenter, blockSize, bucketSize) {\r\n        return delayedExecute(() => {\r\n            return PlyParser.parseToUncompressedSplatArray(plyFileData);\r\n        })\r\n        .then((splatArray) => {\r\n            const splatBufferGenerator = SplatBufferGenerator.getStandardGenerator(minimumAlpha, compressionLevel, sectionSize,\r\n                                                                                   sceneCenter, blockSize, bucketSize);\r\n            return splatBufferGenerator.generateFromUncompressedSplatArray(splatArray);\r\n        });\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { SplatBuffer } from '../SplatBuffer.js';\r\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\r\n\r\nexport class SplatParser {\r\n\r\n    static RowSizeBytes = 32;\r\n    static CenterSizeBytes = 12;\r\n    static ScaleSizeBytes = 12;\r\n    static RotationSizeBytes = 4;\r\n    static ColorSizeBytes = 4;\r\n\r\n    static parseToUncompressedSplatBufferSection(fromSplat, toSplat, fromBuffer, fromOffset, toBuffer, toOffset) {\r\n\r\n        const outBytesPerCenter = SplatBuffer.CompressionLevels[0].BytesPerCenter;\r\n        const outBytesPerScale = SplatBuffer.CompressionLevels[0].BytesPerScale;\r\n        const outBytesPerRotation = SplatBuffer.CompressionLevels[0].BytesPerRotation;\r\n        const outBytesPerSplat = SplatBuffer.CompressionLevels[0].BytesPerSplat;\r\n\r\n        for (let i = fromSplat; i <= toSplat; i++) {\r\n            const inBase = i * SplatParser.RowSizeBytes + fromOffset;\r\n            const inCenter = new Float32Array(fromBuffer, inBase, 3);\r\n            const inScale = new Float32Array(fromBuffer, inBase + SplatParser.CenterSizeBytes, 3);\r\n            const inColor = new Uint8Array(fromBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes, 4);\r\n            const inRotation = new Uint8Array(fromBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes +\r\n                                              SplatParser.RotationSizeBytes, 4);\r\n\r\n            const quat = new THREE.Quaternion((inRotation[1] - 128) / 128, (inRotation[2] - 128) / 128,\r\n                                              (inRotation[3] - 128) / 128, (inRotation[0] - 128) / 128);\r\n            quat.normalize();\r\n\r\n            const outBase = i * outBytesPerSplat + toOffset;\r\n            const outCenter = new Float32Array(toBuffer, outBase, 3);\r\n            const outScale = new Float32Array(toBuffer, outBase + outBytesPerCenter, 3);\r\n            const outRotation = new Float32Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale, 4);\r\n            const outColor = new Uint8Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale + outBytesPerRotation, 4);\r\n\r\n            outCenter[0] = inCenter[0];\r\n            outCenter[1] = inCenter[1];\r\n            outCenter[2] = inCenter[2];\r\n\r\n            outScale[0] = inScale[0];\r\n            outScale[1] = inScale[1];\r\n            outScale[2] = inScale[2];\r\n\r\n            outRotation[0] = quat.w;\r\n            outRotation[1] = quat.x;\r\n            outRotation[2] = quat.y;\r\n            outRotation[3] = quat.z;\r\n\r\n            outColor[0] = inColor[0];\r\n            outColor[1] = inColor[1];\r\n            outColor[2] = inColor[2];\r\n            outColor[3] = inColor[3];\r\n        }\r\n    }\r\n\r\n    static parseStandardSplatToUncompressedSplatArray(inBuffer) {\r\n        // Standard .splat row layout:\r\n        // XYZ - Position (Float32)\r\n        // XYZ - Scale (Float32)\r\n        // RGBA - colors (uint8)\r\n        // IJKL - quaternion/rot (uint8)\r\n\r\n        const splatCount = inBuffer.byteLength / SplatParser.RowSizeBytes;\r\n\r\n        const splatArray = new UncompressedSplatArray();\r\n\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const inBase = i * SplatParser.RowSizeBytes;\r\n            const inCenter = new Float32Array(inBuffer, inBase, 3);\r\n            const inScale = new Float32Array(inBuffer, inBase + SplatParser.CenterSizeBytes, 3);\r\n            const inColor = new Uint8Array(inBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes, 4);\r\n            const inRotation = new Uint8Array(inBuffer, inBase + SplatParser.CenterSizeBytes +\r\n                                              SplatParser.ScaleSizeBytes + SplatParser.ColorSizeBytes, 4);\r\n\r\n            const quat = new THREE.Quaternion((inRotation[1] - 128) / 128, (inRotation[2] - 128) / 128,\r\n                                              (inRotation[3] - 128) / 128, (inRotation[0] - 128) / 128);\r\n            quat.normalize();\r\n\r\n            splatArray.addSplatFromComonents(inCenter[0], inCenter[1], inCenter[2], inScale[0], inScale[1], inScale[2],\r\n                                             quat.w, quat.x, quat.y, quat.z, inColor[0], inColor[1], inColor[2], inColor[3]);\r\n        }\r\n\r\n        return splatArray;\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { SplatBuffer } from '../SplatBuffer.js';\r\nimport { SplatBufferGenerator } from '../SplatBufferGenerator.js';\r\nimport { SplatParser } from './SplatParser.js';\r\nimport { fetchWithProgress, delayedExecute } from '../../Util.js';\r\nimport { LoaderStatus } from '../LoaderStatus.js';\r\nimport { Constants } from '../../Constants.js';\r\n\r\nexport class SplatLoader {\r\n\r\n    static loadFromURL(fileName, onProgress, streamLoadData, onStreamedSectionProgress, minimumAlpha, compressionLevel,\r\n                       optimizeSplatData, sectionSize, sceneCenter, blockSize, bucketSize) {\r\n\r\n        const splatDataOffsetBytes = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes;\r\n        const streamSectionSizeBytes = Constants.StreamingSectionSize;\r\n        const sectionCount = 1;\r\n\r\n        let streamBufferIn;\r\n        let streamBufferOut;\r\n        let streamSplatBuffer;\r\n        let maxSplatCount = 0;\r\n        let splatCount = 0;\r\n\r\n        let streamLoadCompleteResolver;\r\n        let streamLoadPromise = new Promise((resolve) => {\r\n            streamLoadCompleteResolver = resolve;\r\n        });\r\n\r\n        let numBytesStreamed = 0;\r\n        let numBytesLoaded = 0;\r\n        let chunks = [];\r\n\r\n        const localOnProgress = (percent, percentStr, chunk, fileSize) => {\r\n            const loadComplete = percent >= 100;\r\n            if (!fileSize) streamLoadData = false;\r\n            if (streamLoadData) {\r\n                if (!streamBufferIn) {\r\n                    maxSplatCount = fileSize / SplatParser.RowSizeBytes;\r\n                    streamBufferIn = new ArrayBuffer(fileSize);\r\n                    const splatBufferSizeBytes = splatDataOffsetBytes + SplatBuffer.CompressionLevels[0].BytesPerSplat * maxSplatCount;\r\n                    streamBufferOut = new ArrayBuffer(splatBufferSizeBytes);\r\n                    SplatBuffer.writeHeaderToBuffer({\r\n                        versionMajor: SplatBuffer.CurrentMajorVersion,\r\n                        versionMinor: SplatBuffer.CurrentMinorVersion,\r\n                        maxSectionCount: sectionCount,\r\n                        sectionCount: sectionCount,\r\n                        maxSplatCount: maxSplatCount,\r\n                        splatCount: splatCount,\r\n                        compressionLevel: 0,\r\n                        sceneCenter: new THREE.Vector3()\r\n                    }, streamBufferOut);\r\n                }\r\n\r\n                if (chunk) {\r\n                    chunks.push(chunk);\r\n                    new Uint8Array(streamBufferIn, numBytesLoaded, chunk.byteLength).set(new Uint8Array(chunk));\r\n                    numBytesLoaded += chunk.byteLength;\r\n\r\n                    const bytesLoadedSinceLastSection = numBytesLoaded - numBytesStreamed;\r\n                    if (bytesLoadedSinceLastSection > streamSectionSizeBytes || loadComplete) {\r\n                        const bytesToUpdate = loadComplete ? bytesLoadedSinceLastSection : streamSectionSizeBytes;\r\n                        const addedSplatCount = bytesToUpdate / SplatParser.RowSizeBytes;\r\n                        const newSplatCount = splatCount + addedSplatCount;\r\n                        SplatParser.parseToUncompressedSplatBufferSection(splatCount, newSplatCount - 1, streamBufferIn, 0,\r\n                                                                          streamBufferOut, splatDataOffsetBytes);\r\n                        splatCount = newSplatCount;\r\n                        if (!streamSplatBuffer) {\r\n                            SplatBuffer.writeSectionHeaderToBuffer({\r\n                                maxSplatCount: maxSplatCount,\r\n                                splatCount: splatCount,\r\n                                bucketSize: 0,\r\n                                bucketCount: 0,\r\n                                bucketBlockSize: 0,\r\n                                compressionScaleRange: 0,\r\n                                storageSizeBytes: 0,\r\n                                fullBucketCount: 0,\r\n                                partiallyFilledBucketCount: 0\r\n                            }, 0, streamBufferOut, SplatBuffer.HeaderSizeBytes);\r\n                            streamSplatBuffer = new SplatBuffer(streamBufferOut, false);\r\n                        }\r\n                        streamSplatBuffer.updateLoadedCounts(1, splatCount);\r\n                        onStreamedSectionProgress(streamSplatBuffer, loadComplete);\r\n                        numBytesStreamed += streamSectionSizeBytes;\r\n                    }\r\n                }\r\n                if (loadComplete) {\r\n                    streamLoadCompleteResolver(streamSplatBuffer);\r\n                }\r\n            }\r\n            if (onProgress) onProgress(percent, percentStr, LoaderStatus.Downloading);\r\n            return streamLoadData;\r\n        };\r\n\r\n        return fetchWithProgress(fileName, localOnProgress, true).then((fullBuffer) => {\r\n            if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\r\n            const loadPromise = streamLoadData ? streamLoadPromise :\r\n                SplatLoader.loadFromFileData(fullBuffer, minimumAlpha, compressionLevel, optimizeSplatData,\r\n                                             sectionSize, sceneCenter, blockSize, bucketSize);\r\n            return loadPromise.then((splatBuffer) => {\r\n                if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\r\n                return splatBuffer;\r\n            });\r\n        });\r\n    }\r\n\r\n    static loadFromFileData(splatFileData, minimumAlpha, compressionLevel, optimizeSplatData,\r\n                            sectionSize, sceneCenter, blockSize, bucketSize) {\r\n        return delayedExecute(() => {\r\n            const splatArray = SplatParser.parseStandardSplatToUncompressedSplatArray(splatFileData);\r\n            if (optimizeSplatData) {\r\n                const splatBufferGenerator = SplatBufferGenerator.getStandardGenerator(minimumAlpha, compressionLevel,\r\n                                                                                       sectionSize, sceneCenter, blockSize,\r\n                                                                                       bucketSize);\r\n                return splatBufferGenerator.generateFromUncompressedSplatArray(splatArray);\r\n            } else {\r\n                return SplatBuffer.generateFromUncompressedSplatArrays([splatArray], minimumAlpha, 0, new THREE.Vector3());\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n","import { SplatBuffer } from '../SplatBuffer.js';\r\nimport { fetchWithProgress, delayedExecute } from '../../Util.js';\r\nimport { LoaderStatus } from '../LoaderStatus.js';\r\nimport { Constants } from '../../Constants.js';\r\n\r\nexport class KSplatLoader {\r\n\r\n   static checkVersion(buffer) {\r\n        const minVersionMajor = SplatBuffer.CurrentMajorVersion;\r\n        const minVersionMinor = SplatBuffer.CurrentMinorVersion;\r\n        const header = SplatBuffer.parseHeader(buffer);\r\n        if (header.versionMajor === minVersionMajor &&\r\n            header.versionMinor >= minVersionMinor ||\r\n            header.versionMajor > minVersionMajor) {\r\n           return true;\r\n        } else {\r\n            throw new Error(`KSplat version not supported: v${header.versionMajor}.${header.versionMinor}. ` +\r\n                            `Minimum required: v${minVersionMajor}.${minVersionMinor}`);\r\n        }\r\n    };\r\n\r\n    static loadFromURL(fileName, onProgress, streamLoadData, onSectionBuilt) {\r\n        let streamBuffer;\r\n        let streamSplatBuffer;\r\n\r\n        let headerBuffer;\r\n        let header;\r\n        let headerLoaded = false;\r\n        let headerLoading = false;\r\n\r\n        let sectionHeadersBuffer;\r\n        let sectionHeaders = [];\r\n        let sectionHeadersLoaded = false;\r\n        let sectionHeadersLoading = false;\r\n\r\n        let numBytesLoaded = 0;\r\n        let numBytesStreamed = 0;\r\n        let streamSectionSizeBytes = Constants.StreamingSectionSize;\r\n        let totalBytesToDownload = 0;\r\n\r\n        let loadComplete = false;\r\n\r\n        let chunks = [];\r\n\r\n        let streamLoadCompleteResolver;\r\n        let streamLoadPromise = new Promise((resolve) => {\r\n            streamLoadCompleteResolver = resolve;\r\n        });\r\n\r\n        const checkAndLoadHeader = () => {\r\n            if (!headerLoaded && !headerLoading && numBytesLoaded >= SplatBuffer.HeaderSizeBytes) {\r\n                headerLoading = true;\r\n                const headerAssemblyPromise = new Blob(chunks).arrayBuffer();\r\n                headerAssemblyPromise.then((bufferData) => {\r\n                    headerBuffer = new ArrayBuffer(SplatBuffer.HeaderSizeBytes);\r\n                    new Uint8Array(headerBuffer).set(new Uint8Array(bufferData, 0, SplatBuffer.HeaderSizeBytes));\r\n                    KSplatLoader.checkVersion(headerBuffer);\r\n                    headerLoading = false;\r\n                    headerLoaded = true;\r\n                    header = SplatBuffer.parseHeader(headerBuffer);\r\n                    window.setTimeout(() => {\r\n                        checkAndLoadSectionHeaders();\r\n                    }, 1);\r\n                });\r\n            }\r\n        };\r\n\r\n        let queuedCheckAndLoadSectionsCount = 0;\r\n        const queueCheckAndLoadSections = () => {\r\n            if (queuedCheckAndLoadSectionsCount === 0) {\r\n                queuedCheckAndLoadSectionsCount++;\r\n                window.setTimeout(() => {\r\n                    queuedCheckAndLoadSectionsCount--;\r\n                    checkAndLoadSections(true);\r\n                }, 1);\r\n            }\r\n        };\r\n\r\n        const checkAndLoadSectionHeaders = () => {\r\n            const performLoad = () => {\r\n                sectionHeadersLoading = true;\r\n                const sectionHeadersAssemblyPromise = new Blob(chunks).arrayBuffer();\r\n                sectionHeadersAssemblyPromise.then((bufferData) => {\r\n                    sectionHeadersLoading = false;\r\n                    sectionHeadersLoaded = true;\r\n                    sectionHeadersBuffer = new ArrayBuffer(header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes);\r\n                    new Uint8Array(sectionHeadersBuffer).set(new Uint8Array(bufferData, SplatBuffer.HeaderSizeBytes,\r\n                                                                            header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes));\r\n                    sectionHeaders = SplatBuffer.parseSectionHeaders(header, sectionHeadersBuffer, 0, false);\r\n                    let totalSectionStorageStorageByes = 0;\r\n                    for (let i = 0; i < header.maxSectionCount; i++) {\r\n                        totalSectionStorageStorageByes += sectionHeaders[i].storageSizeBytes;\r\n                    }\r\n                    const totalStorageSizeBytes = SplatBuffer.HeaderSizeBytes + header.maxSectionCount *\r\n                                                  SplatBuffer.SectionHeaderSizeBytes + totalSectionStorageStorageByes;\r\n                    if (!streamBuffer) {\r\n                        streamBuffer = new ArrayBuffer(totalStorageSizeBytes);\r\n                        let offset = 0;\r\n                        for (let i = 0; i < chunks.length; i++) {\r\n                            const chunk = chunks[i];\r\n                            new Uint8Array(streamBuffer, offset, chunk.byteLength).set(new Uint8Array(chunk));\r\n                            offset += chunk.byteLength;\r\n                        }\r\n                    }\r\n\r\n                    totalBytesToDownload = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount;\r\n                    for (let i = 0; i <= sectionHeaders.length && i < header.maxSectionCount; i++) {\r\n                        totalBytesToDownload += sectionHeaders[i].storageSizeBytes;\r\n                    }\r\n\r\n                    queueCheckAndLoadSections();\r\n                });\r\n            };\r\n\r\n            if (!sectionHeadersLoading && !sectionHeadersLoaded && headerLoaded &&\r\n                numBytesLoaded >= SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount) {\r\n                performLoad();\r\n            }\r\n        };\r\n\r\n        const checkAndLoadSections = () => {\r\n            if (sectionHeadersLoaded) {\r\n\r\n                if (loadComplete) return;\r\n\r\n                loadComplete = numBytesLoaded >= totalBytesToDownload;\r\n\r\n                const bytesLoadedSinceLastSection = numBytesLoaded - numBytesStreamed;\r\n                if (bytesLoadedSinceLastSection > streamSectionSizeBytes || loadComplete) {\r\n\r\n                    numBytesStreamed = numBytesLoaded;\r\n\r\n                    if (!streamSplatBuffer) streamSplatBuffer = new SplatBuffer(streamBuffer, false);\r\n\r\n                    const baseDataOffset = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount;\r\n                    let sectionBase = 0;\r\n                    let reachedSections = 0;\r\n                    let loadedSplatCount = 0;\r\n                    for (let i = 0; i < header.maxSectionCount; i++) {\r\n                        const sectionHeader = sectionHeaders[i];\r\n                        const bucketsDataOffset = sectionBase + sectionHeader.partiallyFilledBucketCount * 4 +\r\n                                                  sectionHeader.bucketStorageSizeBytes * sectionHeader.bucketCount;\r\n                        const bytesRequiredToReachSectionSplatData = baseDataOffset + bucketsDataOffset;\r\n                        if (numBytesLoaded >= bytesRequiredToReachSectionSplatData) {\r\n                            reachedSections++;\r\n                            const bytesPastSSectionSplatDataStart = numBytesLoaded - bytesRequiredToReachSectionSplatData;\r\n                            const bytesPerSplat = SplatBuffer.CompressionLevels[header.compressionLevel].BytesPerSplat;\r\n                            let loadedSplatsForSection = Math.floor(bytesPastSSectionSplatDataStart / bytesPerSplat);\r\n                            loadedSplatsForSection = Math.min(loadedSplatsForSection, sectionHeader.maxSplatCount);\r\n                            loadedSplatCount += loadedSplatsForSection;\r\n                            streamSplatBuffer.updateLoadedCounts(reachedSections, loadedSplatCount);\r\n                            streamSplatBuffer.updateSectionLoadedCounts(i, loadedSplatsForSection);\r\n                        } else {\r\n                            break;\r\n                        }\r\n                        sectionBase += sectionHeader.storageSizeBytes;\r\n                    }\r\n\r\n                    onSectionBuilt(streamSplatBuffer, loadComplete);\r\n\r\n                    if (loadComplete) {\r\n                        streamLoadCompleteResolver(streamSplatBuffer);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        const localOnProgress = (percent, percentStr, chunk) => {\r\n            if (chunk) {\r\n                chunks.push(chunk);\r\n                if (streamBuffer) {\r\n                    new Uint8Array(streamBuffer, numBytesLoaded, chunk.byteLength).set(new Uint8Array(chunk));\r\n                }\r\n                numBytesLoaded += chunk.byteLength;\r\n            }\r\n            if (streamLoadData) {\r\n                checkAndLoadHeader();\r\n                checkAndLoadSectionHeaders();\r\n                checkAndLoadSections();\r\n            }\r\n            if (onProgress) onProgress(percent, percentStr, LoaderStatus.Downloading);\r\n        };\r\n\r\n        return fetchWithProgress(fileName, localOnProgress, !streamLoadData).then((fullBuffer) => {\r\n            if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\r\n            const loadPromise = streamLoadData ? streamLoadPromise : KSplatLoader.loadFromFileData(fullBuffer);\r\n            return loadPromise.then((splatBuffer) => {\r\n                if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\r\n                return splatBuffer;\r\n            });\r\n        });\r\n    }\r\n\r\n    static loadFromFileData(fileData) {\r\n        return delayedExecute(() => {\r\n            KSplatLoader.checkVersion(fileData);\r\n            return new SplatBuffer(fileData);\r\n        });\r\n    }\r\n\r\n    static downloadFile = function() {\r\n\r\n        let downLoadLink;\r\n\r\n        return function(splatBuffer, fileName) {\r\n            const blob = new Blob([splatBuffer.bufferData], {\r\n                type: 'application/octet-stream',\r\n            });\r\n\r\n            if (!downLoadLink) {\r\n                downLoadLink = document.createElement('a');\r\n                document.body.appendChild(downLoadLink);\r\n            }\r\n            downLoadLink.download = fileName;\r\n            downLoadLink.href = URL.createObjectURL(blob);\r\n            downLoadLink.click();\r\n        };\r\n\r\n    }();\r\n\r\n}\r\n","export const SceneFormat = {\r\n    'Splat': 0,\r\n    'KSplat': 1,\r\n    'Ply': 2\r\n};\r\n","import { SceneFormat } from './SceneFormat.js';\r\n\r\nexport const sceneFormatFromPath = (path) => {\r\n    if (path.endsWith('.ply')) return SceneFormat.Ply;\r\n    else if (path.endsWith('.splat')) return SceneFormat.Splat;\r\n    else if (path.endsWith('.ksplat')) return SceneFormat.KSplat;\r\n    return null;\r\n};\r\n","/*\r\nCopyright © 2010-2024 three.js authors & Mark Kellogg\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n*/\r\n\r\nimport {\r\n    EventDispatcher,\r\n    MOUSE,\r\n    Quaternion,\r\n    Spherical,\r\n    TOUCH,\r\n    Vector2,\r\n    Vector3,\r\n    Plane,\r\n    Ray,\r\n    MathUtils\r\n} from 'three';\r\n\r\n// OrbitControls performs orbiting, dollying (zooming), and panning.\r\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\r\n//\r\n//    Orbit - left mouse / touch: one-finger move\r\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\r\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\r\n\r\nconst _changeEvent = { type: 'change' };\r\nconst _startEvent = { type: 'start' };\r\nconst _endEvent = { type: 'end' };\r\nconst _ray = new Ray();\r\nconst _plane = new Plane();\r\nconst TILT_LIMIT = Math.cos( 70 * MathUtils.DEG2RAD );\r\n\r\nclass OrbitControls extends EventDispatcher {\r\n\r\n    constructor( object, domElement ) {\r\n\r\n        super();\r\n\r\n        this.object = object;\r\n        this.domElement = domElement;\r\n        this.domElement.style.touchAction = 'none'; // disable touch scroll\r\n\r\n        // Set to false to disable this control\r\n        this.enabled = true;\r\n\r\n        // \"target\" sets the location of focus, where the object orbits around\r\n        this.target = new Vector3();\r\n\r\n        // How far you can dolly in and out ( PerspectiveCamera only )\r\n        this.minDistance = 0;\r\n        this.maxDistance = Infinity;\r\n\r\n        // How far you can zoom in and out ( OrthographicCamera only )\r\n        this.minZoom = 0;\r\n        this.maxZoom = Infinity;\r\n\r\n        // How far you can orbit vertically, upper and lower limits.\r\n        // Range is 0 to Math.PI radians.\r\n        this.minPolarAngle = 0; // radians\r\n        this.maxPolarAngle = Math.PI; // radians\r\n\r\n        // How far you can orbit horizontally, upper and lower limits.\r\n        // If set, the interval [min, max] must be a sub-interval of [- 2 PI, 2 PI], with ( max - min < 2 PI )\r\n        this.minAzimuthAngle = - Infinity; // radians\r\n        this.maxAzimuthAngle = Infinity; // radians\r\n\r\n        // Set to true to enable damping (inertia)\r\n        // If damping is enabled, you must call controls.update() in your animation loop\r\n        this.enableDamping = false;\r\n        this.dampingFactor = 0.05;\r\n\r\n        // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\r\n        // Set to false to disable zooming\r\n        this.enableZoom = true;\r\n        this.zoomSpeed = 1.0;\r\n\r\n        // Set to false to disable rotating\r\n        this.enableRotate = true;\r\n        this.rotateSpeed = 1.0;\r\n\r\n        // Set to false to disable panning\r\n        this.enablePan = true;\r\n        this.panSpeed = 1.0;\r\n        this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\r\n        this.keyPanSpeed = 7.0; // pixels moved per arrow key push\r\n        this.zoomToCursor = false;\r\n\r\n        // Set to true to automatically rotate around the target\r\n        // If auto-rotate is enabled, you must call controls.update() in your animation loop\r\n        this.autoRotate = false;\r\n        this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\r\n\r\n        // The four arrow keys\r\n        this.keys = { LEFT: 'KeyA', UP: 'KeyW', RIGHT: 'KeyD', BOTTOM: 'KeyS' };\r\n\r\n        // Mouse buttons\r\n        this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\r\n\r\n        // Touch fingers\r\n        this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\r\n\r\n        // for reset\r\n        this.target0 = this.target.clone();\r\n        this.position0 = this.object.position.clone();\r\n        this.zoom0 = this.object.zoom;\r\n\r\n        // the target DOM element for key events\r\n        this._domElementKeyEvents = null;\r\n\r\n        //\r\n        // public methods\r\n        //\r\n\r\n        this.getPolarAngle = function() {\r\n\r\n            return spherical.phi;\r\n\r\n        };\r\n\r\n        this.getAzimuthalAngle = function() {\r\n\r\n            return spherical.theta;\r\n\r\n        };\r\n\r\n        this.getDistance = function() {\r\n\r\n            return this.object.position.distanceTo( this.target );\r\n\r\n        };\r\n\r\n        this.listenToKeyEvents = function( domElement ) {\r\n\r\n            domElement.addEventListener( 'keydown', onKeyDown );\r\n            this._domElementKeyEvents = domElement;\r\n\r\n        };\r\n\r\n        this.stopListenToKeyEvents = function() {\r\n\r\n            this._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\r\n            this._domElementKeyEvents = null;\r\n\r\n        };\r\n\r\n        this.saveState = function() {\r\n\r\n            scope.target0.copy( scope.target );\r\n            scope.position0.copy( scope.object.position );\r\n            scope.zoom0 = scope.object.zoom;\r\n\r\n        };\r\n\r\n        this.reset = function() {\r\n\r\n            scope.target.copy( scope.target0 );\r\n            scope.object.position.copy( scope.position0 );\r\n            scope.object.zoom = scope.zoom0;\r\n\r\n            scope.object.updateProjectionMatrix();\r\n            scope.dispatchEvent( _changeEvent );\r\n\r\n            scope.update();\r\n\r\n            state = STATE.NONE;\r\n\r\n        };\r\n\r\n        // this method is exposed, but perhaps it would be better if we can make it private...\r\n        this.update = function() {\r\n\r\n            const offset = new Vector3();\r\n\r\n            // so camera.up is the orbit axis\r\n            const quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\r\n            const quatInverse = quat.clone().invert();\r\n\r\n            const lastPosition = new Vector3();\r\n            const lastQuaternion = new Quaternion();\r\n            const lastTargetPosition = new Vector3();\r\n\r\n            const twoPI = 2 * Math.PI;\r\n\r\n            return function update() {\r\n\r\n                quat.setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\r\n                quatInverse.copy(quat).invert();\r\n\r\n                const position = scope.object.position;\r\n\r\n                offset.copy( position ).sub( scope.target );\r\n\r\n                // rotate offset to \"y-axis-is-up\" space\r\n                offset.applyQuaternion( quat );\r\n\r\n                // angle from z-axis around y-axis\r\n                spherical.setFromVector3( offset );\r\n\r\n                if ( scope.autoRotate && state === STATE.NONE ) {\r\n\r\n                    rotateLeft( getAutoRotationAngle() );\r\n\r\n                }\r\n\r\n                if ( scope.enableDamping ) {\r\n\r\n                    spherical.theta += sphericalDelta.theta * scope.dampingFactor;\r\n                    spherical.phi += sphericalDelta.phi * scope.dampingFactor;\r\n\r\n                } else {\r\n\r\n                    spherical.theta += sphericalDelta.theta;\r\n                    spherical.phi += sphericalDelta.phi;\r\n\r\n                }\r\n\r\n                // restrict theta to be between desired limits\r\n\r\n                let min = scope.minAzimuthAngle;\r\n                let max = scope.maxAzimuthAngle;\r\n\r\n                if ( isFinite( min ) && isFinite( max ) ) {\r\n\r\n                    if ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;\r\n\r\n                    if ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;\r\n\r\n                    if ( min <= max ) {\r\n\r\n                        spherical.theta = Math.max( min, Math.min( max, spherical.theta ) );\r\n\r\n                    } else {\r\n\r\n                        spherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?\r\n                            Math.max( min, spherical.theta ) :\r\n                            Math.min( max, spherical.theta );\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                // restrict phi to be between desired limits\r\n                spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\r\n\r\n                spherical.makeSafe();\r\n\r\n\r\n                // move target to panned location\r\n\r\n                if ( scope.enableDamping === true ) {\r\n\r\n                    scope.target.addScaledVector( panOffset, scope.dampingFactor );\r\n\r\n                } else {\r\n\r\n                    scope.target.add( panOffset );\r\n\r\n                }\r\n\r\n                // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\r\n                // we adjust zoom later in these cases\r\n                if ( scope.zoomToCursor && performCursorZoom || scope.object.isOrthographicCamera ) {\r\n\r\n                    spherical.radius = clampDistance( spherical.radius );\r\n\r\n                } else {\r\n\r\n                    spherical.radius = clampDistance( spherical.radius * scale );\r\n\r\n                }\r\n\r\n\r\n                offset.setFromSpherical( spherical );\r\n\r\n                // rotate offset back to \"camera-up-vector-is-up\" space\r\n                offset.applyQuaternion( quatInverse );\r\n\r\n                position.copy( scope.target ).add( offset );\r\n\r\n                scope.object.lookAt( scope.target );\r\n\r\n                if ( scope.enableDamping === true ) {\r\n\r\n                    sphericalDelta.theta *= ( 1 - scope.dampingFactor );\r\n                    sphericalDelta.phi *= ( 1 - scope.dampingFactor );\r\n\r\n                    panOffset.multiplyScalar( 1 - scope.dampingFactor );\r\n\r\n                } else {\r\n\r\n                    sphericalDelta.set( 0, 0, 0 );\r\n\r\n                    panOffset.set( 0, 0, 0 );\r\n\r\n                }\r\n\r\n                // adjust camera position\r\n                let zoomChanged = false;\r\n                if ( scope.zoomToCursor && performCursorZoom ) {\r\n\r\n                    let newRadius = null;\r\n                    if ( scope.object.isPerspectiveCamera ) {\r\n\r\n                        // move the camera down the pointer ray\r\n                        // this method avoids floating point error\r\n                        const prevRadius = offset.length();\r\n                        newRadius = clampDistance( prevRadius * scale );\r\n\r\n                        const radiusDelta = prevRadius - newRadius;\r\n                        scope.object.position.addScaledVector( dollyDirection, radiusDelta );\r\n                        scope.object.updateMatrixWorld();\r\n\r\n                    } else if ( scope.object.isOrthographicCamera ) {\r\n\r\n                        // adjust the ortho camera position based on zoom changes\r\n                        const mouseBefore = new Vector3( mouse.x, mouse.y, 0 );\r\n                        mouseBefore.unproject( scope.object );\r\n\r\n                        scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\r\n                        scope.object.updateProjectionMatrix();\r\n                        zoomChanged = true;\r\n\r\n                        const mouseAfter = new Vector3( mouse.x, mouse.y, 0 );\r\n                        mouseAfter.unproject( scope.object );\r\n\r\n                        scope.object.position.sub( mouseAfter ).add( mouseBefore );\r\n                        scope.object.updateMatrixWorld();\r\n\r\n                        newRadius = offset.length();\r\n\r\n                    } else {\r\n\r\n                        console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.' );\r\n                        scope.zoomToCursor = false;\r\n\r\n                    }\r\n\r\n                    // handle the placement of the target\r\n                    if ( newRadius !== null ) {\r\n\r\n                        if ( this.screenSpacePanning ) {\r\n\r\n                            // position the orbit target in front of the new camera position\r\n                            scope.target.set( 0, 0, - 1 )\r\n                                .transformDirection( scope.object.matrix )\r\n                                .multiplyScalar( newRadius )\r\n                                .add( scope.object.position );\r\n\r\n                        } else {\r\n\r\n                            // get the ray and translation plane to compute target\r\n                            _ray.origin.copy( scope.object.position );\r\n                            _ray.direction.set( 0, 0, - 1 ).transformDirection( scope.object.matrix );\r\n\r\n                            // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\r\n                            // extremely large values\r\n                            if ( Math.abs( scope.object.up.dot( _ray.direction ) ) < TILT_LIMIT ) {\r\n\r\n                                object.lookAt( scope.target );\r\n\r\n                            } else {\r\n\r\n                                _plane.setFromNormalAndCoplanarPoint( scope.object.up, scope.target );\r\n                                _ray.intersectPlane( _plane, scope.target );\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                } else if ( scope.object.isOrthographicCamera ) {\r\n\r\n                    scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\r\n                    scope.object.updateProjectionMatrix();\r\n                    zoomChanged = true;\r\n\r\n                }\r\n\r\n                scale = 1;\r\n                performCursorZoom = false;\r\n\r\n                // update condition is:\r\n                // min(camera displacement, camera rotation in radians)^2 > EPS\r\n                // using small-angle approximation cos(x/2) = 1 - x^2 / 8\r\n\r\n                if ( zoomChanged ||\r\n                    lastPosition.distanceToSquared( scope.object.position ) > EPS ||\r\n                    8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ||\r\n                    lastTargetPosition.distanceToSquared( scope.target ) > 0 ) {\r\n\r\n                    scope.dispatchEvent( _changeEvent );\r\n\r\n                    lastPosition.copy( scope.object.position );\r\n                    lastQuaternion.copy( scope.object.quaternion );\r\n                    lastTargetPosition.copy( scope.target );\r\n\r\n                    zoomChanged = false;\r\n\r\n                    return true;\r\n\r\n                }\r\n\r\n                return false;\r\n\r\n            };\r\n\r\n        }();\r\n\r\n        this.dispose = function() {\r\n\r\n            scope.domElement.removeEventListener( 'contextmenu', onContextMenu );\r\n\r\n            scope.domElement.removeEventListener( 'pointerdown', onPointerDown );\r\n            scope.domElement.removeEventListener( 'pointercancel', onPointerUp );\r\n            scope.domElement.removeEventListener( 'wheel', onMouseWheel );\r\n\r\n            scope.domElement.removeEventListener( 'pointermove', onPointerMove );\r\n            scope.domElement.removeEventListener( 'pointerup', onPointerUp );\r\n\r\n\r\n            if ( scope._domElementKeyEvents !== null ) {\r\n\r\n                scope._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\r\n                scope._domElementKeyEvents = null;\r\n\r\n            }\r\n\r\n        };\r\n\r\n        this.clearDampedRotation = function() {\r\n            sphericalDelta.theta = 0.0;\r\n            sphericalDelta.phi = 0.0;\r\n        };\r\n\r\n        //\r\n        // internals\r\n        //\r\n\r\n        const scope = this;\r\n\r\n        const STATE = {\r\n            NONE: - 1,\r\n            ROTATE: 0,\r\n            DOLLY: 1,\r\n            PAN: 2,\r\n            TOUCH_ROTATE: 3,\r\n            TOUCH_PAN: 4,\r\n            TOUCH_DOLLY_PAN: 5,\r\n            TOUCH_DOLLY_ROTATE: 6\r\n        };\r\n\r\n        let state = STATE.NONE;\r\n\r\n        const EPS = 0.000001;\r\n\r\n        // current position in spherical coordinates\r\n        const spherical = new Spherical();\r\n        const sphericalDelta = new Spherical();\r\n\r\n        let scale = 1;\r\n        const panOffset = new Vector3();\r\n\r\n        const rotateStart = new Vector2();\r\n        const rotateEnd = new Vector2();\r\n        const rotateDelta = new Vector2();\r\n\r\n        const panStart = new Vector2();\r\n        const panEnd = new Vector2();\r\n        const panDelta = new Vector2();\r\n\r\n        const dollyStart = new Vector2();\r\n        const dollyEnd = new Vector2();\r\n        const dollyDelta = new Vector2();\r\n\r\n        const dollyDirection = new Vector3();\r\n        const mouse = new Vector2();\r\n        let performCursorZoom = false;\r\n\r\n        const pointers = [];\r\n        const pointerPositions = {};\r\n\r\n        function getAutoRotationAngle() {\r\n\r\n            return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\r\n\r\n        }\r\n\r\n        function getZoomScale() {\r\n\r\n            return Math.pow( 0.95, scope.zoomSpeed );\r\n\r\n        }\r\n\r\n        function rotateLeft( angle ) {\r\n\r\n            sphericalDelta.theta -= angle;\r\n\r\n        }\r\n\r\n        function rotateUp( angle ) {\r\n\r\n            sphericalDelta.phi -= angle;\r\n\r\n        }\r\n\r\n        const panLeft = function() {\r\n\r\n            const v = new Vector3();\r\n\r\n            return function panLeft( distance, objectMatrix ) {\r\n\r\n                v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\r\n                v.multiplyScalar( - distance );\r\n\r\n                panOffset.add( v );\r\n\r\n            };\r\n\r\n        }();\r\n\r\n        const panUp = function() {\r\n\r\n            const v = new Vector3();\r\n\r\n            return function panUp( distance, objectMatrix ) {\r\n\r\n                if ( scope.screenSpacePanning === true ) {\r\n\r\n                    v.setFromMatrixColumn( objectMatrix, 1 );\r\n\r\n                } else {\r\n\r\n                    v.setFromMatrixColumn( objectMatrix, 0 );\r\n                    v.crossVectors( scope.object.up, v );\r\n\r\n                }\r\n\r\n                v.multiplyScalar( distance );\r\n\r\n                panOffset.add( v );\r\n\r\n            };\r\n\r\n        }();\r\n\r\n        // deltaX and deltaY are in pixels; right and down are positive\r\n        const pan = function() {\r\n\r\n            const offset = new Vector3();\r\n\r\n            return function pan( deltaX, deltaY ) {\r\n\r\n                const element = scope.domElement;\r\n\r\n                if ( scope.object.isPerspectiveCamera ) {\r\n\r\n                    // perspective\r\n                    const position = scope.object.position;\r\n                    offset.copy( position ).sub( scope.target );\r\n                    let targetDistance = offset.length();\r\n\r\n                    // half of the fov is center to top of screen\r\n                    targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\r\n\r\n                    // we use only clientHeight here so aspect ratio does not distort speed\r\n                    panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\r\n                    panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\r\n\r\n                } else if ( scope.object.isOrthographicCamera ) {\r\n\r\n                    // orthographic\r\n                    panLeft( deltaX * ( scope.object.right - scope.object.left ) /\r\n                                        scope.object.zoom / element.clientWidth, scope.object.matrix );\r\n                    panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom /\r\n                                      element.clientHeight, scope.object.matrix );\r\n\r\n                } else {\r\n\r\n                    // camera neither orthographic nor perspective\r\n                    console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\r\n                    scope.enablePan = false;\r\n\r\n                }\r\n\r\n            };\r\n\r\n        }();\r\n\r\n        function dollyOut( dollyScale ) {\r\n\r\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\r\n\r\n                scale /= dollyScale;\r\n\r\n            } else {\r\n\r\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\r\n                scope.enableZoom = false;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function dollyIn( dollyScale ) {\r\n\r\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\r\n\r\n                scale *= dollyScale;\r\n\r\n            } else {\r\n\r\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\r\n                scope.enableZoom = false;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function updateMouseParameters( event ) {\r\n\r\n            if ( ! scope.zoomToCursor ) {\r\n\r\n                return;\r\n\r\n            }\r\n\r\n            performCursorZoom = true;\r\n\r\n            const rect = scope.domElement.getBoundingClientRect();\r\n            const x = event.clientX - rect.left;\r\n            const y = event.clientY - rect.top;\r\n            const w = rect.width;\r\n            const h = rect.height;\r\n\r\n            mouse.x = ( x / w ) * 2 - 1;\r\n            mouse.y = - ( y / h ) * 2 + 1;\r\n\r\n            dollyDirection.set( mouse.x, mouse.y, 1 ).unproject( object ).sub( object.position ).normalize();\r\n\r\n        }\r\n\r\n        function clampDistance( dist ) {\r\n\r\n            return Math.max( scope.minDistance, Math.min( scope.maxDistance, dist ) );\r\n\r\n        }\r\n\r\n        //\r\n        // event callbacks - update the object state\r\n        //\r\n\r\n        function handleMouseDownRotate( event ) {\r\n\r\n            rotateStart.set( event.clientX, event.clientY );\r\n\r\n        }\r\n\r\n        function handleMouseDownDolly( event ) {\r\n\r\n            updateMouseParameters( event );\r\n            dollyStart.set( event.clientX, event.clientY );\r\n\r\n        }\r\n\r\n        function handleMouseDownPan( event ) {\r\n\r\n            panStart.set( event.clientX, event.clientY );\r\n\r\n        }\r\n\r\n        function handleMouseMoveRotate( event ) {\r\n\r\n            rotateEnd.set( event.clientX, event.clientY );\r\n\r\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\r\n\r\n            const element = scope.domElement;\r\n\r\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\r\n\r\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\r\n\r\n            rotateStart.copy( rotateEnd );\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n        function handleMouseMoveDolly( event ) {\r\n\r\n            dollyEnd.set( event.clientX, event.clientY );\r\n\r\n            dollyDelta.subVectors( dollyEnd, dollyStart );\r\n\r\n            if ( dollyDelta.y > 0 ) {\r\n\r\n                dollyOut( getZoomScale() );\r\n\r\n            } else if ( dollyDelta.y < 0 ) {\r\n\r\n                dollyIn( getZoomScale() );\r\n\r\n            }\r\n\r\n            dollyStart.copy( dollyEnd );\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n        function handleMouseMovePan( event ) {\r\n\r\n            panEnd.set( event.clientX, event.clientY );\r\n\r\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\r\n\r\n            pan( panDelta.x, panDelta.y );\r\n\r\n            panStart.copy( panEnd );\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n        function handleMouseWheel( event ) {\r\n\r\n            updateMouseParameters( event );\r\n\r\n            if ( event.deltaY < 0 ) {\r\n\r\n                dollyIn( getZoomScale() );\r\n\r\n            } else if ( event.deltaY > 0 ) {\r\n\r\n                dollyOut( getZoomScale() );\r\n\r\n            }\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n        function handleKeyDown( event ) {\r\n\r\n            let needsUpdate = false;\r\n\r\n            switch ( event.code ) {\r\n\r\n                case scope.keys.UP:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        rotateUp( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\r\n\r\n                    } else {\r\n\r\n                        pan( 0, scope.keyPanSpeed );\r\n\r\n                    }\r\n\r\n                    needsUpdate = true;\r\n                    break;\r\n\r\n                case scope.keys.BOTTOM:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        rotateUp( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\r\n\r\n                    } else {\r\n\r\n                        pan( 0, - scope.keyPanSpeed );\r\n\r\n                    }\r\n\r\n                    needsUpdate = true;\r\n                    break;\r\n\r\n                case scope.keys.LEFT:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        rotateLeft( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\r\n\r\n                    } else {\r\n\r\n                        pan( scope.keyPanSpeed, 0 );\r\n\r\n                    }\r\n\r\n                    needsUpdate = true;\r\n                    break;\r\n\r\n                case scope.keys.RIGHT:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        rotateLeft( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\r\n\r\n                    } else {\r\n\r\n                        pan( - scope.keyPanSpeed, 0 );\r\n\r\n                    }\r\n\r\n                    needsUpdate = true;\r\n                    break;\r\n\r\n            }\r\n\r\n            if ( needsUpdate ) {\r\n\r\n                // prevent the browser from scrolling on cursor keys\r\n                event.preventDefault();\r\n\r\n                scope.update();\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n        function handleTouchStartRotate() {\r\n\r\n            if ( pointers.length === 1 ) {\r\n\r\n                rotateStart.set( pointers[0].pageX, pointers[0].pageY );\r\n\r\n            } else {\r\n\r\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\r\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\r\n\r\n                rotateStart.set( x, y );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function handleTouchStartPan() {\r\n\r\n            if ( pointers.length === 1 ) {\r\n\r\n                panStart.set( pointers[0].pageX, pointers[0].pageY );\r\n\r\n            } else {\r\n\r\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\r\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\r\n\r\n                panStart.set( x, y );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function handleTouchStartDolly() {\r\n\r\n            const dx = pointers[0].pageX - pointers[1].pageX;\r\n            const dy = pointers[0].pageY - pointers[1].pageY;\r\n\r\n            const distance = Math.sqrt( dx * dx + dy * dy );\r\n\r\n            dollyStart.set( 0, distance );\r\n\r\n        }\r\n\r\n        function handleTouchStartDollyPan() {\r\n\r\n            if ( scope.enableZoom ) handleTouchStartDolly();\r\n\r\n            if ( scope.enablePan ) handleTouchStartPan();\r\n\r\n        }\r\n\r\n        function handleTouchStartDollyRotate() {\r\n\r\n            if ( scope.enableZoom ) handleTouchStartDolly();\r\n\r\n            if ( scope.enableRotate ) handleTouchStartRotate();\r\n\r\n        }\r\n\r\n        function handleTouchMoveRotate( event ) {\r\n\r\n            if ( pointers.length == 1 ) {\r\n\r\n                rotateEnd.set( event.pageX, event.pageY );\r\n\r\n            } else {\r\n\r\n                const position = getSecondPointerPosition( event );\r\n\r\n                const x = 0.5 * ( event.pageX + position.x );\r\n                const y = 0.5 * ( event.pageY + position.y );\r\n\r\n                rotateEnd.set( x, y );\r\n\r\n            }\r\n\r\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\r\n\r\n            const element = scope.domElement;\r\n\r\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\r\n\r\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\r\n\r\n            rotateStart.copy( rotateEnd );\r\n\r\n        }\r\n\r\n        function handleTouchMovePan( event ) {\r\n\r\n            if ( pointers.length === 1 ) {\r\n\r\n                panEnd.set( event.pageX, event.pageY );\r\n\r\n            } else {\r\n\r\n                const position = getSecondPointerPosition( event );\r\n\r\n                const x = 0.5 * ( event.pageX + position.x );\r\n                const y = 0.5 * ( event.pageY + position.y );\r\n\r\n                panEnd.set( x, y );\r\n\r\n            }\r\n\r\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\r\n\r\n            pan( panDelta.x, panDelta.y );\r\n\r\n            panStart.copy( panEnd );\r\n\r\n        }\r\n\r\n        function handleTouchMoveDolly( event ) {\r\n\r\n            const position = getSecondPointerPosition( event );\r\n\r\n            const dx = event.pageX - position.x;\r\n            const dy = event.pageY - position.y;\r\n\r\n            const distance = Math.sqrt( dx * dx + dy * dy );\r\n\r\n            dollyEnd.set( 0, distance );\r\n\r\n            dollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\r\n\r\n            dollyOut( dollyDelta.y );\r\n\r\n            dollyStart.copy( dollyEnd );\r\n\r\n        }\r\n\r\n        function handleTouchMoveDollyPan( event ) {\r\n\r\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\r\n\r\n            if ( scope.enablePan ) handleTouchMovePan( event );\r\n\r\n        }\r\n\r\n        function handleTouchMoveDollyRotate( event ) {\r\n\r\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\r\n\r\n            if ( scope.enableRotate ) handleTouchMoveRotate( event );\r\n\r\n        }\r\n\r\n        //\r\n        // event handlers - FSM: listen for events and reset state\r\n        //\r\n\r\n        function onPointerDown( event ) {\r\n\r\n            if ( scope.enabled === false ) return;\r\n\r\n            if ( pointers.length === 0 ) {\r\n\r\n                scope.domElement.setPointerCapture( event.pointerId );\r\n\r\n                scope.domElement.addEventListener( 'pointermove', onPointerMove );\r\n                scope.domElement.addEventListener( 'pointerup', onPointerUp );\r\n\r\n            }\r\n\r\n            //\r\n\r\n            addPointer( event );\r\n\r\n            if ( event.pointerType === 'touch' ) {\r\n\r\n                onTouchStart( event );\r\n\r\n            } else {\r\n\r\n                onMouseDown( event );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onPointerMove( event ) {\r\n\r\n            if ( scope.enabled === false ) return;\r\n\r\n            if ( event.pointerType === 'touch' ) {\r\n\r\n                onTouchMove( event );\r\n\r\n            } else {\r\n\r\n                onMouseMove( event );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onPointerUp( event ) {\r\n\r\n            removePointer( event );\r\n\r\n            if ( pointers.length === 0 ) {\r\n\r\n                scope.domElement.releasePointerCapture( event.pointerId );\r\n\r\n                scope.domElement.removeEventListener( 'pointermove', onPointerMove );\r\n                scope.domElement.removeEventListener( 'pointerup', onPointerUp );\r\n\r\n            }\r\n\r\n            scope.dispatchEvent( _endEvent );\r\n\r\n            state = STATE.NONE;\r\n\r\n        }\r\n\r\n        function onMouseDown( event ) {\r\n\r\n            let mouseAction;\r\n\r\n            switch ( event.button ) {\r\n\r\n                case 0:\r\n\r\n                    mouseAction = scope.mouseButtons.LEFT;\r\n                    break;\r\n\r\n                case 1:\r\n\r\n                    mouseAction = scope.mouseButtons.MIDDLE;\r\n                    break;\r\n\r\n                case 2:\r\n\r\n                    mouseAction = scope.mouseButtons.RIGHT;\r\n                    break;\r\n\r\n                default:\r\n\r\n                    mouseAction = - 1;\r\n\r\n            }\r\n\r\n            switch ( mouseAction ) {\r\n\r\n                case MOUSE.DOLLY:\r\n\r\n                    if ( scope.enableZoom === false ) return;\r\n\r\n                    handleMouseDownDolly( event );\r\n\r\n                    state = STATE.DOLLY;\r\n\r\n                    break;\r\n\r\n                case MOUSE.ROTATE:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        if ( scope.enablePan === false ) return;\r\n\r\n                        handleMouseDownPan( event );\r\n\r\n                        state = STATE.PAN;\r\n\r\n                    } else {\r\n\r\n                        if ( scope.enableRotate === false ) return;\r\n\r\n                        handleMouseDownRotate( event );\r\n\r\n                        state = STATE.ROTATE;\r\n\r\n                    }\r\n\r\n                    break;\r\n\r\n                case MOUSE.PAN:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        if ( scope.enableRotate === false ) return;\r\n\r\n                        handleMouseDownRotate( event );\r\n\r\n                        state = STATE.ROTATE;\r\n\r\n                    } else {\r\n\r\n                        if ( scope.enablePan === false ) return;\r\n\r\n                        handleMouseDownPan( event );\r\n\r\n                        state = STATE.PAN;\r\n\r\n                    }\r\n\r\n                    break;\r\n\r\n                default:\r\n\r\n                    state = STATE.NONE;\r\n\r\n            }\r\n\r\n            if ( state !== STATE.NONE ) {\r\n\r\n                scope.dispatchEvent( _startEvent );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onMouseMove( event ) {\r\n\r\n            switch ( state ) {\r\n\r\n                case STATE.ROTATE:\r\n\r\n                    if ( scope.enableRotate === false ) return;\r\n\r\n                    handleMouseMoveRotate( event );\r\n\r\n                    break;\r\n\r\n                case STATE.DOLLY:\r\n\r\n                    if ( scope.enableZoom === false ) return;\r\n\r\n                    handleMouseMoveDolly( event );\r\n\r\n                    break;\r\n\r\n                case STATE.PAN:\r\n\r\n                    if ( scope.enablePan === false ) return;\r\n\r\n                    handleMouseMovePan( event );\r\n\r\n                    break;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onMouseWheel( event ) {\r\n\r\n            if ( scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE ) return;\r\n\r\n            event.preventDefault();\r\n\r\n            scope.dispatchEvent( _startEvent );\r\n\r\n            handleMouseWheel( event );\r\n\r\n            scope.dispatchEvent( _endEvent );\r\n\r\n        }\r\n\r\n        function onKeyDown( event ) {\r\n\r\n            if ( scope.enabled === false || scope.enablePan === false ) return;\r\n\r\n            handleKeyDown( event );\r\n\r\n        }\r\n\r\n        function onTouchStart( event ) {\r\n\r\n            trackPointer( event );\r\n\r\n            switch ( pointers.length ) {\r\n\r\n                case 1:\r\n\r\n                    switch ( scope.touches.ONE ) {\r\n\r\n                        case TOUCH.ROTATE:\r\n\r\n                            if ( scope.enableRotate === false ) return;\r\n\r\n                            handleTouchStartRotate();\r\n\r\n                            state = STATE.TOUCH_ROTATE;\r\n\r\n                            break;\r\n\r\n                        case TOUCH.PAN:\r\n\r\n                            if ( scope.enablePan === false ) return;\r\n\r\n                            handleTouchStartPan();\r\n\r\n                            state = STATE.TOUCH_PAN;\r\n\r\n                            break;\r\n\r\n                        default:\r\n\r\n                            state = STATE.NONE;\r\n\r\n                    }\r\n\r\n                    break;\r\n\r\n                case 2:\r\n\r\n                    switch ( scope.touches.TWO ) {\r\n\r\n                        case TOUCH.DOLLY_PAN:\r\n\r\n                            if ( scope.enableZoom === false && scope.enablePan === false ) return;\r\n\r\n                            handleTouchStartDollyPan();\r\n\r\n                            state = STATE.TOUCH_DOLLY_PAN;\r\n\r\n                            break;\r\n\r\n                        case TOUCH.DOLLY_ROTATE:\r\n\r\n                            if ( scope.enableZoom === false && scope.enableRotate === false ) return;\r\n\r\n                            handleTouchStartDollyRotate();\r\n\r\n                            state = STATE.TOUCH_DOLLY_ROTATE;\r\n\r\n                            break;\r\n\r\n                        default:\r\n\r\n                            state = STATE.NONE;\r\n\r\n                    }\r\n\r\n                    break;\r\n\r\n                default:\r\n\r\n                    state = STATE.NONE;\r\n\r\n            }\r\n\r\n            if ( state !== STATE.NONE ) {\r\n\r\n                scope.dispatchEvent( _startEvent );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onTouchMove( event ) {\r\n\r\n            trackPointer( event );\r\n\r\n            switch ( state ) {\r\n\r\n                case STATE.TOUCH_ROTATE:\r\n\r\n                    if ( scope.enableRotate === false ) return;\r\n\r\n                    handleTouchMoveRotate( event );\r\n\r\n                    scope.update();\r\n\r\n                    break;\r\n\r\n                case STATE.TOUCH_PAN:\r\n\r\n                    if ( scope.enablePan === false ) return;\r\n\r\n                    handleTouchMovePan( event );\r\n\r\n                    scope.update();\r\n\r\n                    break;\r\n\r\n                case STATE.TOUCH_DOLLY_PAN:\r\n\r\n                    if ( scope.enableZoom === false && scope.enablePan === false ) return;\r\n\r\n                    handleTouchMoveDollyPan( event );\r\n\r\n                    scope.update();\r\n\r\n                    break;\r\n\r\n                case STATE.TOUCH_DOLLY_ROTATE:\r\n\r\n                    if ( scope.enableZoom === false && scope.enableRotate === false ) return;\r\n\r\n                    handleTouchMoveDollyRotate( event );\r\n\r\n                    scope.update();\r\n\r\n                    break;\r\n\r\n                default:\r\n\r\n                    state = STATE.NONE;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onContextMenu( event ) {\r\n\r\n            if ( scope.enabled === false ) return;\r\n\r\n            event.preventDefault();\r\n\r\n        }\r\n\r\n        function addPointer( event ) {\r\n\r\n            pointers.push( event );\r\n\r\n        }\r\n\r\n        function removePointer( event ) {\r\n\r\n            delete pointerPositions[event.pointerId];\r\n\r\n            for ( let i = 0; i < pointers.length; i ++ ) {\r\n\r\n                if ( pointers[i].pointerId == event.pointerId ) {\r\n\r\n                    pointers.splice( i, 1 );\r\n                    return;\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function trackPointer( event ) {\r\n\r\n            let position = pointerPositions[event.pointerId];\r\n\r\n            if ( position === undefined ) {\r\n\r\n                position = new Vector2();\r\n                pointerPositions[event.pointerId] = position;\r\n\r\n            }\r\n\r\n            position.set( event.pageX, event.pageY );\r\n\r\n        }\r\n\r\n        function getSecondPointerPosition( event ) {\r\n\r\n            const pointer = ( event.pointerId === pointers[0].pointerId ) ? pointers[1] : pointers[0];\r\n\r\n            return pointerPositions[pointer.pointerId];\r\n\r\n        }\r\n\r\n        //\r\n\r\n        scope.domElement.addEventListener( 'contextmenu', onContextMenu );\r\n\r\n        scope.domElement.addEventListener( 'pointerdown', onPointerDown );\r\n        scope.domElement.addEventListener( 'pointercancel', onPointerUp );\r\n        scope.domElement.addEventListener( 'wheel', onMouseWheel, { passive: false } );\r\n\r\n        // force an update at start\r\n\r\n        this.update();\r\n\r\n    }\r\n\r\n}\r\n\r\nexport { OrbitControls };\r\n","import { fadeElement } from './Util.js';\r\n\r\nconst STANDARD_FADE_DURATION = 500;\r\n\r\nexport class LoadingSpinner {\r\n\r\n    static elementIDGen = 0;\r\n\r\n    constructor(message, container) {\r\n\r\n        this.taskIDGen = 0;\r\n        this.elementID = LoadingSpinner.elementIDGen++;\r\n\r\n        this.tasks = [];\r\n\r\n        this.message = message || 'Loading...';\r\n        this.container = container || document.body;\r\n\r\n        this.spinnerContainerOuter = document.createElement('div');\r\n        this.spinnerContainerOuter.className = `spinnerOuterContainer${this.elementID}`;\r\n        this.spinnerContainerOuter.style.display = 'none';\r\n\r\n        this.spinnerContainerPrimary = document.createElement('div');\r\n        this.spinnerContainerPrimary.className = `spinnerContainerPrimary${this.elementID}`;\r\n        this.spinnerPrimary = document.createElement('div');\r\n        this.spinnerPrimary.classList.add(`spinner${this.elementID}`, `spinnerPrimary${this.elementID}`);\r\n        this.messageContainerPrimary = document.createElement('div');\r\n        this.messageContainerPrimary.classList.add(`messageContainer${this.elementID}`, `messageContainerPrimary${this.elementID}`);\r\n        this.messageContainerPrimary.innerHTML = this.message;\r\n\r\n        this.spinnerContainerMin = document.createElement('div');\r\n        this.spinnerContainerMin.className = `spinnerContainerMin${this.elementID}`;\r\n        this.spinnerMin = document.createElement('div');\r\n        this.spinnerMin.classList.add(`spinner${this.elementID}`, `spinnerMin${this.elementID}`);\r\n        this.messageContainerMin = document.createElement('div');\r\n        this.messageContainerMin.classList.add(`messageContainer${this.elementID}`, `messageContainerMin${this.elementID}`);\r\n        this.messageContainerMin.innerHTML = this.message;\r\n\r\n        this.spinnerContainerPrimary.appendChild(this.spinnerPrimary);\r\n        this.spinnerContainerPrimary.appendChild(this.messageContainerPrimary);\r\n        this.spinnerContainerOuter.appendChild(this.spinnerContainerPrimary);\r\n\r\n        this.spinnerContainerMin.appendChild(this.spinnerMin);\r\n        this.spinnerContainerMin.appendChild(this.messageContainerMin);\r\n        this.spinnerContainerOuter.appendChild(this.spinnerContainerMin);\r\n\r\n        const style = document.createElement('style');\r\n        style.innerHTML = `\r\n\r\n            .spinnerOuterContainer${this.elementID} {\r\n                width: 100%;\r\n                height: 100%;\r\n                margin: 0;\r\n                top: 0;\r\n                left: 0;\r\n                position: absolute;\r\n                pointer-events: none;\r\n            }\r\n\r\n            .messageContainer${this.elementID} {\r\n                height: 20px;\r\n                font-family: arial;\r\n                font-size: 12pt;\r\n                color: #ffffff;\r\n                text-align: center;\r\n                vertical-align: middle;\r\n            }\r\n\r\n            .spinner${this.elementID} {\r\n                padding: 15px;\r\n                background: #07e8d6;\r\n                z-index:99999;\r\n            \r\n                aspect-ratio: 1;\r\n                border-radius: 50%;\r\n                --_m: \r\n                    conic-gradient(#0000,#000),\r\n                    linear-gradient(#000 0 0) content-box;\r\n                -webkit-mask: var(--_m);\r\n                    mask: var(--_m);\r\n                -webkit-mask-composite: source-out;\r\n                    mask-composite: subtract;\r\n                box-sizing: border-box;\r\n                animation: load 1s linear infinite;\r\n            }\r\n\r\n            .spinnerContainerPrimary${this.elementID} {\r\n                z-index:99999;\r\n                background-color: rgba(128, 128, 128, 0.75);\r\n                border: #666666 1px solid;\r\n                border-radius: 5px;\r\n                padding-top: 20px;\r\n                padding-bottom: 10px;\r\n                margin: 0;\r\n                position: absolute;\r\n                top: 50%;\r\n                left: 50%;\r\n                transform: translate(-80px, -80px);\r\n                width: 180px;\r\n                pointer-events: auto;\r\n            }\r\n\r\n            .spinnerPrimary${this.elementID} {\r\n                width: 120px;\r\n                margin-left: 30px;\r\n            }\r\n\r\n            .messageContainerPrimary${this.elementID} {\r\n                padding-top: 15px;\r\n            }\r\n\r\n            .spinnerContainerMin${this.elementID} {\r\n                z-index:99999;\r\n                background-color: rgba(128, 128, 128, 0.75);\r\n                border: #666666 1px solid;\r\n                border-radius: 5px;\r\n                padding-top: 20px;\r\n                padding-bottom: 15px;\r\n                margin: 0;\r\n                position: absolute;\r\n                bottom: 50px;\r\n                left: 50%;\r\n                transform: translate(-50%, 0);\r\n                display: flex;\r\n                flex-direction: left;\r\n                pointer-events: auto;\r\n                min-width: 250px;\r\n            }\r\n\r\n            .messageContainerMin${this.elementID} {\r\n                margin-right: 15px;\r\n            }\r\n\r\n            .spinnerMin${this.elementID} {\r\n                width: 50px;\r\n                height: 50px;\r\n                margin-left: 15px;\r\n                margin-right: 25px;\r\n            }\r\n\r\n            .messageContainerMin${this.elementID} {\r\n                padding-top: 15px;\r\n            }\r\n            \r\n            @keyframes load {\r\n                to{transform: rotate(1turn)}\r\n            }\r\n\r\n        `;\r\n        this.spinnerContainerOuter.appendChild(style);\r\n        this.container.appendChild(this.spinnerContainerOuter);\r\n\r\n        this.setMinimized(false, true);\r\n\r\n        this.fadeTransitions = [];\r\n    }\r\n\r\n    addTask(message) {\r\n        const newTask = {\r\n            'message': message,\r\n            'id': this.taskIDGen++\r\n        };\r\n        this.tasks.push(newTask);\r\n        this.update();\r\n        return newTask.id;\r\n    }\r\n\r\n    removeTask(id) {\r\n        let index = 0;\r\n        for (let task of this.tasks) {\r\n            if (task.id === id) {\r\n                this.tasks.splice(index, 1);\r\n                break;\r\n            }\r\n            index++;\r\n        }\r\n        this.update();\r\n    }\r\n\r\n    removeAllTasks() {\r\n        this.tasks = [];\r\n        this.update();\r\n    }\r\n\r\n    setMessageForTask(id, message) {\r\n        for (let task of this.tasks) {\r\n            if (task.id === id) {\r\n                task.message = message;\r\n                break;\r\n            }\r\n        }\r\n        this.update();\r\n    }\r\n\r\n    update() {\r\n        if (this.tasks.length > 0) {\r\n            this.show();\r\n            this.setMessage(this.tasks[this.tasks.length - 1].message);\r\n        } else {\r\n            this.hide();\r\n        }\r\n    }\r\n\r\n    show() {\r\n        this.spinnerContainerOuter.style.display = 'block';\r\n        this.visible = true;\r\n    }\r\n\r\n    hide() {\r\n        this.spinnerContainerOuter.style.display = 'none';\r\n        this.visible = false;\r\n    }\r\n\r\n    setContainer(container) {\r\n        if (this.container) {\r\n            this.container.removeChild(this.spinnerContainerOuter);\r\n        }\r\n        if (container) {\r\n            this.container = container;\r\n            this.container.appendChild(this.spinnerContainerOuter);\r\n            this.spinnerContainerOuter.style.zIndex = this.container.style.zIndex + 1;\r\n        }\r\n    }\r\n\r\n    setMinimized(minimized, instant) {\r\n        const showHideSpinner = (element, show, instant, displayStyle, fadeTransitionsIndex) => {\r\n            if (instant) {\r\n                element.style.display = show ? displayStyle : 'none';\r\n            } else {\r\n                this.fadeTransitions[fadeTransitionsIndex] = fadeElement(element, !show, displayStyle, STANDARD_FADE_DURATION, () => {\r\n                    this.fadeTransitions[fadeTransitionsIndex] = null;\r\n                });\r\n            }\r\n        };\r\n        showHideSpinner(this.spinnerContainerPrimary, !minimized, instant, 'block', 0);\r\n        showHideSpinner(this.spinnerContainerMin, minimized, instant, 'flex', 1);\r\n        this.minimized = minimized;\r\n    }\r\n\r\n    setMessage(msg) {\r\n        this.messageContainerPrimary.innerHTML = msg;\r\n        this.messageContainerMin.innerHTML = msg;\r\n    }\r\n}\r\n","export const fadeElement = (element, out, displayStyle, duration, onComplete) => {\r\n    const startTime = performance.now();\r\n\r\n    let startOpacity = element.style.display === 'none' ? 0 : parseFloat(element.style.opacity);\r\n    if (isNaN(startOpacity)) startOpacity = 1;\r\n\r\n    const interval = window.setInterval(() => {\r\n        const currentTime = performance.now();\r\n        const elapsed = currentTime - startTime;\r\n\r\n        let t = Math.min(elapsed / duration, 1.0);\r\n        if (t > 0.999) t = 1;\r\n\r\n        let opacity;\r\n        if (out) {\r\n            opacity = (1.0 - t) * startOpacity;\r\n            if (opacity < 0.0001) opacity = 0;\r\n        } else {\r\n            opacity = (1.0 - startOpacity) * t + startOpacity;\r\n        }\r\n\r\n        if (opacity > 0) {\r\n            element.style.display = displayStyle;\r\n            element.style.opacity = opacity;\r\n        } else {\r\n            element.style.display = 'none';\r\n        }\r\n\r\n        if (t >= 1) {\r\n            if (onComplete) onComplete();\r\n            window.clearInterval(interval);\r\n        }\r\n    }, 16);\r\n    return interval;\r\n};\r\n\r\nexport const cancelFade = (interval) => {\r\n    window.clearInterval(interval);\r\n};\r\n","export class LoadingProgressBar {\r\n\r\n    constructor(container) {\r\n\r\n        this.idGen = 0;\r\n\r\n        this.tasks = [];\r\n\r\n        this.container = container || document.body;\r\n\r\n        this.progressBarContainerOuter = document.createElement('div');\r\n        this.progressBarContainerOuter.className = 'progressBarOuterContainer';\r\n        this.progressBarContainerOuter.style.display = 'none';\r\n\r\n        this.progressBarBox = document.createElement('div');\r\n        this.progressBarBox.className = 'progressBarBox';\r\n\r\n        this.progressBarBackground = document.createElement('div');\r\n        this.progressBarBackground.className = 'progressBarBackground';\r\n\r\n        this.progressBar = document.createElement('div');\r\n        this.progressBar.className = 'progressBar';\r\n\r\n        this.progressBarBackground.appendChild(this.progressBar);\r\n        this.progressBarBox.appendChild(this.progressBarBackground);\r\n        this.progressBarContainerOuter.appendChild(this.progressBarBox);\r\n\r\n        const style = document.createElement('style');\r\n        style.innerHTML = `\r\n\r\n            .progressBarOuterContainer {\r\n                width: 100%;\r\n                height: 100%;\r\n                margin: 0;\r\n                top: 0;\r\n                left: 0;\r\n                position: absolute;\r\n                pointer-events: none;\r\n            }\r\n\r\n            .progressBarBox {\r\n                z-index:99999;\r\n                padding: 7px 9px 5px 7px;\r\n                background-color: rgba(190, 190, 190, 0.75);\r\n                border: #555555 1px solid;\r\n                border-radius: 15px;\r\n                margin: 0;\r\n                position: absolute;\r\n                bottom: 50px;\r\n                left: 50%;\r\n                transform: translate(-50%, 0);\r\n                width: 180px;\r\n                height: 30px;\r\n                pointer-events: auto;\r\n            }\r\n\r\n            .progressBarBackground {\r\n                width: 100%;\r\n                height: 25px;\r\n                border-radius:10px;\r\n                background-color: rgba(128, 128, 128, 0.75);\r\n                border: #444444 1px solid;\r\n                box-shadow: inset 0 0 10px #333333;\r\n            }\r\n\r\n            .progressBar {\r\n                height: 25px;\r\n                width: 0px;\r\n                border-radius:10px;\r\n                background-color: rgba(0, 200, 0, 0.75);\r\n                box-shadow: inset 0 0 10px #003300;\r\n            }\r\n\r\n        `;\r\n        this.progressBarContainerOuter.appendChild(style);\r\n        this.container.appendChild(this.progressBarContainerOuter);\r\n    }\r\n\r\n    show() {\r\n        this.progressBarContainerOuter.style.display = 'block';\r\n    }\r\n\r\n    hide() {\r\n        this.progressBarContainerOuter.style.display = 'none';\r\n    }\r\n\r\n    setProgress(progress) {\r\n        this.progressBar.style.width = progress + '%';\r\n    }\r\n\r\n    setContainer(container) {\r\n        if (this.container) {\r\n            this.container.removeChild(this.progressBarContainerOuter);\r\n        }\r\n        if (container) {\r\n            this.container = container;\r\n            this.container.appendChild(this.progressBarContainerOuter);\r\n            this.progressBarContainerOuter.style.zIndex = this.container.style.zIndex + 1;\r\n        }\r\n    }\r\n\r\n}\r\n","export class InfoPanel {\r\n\r\n    constructor(container) {\r\n\r\n        this.container = container || document.body;\r\n\r\n        this.infoCells = {};\r\n\r\n        const layout = [\r\n            ['Camera position', 'cameraPosition'],\r\n            ['Camera look-at', 'cameraLookAt'],\r\n            ['Camera up', 'cameraUp'],\r\n            ['Camera mode', 'orthographicCamera'],\r\n            ['Cursor position', 'cursorPosition'],\r\n            ['FPS', 'fps'],\r\n            ['Rendering:', 'renderSplatCount'],\r\n            ['Sort time', 'sortTime'],\r\n            ['Render window', 'renderWindow'],\r\n            ['Focal adjustment', 'focalAdjustment'],\r\n            ['Splat scale', 'splatScale'],\r\n            ['Point cloud mode', 'pointCloudMode']\r\n        ];\r\n\r\n        this.infoPanelContainer = document.createElement('div');\r\n        const style = document.createElement('style');\r\n        style.innerHTML = `\r\n\r\n            .infoPanel {\r\n                width: 430px;\r\n                padding: 10px;\r\n                background-color: rgba(50, 50, 50, 0.85);\r\n                border: #555555 2px solid;\r\n                color: #dddddd;\r\n                border-radius: 10px;\r\n                z-index: 9999;\r\n                font-family: arial;\r\n                font-size: 11pt;\r\n                text-align: left;\r\n                margin: 0;\r\n                top: 10px;\r\n                left:10px;\r\n                position: absolute;\r\n                pointer-events: auto;\r\n            }\r\n\r\n            .info-panel-cell {\r\n                margin-bottom: 5px;\r\n                padding-bottom: 2px;\r\n            }\r\n\r\n            .label-cell {\r\n                font-weight: bold;\r\n                font-size: 12pt;\r\n                width: 140px;\r\n            }\r\n\r\n        `;\r\n        this.infoPanelContainer.append(style);\r\n\r\n        this.infoPanel = document.createElement('div');\r\n        this.infoPanel.className = 'infoPanel';\r\n\r\n        const infoTable = document.createElement('div');\r\n        infoTable.style.display = 'table';\r\n\r\n        for (let layoutEntry of layout) {\r\n            const row = document.createElement('div');\r\n            row.style.display = 'table-row';\r\n            row.className = 'info-panel-row';\r\n\r\n            const labelCell = document.createElement('div');\r\n            labelCell.style.display = 'table-cell';\r\n            labelCell.innerHTML = `${layoutEntry[0]}: `;\r\n            labelCell.classList.add('info-panel-cell', 'label-cell');\r\n\r\n            const spacerCell = document.createElement('div');\r\n            spacerCell.style.display = 'table-cell';\r\n            spacerCell.style.width = '10px';\r\n            spacerCell.innerHTML = ' ';\r\n            spacerCell.className = 'info-panel-cell';\r\n\r\n            const infoCell = document.createElement('div');\r\n            infoCell.style.display = 'table-cell';\r\n            infoCell.innerHTML = '';\r\n            infoCell.className = 'info-panel-cell';\r\n\r\n            this.infoCells[layoutEntry[1]] = infoCell;\r\n\r\n            row.appendChild(labelCell);\r\n            row.appendChild(spacerCell);\r\n            row.appendChild(infoCell);\r\n\r\n            infoTable.appendChild(row);\r\n        }\r\n\r\n        this.infoPanel.appendChild(infoTable);\r\n        this.infoPanelContainer.append(this.infoPanel);\r\n        this.infoPanelContainer.style.display = 'none';\r\n        this.container.appendChild(this.infoPanelContainer);\r\n\r\n        this.visible = false;\r\n    }\r\n\r\n    update = function(renderDimensions, cameraPosition, cameraLookAtPosition, cameraUp, orthographicCamera,\r\n                      meshCursorPosition, currentFPS, splatCount, splatRenderCount,\r\n                      splatRenderCountPct, lastSortTime, focalAdjustment, splatScale, pointCloudMode) {\r\n\r\n        const cameraPosString = `${cameraPosition.x.toFixed(5)}, ${cameraPosition.y.toFixed(5)}, ${cameraPosition.z.toFixed(5)}`;\r\n        if (this.infoCells.cameraPosition.innerHTML !== cameraPosString) {\r\n            this.infoCells.cameraPosition.innerHTML = cameraPosString;\r\n        }\r\n\r\n        if (cameraLookAtPosition) {\r\n            const cla = cameraLookAtPosition;\r\n            const cameraLookAtString = `${cla.x.toFixed(5)}, ${cla.y.toFixed(5)}, ${cla.z.toFixed(5)}`;\r\n            if (this.infoCells.cameraLookAt.innerHTML !== cameraLookAtString) {\r\n                this.infoCells.cameraLookAt.innerHTML = cameraLookAtString;\r\n            }\r\n        }\r\n\r\n        const cameraUpString = `${cameraUp.x.toFixed(5)}, ${cameraUp.y.toFixed(5)}, ${cameraUp.z.toFixed(5)}`;\r\n        if (this.infoCells.cameraUp.innerHTML !== cameraUpString) {\r\n            this.infoCells.cameraUp.innerHTML = cameraUpString;\r\n        }\r\n\r\n        this.infoCells.orthographicCamera.innerHTML = orthographicCamera ? 'Orthographic' : 'Perspective';\r\n\r\n        if (meshCursorPosition) {\r\n            const cursPos = meshCursorPosition;\r\n            const cursorPosString = `${cursPos.x.toFixed(5)}, ${cursPos.y.toFixed(5)}, ${cursPos.z.toFixed(5)}`;\r\n            this.infoCells.cursorPosition.innerHTML = cursorPosString;\r\n        } else {\r\n            this.infoCells.cursorPosition.innerHTML = 'N/A';\r\n        }\r\n\r\n        this.infoCells.fps.innerHTML = currentFPS;\r\n        this.infoCells.renderWindow.innerHTML = `${renderDimensions.x} x ${renderDimensions.y}`;\r\n\r\n        this.infoCells.renderSplatCount.innerHTML =\r\n            `${splatRenderCount} splats out of ${splatCount} (${splatRenderCountPct.toFixed(2)}%)`;\r\n\r\n        this.infoCells.sortTime.innerHTML = `${lastSortTime.toFixed(3)} ms`;\r\n        this.infoCells.focalAdjustment.innerHTML = `${focalAdjustment.toFixed(3)}`;\r\n        this.infoCells.splatScale.innerHTML = `${splatScale.toFixed(3)}`;\r\n        this.infoCells.pointCloudMode.innerHTML = `${pointCloudMode}`;\r\n    };\r\n\r\n    setContainer(container) {\r\n        if (this.container) {\r\n            this.container.removeChild(this.infoPanelContainer);\r\n        }\r\n        if (container) {\r\n            this.container = container;\r\n            this.container.appendChild(this.infoPanelContainer);\r\n            this.infoPanelContainer.style.zIndex = this.container.style.zIndex + 1;\r\n        }\r\n    }\r\n\r\n    show() {\r\n        this.infoPanelContainer.style.display = 'block';\r\n        this.visible = true;\r\n    }\r\n\r\n    hide() {\r\n        this.infoPanelContainer.style.display = 'none';\r\n        this.visible = false;\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\n\r\nexport class ArrowHelper extends THREE.Object3D {\r\n\r\n    constructor(dir = new THREE.Vector3(0, 0, 1), origin = new THREE.Vector3(0, 0, 0), length = 1,\r\n                radius = 0.1, color = 0xffff00, headLength = length * 0.2, headRadius = headLength * 0.2) {\r\n        super();\r\n\r\n        this.type = 'ArrowHelper';\r\n\r\n        const lineGeometry = new THREE.CylinderGeometry(radius, radius, length, 32);\r\n        lineGeometry.translate(0, length / 2.0, 0);\r\n        const coneGeometry = new THREE.CylinderGeometry( 0, headRadius, headLength, 32);\r\n        coneGeometry.translate(0, length, 0);\r\n\r\n        this.position.copy( origin );\r\n\r\n        this.line = new THREE.Mesh(lineGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\r\n        this.line.matrixAutoUpdate = false;\r\n        this.add(this.line);\r\n\r\n        this.cone = new THREE.Mesh(coneGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\r\n        this.cone.matrixAutoUpdate = false;\r\n        this.add(this.cone);\r\n\r\n        this.setDirection(dir);\r\n    }\r\n\r\n    setDirection( dir ) {\r\n        if (dir.y > 0.99999) {\r\n            this.quaternion.set(0, 0, 0, 1);\r\n        } else if (dir.y < - 0.99999) {\r\n            this.quaternion.set(1, 0, 0, 0);\r\n        } else {\r\n            _axis.set(dir.z, 0, -dir.x).normalize();\r\n            const radians = Math.acos(dir.y);\r\n            this.quaternion.setFromAxisAngle(_axis, radians);\r\n        }\r\n    }\r\n\r\n    setColor( color ) {\r\n        this.line.material.color.set(color);\r\n        this.cone.material.color.set(color);\r\n    }\r\n\r\n    copy(source) {\r\n        super.copy(source, false);\r\n        this.line.copy(source.line);\r\n        this.cone.copy(source.cone);\r\n        return this;\r\n    }\r\n\r\n    dispose() {\r\n        this.line.geometry.dispose();\r\n        this.line.material.dispose();\r\n        this.cone.geometry.dispose();\r\n        this.cone.material.dispose();\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { ArrowHelper } from './ArrowHelper.js';\r\nimport { disposeAllMeshes } from './Util.js';\r\n\r\nexport class SceneHelper {\r\n\r\n    constructor(threeScene) {\r\n        this.threeScene = threeScene;\r\n        this.splatRenderTarget = null;\r\n        this.renderTargetCopyQuad = null;\r\n        this.renderTargetCopyCamera = null;\r\n        this.meshCursor = null;\r\n        this.focusMarker = null;\r\n        this.controlPlane = null;\r\n        this.debugRoot = null;\r\n        this.secondaryDebugRoot = null;\r\n    }\r\n\r\n    updateSplatRenderTargetForRenderDimensions(width, height) {\r\n        this.destroySplatRendertarget();\r\n        this.splatRenderTarget = new THREE.WebGLRenderTarget(width, height, {\r\n            format: THREE.RGBAFormat,\r\n            stencilBuffer: false,\r\n            depthBuffer: true,\r\n\r\n        });\r\n        this.splatRenderTarget.depthTexture = new THREE.DepthTexture(width, height);\r\n        this.splatRenderTarget.depthTexture.format = THREE.DepthFormat;\r\n        this.splatRenderTarget.depthTexture.type = THREE.UnsignedIntType;\r\n    }\r\n\r\n    destroySplatRendertarget() {\r\n        if (this.splatRenderTarget) {\r\n            this.splatRenderTarget = null;\r\n        }\r\n    }\r\n\r\n    setupRenderTargetCopyObjects() {\r\n        const uniforms = {\r\n            'sourceColorTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'sourceDepthTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n        };\r\n        const renderTargetCopyMaterial = new THREE.ShaderMaterial({\r\n            vertexShader: `\r\n                varying vec2 vUv;\r\n                void main() {\r\n                    vUv = uv;\r\n                    gl_Position = vec4( position.xy, 0.0, 1.0 );    \r\n                }\r\n            `,\r\n            fragmentShader: `\r\n                #include <common>\r\n                #include <packing>\r\n                varying vec2 vUv;\r\n                uniform sampler2D sourceColorTexture;\r\n                uniform sampler2D sourceDepthTexture;\r\n                void main() {\r\n                    vec4 color = texture2D(sourceColorTexture, vUv);\r\n                    float fragDepth = texture2D(sourceDepthTexture, vUv).x;\r\n                    gl_FragDepth = fragDepth;\r\n                    gl_FragColor = vec4(color.rgb, color.a * 2.0);\r\n              }\r\n            `,\r\n            uniforms: uniforms,\r\n            depthWrite: false,\r\n            depthTest: false,\r\n            transparent: true,\r\n            blending: THREE.CustomBlending,\r\n            blendSrc: THREE.SrcAlphaFactor,\r\n            blendSrcAlpha: THREE.SrcAlphaFactor,\r\n            blendDst: THREE.OneMinusSrcAlphaFactor,\r\n            blendDstAlpha: THREE.OneMinusSrcAlphaFactor\r\n        });\r\n        renderTargetCopyMaterial.extensions.fragDepth = true;\r\n        this.renderTargetCopyQuad = new THREE.Mesh(new THREE.PlaneGeometry(2, 2), renderTargetCopyMaterial);\r\n        this.renderTargetCopyCamera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\r\n    }\r\n\r\n    destroyRenderTargetCopyObjects() {\r\n        if (this.renderTargetCopyQuad) {\r\n            disposeAllMeshes(this.renderTargetCopyQuad);\r\n            this.renderTargetCopyQuad = null;\r\n        }\r\n    }\r\n\r\n    setupMeshCursor() {\r\n        if (!this.meshCursor) {\r\n            const coneGeometry = new THREE.ConeGeometry(0.5, 1.5, 32);\r\n            const coneMaterial = new THREE.MeshBasicMaterial({color: 0xFFFFFF});\r\n\r\n            const downArrow = new THREE.Mesh(coneGeometry, coneMaterial);\r\n            downArrow.rotation.set(0, 0, Math.PI);\r\n            downArrow.position.set(0, 1, 0);\r\n            const upArrow = new THREE.Mesh(coneGeometry, coneMaterial);\r\n            upArrow.position.set(0, -1, 0);\r\n            const leftArrow = new THREE.Mesh(coneGeometry, coneMaterial);\r\n            leftArrow.rotation.set(0, 0, Math.PI / 2.0);\r\n            leftArrow.position.set(1, 0, 0);\r\n            const rightArrow = new THREE.Mesh(coneGeometry, coneMaterial);\r\n            rightArrow.rotation.set(0, 0, -Math.PI / 2.0);\r\n            rightArrow.position.set(-1, 0, 0);\r\n\r\n            this.meshCursor = new THREE.Object3D();\r\n            this.meshCursor.add(downArrow);\r\n            this.meshCursor.add(upArrow);\r\n            this.meshCursor.add(leftArrow);\r\n            this.meshCursor.add(rightArrow);\r\n            this.meshCursor.scale.set(0.1, 0.1, 0.1);\r\n            this.threeScene.add(this.meshCursor);\r\n            this.meshCursor.visible = false;\r\n        }\r\n    }\r\n\r\n    destroyMeshCursor() {\r\n        if (this.meshCursor) {\r\n            disposeAllMeshes(this.meshCursor);\r\n            this.threeScene.remove(this.meshCursor);\r\n            this.meshCursor = null;\r\n        }\r\n    }\r\n\r\n    setMeshCursorVisibility(visible) {\r\n        this.meshCursor.visible = visible;\r\n    }\r\n\r\n    getMeschCursorVisibility() {\r\n        return this.meshCursor.visible;\r\n    }\r\n\r\n    setMeshCursorPosition(position) {\r\n        this.meshCursor.position.copy(position);\r\n    }\r\n\r\n    positionAndOrientMeshCursor(position, camera) {\r\n        this.meshCursor.position.copy(position);\r\n        this.meshCursor.up.copy(camera.up);\r\n        this.meshCursor.lookAt(camera.position);\r\n    }\r\n\r\n    setupFocusMarker() {\r\n        if (!this.focusMarker) {\r\n            const sphereGeometry = new THREE.SphereGeometry(.5, 32, 32);\r\n            const focusMarkerMaterial = SceneHelper.buildFocusMarkerMaterial();\r\n            focusMarkerMaterial.depthTest = false;\r\n            focusMarkerMaterial.depthWrite = false;\r\n            focusMarkerMaterial.transparent = true;\r\n            this.focusMarker = new THREE.Mesh(sphereGeometry, focusMarkerMaterial);\r\n        }\r\n    }\r\n\r\n    destroyFocusMarker() {\r\n        if (this.focusMarker) {\r\n            disposeAllMeshes(this.focusMarker);\r\n            this.focusMarker = null;\r\n        }\r\n    }\r\n\r\n    updateFocusMarker = function() {\r\n\r\n        const tempPosition = new THREE.Vector3();\r\n        const tempMatrix = new THREE.Matrix4();\r\n        const toCamera = new THREE.Vector3();\r\n\r\n        return function(position, camera, viewport) {\r\n            tempMatrix.copy(camera.matrixWorld).invert();\r\n            tempPosition.copy(position).applyMatrix4(tempMatrix);\r\n            tempPosition.normalize().multiplyScalar(10);\r\n            tempPosition.applyMatrix4(camera.matrixWorld);\r\n            toCamera.copy(camera.position).sub(position);\r\n            const toCameraDistance = toCamera.length();\r\n            this.focusMarker.position.copy(position);\r\n            this.focusMarker.scale.set(toCameraDistance, toCameraDistance, toCameraDistance);\r\n            this.focusMarker.material.uniforms.realFocusPosition.value.copy(position);\r\n            this.focusMarker.material.uniforms.viewport.value.copy(viewport);\r\n            this.focusMarker.material.uniformsNeedUpdate = true;\r\n        };\r\n\r\n    }();\r\n\r\n    setFocusMarkerVisibility(visible) {\r\n        this.focusMarker.visible = visible;\r\n    }\r\n\r\n    setFocusMarkerOpacity(opacity) {\r\n        this.focusMarker.material.uniforms.opacity.value = opacity;\r\n        this.focusMarker.material.uniformsNeedUpdate = true;\r\n    }\r\n\r\n    getFocusMarkerOpacity() {\r\n        return this.focusMarker.material.uniforms.opacity.value;\r\n    }\r\n\r\n    setupControlPlane() {\r\n        if (!this.controlPlane) {\r\n            const planeGeometry = new THREE.PlaneGeometry(1, 1);\r\n            planeGeometry.rotateX(-Math.PI / 2);\r\n            const planeMaterial = new THREE.MeshBasicMaterial({color: 0xffffff});\r\n            planeMaterial.transparent = true;\r\n            planeMaterial.opacity = 0.6;\r\n            planeMaterial.depthTest = false;\r\n            planeMaterial.depthWrite = false;\r\n            planeMaterial.side = THREE.DoubleSide;\r\n            const planeMesh = new THREE.Mesh(planeGeometry, planeMaterial);\r\n\r\n            const arrowDir = new THREE.Vector3(0, 1, 0);\r\n            arrowDir.normalize();\r\n            const arrowOrigin = new THREE.Vector3(0, 0, 0);\r\n            const arrowLength = 0.5;\r\n            const arrowRadius = 0.01;\r\n            const arrowColor = 0x00dd00;\r\n            const arrowHelper = new ArrowHelper(arrowDir, arrowOrigin, arrowLength, arrowRadius, arrowColor, 0.1, 0.03);\r\n\r\n            this.controlPlane = new THREE.Object3D();\r\n            this.controlPlane.add(planeMesh);\r\n            this.controlPlane.add(arrowHelper);\r\n        }\r\n    }\r\n\r\n    destroyControlPlane() {\r\n        if (this.controlPlane) {\r\n            disposeAllMeshes(this.controlPlane);\r\n            this.controlPlane = null;\r\n        }\r\n    }\r\n\r\n    setControlPlaneVisibility(visible) {\r\n        this.controlPlane.visible = visible;\r\n    }\r\n\r\n    positionAndOrientControlPlane = function() {\r\n\r\n        const tempQuaternion = new THREE.Quaternion();\r\n        const defaultUp = new THREE.Vector3(0, 1, 0);\r\n\r\n        return function(position, up) {\r\n            tempQuaternion.setFromUnitVectors(defaultUp, up);\r\n            this.controlPlane.position.copy(position);\r\n            this.controlPlane.quaternion.copy(tempQuaternion);\r\n        };\r\n\r\n    }();\r\n\r\n    addDebugMeshes() {\r\n        this.debugRoot = this.createDebugMeshes();\r\n        this.secondaryDebugRoot = this.createSecondaryDebugMeshes();\r\n        this.threeScene.add(this.debugRoot);\r\n        this.threeScene.add(this.secondaryDebugRoot);\r\n    }\r\n\r\n    destroyDebugMeshes() {\r\n        for (let debugRoot of [this.debugRoot, this.secondaryDebugRoot]) {\r\n            if (debugRoot) {\r\n                disposeAllMeshes(debugRoot);\r\n                this.threeScene.remove(debugRoot);\r\n            }\r\n        }\r\n        this.debugRoot = null;\r\n        this.secondaryDebugRoot = null;\r\n    }\r\n\r\n    createDebugMeshes(renderOrder) {\r\n        const sphereGeometry = new THREE.SphereGeometry(1, 32, 32);\r\n        const debugMeshRoot = new THREE.Object3D();\r\n\r\n        const createMesh = (color, position) => {\r\n            let sphereMesh = new THREE.Mesh(sphereGeometry, SceneHelper.buildDebugMaterial(color));\r\n            sphereMesh.renderOrder = renderOrder;\r\n            debugMeshRoot.add(sphereMesh);\r\n            sphereMesh.position.fromArray(position);\r\n        };\r\n\r\n        createMesh(0xff0000, [-50, 0, 0]);\r\n        createMesh(0xff0000, [50, 0, 0]);\r\n        createMesh(0x00ff00, [0, 0, -50]);\r\n        createMesh(0x00ff00, [0, 0, 50]);\r\n        createMesh(0xffaa00, [5, 0, 5]);\r\n\r\n        return debugMeshRoot;\r\n    }\r\n\r\n    createSecondaryDebugMeshes(renderOrder) {\r\n        const boxGeometry = new THREE.BoxGeometry(3, 3, 3);\r\n        const debugMeshRoot = new THREE.Object3D();\r\n\r\n        let boxColor = 0xBBBBBB;\r\n        const createMesh = (position) => {\r\n            let boxMesh = new THREE.Mesh(boxGeometry, SceneHelper.buildDebugMaterial(boxColor));\r\n            boxMesh.renderOrder = renderOrder;\r\n            debugMeshRoot.add(boxMesh);\r\n            boxMesh.position.fromArray(position);\r\n        };\r\n\r\n        let separation = 10;\r\n        createMesh([-separation, 0, -separation]);\r\n        createMesh([-separation, 0, separation]);\r\n        createMesh([separation, 0, -separation]);\r\n        createMesh([separation, 0, separation]);\r\n\r\n        return debugMeshRoot;\r\n    }\r\n\r\n    static buildDebugMaterial(color) {\r\n        const vertexShaderSource = `\r\n            #include <common>\r\n            varying float ndcDepth;\r\n\r\n            void main() {\r\n                gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position.xyz, 1.0);\r\n                ndcDepth = gl_Position.z / gl_Position.w;\r\n                gl_Position.x = gl_Position.x / gl_Position.w;\r\n                gl_Position.y = gl_Position.y / gl_Position.w;\r\n                gl_Position.z = 0.0;\r\n                gl_Position.w = 1.0;\r\n    \r\n            }\r\n        `;\r\n\r\n        const fragmentShaderSource = `\r\n            #include <common>\r\n            uniform vec3 color;\r\n            varying float ndcDepth;\r\n            void main() {\r\n                gl_FragDepth = (ndcDepth + 1.0) / 2.0;\r\n                gl_FragColor = vec4(color.rgb, 0.0);\r\n            }\r\n        `;\r\n\r\n        const uniforms = {\r\n            'color': {\r\n                'type': 'v3',\r\n                'value': new THREE.Color(color)\r\n            },\r\n        };\r\n\r\n        const material = new THREE.ShaderMaterial({\r\n            uniforms: uniforms,\r\n            vertexShader: vertexShaderSource,\r\n            fragmentShader: fragmentShaderSource,\r\n            transparent: false,\r\n            depthTest: true,\r\n            depthWrite: true,\r\n            side: THREE.FrontSide\r\n        });\r\n        material.extensions.fragDepth = true;\r\n\r\n        return material;\r\n    }\r\n\r\n    static buildFocusMarkerMaterial(color) {\r\n        const vertexShaderSource = `\r\n            #include <common>\r\n\r\n            uniform vec2 viewport;\r\n            uniform vec3 realFocusPosition;\r\n\r\n            varying vec4 ndcPosition;\r\n            varying vec4 ndcCenter;\r\n            varying vec4 ndcFocusPosition;\r\n\r\n            void main() {\r\n                float radius = 0.01;\r\n\r\n                vec4 viewPosition = modelViewMatrix * vec4(position.xyz, 1.0);\r\n                vec4 viewCenter = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);\r\n\r\n                vec4 viewFocusPosition = modelViewMatrix * vec4(realFocusPosition, 1.0);\r\n\r\n                ndcPosition = projectionMatrix * viewPosition;\r\n                ndcPosition = ndcPosition * vec4(1.0 / ndcPosition.w);\r\n                ndcCenter = projectionMatrix * viewCenter;\r\n                ndcCenter = ndcCenter * vec4(1.0 / ndcCenter.w);\r\n\r\n                ndcFocusPosition = projectionMatrix * viewFocusPosition;\r\n                ndcFocusPosition = ndcFocusPosition * vec4(1.0 / ndcFocusPosition.w);\r\n\r\n                gl_Position = projectionMatrix * viewPosition;\r\n\r\n            }\r\n        `;\r\n\r\n        const fragmentShaderSource = `\r\n            #include <common>\r\n            uniform vec3 color;\r\n            uniform vec2 viewport;\r\n            uniform float opacity;\r\n\r\n            varying vec4 ndcPosition;\r\n            varying vec4 ndcCenter;\r\n            varying vec4 ndcFocusPosition;\r\n\r\n            void main() {\r\n                vec2 screenPosition = vec2(ndcPosition) * viewport;\r\n                vec2 screenCenter = vec2(ndcCenter) * viewport;\r\n\r\n                vec2 screenVec = screenPosition - screenCenter;\r\n\r\n                float projectedRadius = length(screenVec);\r\n\r\n                float lineWidth = 0.0005 * viewport.y;\r\n                float aaRange = 0.0025 * viewport.y;\r\n                float radius = 0.06 * viewport.y;\r\n                float radDiff = abs(projectedRadius - radius) - lineWidth;\r\n                float alpha = 1.0 - clamp(radDiff / 5.0, 0.0, 1.0); \r\n\r\n                gl_FragColor = vec4(color.rgb, alpha * opacity);\r\n            }\r\n        `;\r\n\r\n        const uniforms = {\r\n            'color': {\r\n                'type': 'v3',\r\n                'value': new THREE.Color(color)\r\n            },\r\n            'realFocusPosition': {\r\n                'type': 'v3',\r\n                'value': new THREE.Vector3()\r\n            },\r\n            'viewport': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2()\r\n            },\r\n            'opacity': {\r\n                'value': 0.0\r\n            }\r\n        };\r\n\r\n        const material = new THREE.ShaderMaterial({\r\n            uniforms: uniforms,\r\n            vertexShader: vertexShaderSource,\r\n            fragmentShader: fragmentShaderSource,\r\n            transparent: true,\r\n            depthTest: false,\r\n            depthWrite: false,\r\n            side: THREE.FrontSide\r\n        });\r\n\r\n        return material;\r\n    }\r\n\r\n    dispose() {\r\n        this.destroyMeshCursor();\r\n        this.destroyFocusMarker();\r\n        this.destroyDebugMeshes();\r\n        this.destroyControlPlane();\r\n        this.destroyRenderTargetCopyObjects();\r\n        this.destroySplatRendertarget();\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\n\r\nconst VectorRight = new THREE.Vector3(1, 0, 0);\r\nconst VectorUp = new THREE.Vector3(0, 1, 0);\r\nconst VectorBackward = new THREE.Vector3(0, 0, 1);\r\n\r\nexport class Ray {\r\n\r\n    constructor(origin = new THREE.Vector3(), direction = new THREE.Vector3()) {\r\n        this.origin = new THREE.Vector3();\r\n        this.direction = new THREE.Vector3();\r\n        this.setParameters(origin, direction);\r\n    }\r\n\r\n    setParameters(origin, direction) {\r\n        this.origin.copy(origin);\r\n        this.direction.copy(direction).normalize();\r\n    }\r\n\r\n    boxContainsPoint(box, point, epsilon) {\r\n        return point.x < box.min.x - epsilon || point.x > box.max.x + epsilon ||\r\n               point.y < box.min.y - epsilon || point.y > box.max.y + epsilon ||\r\n               point.z < box.min.z - epsilon || point.z > box.max.z + epsilon ? false : true;\r\n    }\r\n\r\n    intersectBox = function() {\r\n\r\n        const planeIntersectionPoint = new THREE.Vector3();\r\n        const planeIntersectionPointArray = [];\r\n        const originArray = [];\r\n        const directionArray = [];\r\n\r\n        return function(box, outHit) {\r\n\r\n            originArray[0] = this.origin.x;\r\n            originArray[1] = this.origin.y;\r\n            originArray[2] = this.origin.z;\r\n            directionArray[0] = this.direction.x;\r\n            directionArray[1] = this.direction.y;\r\n            directionArray[2] = this.direction.z;\r\n\r\n            if (this.boxContainsPoint(box, this.origin, 0.0001)) {\r\n                if (outHit) {\r\n                    outHit.origin.copy(this.origin);\r\n                    outHit.normal.set(0, 0, 0);\r\n                    outHit.distance = -1;\r\n                }\r\n                return true;\r\n            }\r\n\r\n            for (let i = 0; i < 3; i++) {\r\n                if (directionArray[i] == 0.0) continue;\r\n\r\n                const hitNormal = i == 0 ? VectorRight : i == 1 ? VectorUp : VectorBackward;\r\n                const extremeVec = directionArray[i] < 0 ? box.max : box.min;\r\n                let multiplier = -Math.sign(directionArray[i]);\r\n                planeIntersectionPointArray[0] = i == 0 ? extremeVec.x : i == 1 ? extremeVec.y : extremeVec.z;\r\n                let toSide = planeIntersectionPointArray[0] - originArray[i];\r\n\r\n                if (toSide * multiplier < 0) {\r\n                    const idx1 = (i + 1) % 3;\r\n                    const idx2 = (i + 2) % 3;\r\n                    planeIntersectionPointArray[2] = directionArray[idx1] / directionArray[i] * toSide + originArray[idx1];\r\n                    planeIntersectionPointArray[1] = directionArray[idx2] / directionArray[i] * toSide + originArray[idx2];\r\n                    planeIntersectionPoint.set(planeIntersectionPointArray[i],\r\n                                               planeIntersectionPointArray[idx2],\r\n                                               planeIntersectionPointArray[idx1]);\r\n                    if (this.boxContainsPoint(box, planeIntersectionPoint, 0.0001)) {\r\n                        if (outHit) {\r\n                            outHit.origin.copy(planeIntersectionPoint);\r\n                            outHit.normal.copy(hitNormal).multiplyScalar(multiplier);\r\n                            outHit.distance = planeIntersectionPoint.sub(this.origin).length();\r\n                        }\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n    }();\r\n\r\n    intersectSphere = function() {\r\n\r\n        const toSphereCenterVec = new THREE.Vector3();\r\n\r\n        return function(center, radius, outHit) {\r\n            toSphereCenterVec.copy(center).sub(this.origin);\r\n            const toClosestApproach = toSphereCenterVec.dot(this.direction);\r\n            const toClosestApproachSq = toClosestApproach * toClosestApproach;\r\n            const toSphereCenterSq = toSphereCenterVec.dot(toSphereCenterVec);\r\n            const diffSq = toSphereCenterSq - toClosestApproachSq;\r\n            const radiusSq = radius * radius;\r\n\r\n            if (diffSq > radiusSq) return false;\r\n\r\n            const thc = Math.sqrt(radiusSq - diffSq);\r\n            const t0 = toClosestApproach - thc;\r\n            const t1 = toClosestApproach + thc;\r\n\r\n            if (t1 < 0) return false;\r\n            let t = t0 < 0 ? t1 : t0;\r\n\r\n            if (outHit) {\r\n                outHit.origin.copy(this.origin).addScaledVector(this.direction, t);\r\n                outHit.normal.copy(outHit.origin).sub(center).normalize();\r\n                outHit.distance = t;\r\n            }\r\n            return true;\r\n        };\r\n\r\n    }();\r\n}\r\n","import * as THREE from 'three';\r\n\r\nexport class Hit {\r\n\r\n    constructor() {\r\n        this.origin = new THREE.Vector3();\r\n        this.normal = new THREE.Vector3();\r\n        this.distance = 0;\r\n        this.splatIndex = 0;\r\n    }\r\n\r\n    set(origin, normal, distance, splatIndex) {\r\n        this.origin.copy(origin);\r\n        this.normal.copy(normal);\r\n        this.distance = distance;\r\n        this.splatIndex = splatIndex;\r\n    }\r\n\r\n    clone() {\r\n        const hitClone = new Hit();\r\n        hitClone.origin.copy(this.origin);\r\n        hitClone.normal.copy(this.normal);\r\n        hitClone.distance = this.distance;\r\n        hitClone.splatIndex = this.splatIndex;\r\n        return hitClone;\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { Ray } from './Ray.js';\r\nimport { Hit } from './Hit.js';\r\n\r\nexport class Raycaster {\r\n\r\n    constructor(origin, direction, raycastAgainstTrueSplatEllipsoid = false) {\r\n        this.ray = new Ray(origin, direction);\r\n        this.raycastAgainstTrueSplatEllipsoid = raycastAgainstTrueSplatEllipsoid;\r\n    }\r\n\r\n    setFromCameraAndScreenPosition = function() {\r\n\r\n        const ndcCoords = new THREE.Vector2();\r\n\r\n        return function(camera, screenPosition, screenDimensions) {\r\n            ndcCoords.x = screenPosition.x / screenDimensions.x * 2.0 - 1.0;\r\n            ndcCoords.y = (screenDimensions.y - screenPosition.y) / screenDimensions.y * 2.0 - 1.0;\r\n            if (camera.isPerspectiveCamera) {\r\n                this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\r\n                this.ray.direction.set(ndcCoords.x, ndcCoords.y, 0.5 ).unproject(camera).sub(this.ray.origin).normalize();\r\n                this.camera = camera;\r\n            } else if (camera.isOrthographicCamera) {\r\n                this.ray.origin.set(ndcCoords.x, ndcCoords.y,\r\n                                   (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera);\r\n                this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\r\n                this.camera = camera;\r\n            } else {\r\n                throw new Error('Raycaster::setFromCameraAndScreenPosition() -> Unsupported camera type');\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    intersectSplatMesh = function() {\r\n\r\n        const toLocal = new THREE.Matrix4();\r\n        const fromLocal = new THREE.Matrix4();\r\n        const sceneTransform = new THREE.Matrix4();\r\n        const localRay = new Ray();\r\n        const tempPoint = new THREE.Vector3();\r\n\r\n        return function(splatMesh, outHits = []) {\r\n            const splatTree = splatMesh.getSplatTree();\r\n\r\n            if (!splatTree) return;\r\n\r\n            for (let s = 0; s < splatTree.subTrees.length; s++) {\r\n                const subTree = splatTree.subTrees[s];\r\n\r\n                fromLocal.copy(splatMesh.matrixWorld);\r\n                if (splatMesh.dynamicMode) {\r\n                    splatMesh.getSceneTransform(s, sceneTransform);\r\n                    fromLocal.multiply(sceneTransform);\r\n                }\r\n                toLocal.copy(fromLocal).invert();\r\n\r\n                localRay.origin.copy(this.ray.origin).applyMatrix4(toLocal);\r\n                localRay.direction.copy(this.ray.origin).add(this.ray.direction);\r\n                localRay.direction.applyMatrix4(toLocal).sub(localRay.origin).normalize();\r\n\r\n                const outHitsForSubTree = [];\r\n                if (subTree.rootNode) {\r\n                    this.castRayAtSplatTreeNode(localRay, splatTree, subTree.rootNode, outHitsForSubTree);\r\n                }\r\n\r\n                outHitsForSubTree.forEach((hit) => {\r\n                    hit.origin.applyMatrix4(fromLocal);\r\n                    hit.normal.applyMatrix4(fromLocal).normalize();\r\n                    hit.distance = tempPoint.copy(hit.origin).sub(this.ray.origin).length();\r\n                });\r\n\r\n                outHits.push(...outHitsForSubTree);\r\n            }\r\n\r\n            outHits.sort((a, b) => {\r\n                if (a.distance > b.distance) return 1;\r\n                else return -1;\r\n            });\r\n\r\n            return outHits;\r\n        };\r\n\r\n    }();\r\n\r\n    castRayAtSplatTreeNode = function() {\r\n\r\n        const tempColor = new THREE.Vector4();\r\n        const tempCenter = new THREE.Vector3();\r\n        const tempScale = new THREE.Vector3();\r\n        const tempRotation = new THREE.Quaternion();\r\n        const tempHit = new Hit();\r\n        const scaleEpsilon = 0.0000001;\r\n\r\n        const origin = new THREE.Vector3(0, 0, 0);\r\n        const uniformScaleMatrix = new THREE.Matrix4();\r\n        const scaleMatrix = new THREE.Matrix4();\r\n        const rotationMatrix = new THREE.Matrix4();\r\n        const toSphereSpace = new THREE.Matrix4();\r\n        const fromSphereSpace = new THREE.Matrix4();\r\n        const tempRay = new Ray();\r\n\r\n        return function(ray, splatTree, node, outHits = []) {\r\n            if (!ray.intersectBox(node.boundingBox)) {\r\n                return;\r\n            }\r\n            if (node.data && node.data.indexes && node.data.indexes.length > 0) {\r\n                for (let i = 0; i < node.data.indexes.length; i++) {\r\n                    const splatGlobalIndex = node.data.indexes[i];\r\n                    splatTree.splatMesh.getSplatColor(splatGlobalIndex, tempColor);\r\n                    splatTree.splatMesh.getSplatCenter(splatGlobalIndex, tempCenter);\r\n                    splatTree.splatMesh.getSplatScaleAndRotation(splatGlobalIndex, tempScale, tempRotation);\r\n\r\n                    if (tempScale.x <= scaleEpsilon || tempScale.y <= scaleEpsilon || tempScale.z <= scaleEpsilon) {\r\n                        continue;\r\n                    }\r\n\r\n                    if (!this.raycastAgainstTrueSplatEllipsoid) {\r\n                        const radius = (tempScale.x + tempScale.y + tempScale.z) / 3;\r\n                        if (ray.intersectSphere(tempCenter, radius, tempHit)) {\r\n                            const hitClone = tempHit.clone();\r\n                            hitClone.splatIndex = splatGlobalIndex;\r\n                            outHits.push(hitClone);\r\n                        }\r\n                    } else {\r\n                        scaleMatrix.makeScale(tempScale.x, tempScale.y, tempScale.z);\r\n                        rotationMatrix.makeRotationFromQuaternion(tempRotation);\r\n                        const uniformScale = Math.log10(tempColor.w) * 2.0;\r\n                        uniformScaleMatrix.makeScale(uniformScale, uniformScale, uniformScale);\r\n                        fromSphereSpace.copy(uniformScaleMatrix).multiply(rotationMatrix).multiply(scaleMatrix);\r\n                        toSphereSpace.copy(fromSphereSpace).invert();\r\n                        tempRay.origin.copy(ray.origin).sub(tempCenter).applyMatrix4(toSphereSpace);\r\n                        tempRay.direction.copy(ray.origin).add(ray.direction).sub(tempCenter);\r\n                        tempRay.direction.applyMatrix4(toSphereSpace).sub(tempRay.origin).normalize();\r\n                        if (tempRay.intersectSphere(origin, 1.0, tempHit)) {\r\n                            const hitClone = tempHit.clone();\r\n                            hitClone.splatIndex = splatGlobalIndex;\r\n                            hitClone.origin.applyMatrix4(fromSphereSpace).add(tempCenter);\r\n                            outHits.push(hitClone);\r\n                        }\r\n                    }\r\n                }\r\n             }\r\n            if (node.children && node.children.length > 0) {\r\n                for (let child of node.children) {\r\n                    this.castRayAtSplatTreeNode(ray, splatTree, child, outHits);\r\n                }\r\n            }\r\n            return outHits;\r\n        };\r\n\r\n    }();\r\n}\r\n","import * as THREE from 'three';\r\n\r\n/**\r\n * SplatScene: Descriptor for a single splat scene managed by an instance of SplatMesh.\r\n */\r\nexport class SplatScene {\r\n\r\n    constructor(splatBuffer, position = new THREE.Vector3(), quaternion = new THREE.Quaternion(),\r\n                scale = new THREE.Vector3(1, 1, 1), minimumAlpha = 1) {\r\n        this.splatBuffer = splatBuffer;\r\n        this.position = position.clone();\r\n        this.quaternion = quaternion.clone();\r\n        this.scale = scale.clone();\r\n        this.transform = new THREE.Matrix4();\r\n        this.minimumAlpha = minimumAlpha;\r\n        this.updateTransform();\r\n    }\r\n\r\n    copyTransformData(otherScene) {\r\n        this.position.copy(otherScene.position);\r\n        this.quaternion.copy(otherScene.quaternion);\r\n        this.scale.copy(otherScene.scale);\r\n        this.transform.copy(otherScene.transform);\r\n    }\r\n\r\n    updateTransform() {\r\n        this.transform.compose(this.position, this.quaternion, this.scale);\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { delayedExecute } from '../Util.js';\r\n\r\nclass SplatTreeNode {\r\n\r\n    static idGen = 0;\r\n\r\n    constructor(min, max, depth, id) {\r\n        this.min = new THREE.Vector3().copy(min);\r\n        this.max = new THREE.Vector3().copy(max);\r\n        this.boundingBox = new THREE.Box3(this.min, this.max);\r\n        this.center = new THREE.Vector3().copy(this.max).sub(this.min).multiplyScalar(0.5).add(this.min);\r\n        this.depth = depth;\r\n        this.children = [];\r\n        this.data = null;\r\n        this.id = id || SplatTreeNode.idGen++;\r\n    }\r\n\r\n}\r\n\r\nclass SplatSubTree {\r\n\r\n    constructor(maxDepth, maxCentersPerNode) {\r\n        this.maxDepth = maxDepth;\r\n        this.maxCentersPerNode = maxCentersPerNode;\r\n        this.sceneDimensions = new THREE.Vector3();\r\n        this.sceneMin = new THREE.Vector3();\r\n        this.sceneMax = new THREE.Vector3();\r\n        this.rootNode = null;\r\n        this.nodesWithIndexes = [];\r\n        this.splatMesh = null;\r\n    }\r\n\r\n    static convertWorkerSubTreeNode(workerSubTreeNode) {\r\n        const minVector = new THREE.Vector3().fromArray(workerSubTreeNode.min);\r\n        const maxVector = new THREE.Vector3().fromArray(workerSubTreeNode.max);\r\n        const convertedNode = new SplatTreeNode(minVector, maxVector, workerSubTreeNode.depth, workerSubTreeNode.id);\r\n        if (workerSubTreeNode.data.indexes) {\r\n            convertedNode.data = {\r\n                'indexes': []\r\n            };\r\n            for (let index of workerSubTreeNode.data.indexes) {\r\n                convertedNode.data.indexes.push(index);\r\n            }\r\n        }\r\n        if (workerSubTreeNode.children) {\r\n            for (let child of workerSubTreeNode.children) {\r\n                convertedNode.children.push(SplatSubTree.convertWorkerSubTreeNode(child));\r\n            }\r\n        }\r\n        return convertedNode;\r\n    }\r\n\r\n    static convertWorkerSubTree(workerSubTree, splatMesh) {\r\n        const convertedSubTree = new SplatSubTree(workerSubTree.maxDepth, workerSubTree.maxCentersPerNode);\r\n        convertedSubTree.sceneMin = new THREE.Vector3().fromArray(workerSubTree.sceneMin);\r\n        convertedSubTree.sceneMax = new THREE.Vector3().fromArray(workerSubTree.sceneMax);\r\n\r\n        convertedSubTree.splatMesh = splatMesh;\r\n        convertedSubTree.rootNode = SplatSubTree.convertWorkerSubTreeNode(workerSubTree.rootNode);\r\n\r\n\r\n        const visitLeavesFromNode = (node, visitFunc) => {\r\n            if (node.children.length === 0) visitFunc(node);\r\n            for (let child of node.children) {\r\n                visitLeavesFromNode(child, visitFunc);\r\n            }\r\n        };\r\n\r\n        convertedSubTree.nodesWithIndexes = [];\r\n        visitLeavesFromNode(convertedSubTree.rootNode, (node) => {\r\n            if (node.data && node.data.indexes && node.data.indexes.length > 0) {\r\n                convertedSubTree.nodesWithIndexes.push(node);\r\n            }\r\n        });\r\n\r\n        return convertedSubTree;\r\n    }\r\n}\r\n\r\nfunction createSplatTreeWorker(self) {\r\n\r\n    let WorkerSplatTreeNodeIDGen = 0;\r\n\r\n    class WorkerBox3 {\r\n\r\n        constructor(min, max) {\r\n            this.min = [min[0], min[1], min[2]];\r\n            this.max = [max[0], max[1], max[2]];\r\n        }\r\n\r\n        containsPoint(point) {\r\n            return point[0] >= this.min[0] && point[0] <= this.max[0] &&\r\n                   point[1] >= this.min[1] && point[1] <= this.max[1] &&\r\n                   point[2] >= this.min[2] && point[2] <= this.max[2];\r\n        }\r\n    }\r\n\r\n    class WorkerSplatSubTree {\r\n\r\n        constructor(maxDepth, maxCentersPerNode) {\r\n            this.maxDepth = maxDepth;\r\n            this.maxCentersPerNode = maxCentersPerNode;\r\n            this.sceneDimensions = [];\r\n            this.sceneMin = [];\r\n            this.sceneMax = [];\r\n            this.rootNode = null;\r\n            this.addedIndexes = {};\r\n            this.nodesWithIndexes = [];\r\n            this.splatMesh = null;\r\n            this.disposed = false;\r\n        }\r\n\r\n    }\r\n\r\n    class WorkerSplatTreeNode {\r\n\r\n        constructor(min, max, depth, id) {\r\n            this.min = [min[0], min[1], min[2]];\r\n            this.max = [max[0], max[1], max[2]];\r\n            this.center = [(max[0] - min[0]) * 0.5 + min[0],\r\n                           (max[1] - min[1]) * 0.5 + min[1],\r\n                           (max[2] - min[2]) * 0.5 + min[2]];\r\n            this.depth = depth;\r\n            this.children = [];\r\n            this.data = null;\r\n            this.id = id || WorkerSplatTreeNodeIDGen++;\r\n        }\r\n\r\n    }\r\n\r\n    processSplatTreeNode = function(tree, node, indexToCenter, sceneCenters) {\r\n        const splatCount = node.data.indexes.length;\r\n\r\n        if (splatCount < tree.maxCentersPerNode || node.depth > tree.maxDepth) {\r\n            const newIndexes = [];\r\n            for (let i = 0; i < node.data.indexes.length; i++) {\r\n                if (!tree.addedIndexes[node.data.indexes[i]]) {\r\n                    newIndexes.push(node.data.indexes[i]);\r\n                    tree.addedIndexes[node.data.indexes[i]] = true;\r\n                }\r\n            }\r\n            node.data.indexes = newIndexes;\r\n            node.data.indexes.sort((a, b) => {\r\n                if (a > b) return 1;\r\n                else return -1;\r\n            });\r\n            tree.nodesWithIndexes.push(node);\r\n            return;\r\n        }\r\n\r\n        const nodeDimensions = [node.max[0] - node.min[0],\r\n                                node.max[1] - node.min[1],\r\n                                node.max[2] - node.min[2]];\r\n        const halfDimensions = [nodeDimensions[0] * 0.5,\r\n                                nodeDimensions[1] * 0.5,\r\n                                nodeDimensions[2] * 0.5];\r\n        const nodeCenter = [node.min[0] + halfDimensions[0],\r\n                            node.min[1] + halfDimensions[1],\r\n                            node.min[2] + halfDimensions[2]];\r\n\r\n        const childrenBounds = [\r\n            // top section, clockwise from upper-left (looking from above, +Y)\r\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1], nodeCenter[2] - halfDimensions[2]],\r\n                           [nodeCenter[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2]]),\r\n            new WorkerBox3([nodeCenter[0], nodeCenter[1], nodeCenter[2] - halfDimensions[2]],\r\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2]]),\r\n            new WorkerBox3([nodeCenter[0], nodeCenter[1], nodeCenter[2]],\r\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2] + halfDimensions[2]]),\r\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1], nodeCenter[2]],\r\n                           [nodeCenter[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2] + halfDimensions[2]]),\r\n\r\n            // bottom section, clockwise from lower-left (looking from above, +Y)\r\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2] - halfDimensions[2]],\r\n                           [nodeCenter[0], nodeCenter[1], nodeCenter[2]]),\r\n            new WorkerBox3([nodeCenter[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2] - halfDimensions[2]],\r\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1], nodeCenter[2]]),\r\n            new WorkerBox3([nodeCenter[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2]],\r\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1], nodeCenter[2] + halfDimensions[2]]),\r\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2]],\r\n                           [nodeCenter[0], nodeCenter[1], nodeCenter[2] + halfDimensions[2]]),\r\n        ];\r\n\r\n        const splatCounts = [];\r\n        const baseIndexes = [];\r\n        for (let i = 0; i < childrenBounds.length; i++) {\r\n            splatCounts[i] = 0;\r\n            baseIndexes[i] = [];\r\n        }\r\n\r\n        const center = [0, 0, 0];\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const splatGlobalIndex = node.data.indexes[i];\r\n            const centerBase = indexToCenter[splatGlobalIndex];\r\n            center[0] = sceneCenters[centerBase];\r\n            center[1] = sceneCenters[centerBase + 1];\r\n            center[2] = sceneCenters[centerBase + 2];\r\n            for (let j = 0; j < childrenBounds.length; j++) {\r\n                if (childrenBounds[j].containsPoint(center)) {\r\n                    splatCounts[j]++;\r\n                    baseIndexes[j].push(splatGlobalIndex);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < childrenBounds.length; i++) {\r\n            const childNode = new WorkerSplatTreeNode(childrenBounds[i].min, childrenBounds[i].max, node.depth + 1);\r\n            childNode.data = {\r\n                'indexes': baseIndexes[i]\r\n            };\r\n            node.children.push(childNode);\r\n        }\r\n\r\n        node.data = {};\r\n        for (let child of node.children) {\r\n            processSplatTreeNode(tree, child, indexToCenter, sceneCenters);\r\n        }\r\n        return;\r\n    };\r\n\r\n    const buildSubTree = (sceneCenters, maxDepth, maxCentersPerNode) => {\r\n\r\n        const sceneMin = [0, 0, 0];\r\n        const sceneMax = [0, 0, 0];\r\n        const indexes = [];\r\n        const centerCount = Math.floor(sceneCenters.length / 4);\r\n        for ( let i = 0; i < centerCount; i ++) {\r\n            const base = i * 4;\r\n            const x = sceneCenters[base];\r\n            const y = sceneCenters[base + 1];\r\n            const z = sceneCenters[base + 2];\r\n            const index = Math.round(sceneCenters[base + 3]);\r\n            if (i === 0 || x < sceneMin[0]) sceneMin[0] = x;\r\n            if (i === 0 || x > sceneMax[0]) sceneMax[0] = x;\r\n            if (i === 0 || y < sceneMin[1]) sceneMin[1] = y;\r\n            if (i === 0 || y > sceneMax[1]) sceneMax[1] = y;\r\n            if (i === 0 || z < sceneMin[2]) sceneMin[2] = z;\r\n            if (i === 0 || z > sceneMax[2]) sceneMax[2] = z;\r\n            indexes.push(index);\r\n        }\r\n        const subTree = new WorkerSplatSubTree(maxDepth, maxCentersPerNode);\r\n        subTree.sceneMin = sceneMin;\r\n        subTree.sceneMax = sceneMax;\r\n        subTree.rootNode = new WorkerSplatTreeNode(subTree.sceneMin, subTree.sceneMax, 0);\r\n        subTree.rootNode.data = {\r\n            'indexes': indexes\r\n        };\r\n\r\n        return subTree;\r\n    };\r\n\r\n    function createSplatTree(allCenters, maxDepth, maxCentersPerNode) {\r\n        const indexToCenter = [];\r\n        for (let sceneCenters of allCenters) {\r\n            const centerCount = Math.floor(sceneCenters.length / 4);\r\n            for ( let i = 0; i < centerCount; i ++) {\r\n                const base = i * 4;\r\n                const index = Math.round(sceneCenters[base + 3]);\r\n                indexToCenter[index] = base;\r\n            }\r\n        }\r\n        const subTrees = [];\r\n        for (let sceneCenters of allCenters) {\r\n            const subTree = buildSubTree(sceneCenters, maxDepth, maxCentersPerNode);\r\n            subTrees.push(subTree);\r\n            processSplatTreeNode(subTree, subTree.rootNode, indexToCenter, sceneCenters);\r\n        }\r\n        self.postMessage({\r\n            'subTrees': subTrees\r\n        });\r\n    }\r\n\r\n    self.onmessage = (e) => {\r\n        if (e.data.process) {\r\n            createSplatTree(e.data.process.centers, e.data.process.maxDepth, e.data.process.maxCentersPerNode);\r\n        }\r\n    };\r\n}\r\n\r\nfunction workerProcessCenters(splatTreeWorker, centers, transferBuffers, maxDepth, maxCentersPerNode) {\r\n    splatTreeWorker.postMessage({\r\n        'process': {\r\n            'centers': centers,\r\n            'maxDepth': maxDepth,\r\n            'maxCentersPerNode': maxCentersPerNode\r\n        }\r\n    }, transferBuffers);\r\n}\r\n\r\nfunction checkAndCreateWorker() {\r\n    const splatTreeWorker = new Worker(\r\n        URL.createObjectURL(\r\n            new Blob(['(', createSplatTreeWorker.toString(), ')(self)'], {\r\n                type: 'application/javascript',\r\n            }),\r\n        ),\r\n    );\r\n    return splatTreeWorker;\r\n}\r\n\r\n/**\r\n * SplatTree: Octree tailored to splat data from a SplatMesh instance\r\n */\r\nexport class SplatTree {\r\n\r\n    constructor(maxDepth, maxCentersPerNode) {\r\n        this.maxDepth = maxDepth;\r\n        this.maxCentersPerNode = maxCentersPerNode;\r\n        this.subTrees = [];\r\n        this.splatMesh = null;\r\n    }\r\n\r\n\r\n    dispose() {\r\n        this.diposeSplatTreeWorker();\r\n        this.disposed = true;\r\n    }\r\n\r\n    diposeSplatTreeWorker() {\r\n        if (this.splatTreeWorker) this.splatTreeWorker.terminate();\r\n        this.splatTreeWorker = null;\r\n    };\r\n\r\n    /**\r\n     * Construct this instance of SplatTree from an instance of SplatMesh.\r\n     *\r\n     * @param {SplatMesh} splatMesh The instance of SplatMesh from which to construct this splat tree.\r\n     * @param {function} filterFunc Optional function to filter out unwanted splats.\r\n     * @param {function} onIndexesUpload Function to be called when the upload of splat centers to the splat tree\r\n     *                                   builder worker starts and finishes.\r\n     * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\r\n     *                                           the format produced by the splat tree builder worker starts and ends.\r\n     * @return {undefined}\r\n     */\r\n    processSplatMesh = function(splatMesh, filterFunc = () => true, onIndexesUpload, onSplatTreeConstruction) {\r\n        if (!this.splatTreeWorker) this.splatTreeWorker = checkAndCreateWorker();\r\n\r\n        this.splatMesh = splatMesh;\r\n        this.subTrees = [];\r\n        const center = new THREE.Vector3();\r\n\r\n        const addCentersForScene = (splatOffset, splatCount) => {\r\n            const sceneCenters = new Float32Array(splatCount * 4);\r\n            let addedCount = 0;\r\n            for (let i = 0; i < splatCount; i++) {\r\n                const globalSplatIndex = i + splatOffset;\r\n                if (filterFunc(globalSplatIndex)) {\r\n                    splatMesh.getSplatCenter(globalSplatIndex, center);\r\n                    const addBase = addedCount * 4;\r\n                    sceneCenters[addBase] = center.x;\r\n                    sceneCenters[addBase + 1] = center.y;\r\n                    sceneCenters[addBase + 2] = center.z;\r\n                    sceneCenters[addBase + 3] = globalSplatIndex;\r\n                    addedCount++;\r\n                }\r\n            }\r\n            return sceneCenters;\r\n        };\r\n\r\n        return new Promise((resolve) => {\r\n\r\n            const checkForEarlyExit = () => {\r\n                if (this.disposed) {\r\n                    this.diposeSplatTreeWorker();\r\n                    resolve();\r\n                    return true;\r\n                }\r\n                return false;\r\n            };\r\n\r\n            if (onIndexesUpload) onIndexesUpload(false);\r\n\r\n            delayedExecute(() => {\r\n\r\n                if (checkForEarlyExit()) return;\r\n\r\n                const allCenters = [];\r\n                if (splatMesh.dynamicMode) {\r\n                    let splatOffset = 0;\r\n                    for (let s = 0; s < splatMesh.scenes.length; s++) {\r\n                        const scene = splatMesh.getScene(s);\r\n                        const splatCount = scene.splatBuffer.getSplatCount();\r\n                        const sceneCenters = addCentersForScene(splatOffset, splatCount);\r\n                        allCenters.push(sceneCenters);\r\n                        splatOffset += splatCount;\r\n                    }\r\n                } else {\r\n                    const sceneCenters = addCentersForScene(0, splatMesh.getSplatCount());\r\n                    allCenters.push(sceneCenters);\r\n                }\r\n\r\n                this.splatTreeWorker.onmessage = (e) => {\r\n\r\n                    if (checkForEarlyExit()) return;\r\n\r\n                    if (e.data.subTrees) {\r\n\r\n                        if (onSplatTreeConstruction) onSplatTreeConstruction(false);\r\n\r\n                        delayedExecute(() => {\r\n\r\n                            if (checkForEarlyExit()) return;\r\n\r\n                            for (let workerSubTree of e.data.subTrees) {\r\n                                const convertedSubTree = SplatSubTree.convertWorkerSubTree(workerSubTree, splatMesh);\r\n                                this.subTrees.push(convertedSubTree);\r\n                            }\r\n                            this.diposeSplatTreeWorker();\r\n\r\n                            if (onSplatTreeConstruction) onSplatTreeConstruction(true);\r\n\r\n                            delayedExecute(() => {\r\n                                resolve();\r\n                            });\r\n\r\n                        });\r\n                    }\r\n                };\r\n\r\n                delayedExecute(() => {\r\n                    if (checkForEarlyExit()) return;\r\n                    if (onIndexesUpload) onIndexesUpload(true);\r\n                    const transferBuffers = allCenters.map((array) => array.buffer);\r\n                    workerProcessCenters(this.splatTreeWorker, allCenters, transferBuffers, this.maxDepth, this.maxCentersPerNode);\r\n                });\r\n\r\n            });\r\n\r\n        });\r\n\r\n    };\r\n\r\n    countLeaves() {\r\n\r\n        let leafCount = 0;\r\n        this.visitLeaves(() => {\r\n            leafCount++;\r\n        });\r\n\r\n        return leafCount;\r\n    }\r\n\r\n    visitLeaves(visitFunc) {\r\n\r\n        const visitLeavesFromNode = (node, visitFunc) => {\r\n            if (node.children.length === 0) visitFunc(node);\r\n            for (let child of node.children) {\r\n                visitLeavesFromNode(child, visitFunc);\r\n            }\r\n        };\r\n\r\n        for (let subTree of this.subTrees) {\r\n            visitLeavesFromNode(subTree.rootNode, visitFunc);\r\n        }\r\n    }\r\n\r\n}\r\n","function WebGLExtensions( gl ) {\r\n\r\n    const extensions = {};\r\n\r\n    function getExtension( name ) {\r\n\r\n        if ( extensions[name] !== undefined ) {\r\n\r\n            return extensions[name];\r\n\r\n        }\r\n\r\n        let extension;\r\n\r\n        switch ( name ) {\r\n\r\n            case 'WEBGL_depth_texture':\r\n                extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) ||\r\n                            gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\r\n                break;\r\n\r\n            case 'EXT_texture_filter_anisotropic':\r\n                extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) ||\r\n                            gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) ||\r\n                            gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\r\n                break;\r\n\r\n            case 'WEBGL_compressed_texture_s3tc':\r\n                extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) ||\r\n                            gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) ||\r\n                            gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\r\n                break;\r\n\r\n            case 'WEBGL_compressed_texture_pvrtc':\r\n                extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) ||\r\n                           gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\r\n                break;\r\n\r\n            default:\r\n                extension = gl.getExtension( name );\r\n\r\n        }\r\n\r\n        extensions[name] = extension;\r\n\r\n        return extension;\r\n\r\n    }\r\n\r\n    return {\r\n\r\n        has: function( name ) {\r\n\r\n            return getExtension( name ) !== null;\r\n\r\n        },\r\n\r\n        init: function( capabilities ) {\r\n\r\n            if ( capabilities.isWebGL2 ) {\r\n\r\n                getExtension( 'EXT_color_buffer_float' );\r\n                getExtension( 'WEBGL_clip_cull_distance' );\r\n\r\n            } else {\r\n\r\n                getExtension( 'WEBGL_depth_texture' );\r\n                getExtension( 'OES_texture_float' );\r\n                getExtension( 'OES_texture_half_float' );\r\n                getExtension( 'OES_texture_half_float_linear' );\r\n                getExtension( 'OES_standard_derivatives' );\r\n                getExtension( 'OES_element_index_uint' );\r\n                getExtension( 'OES_vertex_array_object' );\r\n                getExtension( 'ANGLE_instanced_arrays' );\r\n\r\n            }\r\n\r\n            getExtension( 'OES_texture_float_linear' );\r\n            getExtension( 'EXT_color_buffer_half_float' );\r\n            getExtension( 'WEBGL_multisampled_render_to_texture' );\r\n\r\n        },\r\n\r\n        get: function( name ) {\r\n\r\n            const extension = getExtension( name );\r\n\r\n            if ( extension === null ) {\r\n\r\n                console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\r\n\r\n            }\r\n\r\n            return extension;\r\n\r\n        }\r\n\r\n    };\r\n\r\n}\r\n\r\nexport { WebGLExtensions };\r\n","function WebGLCapabilities( gl, extensions, parameters ) {\r\n\r\n    let maxAnisotropy;\r\n\r\n    function getMaxAnisotropy() {\r\n\r\n        if ( maxAnisotropy !== undefined ) return maxAnisotropy;\r\n\r\n        if ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\r\n\r\n            const extension = extensions.get( 'EXT_texture_filter_anisotropic' );\r\n\r\n            maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\r\n\r\n        } else {\r\n\r\n            maxAnisotropy = 0;\r\n\r\n        }\r\n\r\n        return maxAnisotropy;\r\n\r\n    }\r\n\r\n    function getMaxPrecision( precision ) {\r\n\r\n        if ( precision === 'highp' ) {\r\n\r\n            if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\r\n                gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\r\n\r\n                return 'highp';\r\n\r\n            }\r\n\r\n            precision = 'mediump';\r\n\r\n        }\r\n\r\n        if ( precision === 'mediump' ) {\r\n\r\n            if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\r\n                gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\r\n\r\n                return 'mediump';\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return 'lowp';\r\n\r\n    }\r\n\r\n    const isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl.constructor.name === 'WebGL2RenderingContext';\r\n\r\n    let precision = parameters.precision !== undefined ? parameters.precision : 'highp';\r\n    const maxPrecision = getMaxPrecision( precision );\r\n\r\n    if ( maxPrecision !== precision ) {\r\n\r\n        console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\r\n        precision = maxPrecision;\r\n\r\n    }\r\n\r\n    const drawBuffers = isWebGL2 || extensions.has( 'WEBGL_draw_buffers' );\r\n\r\n    const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\r\n\r\n    const maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\r\n    const maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\r\n    const maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\r\n    const maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\r\n\r\n    const maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\r\n    const maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\r\n    const maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\r\n    const maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\r\n\r\n    const vertexTextures = maxVertexTextures > 0;\r\n    const floatFragmentTextures = isWebGL2 || extensions.has( 'OES_texture_float' );\r\n    const floatVertexTextures = vertexTextures && floatFragmentTextures;\r\n\r\n    const maxSamples = isWebGL2 ? gl.getParameter( gl.MAX_SAMPLES ) : 0;\r\n\r\n    return {\r\n\r\n        isWebGL2: isWebGL2,\r\n\r\n        drawBuffers: drawBuffers,\r\n\r\n        getMaxAnisotropy: getMaxAnisotropy,\r\n        getMaxPrecision: getMaxPrecision,\r\n\r\n        precision: precision,\r\n        logarithmicDepthBuffer: logarithmicDepthBuffer,\r\n\r\n        maxTextures: maxTextures,\r\n        maxVertexTextures: maxVertexTextures,\r\n        maxTextureSize: maxTextureSize,\r\n        maxCubemapSize: maxCubemapSize,\r\n\r\n        maxAttributes: maxAttributes,\r\n        maxVertexUniforms: maxVertexUniforms,\r\n        maxVaryings: maxVaryings,\r\n        maxFragmentUniforms: maxFragmentUniforms,\r\n\r\n        vertexTextures: vertexTextures,\r\n        floatFragmentTextures: floatFragmentTextures,\r\n        floatVertexTextures: floatVertexTextures,\r\n\r\n        maxSamples: maxSamples\r\n\r\n    };\r\n\r\n}\r\n\r\n\r\nexport { WebGLCapabilities };\r\n","export const SceneRevealMode = {\r\n    Default: 0,\r\n    Gradual: 1,\r\n    Instant: 2\r\n};\r\n","import * as THREE from 'three';\r\nimport { SplatScene } from './SplatScene.js';\r\nimport { SplatTree } from './splattree/SplatTree.js';\r\nimport { WebGLExtensions } from './three-shim/WebGLExtensions.js';\r\nimport { WebGLCapabilities } from './three-shim/WebGLCapabilities.js';\r\nimport { uintEncodedFloat, rgbaArrayToInteger } from './Util.js';\r\nimport { Constants } from './Constants.js';\r\nimport { SceneRevealMode } from './SceneRevealMode.js';\r\n\r\nconst dummyGeometry = new THREE.BufferGeometry();\r\nconst dummyMaterial = new THREE.MeshBasicMaterial();\r\n\r\nconst COVARIANCES_ELEMENTS_PER_SPLAT = 6;\r\nconst CENTER_COLORS_ELEMENTS_PER_SPLAT = 4;\r\n\r\nconst SCENE_FADEIN_RATE_FAST = 0.012;\r\nconst SCENE_FADEIN_RATE_GRADUAL = 0.003;\r\n\r\nconst VISIBLE_REGION_EXPANSION_DELTA = 1;\r\n\r\n/**\r\n * SplatMesh: Container for one or more splat scenes, abstracting them into a single unified container for\r\n * splat data. Additionally contains data structures and code to make the splat data renderable as a Three.js mesh.\r\n */\r\nexport class SplatMesh extends THREE.Mesh {\r\n\r\n    constructor(dynamicMode = true, halfPrecisionCovariancesOnGPU = false, devicePixelRatio = 1,\r\n                enableDistancesComputationOnGPU = true, integerBasedDistancesComputation = false,\r\n                antialiased = false, maxScreenSpaceSplatSize = 2048) {\r\n        super(dummyGeometry, dummyMaterial);\r\n        // Reference to a Three.js renderer\r\n        this.renderer = undefined;\r\n        // Use 16-bit floating point values when storing splat covariance data in textures, instead of 32-bit\r\n        this.halfPrecisionCovariancesOnGPU = halfPrecisionCovariancesOnGPU;\r\n        // When 'dynamicMode' is true, scenes are assumed to be non-static. Dynamic scenes are handled differently\r\n        // and certain optimizations cannot be made for them. Additionally, by default, all splat data retrieved from\r\n        // this splat mesh will not have their scene transform applied to them if the splat mesh is dynamic. That\r\n        // can be overriden via parameters to the individual functions that are used to retrieve splat data.\r\n        this.dynamicMode = dynamicMode;\r\n        // Ratio of the resolution in physical pixels to the resolution in CSS pixels for the current display device\r\n        this.devicePixelRatio = devicePixelRatio;\r\n        // Use a transform feedback to calculate splat distances from the camera\r\n        this.enableDistancesComputationOnGPU = enableDistancesComputationOnGPU;\r\n        // Use a faster integer-based approach for calculating splat distances from the camera\r\n        this.integerBasedDistancesComputation = integerBasedDistancesComputation;\r\n        // When true, will perform additional steps during rendering to address artifacts caused by the rendering of gaussians at a\r\n        // substantially different resolution than that at which they were rendered during training. This will only work correctly\r\n        // for models that were trained using a process that utilizes this compensation calculation. For more details:\r\n        // https://github.com/nerfstudio-project/gsplat/pull/117\r\n        // https://github.com/graphdeco-inria/gaussian-splatting/issues/294#issuecomment-1772688093\r\n        this.antialiased = antialiased;\r\n        // Specify the maximum clip space splat size, can help deal with large splats that get too unwieldy\r\n        this.maxScreenSpaceSplatSize = maxScreenSpaceSplatSize;\r\n        // The individual splat scenes stored in this splat mesh, each containing their own transform\r\n        this.scenes = [];\r\n        // Special octree tailored to SplatMesh instances\r\n        this.splatTree = null;\r\n        this.baseSplatTree = null;\r\n        // Textures in which splat data will be stored for rendering\r\n        this.splatDataTextures = {};\r\n        this.distancesTransformFeedback = {\r\n            'id': null,\r\n            'vertexShader': null,\r\n            'fragmentShader': null,\r\n            'program': null,\r\n            'centersBuffer': null,\r\n            'transformIndexesBuffer': null,\r\n            'outDistancesBuffer': null,\r\n            'centersLoc': -1,\r\n            'modelViewProjLoc': -1,\r\n            'transformIndexesLoc': -1,\r\n            'transformsLocs': []\r\n        };\r\n        this.globalSplatIndexToLocalSplatIndexMap = [];\r\n        this.globalSplatIndexToSceneIndexMap = [];\r\n\r\n        this.lastBuildSplatCount = 0;\r\n        this.lastBuildScenes = [];\r\n        this.lastBuildMaxSplatCount = 0;\r\n        this.lastBuildSceneCount = 0;\r\n        this.firstRenderTime = -1;\r\n        this.finalBuild = false;\r\n\r\n        this.webGLUtils = null;\r\n\r\n        this.boundingBox = new THREE.Box3();\r\n        this.calculatedSceneCenter = new THREE.Vector3();\r\n        this.maxSplatDistanceFromSceneCenter = 0;\r\n        this.visibleRegionBufferRadius = 0;\r\n        this.visibleRegionRadius = 0;\r\n        this.visibleRegionFadeStartRadius = 0;\r\n        this.visibleRegionChanging = false;\r\n\r\n        this.splatScale = 1.0;\r\n        this.pointCloudModeEnabled = false;\r\n\r\n        this.disposed = false;\r\n        this.lastRenderer = null;\r\n        this.visible = false;\r\n    }\r\n\r\n    /**\r\n     * Build the Three.js material that is used to render the splats.\r\n     * @param {number} dynamicMode If true, it means the scene geometry represented by this splat mesh is not stationary or\r\n     *                             that the splat count might change\r\n     * @param {boolean} antialiased If true, calculate compensation factor to deal with gaussians being rendered at a significantly\r\n     *                              different resolution than that of their training\r\n     * @param {number} maxScreenSpaceSplatSize The maximum clip space splat size\r\n     * @param {number} splatScale Value by which all splats are scaled in screen-space (default is 1.0)\r\n     * @param {number} pointCloudModeEnabled Render all splats as screen-space circles\r\n     * @return {THREE.ShaderMaterial}\r\n     */\r\n    static buildMaterial(dynamicMode = false, antialiased = false,\r\n                         maxScreenSpaceSplatSize = 2048, splatScale = 1.0, pointCloudModeEnabled = false) {\r\n\r\n        // Contains the code to project 3D covariance to 2D and from there calculate the quad (using the eigen vectors of the\r\n        // 2D covariance) that is ultimately rasterized\r\n        let vertexShaderSource = `\r\n            precision highp float;\r\n            #include <common>\r\n\r\n            attribute uint splatIndex;\r\n\r\n            uniform highp sampler2D covariancesTexture;\r\n            uniform highp usampler2D centersColorsTexture;`;\r\n\r\n        if (dynamicMode) {\r\n            vertexShaderSource += `\r\n                uniform highp usampler2D transformIndexesTexture;\r\n                uniform highp mat4 transforms[${Constants.MaxScenes}];\r\n                uniform vec2 transformIndexesTextureSize;\r\n            `;\r\n        }\r\n\r\n        vertexShaderSource += `\r\n            uniform vec2 focal;\r\n            uniform float orthoZoom;\r\n            uniform int orthographicMode;\r\n            uniform int pointCloudModeEnabled;\r\n            uniform float inverseFocalAdjustment;\r\n            uniform vec2 viewport;\r\n            uniform vec2 basisViewport;\r\n            uniform vec2 covariancesTextureSize;\r\n            uniform vec2 centersColorsTextureSize;\r\n            uniform float visibleRegionRadius;\r\n            uniform float visibleRegionFadeStartRadius;\r\n            uniform float firstRenderTime;\r\n            uniform float currentTime;\r\n            uniform int fadeInComplete;\r\n            uniform vec3 sceneCenter;\r\n            uniform float splatScale;\r\n\r\n            varying vec4 vColor;\r\n            varying vec2 vUv;\r\n\r\n            varying vec2 vPosition;\r\n\r\n            const float sqrt8 = sqrt(8.0);\r\n            const float minAlpha = 1.0 / 255.0;\r\n\r\n            const vec4 encodeNorm4 = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\r\n            const uvec4 mask4 = uvec4(uint(0x000000FF), uint(0x0000FF00), uint(0x00FF0000), uint(0xFF000000));\r\n            const uvec4 shift4 = uvec4(0, 8, 16, 24);\r\n            vec4 uintToRGBAVec (uint u) {\r\n               uvec4 urgba = mask4 & u;\r\n               urgba = urgba >> shift4;\r\n               vec4 rgba = vec4(urgba) * encodeNorm4;\r\n               return rgba;\r\n            }\r\n\r\n            vec2 getDataUV(in int stride, in int offset, in vec2 dimensions) {\r\n                vec2 samplerUV = vec2(0.0, 0.0);\r\n                float d = float(splatIndex * uint(stride) + uint(offset)) / dimensions.x;\r\n                samplerUV.y = float(floor(d)) / dimensions.y;\r\n                samplerUV.x = fract(d);\r\n                return samplerUV;\r\n            }\r\n\r\n            void main () {\r\n\r\n                uvec4 sampledCenterColor = texture(centersColorsTexture, getDataUV(1, 0, centersColorsTextureSize));\r\n                vec3 splatCenter = uintBitsToFloat(uvec3(sampledCenterColor.gba));`;\r\n\r\n            if (dynamicMode) {\r\n                vertexShaderSource += `\r\n                    uint transformIndex = texture(transformIndexesTexture, getDataUV(1, 0, transformIndexesTextureSize)).r;\r\n                    mat4 transform = transforms[transformIndex];\r\n                    mat4 transformModelViewMatrix = modelViewMatrix * transform;\r\n                `;\r\n            } else {\r\n                vertexShaderSource += `mat4 transformModelViewMatrix = modelViewMatrix;`;\r\n            }\r\n\r\n            vertexShaderSource += `\r\n                vec4 viewCenter = transformModelViewMatrix * vec4(splatCenter, 1.0);\r\n\r\n                vec4 clipCenter = projectionMatrix * viewCenter;\r\n\r\n                float clip = 1.2 * clipCenter.w;\r\n                if (clipCenter.z < -clip || clipCenter.x < -clip || clipCenter.x > clip || clipCenter.y < -clip || clipCenter.y > clip) {\r\n                    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\r\n                    return;\r\n                }\r\n\r\n                vPosition = position.xy;\r\n                vColor = uintToRGBAVec(sampledCenterColor.r);\r\n\r\n                vec2 sampledCovarianceA = texture(covariancesTexture, getDataUV(3, 0, covariancesTextureSize)).rg;\r\n                vec2 sampledCovarianceB = texture(covariancesTexture, getDataUV(3, 1, covariancesTextureSize)).rg;\r\n                vec2 sampledCovarianceC = texture(covariancesTexture, getDataUV(3, 2, covariancesTextureSize)).rg;\r\n\r\n                vec3 cov3D_M11_M12_M13 = vec3(sampledCovarianceA.rg, sampledCovarianceB.r);\r\n                vec3 cov3D_M22_M23_M33 = vec3(sampledCovarianceB.g, sampledCovarianceC.rg);\r\n\r\n                // Construct the 3D covariance matrix\r\n                mat3 Vrk = mat3(\r\n                    cov3D_M11_M12_M13.x, cov3D_M11_M12_M13.y, cov3D_M11_M12_M13.z,\r\n                    cov3D_M11_M12_M13.y, cov3D_M22_M23_M33.x, cov3D_M22_M23_M33.y,\r\n                    cov3D_M11_M12_M13.z, cov3D_M22_M23_M33.y, cov3D_M22_M23_M33.z\r\n                );\r\n\r\n                // Construct the Jacobian of the affine approximation of the projection matrix. It will be used to transform the\r\n                // 3D covariance matrix instead of using the actual projection matrix because that transformation would\r\n                // require a non-linear component (perspective division) which would yield a non-gaussian result. (This assumes\r\n                // the current projection is a perspective projection).\r\n\r\n                mat3 J;\r\n                if (orthographicMode == 1) {\r\n                    J = transpose(mat3(orthoZoom, 0.0, 0.0,\r\n                                       0.0, orthoZoom, 0.0,\r\n                                       0.0, 0.0, 0.0));\r\n                } else {\r\n                    float s = 1.0 / (viewCenter.z * viewCenter.z);\r\n                    J = mat3(\r\n                        focal.x / viewCenter.z, 0., -(focal.x * viewCenter.x) * s,\r\n                        0., focal.y / viewCenter.z, -(focal.y * viewCenter.y) * s,\r\n                        0., 0., 0.\r\n                    );\r\n                }\r\n\r\n                // Concatenate the projection approximation with the model-view transformation\r\n                mat3 W = transpose(mat3(transformModelViewMatrix));\r\n                mat3 T = W * J;\r\n\r\n                // Transform the 3D covariance matrix (Vrk) to compute the 2D covariance matrix\r\n                mat3 cov2Dm = transpose(T) * Vrk * T;\r\n                `;\r\n\r\n            if (antialiased) {\r\n                vertexShaderSource += `\r\n                    float detOrig = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\r\n                    cov2Dm[0][0] += 0.3;\r\n                    cov2Dm[1][1] += 0.3;\r\n                    float detBlur = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\r\n                    float compensation = sqrt(max(detOrig / detBlur, 0.0));\r\n                `;\r\n            } else {\r\n                vertexShaderSource += `\r\n                    cov2Dm[0][0] += 0.3;\r\n                    cov2Dm[1][1] += 0.3;\r\n                    float compensation = 1.0;\r\n                `;\r\n            }\r\n\r\n            vertexShaderSource += `\r\n\r\n                vColor.a *= compensation;\r\n\r\n                if (vColor.a < minAlpha) return;\r\n\r\n                // We are interested in the upper-left 2x2 portion of the projected 3D covariance matrix because\r\n                // we only care about the X and Y values. We want the X-diagonal, cov2Dm[0][0],\r\n                // the Y-diagonal, cov2Dm[1][1], and the correlation between the two cov2Dm[0][1]. We don't\r\n                // need cov2Dm[1][0] because it is a symetric matrix.\r\n                vec3 cov2Dv = vec3(cov2Dm[0][0], cov2Dm[0][1], cov2Dm[1][1]);\r\n\r\n                vec3 ndcCenter = clipCenter.xyz / clipCenter.w;\r\n\r\n                // We now need to solve for the eigen-values and eigen vectors of the 2D covariance matrix\r\n                // so that we can determine the 2D basis for the splat. This is done using the method described\r\n                // here: https://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\r\n                // After calculating the eigen-values and eigen-vectors, we calculate the basis for rendering the splat\r\n                // by normalizing the eigen-vectors and then multiplying them by (sqrt(8) * eigen-value), which is\r\n                // equal to scaling them by sqrt(8) standard deviations.\r\n                //\r\n                // This is a different approach than in the original work at INRIA. In that work they compute the\r\n                // max extents of the projected splat in screen space to form a screen-space aligned bounding rectangle\r\n                // which forms the geometry that is actually rasterized. The dimensions of that bounding box are 3.0\r\n                // times the maximum eigen-value, or 3 standard deviations. They then use the inverse 2D covariance\r\n                // matrix (called 'conic') in the CUDA rendering thread to determine fragment opacity by calculating the\r\n                // full gaussian: exp(-0.5 * (X - mean) * conic * (X - mean)) * splat opacity\r\n                float a = cov2Dv.x;\r\n                float d = cov2Dv.z;\r\n                float b = cov2Dv.y;\r\n                float D = a * d - b * b;\r\n                float trace = a + d;\r\n                float traceOver2 = 0.5 * trace;\r\n                float term2 = sqrt(max(0.1f, traceOver2 * traceOver2 - D));\r\n                float eigenValue1 = traceOver2 + term2;\r\n                float eigenValue2 = traceOver2 - term2;\r\n\r\n                if (pointCloudModeEnabled == 1) {\r\n                    eigenValue1 = eigenValue2 = 0.2;\r\n                }\r\n\r\n                if (eigenValue2 <= 0.0) return;\r\n\r\n                vec2 eigenVector1 = normalize(vec2(b, eigenValue1 - a));\r\n                // since the eigen vectors are orthogonal, we derive the second one from the first\r\n                vec2 eigenVector2 = vec2(eigenVector1.y, -eigenVector1.x);\r\n\r\n                // We use sqrt(8) standard deviations instead of 3 to eliminate more of the splat with a very low opacity.\r\n                vec2 basisVector1 = eigenVector1 * splatScale * min(sqrt8 * sqrt(eigenValue1), ${parseInt(maxScreenSpaceSplatSize)}.0);\r\n                vec2 basisVector2 = eigenVector2 * splatScale * min(sqrt8 * sqrt(eigenValue2), ${parseInt(maxScreenSpaceSplatSize)}.0);\r\n\r\n                if (fadeInComplete == 0) {\r\n                    float opacityAdjust = 1.0;\r\n                    float centerDist = length(splatCenter - sceneCenter);\r\n                    float renderTime = max(currentTime - firstRenderTime, 0.0);\r\n\r\n                    float fadeDistance = 0.75;\r\n                    float distanceLoadFadeInFactor = step(visibleRegionFadeStartRadius, centerDist);\r\n                    distanceLoadFadeInFactor = (1.0 - distanceLoadFadeInFactor) +\r\n                                               (1.0 - clamp((centerDist - visibleRegionFadeStartRadius) / fadeDistance, 0.0, 1.0)) *\r\n                                               distanceLoadFadeInFactor;\r\n                    opacityAdjust *= distanceLoadFadeInFactor;\r\n                    vColor.a *= opacityAdjust;\r\n                }\r\n\r\n                vec2 ndcOffset = vec2(vPosition.x * basisVector1 + vPosition.y * basisVector2) *\r\n                                 basisViewport * 2.0 * inverseFocalAdjustment;\r\n\r\n                vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\r\n                gl_Position = quadPos;\r\n\r\n                // Scale the position data we send to the fragment shader\r\n                vPosition *= sqrt8;\r\n            }`;\r\n\r\n        const fragmentShaderSource = `\r\n            precision highp float;\r\n            #include <common>\r\n \r\n            uniform vec3 debugColor;\r\n\r\n            varying vec4 vColor;\r\n            varying vec2 vUv;\r\n\r\n            varying vec2 vPosition;\r\n\r\n            void main () {\r\n                // Compute the positional squared distance from the center of the splat to the current fragment.\r\n                float A = dot(vPosition, vPosition);\r\n                // Since the positional data in vPosition has been scaled by sqrt(8), the squared result will be\r\n                // scaled by a factor of 8. If the squared result is larger than 8, it means it is outside the ellipse\r\n                // defined by the rectangle formed by vPosition. It also means it's farther\r\n                // away than sqrt(8) standard deviations from the mean.\r\n                if (A > 8.0) discard;\r\n                vec3 color = vColor.rgb;\r\n\r\n                // Since the rendered splat is scaled by sqrt(8), the inverse covariance matrix that is part of\r\n                // the gaussian formula becomes the identity matrix. We're then left with (X - mean) * (X - mean),\r\n                // and since 'mean' is zero, we have X * X, which is the same as A:\r\n                float opacity = exp(-0.5 * A) * vColor.a;\r\n\r\n                gl_FragColor = vec4(color.rgb, opacity);\r\n            }`;\r\n\r\n        const uniforms = {\r\n            'sceneCenter': {\r\n                'type': 'v3',\r\n                'value': new THREE.Vector3()\r\n            },\r\n            'fadeInComplete': {\r\n                'type': 'i',\r\n                'value': 0\r\n            },\r\n            'orthographicMode': {\r\n                'type': 'i',\r\n                'value': 0\r\n            },\r\n            'visibleRegionFadeStartRadius': {\r\n                'type': 'f',\r\n                'value': 0.0\r\n            },\r\n            'visibleRegionRadius': {\r\n                'type': 'f',\r\n                'value': 0.0\r\n            },\r\n            'currentTime': {\r\n                'type': 'f',\r\n                'value': 0.0\r\n            },\r\n            'firstRenderTime': {\r\n                'type': 'f',\r\n                'value': 0.0\r\n            },\r\n            'covariancesTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'centersColorsTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'focal': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2()\r\n            },\r\n            'orthoZoom': {\r\n                'type': 'f',\r\n                'value': 1.0\r\n            },\r\n            'inverseFocalAdjustment': {\r\n                'type': 'f',\r\n                'value': 1.0\r\n            },\r\n            'viewport': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2()\r\n            },\r\n            'basisViewport': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2()\r\n            },\r\n            'debugColor': {\r\n                'type': 'v3',\r\n                'value': new THREE.Color()\r\n            },\r\n            'covariancesTextureSize': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2(1024, 1024)\r\n            },\r\n            'centersColorsTextureSize': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2(1024, 1024)\r\n            },\r\n            'splatScale': {\r\n                'type': 'f',\r\n                'value': splatScale\r\n            },\r\n            'pointCloudModeEnabled': {\r\n                'type': 'i',\r\n                'value': pointCloudModeEnabled ? 1 : 0\r\n            }\r\n        };\r\n\r\n        if (dynamicMode) {\r\n            uniforms['transformIndexesTexture'] = {\r\n                'type': 't',\r\n                'value': null\r\n            };\r\n            const transformMatrices = [];\r\n            for (let i = 0; i < Constants.MaxScenes; i++) {\r\n                transformMatrices.push(new THREE.Matrix4());\r\n            }\r\n            uniforms['transforms'] = {\r\n                'type': 'mat4',\r\n                'value': transformMatrices\r\n            };\r\n            uniforms['transformIndexesTextureSize'] = {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2(1024, 1024)\r\n            };\r\n        }\r\n\r\n        const material = new THREE.ShaderMaterial({\r\n            uniforms: uniforms,\r\n            vertexShader: vertexShaderSource,\r\n            fragmentShader: fragmentShaderSource,\r\n            transparent: true,\r\n            alphaTest: 1.0,\r\n            blending: THREE.NormalBlending,\r\n            depthTest: true,\r\n            depthWrite: false,\r\n            side: THREE.DoubleSide\r\n        });\r\n\r\n        return material;\r\n    }\r\n\r\n    /**\r\n     * Build the Three.js geometry that will be used to render the splats. The geometry is instanced and is made up of\r\n     * vertices for a single quad as well as an attribute buffer for the splat indexes.\r\n     * @param {number} maxSplatCount The maximum number of splats that the geometry will need to accomodate\r\n     * @return {THREE.InstancedBufferGeometry}\r\n     */\r\n    static buildGeomtery(maxSplatCount) {\r\n\r\n        const baseGeometry = new THREE.BufferGeometry();\r\n        baseGeometry.setIndex([0, 1, 2, 0, 2, 3]);\r\n\r\n        // Vertices for the instanced quad\r\n        const positionsArray = new Float32Array(4 * 3);\r\n        const positions = new THREE.BufferAttribute(positionsArray, 3);\r\n        baseGeometry.setAttribute('position', positions);\r\n        positions.setXYZ(0, -1.0, -1.0, 0.0);\r\n        positions.setXYZ(1, -1.0, 1.0, 0.0);\r\n        positions.setXYZ(2, 1.0, 1.0, 0.0);\r\n        positions.setXYZ(3, 1.0, -1.0, 0.0);\r\n        positions.needsUpdate = true;\r\n\r\n        const geometry = new THREE.InstancedBufferGeometry().copy(baseGeometry);\r\n\r\n        // Splat index buffer\r\n        const splatIndexArray = new Uint32Array(maxSplatCount);\r\n        const splatIndexes = new THREE.InstancedBufferAttribute(splatIndexArray, 1, false);\r\n        splatIndexes.setUsage(THREE.DynamicDrawUsage);\r\n        geometry.setAttribute('splatIndex', splatIndexes);\r\n\r\n        geometry.instanceCount = 0;\r\n\r\n        return geometry;\r\n    }\r\n\r\n    /**\r\n     * Build a container for each scene managed by this splat mesh based on an instance of SplatBuffer, along with optional\r\n     * transform data (position, scale, rotation) passed to the splat mesh during the build process.\r\n     * @param {Array<THREE.Matrix4>} splatBuffers SplatBuffer instances containing splats for each scene\r\n     * @param {Array<object>} sceneOptions Array of options objects: {\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     * }\r\n     * @return {Array<THREE.Matrix4>}\r\n     */\r\n    static buildScenes(splatBuffers, sceneOptions) {\r\n        const scenes = [];\r\n        scenes.length = splatBuffers.length;\r\n        for (let i = 0; i < splatBuffers.length; i++) {\r\n            const splatBuffer = splatBuffers[i];\r\n            const options = sceneOptions[i] || {};\r\n            let positionArray = options['position'] || [0, 0, 0];\r\n            let rotationArray = options['rotation'] || [0, 0, 0, 1];\r\n            let scaleArray = options['scale'] || [1, 1, 1];\r\n            const position = new THREE.Vector3().fromArray(positionArray);\r\n            const rotation = new THREE.Quaternion().fromArray(rotationArray);\r\n            const scale = new THREE.Vector3().fromArray(scaleArray);\r\n            scenes[i] = SplatMesh.createScene(splatBuffer, position, rotation, scale, options.splatAlphaRemovalThreshold || 1);\r\n        }\r\n        return scenes;\r\n    }\r\n\r\n    static createScene(splatBuffer, position, rotation, scale, minimumAlpha) {\r\n        return new SplatScene(splatBuffer, position, rotation, scale, minimumAlpha);\r\n    }\r\n\r\n    /**\r\n     * Build data structures that map global splat indexes (based on a unified index across all splat buffers) to\r\n     * local data within a single scene.\r\n     * @param {Array<SplatBuffer>} splatBuffers Instances of SplatBuffer off which to build the maps\r\n     * @return {object}\r\n     */\r\n    static buildSplatIndexMaps(splatBuffers) {\r\n        const localSplatIndexMap = [];\r\n        const sceneIndexMap = [];\r\n        let totalSplatCount = 0;\r\n        for (let s = 0; s < splatBuffers.length; s++) {\r\n            const splatBuffer = splatBuffers[s];\r\n            const maxSplatCount = splatBuffer.getMaxSplatCount();\r\n            for (let i = 0; i < maxSplatCount; i++) {\r\n                localSplatIndexMap[totalSplatCount] = i;\r\n                sceneIndexMap[totalSplatCount] = s;\r\n                totalSplatCount++;\r\n            }\r\n        }\r\n        return {\r\n            localSplatIndexMap,\r\n            sceneIndexMap\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Build an instance of SplatTree (a specialized octree) for the given splat mesh.\r\n     * @param {Array<number>} minAlphas Array of minimum splat slphas for each scene\r\n     * @param {function} onSplatTreeIndexesUpload Function to be called when the upload of splat centers to the splat tree\r\n     *                                            builder worker starts and finishes.\r\n     * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\r\n     *                                           the format produced by the splat tree builder worker starts and ends.\r\n     * @return {SplatTree}\r\n     */\r\n     buildSplatTree = function(minAlphas = [], onSplatTreeIndexesUpload, onSplatTreeConstruction) {\r\n        return new Promise((resolve) => {\r\n            this.disposeSplatTree();\r\n            // TODO: expose SplatTree constructor parameters (maximumDepth and maxCentersPerNode) so that they can\r\n            // be configured on a per-scene basis\r\n            this.baseSplatTree = new SplatTree(8, 1000);\r\n            const buildStartTime = performance.now();\r\n            const splatColor = new THREE.Vector4();\r\n            this.baseSplatTree.processSplatMesh(this, (splatIndex) => {\r\n                this.getSplatColor(splatIndex, splatColor);\r\n                const sceneIndex = this.getSceneIndexForSplat(splatIndex);\r\n                const minAlpha = minAlphas[sceneIndex] || 1;\r\n                return splatColor.w >= minAlpha;\r\n            }, onSplatTreeIndexesUpload, onSplatTreeConstruction)\r\n            .then(() => {\r\n                const buildTime = performance.now() - buildStartTime;\r\n                console.log('SplatTree build: ' + buildTime + ' ms');\r\n                if (this.disposed) {\r\n                    resolve();\r\n                } else {\r\n\r\n                    this.splatTree = this.baseSplatTree;\r\n                    this.baseSplatTree = null;\r\n\r\n                    let leavesWithVertices = 0;\r\n                    let avgSplatCount = 0;\r\n                    let maxSplatCount = 0;\r\n                    let nodeCount = 0;\r\n\r\n                    this.splatTree.visitLeaves((node) => {\r\n                        const nodeSplatCount = node.data.indexes.length;\r\n                        if (nodeSplatCount > 0) {\r\n                            avgSplatCount += nodeSplatCount;\r\n                            maxSplatCount = Math.max(maxSplatCount, nodeSplatCount);\r\n                            nodeCount++;\r\n                            leavesWithVertices++;\r\n                        }\r\n                    });\r\n                    console.log(`SplatTree leaves: ${this.splatTree.countLeaves()}`);\r\n                    console.log(`SplatTree leaves with splats:${leavesWithVertices}`);\r\n                    avgSplatCount = avgSplatCount / nodeCount;\r\n                    console.log(`Avg splat count per node: ${avgSplatCount}`);\r\n                    console.log(`Total splat count: ${this.getSplatCount()}`);\r\n                    resolve();\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Construct this instance of SplatMesh.\r\n     * @param {Array<SplatBuffer>} splatBuffers The base splat data, instances of SplatBuffer\r\n     * @param {Array<object>} sceneOptions Dynamic options for each scene {\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     *\r\n     * }\r\n     * @param {boolean} keepSceneTransforms For a scene that already exists and is being overwritten, this flag\r\n     *                                      says to keep the transform from the existing scene.\r\n     * @param {boolean} finalBuild Will the splat mesh be in its final state after this build?\r\n     * @param {function} onSplatTreeIndexesUpload Function to be called when the upload of splat centers to the splat tree\r\n     *                                            builder worker starts and finishes.\r\n     * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\r\n     *                                           the format produced by the splat tree builder worker starts and ends.\r\n     * @return {object} Object containing info about the splats that are updated\r\n     */\r\n    build(splatBuffers, sceneOptions, keepSceneTransforms = true, finalBuild = false,\r\n          onSplatTreeIndexesUpload, onSplatTreeConstruction) {\r\n\r\n        this.sceneOptions = sceneOptions;\r\n        this.finalBuild = finalBuild;\r\n\r\n        const maxSplatCount = SplatMesh.getTotalMaxSplatCountForSplatBuffers(splatBuffers);\r\n\r\n        const newScenes = SplatMesh.buildScenes(splatBuffers, sceneOptions);\r\n        if (keepSceneTransforms) {\r\n            for (let i = 0; i < this.scenes.length && i < newScenes.length; i++) {\r\n                const newScene = newScenes[i];\r\n                const existingScene = this.getScene(i);\r\n                newScene.copyTransformData(existingScene);\r\n            }\r\n        }\r\n        this.scenes = newScenes;\r\n\r\n        let splatBuffersChanged = false;\r\n        if (splatBuffers.length !== this.lastBuildScenes.length) {\r\n            splatBuffersChanged = true;\r\n        } else {\r\n            for (let i = 0; i < splatBuffers.length; i++) {\r\n                const splatBuffer = splatBuffers[i];\r\n                if (splatBuffer !== this.lastBuildScenes[i].splatBuffer) {\r\n                    splatBuffersChanged = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        let isUpdateBuild = true;\r\n        if (this.scenes.length !== 1 ||\r\n            this.lastBuildSceneCount !== this.scenes.length ||\r\n            this.lastBuildMaxSplatCount !== maxSplatCount ||\r\n            splatBuffersChanged) {\r\n                isUpdateBuild = false;\r\n       }\r\n\r\n       if (!isUpdateBuild) {\r\n            this.boundingBox = new THREE.Box3();\r\n            this.maxSplatDistanceFromSceneCenter = 0;\r\n            this.visibleRegionBufferRadius = 0;\r\n            this.visibleRegionRadius = 0;\r\n            this.visibleRegionFadeStartRadius = 0;\r\n            this.firstRenderTime = -1;\r\n            this.lastBuildScenes = [];\r\n            this.lastBuildSplatCount = 0;\r\n            this.lastBuildMaxSplatCount = 0;\r\n            this.disposeMeshData();\r\n            this.geometry = SplatMesh.buildGeomtery(maxSplatCount);\r\n            this.material = SplatMesh.buildMaterial(this.dynamicMode, this.antialiased,\r\n                                                    this.maxScreenSpaceSplatSize, this.splatScale, this.pointCloudModeEnabled);\r\n            const indexMaps = SplatMesh.buildSplatIndexMaps(splatBuffers);\r\n            this.globalSplatIndexToLocalSplatIndexMap = indexMaps.localSplatIndexMap;\r\n            this.globalSplatIndexToSceneIndexMap = indexMaps.sceneIndexMap;\r\n        }\r\n\r\n        const splatCount = this.getSplatCount();\r\n        if (this.enableDistancesComputationOnGPU) this.setupDistancesComputationTransformFeedback();\r\n        const dataUpdateResults = this.refreshGPUDataFromSplatBuffers(isUpdateBuild);\r\n\r\n        for (let i = 0; i < this.scenes.length; i++) {\r\n            this.lastBuildScenes[i] = this.scenes[i];\r\n        }\r\n        this.lastBuildSplatCount = splatCount;\r\n        this.lastBuildMaxSplatCount = this.getMaxSplatCount();\r\n        this.lastBuildSceneCount = this.scenes.length;\r\n\r\n        if (finalBuild && this.scenes.length > 0) {\r\n            this.buildSplatTree(sceneOptions.map(options => options.splatAlphaRemovalThreshold || 1),\r\n                                onSplatTreeIndexesUpload, onSplatTreeConstruction)\r\n            .then(() => {\r\n                if (this.onSplatTreeReadyCallback) this.onSplatTreeReadyCallback(this.splatTree);\r\n            });\r\n        }\r\n\r\n        this.visible = (this.scenes.length > 0);\r\n\r\n        return dataUpdateResults;\r\n    }\r\n\r\n    /**\r\n     * Dispose all resources held by the splat mesh\r\n     */\r\n    dispose() {\r\n        this.disposeMeshData();\r\n        this.disposeTextures();\r\n        this.disposeSplatTree();\r\n        if (this.enableDistancesComputationOnGPU) {\r\n            if (this.computeDistancesOnGPUSyncTimeout) {\r\n                clearTimeout(this.computeDistancesOnGPUSyncTimeout);\r\n                this.computeDistancesOnGPUSyncTimeout = null;\r\n            }\r\n            this.disposeDistancesComputationGPUResources();\r\n        }\r\n        this.scenes = [];\r\n        this.distancesTransformFeedback = {\r\n            'id': null,\r\n            'vertexShader': null,\r\n            'fragmentShader': null,\r\n            'program': null,\r\n            'centersBuffer': null,\r\n            'transformIndexesBuffer': null,\r\n            'outDistancesBuffer': null,\r\n            'centersLoc': -1,\r\n            'modelViewProjLoc': -1,\r\n            'transformIndexesLoc': -1,\r\n            'transformsLocs': []\r\n        };\r\n        this.renderer = null;\r\n\r\n        this.globalSplatIndexToLocalSplatIndexMap = [];\r\n        this.globalSplatIndexToSceneIndexMap = [];\r\n\r\n        this.lastBuildSplatCount = 0;\r\n        this.lastBuildScenes = [];\r\n        this.lastBuildMaxSplatCount = 0;\r\n        this.lastBuildSceneCount = 0;\r\n        this.firstRenderTime = -1;\r\n        this.finalBuild = false;\r\n\r\n        this.webGLUtils = null;\r\n\r\n        this.boundingBox = new THREE.Box3();\r\n        this.calculatedSceneCenter = new THREE.Vector3();\r\n        this.maxSplatDistanceFromSceneCenter = 0;\r\n        this.visibleRegionBufferRadius = 0;\r\n        this.visibleRegionRadius = 0;\r\n        this.visibleRegionFadeStartRadius = 0;\r\n        this.visibleRegionChanging = false;\r\n\r\n        this.splatScale = 1.0;\r\n        this.pointCloudModeEnabled = false;\r\n\r\n        this.disposed = true;\r\n        this.lastRenderer = null;\r\n        this.visible = false;\r\n    }\r\n\r\n    /**\r\n     * Dispose of only the Three.js mesh resources (geometry, material, and texture)\r\n     */\r\n    disposeMeshData() {\r\n        if (this.geometry && this.geometry !== dummyGeometry) {\r\n            this.geometry.dispose();\r\n            this.geometry = null;\r\n        }\r\n        if (this.material) {\r\n            this.material.dispose();\r\n            this.material = null;\r\n        }\r\n    }\r\n\r\n    disposeTextures() {\r\n        for (let textureKey in this.splatDataTextures) {\r\n            if (this.splatDataTextures.hasOwnProperty(textureKey)) {\r\n                const textureContainer = this.splatDataTextures[textureKey];\r\n                if (textureContainer.texture) {\r\n                    textureContainer.texture.dispose();\r\n                    textureContainer.texture = null;\r\n                }\r\n            }\r\n        }\r\n        this.splatDataTextures = null;\r\n    }\r\n\r\n    disposeSplatTree() {\r\n        if (this.splatTree) {\r\n            this.splatTree.dispose();\r\n            this.splatTree = null;\r\n        } else if (this.baseSplatTree) {\r\n            this.baseSplatTree.dispose();\r\n            this.baseSplatTree = null;\r\n        }\r\n    }\r\n\r\n    getSplatTree() {\r\n        return this.splatTree;\r\n    }\r\n\r\n    onSplatTreeReady(callback) {\r\n        this.onSplatTreeReadyCallback = callback;\r\n    }\r\n\r\n    /**\r\n     * Get copies of data that are necessary for splat distance computation: splat center positions and splat\r\n     * scene indexes (necessary for applying dynamic scene transformations during distance computation)\r\n     * @param {*} start The index at which to start copying data\r\n     * @param {*} end  The index at which to stop copying data\r\n     * @return {object}\r\n     */\r\n    getDataForDistancesComputation(start, end) {\r\n        const centers = this.integerBasedDistancesComputation ?\r\n                        this.getIntegerCenters(start, end, true) :\r\n                        this.getFloatCenters(start, end, true);\r\n        const sceneIndexes = this.getSceneIndexes(start, end);\r\n        return {\r\n            centers,\r\n            sceneIndexes\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Refresh data textures and GPU buffers with splat data from the splat buffers belonging to this mesh.\r\n     * @param {boolean} sinceLastBuildOnly Specify whether or not to only update for splats that have been added since the last build.\r\n     * @return {object}\r\n     */\r\n    refreshGPUDataFromSplatBuffers(sinceLastBuildOnly) {\r\n        const splatCount = this.getSplatCount();\r\n        this.uploadSplatDataToTextures(sinceLastBuildOnly);\r\n        const updateStart = sinceLastBuildOnly ? this.lastBuildSplatCount : 0;\r\n        const { centers, sceneIndexes } = this.getDataForDistancesComputation(updateStart, splatCount - 1);\r\n        if (this.enableDistancesComputationOnGPU) {\r\n            this.updateGPUDataForDistancesComputation(centers, sceneIndexes, sinceLastBuildOnly);\r\n        }\r\n        return {\r\n            'from': updateStart,\r\n            'to': splatCount - 1,\r\n            'count': splatCount - updateStart,\r\n            'centers': centers,\r\n            'sceneIndexes': sceneIndexes\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Update the GPU buffers that are used for computing splat distances on the GPU.\r\n     * @param {Array<number>} centers Splat center positions\r\n     * @param {Array<number>} sceneIndexes Indexes of the scene to which each splat belongs\r\n     * @param {boolean} sinceLastBuildOnly Specify whether or not to only update for splats that have been added since the last build.\r\n     */\r\n    updateGPUDataForDistancesComputation(centers, sceneIndexes, sinceLastBuildOnly = false) {\r\n        const offset = sinceLastBuildOnly ? this.lastBuildSplatCount : 0;\r\n        this.updateGPUCentersBufferForDistancesComputation(sinceLastBuildOnly, centers, offset);\r\n        this.updateGPUTransformIndexesBufferForDistancesComputation(sinceLastBuildOnly, sceneIndexes, offset);\r\n    }\r\n\r\n    static computeTextureUpdateRegion(startSplat, endSplat, textureWidth, textureHeight, elementsPerTexel, elementsPerSplat) {\r\n        const texelsPerSplat = elementsPerSplat / elementsPerTexel;\r\n\r\n        const startSplatTexels = startSplat * texelsPerSplat;\r\n        const startRow = Math.floor(startSplatTexels / textureWidth);\r\n        const startRowElement = startRow * textureWidth * elementsPerTexel;\r\n\r\n        const endSplatTexels = endSplat * texelsPerSplat;\r\n        const endRow = Math.floor(endSplatTexels / textureWidth);\r\n        const endRowEndElement = endRow * textureWidth * elementsPerTexel + (textureWidth * elementsPerTexel);\r\n\r\n        return {\r\n            'dataStart': startRowElement,\r\n            'dataEnd': endRowEndElement,\r\n            'startRow': startRow,\r\n            'endRow': endRow\r\n        };\r\n    }\r\n\r\n    updateDataTexture(paddedData, textureDesc, textureProps, elementsPerTexel, elementsPerSplat, bytesPerElement, from, to) {\r\n        const gl = this.renderer.getContext();\r\n        const updateRegion = SplatMesh.computeTextureUpdateRegion(from, to, textureDesc.size.x,\r\n                                                                  textureDesc.size.y, elementsPerTexel, elementsPerSplat);\r\n        const updateElementCount = updateRegion.dataEnd - updateRegion.dataStart;\r\n        const updateDataView = new paddedData.constructor(paddedData.buffer,\r\n                                                          updateRegion.dataStart * bytesPerElement, updateElementCount);\r\n        const updateHeight = updateRegion.endRow - updateRegion.startRow + 1;\r\n        const dataTexture = textureDesc.texture;\r\n        const glType = this.webGLUtils.convert(dataTexture.type);\r\n        const glFormat = this.webGLUtils.convert(dataTexture.format, dataTexture.colorSpace);\r\n        const currentTexture = gl.getParameter(gl.TEXTURE_BINDING_2D);\r\n        gl.bindTexture(gl.TEXTURE_2D, textureProps.__webglTexture);\r\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, updateRegion.startRow,\r\n                         textureDesc.size.x, updateHeight, glFormat, glType, updateDataView);\r\n        gl.bindTexture(gl.TEXTURE_2D, currentTexture);\r\n    }\r\n\r\n    /**\r\n     * Refresh data textures with data from the splat buffers for this mesh.\r\n     * @param {boolean} sinceLastBuildOnly Specify whether or not to only update for splats that have been added since the last build.\r\n     */\r\n    uploadSplatDataToTextures(sinceLastBuildOnly) {\r\n\r\n        const COVARIANCES_ELEMENTS_PER_TEXEL = 2;\r\n        const CENTER_COLORS_ELEMENTS_PER_TEXEL = 4;\r\n        const TRANSFORM_INDEXES_ELEMENTS_PER_TEXEL = 1;\r\n\r\n        const maxSplatCount = this.getMaxSplatCount();\r\n        const splatCount = this.getSplatCount();\r\n\r\n        const updateCenterColorsPaddedData = (to, from, centers, colors, paddedCenterColors) => {\r\n            for (let c = to; c < from; c++) {\r\n                const colorsBase = c * 4;\r\n                const centersBase = c * 3;\r\n                const centerColorsBase = c * 4;\r\n                paddedCenterColors[centerColorsBase] = rgbaArrayToInteger(colors, colorsBase);\r\n                paddedCenterColors[centerColorsBase + 1] = uintEncodedFloat(centers[centersBase]);\r\n                paddedCenterColors[centerColorsBase + 2] = uintEncodedFloat(centers[centersBase + 1]);\r\n                paddedCenterColors[centerColorsBase + 3] = uintEncodedFloat(centers[centersBase + 2]);\r\n            }\r\n        };\r\n\r\n        const computeDataTextureSize = (elementsPerTexel, elementsPerSplatl) => {\r\n            const texSize = new THREE.Vector2(4096, 1024);\r\n            while (texSize.x * texSize.y * elementsPerTexel < maxSplatCount * elementsPerSplatl) texSize.y *= 2;\r\n            return texSize;\r\n        };\r\n\r\n        if (!sinceLastBuildOnly) {\r\n\r\n            this.disposeTextures();\r\n\r\n            const covariances = new Float32Array(maxSplatCount * COVARIANCES_ELEMENTS_PER_SPLAT);\r\n            const centers = new Float32Array(maxSplatCount * 3);\r\n            const colors = new Uint8Array(maxSplatCount * 4);\r\n            this.fillSplatDataArrays(covariances, centers, colors);\r\n\r\n            // set up covariances data texture\r\n            const covTexSize = computeDataTextureSize(COVARIANCES_ELEMENTS_PER_TEXEL, 6);\r\n            let CovariancesDataType = this.halfPrecisionCovariancesOnGPU ? Uint16Array : Float32Array;\r\n            let covariancesTextureType = this.halfPrecisionCovariancesOnGPU ? THREE.HalfFloatType : THREE.FloatType;\r\n            const paddedCovariances = new CovariancesDataType(covTexSize.x * covTexSize.y * COVARIANCES_ELEMENTS_PER_TEXEL);\r\n            paddedCovariances.set(covariances);\r\n            const covTex = new THREE.DataTexture(paddedCovariances, covTexSize.x, covTexSize.y, THREE.RGFormat, covariancesTextureType);\r\n            covTex.needsUpdate = true;\r\n            this.material.uniforms.covariancesTexture.value = covTex;\r\n            this.material.uniforms.covariancesTextureSize.value.copy(covTexSize);\r\n\r\n            // set up centers/colors data texture\r\n            const centersColsTexSize = computeDataTextureSize(CENTER_COLORS_ELEMENTS_PER_TEXEL, 4);\r\n            const paddedCentersCols = new Uint32Array(centersColsTexSize.x * centersColsTexSize.y * CENTER_COLORS_ELEMENTS_PER_TEXEL);\r\n            updateCenterColorsPaddedData(0, splatCount, centers, colors, paddedCentersCols);\r\n            const centersColsTex = new THREE.DataTexture(paddedCentersCols, centersColsTexSize.x, centersColsTexSize.y,\r\n                                                         THREE.RGBAIntegerFormat, THREE.UnsignedIntType);\r\n            centersColsTex.internalFormat = 'RGBA32UI';\r\n            centersColsTex.needsUpdate = true;\r\n            this.material.uniforms.centersColorsTexture.value = centersColsTex;\r\n            this.material.uniforms.centersColorsTextureSize.value.copy(centersColsTexSize);\r\n            this.material.uniformsNeedUpdate = true;\r\n\r\n            this.splatDataTextures = {\r\n                'baseData': {\r\n                    'covariances': covariances,\r\n                    'centers': centers,\r\n                    'colors': colors\r\n                },\r\n                'covariances': {\r\n                    'data': paddedCovariances,\r\n                    'texture': covTex,\r\n                    'size': covTexSize\r\n                },\r\n                'centerColors': {\r\n                    'data': paddedCentersCols,\r\n                    'texture': centersColsTex,\r\n                    'size': centersColsTexSize\r\n                }\r\n            };\r\n\r\n            if (this.dynamicMode) {\r\n                const transformIndexesTexSize = computeDataTextureSize(TRANSFORM_INDEXES_ELEMENTS_PER_TEXEL, 4);\r\n                const paddedTransformIndexes = new Uint32Array(transformIndexesTexSize.x *\r\n                                                               transformIndexesTexSize.y * TRANSFORM_INDEXES_ELEMENTS_PER_TEXEL);\r\n                for (let c = 0; c < splatCount; c++) paddedTransformIndexes[c] = this.globalSplatIndexToSceneIndexMap[c];\r\n                const transformIndexesTexture = new THREE.DataTexture(paddedTransformIndexes, transformIndexesTexSize.x,\r\n                                                                      transformIndexesTexSize.y, THREE.RedIntegerFormat,\r\n                                                                      THREE.UnsignedIntType);\r\n                transformIndexesTexture.internalFormat = 'R32UI';\r\n                transformIndexesTexture.needsUpdate = true;\r\n                this.material.uniforms.transformIndexesTexture.value = transformIndexesTexture;\r\n                this.material.uniforms.transformIndexesTextureSize.value.copy(transformIndexesTexSize);\r\n                this.material.uniformsNeedUpdate = true;\r\n                this.splatDataTextures['tansformIndexes'] = {\r\n                    'data': paddedTransformIndexes,\r\n                    'texture': transformIndexesTexture,\r\n                    'size': transformIndexesTexSize\r\n                };\r\n            }\r\n        } else {\r\n\r\n            this.fillSplatDataArrays(this.splatDataTextures.baseData.covariances,\r\n                                     this.splatDataTextures.baseData.centers, this.splatDataTextures.baseData.colors, undefined,\r\n                                     this.lastBuildSplatCount, splatCount - 1, this.lastBuildSplatCount);\r\n\r\n            const covariancesTextureDescriptor = this.splatDataTextures['covariances'];\r\n            const paddedCovariances = covariancesTextureDescriptor.data;\r\n            const covariancesTexture = covariancesTextureDescriptor.texture;\r\n            const covarancesStartSplat = this.lastBuildSplatCount * COVARIANCES_ELEMENTS_PER_SPLAT;\r\n            const covariancesEndSplat = splatCount * COVARIANCES_ELEMENTS_PER_SPLAT;\r\n            for (let i = covarancesStartSplat; i < covariancesEndSplat; i++) {\r\n                const covariance = this.splatDataTextures.baseData.covariances[i];\r\n                paddedCovariances[i] = covariance;\r\n            }\r\n            const covariancesTextureProps = this.renderer ? this.renderer.properties.get(covariancesTexture) : null;\r\n            if (!covariancesTextureProps || !covariancesTextureProps.__webglTexture) {\r\n                covariancesTexture.needsUpdate = true;\r\n            } else {\r\n                const covaranceBytesPerElement = this.halfPrecisionCovariancesOnGPU ? 2 : 4;\r\n                this.updateDataTexture(paddedCovariances, covariancesTextureDescriptor, covariancesTextureProps,\r\n                                       COVARIANCES_ELEMENTS_PER_TEXEL, COVARIANCES_ELEMENTS_PER_SPLAT, covaranceBytesPerElement,\r\n                                       this.lastBuildSplatCount, splatCount - 1);\r\n            }\r\n\r\n            const centerColorsTextureDescriptor = this.splatDataTextures['centerColors'];\r\n            const paddedCenterColors = centerColorsTextureDescriptor.data;\r\n            const centerColorsTexture = centerColorsTextureDescriptor.texture;\r\n            updateCenterColorsPaddedData(this.lastBuildSplatCount, splatCount, this.splatDataTextures.baseData.centers,\r\n                                         this.splatDataTextures.baseData.colors, paddedCenterColors);\r\n            const centerColorsTextureProps = this.renderer ? this.renderer.properties.get(centerColorsTexture) : null;\r\n            if (!centerColorsTextureProps || !centerColorsTextureProps.__webglTexture) {\r\n                centerColorsTexture.needsUpdate = true;\r\n            } else {\r\n                this.updateDataTexture(paddedCenterColors, centerColorsTextureDescriptor, centerColorsTextureProps,\r\n                                       CENTER_COLORS_ELEMENTS_PER_TEXEL, CENTER_COLORS_ELEMENTS_PER_SPLAT, 4,\r\n                                       this.lastBuildSplatCount, splatCount - 1);\r\n            }\r\n\r\n            if (this.dynamicMode) {\r\n                const transformIndexesTexDesc = this.splatDataTextures['tansformIndexes'];\r\n                const paddedTransformIndexes = transformIndexesTexDesc.data;\r\n                for (let c = this.lastBuildSplatCount; c < splatCount; c++) {\r\n                    paddedTransformIndexes[c] = this.globalSplatIndexToSceneIndexMap[c];\r\n                }\r\n\r\n                const paddedTransformIndexesTexture = transformIndexesTexDesc.texture;\r\n                const transformIndexesTextureProps = this.renderer ? this.renderer.properties.get(paddedTransformIndexesTexture) : null;\r\n                if (!transformIndexesTextureProps || !transformIndexesTextureProps.__webglTexture) {\r\n                    paddedTransformIndexesTexture.needsUpdate = true;\r\n                } else {\r\n                    this.updateDataTexture(paddedTransformIndexes, transformIndexesTexDesc, transformIndexesTextureProps, 1, 1, 1,\r\n                                           this.lastBuildSplatCount, splatCount - 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.updateVisibleRegion(sinceLastBuildOnly);\r\n    }\r\n\r\n    updateVisibleRegion(sinceLastBuildOnly) {\r\n        const splatCount = this.getSplatCount();\r\n        const tempCenter = new THREE.Vector3();\r\n        if (!sinceLastBuildOnly) {\r\n            const avgCenter = new THREE.Vector3();\r\n            this.scenes.forEach((scene) => {\r\n                avgCenter.add(scene.splatBuffer.sceneCenter);\r\n            });\r\n            avgCenter.multiplyScalar(1.0 / this.scenes.length);\r\n            this.calculatedSceneCenter.copy(avgCenter);\r\n            this.material.uniforms.sceneCenter.value.copy(this.calculatedSceneCenter);\r\n            this.material.uniformsNeedUpdate = true;\r\n        }\r\n\r\n        const startSplatFormMaxDistanceCalc = sinceLastBuildOnly ? this.lastBuildSplatCount : 0;\r\n        for (let i = startSplatFormMaxDistanceCalc; i < splatCount; i++) {\r\n            this.getSplatCenter(i, tempCenter, false);\r\n            const distFromCSceneCenter = tempCenter.sub(this.calculatedSceneCenter).length();\r\n            if (distFromCSceneCenter > this.maxSplatDistanceFromSceneCenter) this.maxSplatDistanceFromSceneCenter = distFromCSceneCenter;\r\n        }\r\n\r\n        if (this.maxSplatDistanceFromSceneCenter - this.visibleRegionBufferRadius > VISIBLE_REGION_EXPANSION_DELTA) {\r\n            this.visibleRegionBufferRadius = this.maxSplatDistanceFromSceneCenter;\r\n            this.visibleRegionRadius = Math.max(this.visibleRegionBufferRadius - VISIBLE_REGION_EXPANSION_DELTA, 0.0);\r\n        }\r\n        if (this.finalBuild) this.visibleRegionRadius = this.visibleRegionBufferRadius = this.maxSplatDistanceFromSceneCenter;\r\n        this.updateVisibleRegionFadeDistance();\r\n    }\r\n\r\n    updateVisibleRegionFadeDistance(sceneRevealMode = SceneRevealMode.Default) {\r\n        const fastFadeRate = SCENE_FADEIN_RATE_FAST;\r\n        const gradualFadeRate = SCENE_FADEIN_RATE_GRADUAL;\r\n        const defaultFadeInRate = this.finalBuild ? fastFadeRate : gradualFadeRate;\r\n        const fadeInRate = sceneRevealMode === SceneRevealMode.Default ? defaultFadeInRate : gradualFadeRate;\r\n        this.visibleRegionFadeStartRadius = (this.visibleRegionRadius - this.visibleRegionFadeStartRadius) *\r\n                                             fadeInRate + this.visibleRegionFadeStartRadius;\r\n        const fadeInPercentage = (this.visibleRegionBufferRadius > 0) ?\r\n                                 (this.visibleRegionFadeStartRadius / this.visibleRegionBufferRadius) : 0;\r\n        const fadeInComplete = fadeInPercentage > 0.99;\r\n        const shaderFadeInComplete = (fadeInComplete || sceneRevealMode === SceneRevealMode.Instant) ? 1 : 0;\r\n\r\n        this.material.uniforms.visibleRegionFadeStartRadius.value = this.visibleRegionFadeStartRadius;\r\n        this.material.uniforms.visibleRegionRadius.value = this.visibleRegionRadius;\r\n        this.material.uniforms.firstRenderTime.value = this.firstRenderTime;\r\n        this.material.uniforms.currentTime.value = performance.now();\r\n        this.material.uniforms.fadeInComplete.value = shaderFadeInComplete;\r\n        this.material.uniformsNeedUpdate = true;\r\n        this.visibleRegionChanging = !fadeInComplete;\r\n    }\r\n\r\n    /**\r\n     * Set the indexes of splats that should be rendered; should be sorted in desired render order.\r\n     * @param {Uint32Array} globalIndexes Sorted index list of splats to be rendered\r\n     * @param {number} renderSplatCount Total number of splats to be rendered. Necessary because we may not want to render\r\n     *                                  every splat.\r\n     */\r\n    updateRenderIndexes(globalIndexes, renderSplatCount) {\r\n        const geometry = this.geometry;\r\n        geometry.attributes.splatIndex.set(globalIndexes);\r\n        geometry.attributes.splatIndex.needsUpdate = true;\r\n        if (renderSplatCount > 0 && this.firstRenderTime === -1) this.firstRenderTime = performance.now();\r\n        geometry.instanceCount = renderSplatCount;\r\n    }\r\n\r\n    /**\r\n     * Update the transforms for each scene in this splat mesh from their individual components (position,\r\n     * quaternion, and scale)\r\n     */\r\n    updateTransforms() {\r\n        for (let i = 0; i < this.scenes.length; i++) {\r\n            const scene = this.getScene(i);\r\n            scene.updateTransform();\r\n        }\r\n    }\r\n\r\n    updateUniforms = function() {\r\n\r\n        const viewport = new THREE.Vector2();\r\n\r\n        return function(renderDimensions, cameraFocalLengthX, cameraFocalLengthY,\r\n                        orthographicMode, orthographicZoom, inverseFocalAdjustment) {\r\n            const splatCount = this.getSplatCount();\r\n            if (splatCount > 0) {\r\n                viewport.set(renderDimensions.x * this.devicePixelRatio,\r\n                             renderDimensions.y * this.devicePixelRatio);\r\n                this.material.uniforms.viewport.value.copy(viewport);\r\n                this.material.uniforms.basisViewport.value.set(1.0 / viewport.x, 1.0 / viewport.y);\r\n                this.material.uniforms.focal.value.set(cameraFocalLengthX, cameraFocalLengthY);\r\n                this.material.uniforms.orthographicMode.value = orthographicMode ? 1 : 0;\r\n                this.material.uniforms.orthoZoom.value = orthographicZoom;\r\n                this.material.uniforms.inverseFocalAdjustment.value = inverseFocalAdjustment;\r\n                if (this.dynamicMode) {\r\n                    for (let i = 0; i < this.scenes.length; i++) {\r\n                        this.material.uniforms.transforms.value[i].copy(this.getScene(i).transform);\r\n                    }\r\n                }\r\n                this.material.uniformsNeedUpdate = true;\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    setSplatScale(splatScale = 1) {\r\n        this.splatScale = splatScale;\r\n        this.material.uniforms.splatScale.value = splatScale;\r\n        this.material.uniformsNeedUpdate = true;\r\n    }\r\n\r\n    getSplatScale() {\r\n        return this.splatScale;\r\n    }\r\n\r\n    setPointCloudModeEnabled(enabled) {\r\n        this.pointCloudModeEnabled = enabled;\r\n        this.material.uniforms.pointCloudModeEnabled.value = enabled ? 1 : 0;\r\n        this.material.uniformsNeedUpdate = true;\r\n    }\r\n\r\n    getPointCloudModeEnabled() {\r\n        return this.pointCloudModeEnabled;\r\n    }\r\n\r\n    getSplatDataTextures() {\r\n        return this.splatDataTextures;\r\n    }\r\n\r\n    getSplatCount() {\r\n        return SplatMesh.getTotalSplatCountForScenes(this.scenes);\r\n    }\r\n\r\n    static getTotalSplatCountForScenes(scenes) {\r\n        let totalSplatCount = 0;\r\n        for (let scene of scenes) {\r\n            if (scene && scene.splatBuffer) totalSplatCount += scene.splatBuffer.getSplatCount();\r\n        }\r\n        return totalSplatCount;\r\n    }\r\n\r\n    static getTotalSplatCountForSplatBuffers(splatBuffers) {\r\n        let totalSplatCount = 0;\r\n        for (let splatBuffer of splatBuffers) totalSplatCount += splatBuffer.getSplatCount();\r\n        return totalSplatCount;\r\n    }\r\n\r\n    getMaxSplatCount() {\r\n        return SplatMesh.getTotalMaxSplatCountForScenes(this.scenes);\r\n    }\r\n\r\n    static getTotalMaxSplatCountForScenes(scenes) {\r\n        let totalSplatCount = 0;\r\n        for (let scene of scenes) {\r\n            if (scene && scene.splatBuffer) totalSplatCount += scene.splatBuffer.getMaxSplatCount();\r\n        }\r\n        return totalSplatCount;\r\n    }\r\n\r\n    static getTotalMaxSplatCountForSplatBuffers(splatBuffers) {\r\n        let totalSplatCount = 0;\r\n        for (let splatBuffer of splatBuffers) totalSplatCount += splatBuffer.getMaxSplatCount();\r\n        return totalSplatCount;\r\n    }\r\n\r\n    disposeDistancesComputationGPUResources() {\r\n\r\n        if (!this.renderer) return;\r\n\r\n        const gl = this.renderer.getContext();\r\n\r\n        if (this.distancesTransformFeedback.vao) {\r\n            gl.deleteVertexArray(this.distancesTransformFeedback.vao);\r\n            this.distancesTransformFeedback.vao = null;\r\n        }\r\n        if (this.distancesTransformFeedback.program) {\r\n            gl.deleteProgram(this.distancesTransformFeedback.program);\r\n            gl.deleteShader(this.distancesTransformFeedback.vertexShader);\r\n            gl.deleteShader(this.distancesTransformFeedback.fragmentShader);\r\n            this.distancesTransformFeedback.program = null;\r\n            this.distancesTransformFeedback.vertexShader = null;\r\n            this.distancesTransformFeedback.fragmentShader = null;\r\n        }\r\n        this.disposeDistancesComputationGPUBufferResources();\r\n        if (this.distancesTransformFeedback.id) {\r\n            gl.deleteTransformFeedback(this.distancesTransformFeedback.id);\r\n            this.distancesTransformFeedback.id = null;\r\n        }\r\n    }\r\n\r\n    disposeDistancesComputationGPUBufferResources() {\r\n\r\n        if (!this.renderer) return;\r\n\r\n        const gl = this.renderer.getContext();\r\n\r\n        if (this.distancesTransformFeedback.centersBuffer) {\r\n            this.distancesTransformFeedback.centersBuffer = null;\r\n            gl.deleteBuffer(this.distancesTransformFeedback.centersBuffer);\r\n        }\r\n        if (this.distancesTransformFeedback.outDistancesBuffer) {\r\n            gl.deleteBuffer(this.distancesTransformFeedback.outDistancesBuffer);\r\n            this.distancesTransformFeedback.outDistancesBuffer = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the Three.js renderer used by this splat mesh\r\n     * @param {THREE.WebGLRenderer} renderer Instance of THREE.WebGLRenderer\r\n     */\r\n    setRenderer(renderer) {\r\n        if (renderer !== this.renderer) {\r\n            this.renderer = renderer;\r\n            const gl = this.renderer.getContext();\r\n            const extensions = new WebGLExtensions(gl);\r\n            const capabilities = new WebGLCapabilities(gl, extensions, {});\r\n            extensions.init(capabilities);\r\n            this.webGLUtils = new THREE.WebGLUtils(gl, extensions, capabilities);\r\n            if (this.enableDistancesComputationOnGPU && this.getSplatCount() > 0) {\r\n                this.setupDistancesComputationTransformFeedback();\r\n                const { centers, sceneIndexes } = this.getDataForDistancesComputation(0, this.getSplatCount() - 1);\r\n                this.updateGPUDataForDistancesComputation(centers, sceneIndexes);\r\n            }\r\n        }\r\n    }\r\n\r\n    setupDistancesComputationTransformFeedback = function() {\r\n\r\n        let currentMaxSplatCount;\r\n\r\n        return function() {\r\n            const maxSplatCount = this.getMaxSplatCount();\r\n\r\n            if (!this.renderer) return;\r\n\r\n            const rebuildGPUObjects = (this.lastRenderer !== this.renderer);\r\n            const rebuildBuffers = currentMaxSplatCount !== maxSplatCount;\r\n\r\n            if (!rebuildGPUObjects && !rebuildBuffers) return;\r\n\r\n            if (rebuildGPUObjects) {\r\n                this.disposeDistancesComputationGPUResources();\r\n            } else if (rebuildBuffers) {\r\n                this.disposeDistancesComputationGPUBufferResources();\r\n            }\r\n\r\n            const gl = this.renderer.getContext();\r\n\r\n            const createShader = (gl, type, source) => {\r\n                const shader = gl.createShader(type);\r\n                if (!shader) {\r\n                    console.error('Fatal error: gl could not create a shader object.');\r\n                    return null;\r\n                }\r\n\r\n                gl.shaderSource(shader, source);\r\n                gl.compileShader(shader);\r\n\r\n                const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n                if (!compiled) {\r\n                    let typeName = 'unknown';\r\n                    if (type === gl.VERTEX_SHADER) typeName = 'vertex shader';\r\n                    else if (type === gl.FRAGMENT_SHADER) typeName = 'fragement shader';\r\n                    const errors = gl.getShaderInfoLog(shader);\r\n                    console.error('Failed to compile ' + typeName + ' with these errors:' + errors);\r\n                    gl.deleteShader(shader);\r\n                    return null;\r\n                }\r\n\r\n                return shader;\r\n            };\r\n\r\n            let vsSource;\r\n            if (this.integerBasedDistancesComputation) {\r\n                vsSource =\r\n                `#version 300 es\r\n                in ivec4 center;\r\n                flat out int distance;`;\r\n                if (this.dynamicMode) {\r\n                    vsSource += `\r\n                        in uint transformIndex;\r\n                        uniform ivec4 transforms[${Constants.MaxScenes}];\r\n                        void main(void) {\r\n                            ivec4 transform = transforms[transformIndex];\r\n                            distance = center.x * transform.x + center.y * transform.y + center.z * transform.z + transform.w * center.w;\r\n                        }\r\n                    `;\r\n                } else {\r\n                    vsSource += `\r\n                        uniform ivec3 modelViewProj;\r\n                        void main(void) {\r\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\r\n                        }\r\n                    `;\r\n                }\r\n            } else {\r\n                vsSource =\r\n                `#version 300 es\r\n                in vec4 center;\r\n                flat out float distance;`;\r\n                if (this.dynamicMode) {\r\n                    vsSource += `\r\n                        in uint transformIndex;\r\n                        uniform mat4 transforms[${Constants.MaxScenes}];\r\n                        void main(void) {\r\n                            vec4 transformedCenter = transforms[transformIndex] * vec4(center.xyz, 1.0);\r\n                            distance = transformedCenter.z;\r\n                        }\r\n                    `;\r\n                } else {\r\n                    vsSource += `\r\n                        uniform vec3 modelViewProj;\r\n                        void main(void) {\r\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\r\n                        }\r\n                    `;\r\n                }\r\n            }\r\n\r\n            const fsSource =\r\n            `#version 300 es\r\n                precision lowp float;\r\n                out vec4 fragColor;\r\n                void main(){}\r\n            `;\r\n\r\n            const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\r\n            const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\r\n            const currentProgramDeleted = currentProgram ? gl.getProgramParameter(currentProgram, gl.DELETE_STATUS) : false;\r\n\r\n            if (rebuildGPUObjects) {\r\n                this.distancesTransformFeedback.vao = gl.createVertexArray();\r\n            }\r\n\r\n            gl.bindVertexArray(this.distancesTransformFeedback.vao);\r\n\r\n            if (rebuildGPUObjects) {\r\n                const program = gl.createProgram();\r\n                const vertexShader = createShader(gl, gl.VERTEX_SHADER, vsSource);\r\n                const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fsSource);\r\n                if (!vertexShader || !fragmentShader) {\r\n                    throw new Error('Could not compile shaders for distances computation on GPU.');\r\n                }\r\n                gl.attachShader(program, vertexShader);\r\n                gl.attachShader(program, fragmentShader);\r\n                gl.transformFeedbackVaryings(program, ['distance'], gl.SEPARATE_ATTRIBS);\r\n                gl.linkProgram(program);\r\n\r\n                const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n                if (!linked) {\r\n                    const error = gl.getProgramInfoLog(program);\r\n                    console.error('Fatal error: Failed to link program: ' + error);\r\n                    gl.deleteProgram(program);\r\n                    gl.deleteShader(fragmentShader);\r\n                    gl.deleteShader(vertexShader);\r\n                    throw new Error('Could not link shaders for distances computation on GPU.');\r\n                }\r\n\r\n                this.distancesTransformFeedback.program = program;\r\n                this.distancesTransformFeedback.vertexShader = vertexShader;\r\n                this.distancesTransformFeedback.vertexShader = fragmentShader;\r\n            }\r\n\r\n            gl.useProgram(this.distancesTransformFeedback.program);\r\n\r\n            this.distancesTransformFeedback.centersLoc =\r\n                gl.getAttribLocation(this.distancesTransformFeedback.program, 'center');\r\n            if (this.dynamicMode) {\r\n                this.distancesTransformFeedback.transformIndexesLoc =\r\n                    gl.getAttribLocation(this.distancesTransformFeedback.program, 'transformIndex');\r\n                for (let i = 0; i < this.scenes.length; i++) {\r\n                    this.distancesTransformFeedback.transformsLocs[i] =\r\n                        gl.getUniformLocation(this.distancesTransformFeedback.program, `transforms[${i}]`);\r\n                }\r\n            } else {\r\n                this.distancesTransformFeedback.modelViewProjLoc =\r\n                    gl.getUniformLocation(this.distancesTransformFeedback.program, 'modelViewProj');\r\n            }\r\n\r\n            if (rebuildGPUObjects || rebuildBuffers) {\r\n                this.distancesTransformFeedback.centersBuffer = gl.createBuffer();\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\r\n                gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\r\n                if (this.integerBasedDistancesComputation) {\r\n                    gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 4, gl.INT, 0, 0);\r\n                } else {\r\n                    gl.vertexAttribPointer(this.distancesTransformFeedback.centersLoc, 4, gl.FLOAT, false, 0, 0);\r\n                }\r\n\r\n                if (this.dynamicMode) {\r\n                    this.distancesTransformFeedback.transformIndexesBuffer = gl.createBuffer();\r\n                    gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.transformIndexesBuffer);\r\n                    gl.enableVertexAttribArray(this.distancesTransformFeedback.transformIndexesLoc);\r\n                    gl.vertexAttribIPointer(this.distancesTransformFeedback.transformIndexesLoc, 1, gl.UNSIGNED_INT, 0, 0);\r\n                }\r\n            }\r\n\r\n            if (rebuildGPUObjects || rebuildBuffers) {\r\n                this.distancesTransformFeedback.outDistancesBuffer = gl.createBuffer();\r\n            }\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\r\n            gl.bufferData(gl.ARRAY_BUFFER, maxSplatCount * 4, gl.STATIC_READ);\r\n\r\n            if (rebuildGPUObjects) {\r\n                this.distancesTransformFeedback.id = gl.createTransformFeedback();\r\n            }\r\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\r\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\r\n\r\n            if (currentProgram && currentProgramDeleted !== true) gl.useProgram(currentProgram);\r\n            if (currentVao) gl.bindVertexArray(currentVao);\r\n\r\n            this.lastRenderer = this.renderer;\r\n            currentMaxSplatCount = maxSplatCount;\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Refresh GPU buffers used for computing splat distances with centers data from the scenes for this mesh.\r\n     * @param {boolean} isUpdate Specify whether or not to update the GPU buffer or to initialize & fill\r\n     * @param {Array<number>} centers The splat centers data\r\n     * @param {number} offsetSplats Offset in the GPU buffer at which to start updating data, specified in splats\r\n     */\r\n    updateGPUCentersBufferForDistancesComputation(isUpdate, centers, offsetSplats) {\r\n\r\n        if (!this.renderer) return;\r\n\r\n        const gl = this.renderer.getContext();\r\n\r\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\r\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\r\n\r\n        const ArrayType = this.integerBasedDistancesComputation ? Uint32Array : Float32Array;\r\n        const attributeBytesPerCenter = 16;\r\n        const subBufferOffset = offsetSplats * attributeBytesPerCenter;\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\r\n\r\n        if (isUpdate) {\r\n            gl.bufferSubData(gl.ARRAY_BUFFER, subBufferOffset, centers);\r\n        } else {\r\n            const maxArray = new ArrayType(this.getMaxSplatCount() * attributeBytesPerCenter);\r\n            maxArray.set(centers);\r\n            gl.bufferData(gl.ARRAY_BUFFER, maxArray, gl.STATIC_DRAW);\r\n        }\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n        if (currentVao) gl.bindVertexArray(currentVao);\r\n    }\r\n\r\n    /**\r\n     * Refresh GPU buffers used for pre-computing splat distances with centers data from the scenes for this mesh.\r\n     * @param {boolean} isUpdate Specify whether or not to update the GPU buffer or to initialize & fill\r\n     * @param {Array<number>} transformIndexes The splat transform indexes\r\n     * @param {number} offsetSplats Offset in the GPU buffer at which to start updating data, specified in splats\r\n     */\r\n    updateGPUTransformIndexesBufferForDistancesComputation(isUpdate, transformIndexes, offsetSplats) {\r\n\r\n        if (!this.renderer || !this.dynamicMode) return;\r\n\r\n        const gl = this.renderer.getContext();\r\n\r\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\r\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\r\n\r\n        const subBufferOffset = offsetSplats * 4;\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.transformIndexesBuffer);\r\n\r\n        if (isUpdate) {\r\n            gl.bufferSubData(gl.ARRAY_BUFFER, subBufferOffset, transformIndexes);\r\n        } else {\r\n            const maxArray = new Uint32Array(this.getMaxSplatCount() * 4);\r\n            maxArray.set(transformIndexes);\r\n            gl.bufferData(gl.ARRAY_BUFFER, maxArray, gl.STATIC_DRAW);\r\n        }\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n        if (currentVao) gl.bindVertexArray(currentVao);\r\n    }\r\n\r\n    /**\r\n     * Get a typed array containing a mapping from global splat indexes to their scene index.\r\n     * @param {number} start Starting splat index to store\r\n     * @param {number} end Ending splat index to store\r\n     * @return {Uint32Array}\r\n     */\r\n    getSceneIndexes(start, end) {\r\n\r\n        let sceneIndexes;\r\n        const fillCount = end - start + 1;\r\n        sceneIndexes = new Uint32Array(fillCount);\r\n        for (let i = start; i <= end; i++) {\r\n            sceneIndexes[i] = this.globalSplatIndexToSceneIndexMap[i];\r\n        }\r\n\r\n        return sceneIndexes;\r\n    }\r\n\r\n    /**\r\n     * Fill 'array' with the transforms for each scene in this splat mesh.\r\n     * @param {Array} array Empty array to be filled with scene transforms. If not empty, contents will be overwritten.\r\n     */\r\n    fillTransformsArray = function() {\r\n\r\n        const tempArray = [];\r\n\r\n        return function(array) {\r\n            if (tempArray.length !== array.length) tempArray.length = array.length;\r\n            for (let i = 0; i < this.scenes.length; i++) {\r\n                const sceneTransform = this.getScene(i).transform;\r\n                const sceneTransformElements = sceneTransform.elements;\r\n                for (let j = 0; j < 16; j++) {\r\n                    tempArray[i * 16 + j] = sceneTransformElements[j];\r\n                }\r\n            }\r\n            array.set(tempArray);\r\n        };\r\n\r\n    }();\r\n\r\n    computeDistancesOnGPU = function() {\r\n\r\n        const tempMatrix = new THREE.Matrix4();\r\n\r\n        return function(modelViewProjMatrix, outComputedDistances) {\r\n            if (!this.renderer) return;\r\n\r\n            // console.time(\"gpu_compute_distances\");\r\n            const gl = this.renderer.getContext();\r\n\r\n            const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\r\n            const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\r\n            const currentProgramDeleted = currentProgram ? gl.getProgramParameter(currentProgram, gl.DELETE_STATUS) : false;\r\n\r\n            gl.bindVertexArray(this.distancesTransformFeedback.vao);\r\n            gl.useProgram(this.distancesTransformFeedback.program);\r\n\r\n            gl.enable(gl.RASTERIZER_DISCARD);\r\n\r\n            if (this.dynamicMode) {\r\n                for (let i = 0; i < this.scenes.length; i++) {\r\n                    tempMatrix.copy(this.getScene(i).transform);\r\n                    tempMatrix.premultiply(modelViewProjMatrix);\r\n\r\n                    if (this.integerBasedDistancesComputation) {\r\n                        const iTempMatrix = SplatMesh.getIntegerMatrixArray(tempMatrix);\r\n                        const iTransform = [iTempMatrix[2], iTempMatrix[6], iTempMatrix[10], iTempMatrix[14]];\r\n                        gl.uniform4i(this.distancesTransformFeedback.transformsLocs[i], iTransform[0], iTransform[1],\r\n                                                                                        iTransform[2], iTransform[3]);\r\n                    } else {\r\n                        gl.uniformMatrix4fv(this.distancesTransformFeedback.transformsLocs[i], false, tempMatrix.elements);\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.integerBasedDistancesComputation) {\r\n                    const iViewProjMatrix = SplatMesh.getIntegerMatrixArray(modelViewProjMatrix);\r\n                    const iViewProj = [iViewProjMatrix[2], iViewProjMatrix[6], iViewProjMatrix[10]];\r\n                    gl.uniform3i(this.distancesTransformFeedback.modelViewProjLoc, iViewProj[0], iViewProj[1], iViewProj[2]);\r\n                } else {\r\n                    const viewProj = [modelViewProjMatrix.elements[2], modelViewProjMatrix.elements[6], modelViewProjMatrix.elements[10]];\r\n                    gl.uniform3f(this.distancesTransformFeedback.modelViewProjLoc, viewProj[0], viewProj[1], viewProj[2]);\r\n                }\r\n            }\r\n\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\r\n            gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\r\n            if (this.integerBasedDistancesComputation) {\r\n                gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 4, gl.INT, 0, 0);\r\n            } else {\r\n                gl.vertexAttribPointer(this.distancesTransformFeedback.centersLoc, 4, gl.FLOAT, false, 0, 0);\r\n            }\r\n\r\n            if (this.dynamicMode) {\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.transformIndexesBuffer);\r\n                gl.enableVertexAttribArray(this.distancesTransformFeedback.transformIndexesLoc);\r\n                gl.vertexAttribIPointer(this.distancesTransformFeedback.transformIndexesLoc, 1, gl.UNSIGNED_INT, 0, 0);\r\n            }\r\n\r\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\r\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\r\n\r\n            gl.beginTransformFeedback(gl.POINTS);\r\n            gl.drawArrays(gl.POINTS, 0, this.getSplatCount());\r\n            gl.endTransformFeedback();\r\n\r\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, null);\r\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\r\n\r\n            gl.disable(gl.RASTERIZER_DISCARD);\r\n\r\n            const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);\r\n            gl.flush();\r\n\r\n            const promise = new Promise((resolve) => {\r\n                const checkSync = () => {\r\n                    if (this.disposed) {\r\n                        resolve();\r\n                    } else {\r\n                        const timeout = 0;\r\n                        const bitflags = 0;\r\n                        const status = gl.clientWaitSync(sync, bitflags, timeout);\r\n                        switch (status) {\r\n                            case gl.TIMEOUT_EXPIRED:\r\n                                this.computeDistancesOnGPUSyncTimeout = setTimeout(checkSync);\r\n                                return this.computeDistancesOnGPUSyncTimeout;\r\n                            case gl.WAIT_FAILED:\r\n                                throw new Error('should never get here');\r\n                            default:\r\n                                this.computeDistancesOnGPUSyncTimeout = null;\r\n                                gl.deleteSync(sync);\r\n                                const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\r\n                                gl.bindVertexArray(this.distancesTransformFeedback.vao);\r\n                                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\r\n                                gl.getBufferSubData(gl.ARRAY_BUFFER, 0, outComputedDistances);\r\n                                gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n                                if (currentVao) gl.bindVertexArray(currentVao);\r\n\r\n                                // console.timeEnd(\"gpu_compute_distances\");\r\n\r\n                                resolve();\r\n                        }\r\n                    }\r\n                };\r\n                this.computeDistancesOnGPUSyncTimeout = setTimeout(checkSync);\r\n            });\r\n\r\n            if (currentProgram && currentProgramDeleted !== true) gl.useProgram(currentProgram);\r\n            if (currentVao) gl.bindVertexArray(currentVao);\r\n\r\n            return promise;\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Given a global splat index, return corresponding local data (splat buffer, index of splat in that splat\r\n     * buffer, and the corresponding transform)\r\n     * @param {number} globalIndex Global splat index\r\n     * @param {object} paramsObj Object in which to store local data\r\n     * @param {boolean} returnSceneTransform By default, the transform of the scene to which the splat at 'globalIndex' belongs will be\r\n     *                                       returned via the 'sceneTransform' property of 'paramsObj' only if the splat mesh is static.\r\n     *                                       If 'returnSceneTransform' is true, the 'sceneTransform' property will always contain the scene\r\n     *                                       transform, and if 'returnSceneTransform' is false, the 'sceneTransform' property will always\r\n     *                                       be null.\r\n     */\r\n    getLocalSplatParameters(globalIndex, paramsObj, returnSceneTransform) {\r\n        if (returnSceneTransform === undefined || returnSceneTransform === null) {\r\n            returnSceneTransform = this.dynamicMode ? false : true;\r\n        }\r\n        paramsObj.splatBuffer = this.getSplatBufferForSplat(globalIndex);\r\n        paramsObj.localIndex = this.getSplatLocalIndex(globalIndex);\r\n        paramsObj.sceneTransform = returnSceneTransform ? this.getSceneTransformForSplat(globalIndex) : null;\r\n    }\r\n\r\n    /**\r\n     * Fill arrays with splat data and apply transforms if appropriate. Each array is optional.\r\n     * @param {Float32Array} covariances Target storage for splat covariances\r\n     * @param {Float32Array} centers Target storage for splat centers\r\n     * @param {Uint8Array} colors Target storage for splat colors\r\n     * @param {boolean} applySceneTransform By default, scene transforms are applied to relevant splat data only if the splat mesh is\r\n     *                                      static. If 'applySceneTransform' is true, scene transforms will always be applied and if\r\n     *                                      it is false, they will never be applied. If undefined, the default behavior will apply.\r\n     * @param {number} srcStart The start location from which to pull source data\r\n     * @param {number} srcEnd The end location from which to pull source data\r\n     * @param {number} destStart The start location from which to write data\r\n     */\r\n    fillSplatDataArrays(covariances, centers, colors, applySceneTransform, srcStart, srcEnd, destStart = 0) {\r\n\r\n        for (let i = 0; i < this.scenes.length; i++) {\r\n            if (applySceneTransform === undefined || applySceneTransform === null) {\r\n                applySceneTransform = this.dynamicMode ? false : true;\r\n            }\r\n\r\n            const scene = this.getScene(i);\r\n            const splatBuffer = scene.splatBuffer;\r\n            const sceneTransform = applySceneTransform ? scene.transform : null;\r\n            if (covariances) {\r\n                splatBuffer.fillSplatCovarianceArray(covariances, sceneTransform,\r\n                                                     srcStart, srcEnd, destStart, this.halfPrecisionCovariancesOnGPU ? 1 : 0);\r\n            }\r\n            if (centers) splatBuffer.fillSplatCenterArray(centers, sceneTransform, srcStart, srcEnd, destStart);\r\n            if (colors) splatBuffer.fillSplatColorArray(colors, scene.minimumAlpha, sceneTransform, srcStart, srcEnd, destStart);\r\n            destStart += splatBuffer.getSplatCount();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert splat centers, which are floating point values, to an array of integers and multiply\r\n     * each by 1000. Centers will get transformed as appropriate before conversion to integer.\r\n     * @param {number} start The index at which to start retrieving data\r\n     * @param {number} end The index at which to stop retrieving data\r\n     * @param {boolean} padFour Enforce alignment of 4 by inserting a 1 after every 3 values\r\n     * @return {Int32Array}\r\n     */\r\n    getIntegerCenters(start, end, padFour = false) {\r\n        const splatCount = end - start + 1;\r\n        const floatCenters = new Float32Array(splatCount * 3);\r\n        this.fillSplatDataArrays(null, floatCenters, null, undefined, start);\r\n        let intCenters;\r\n        let componentCount = padFour ? 4 : 3;\r\n        intCenters = new Int32Array(splatCount * componentCount);\r\n        for (let i = 0; i < splatCount; i++) {\r\n            for (let t = 0; t < 3; t++) {\r\n                intCenters[i * componentCount + t] = Math.round(floatCenters[i * 3 + t] * 1000.0);\r\n            }\r\n            if (padFour) intCenters[i * componentCount + 3] = 1000;\r\n        }\r\n        return intCenters;\r\n    }\r\n\r\n    /**\r\n     * Returns an array of splat centers, transformed as appropriate, optionally padded.\r\n     * @param {number} start The index at which to start retrieving data\r\n     * @param {number} end The index at which to stop retrieving data\r\n     * @param {boolean} padFour Enforce alignment of 4 by inserting a 1 after every 3 values\r\n     * @return {Float32Array}\r\n     */\r\n    getFloatCenters(start, end, padFour = false) {\r\n        const splatCount = end - start + 1;\r\n        const floatCenters = new Float32Array(splatCount * 3);\r\n        this.fillSplatDataArrays(null, floatCenters, null, undefined, start);\r\n        if (!padFour) return floatCenters;\r\n        let paddedFloatCenters = new Float32Array(splatCount * 4);\r\n        for (let i = 0; i < splatCount; i++) {\r\n            for (let t = 0; t < 3; t++) {\r\n                paddedFloatCenters[i * 4 + t] = floatCenters[i * 3 + t];\r\n            }\r\n            paddedFloatCenters[i * 4 + 3] = 1.0;\r\n        }\r\n        return paddedFloatCenters;\r\n    }\r\n\r\n    /**\r\n     * Get the center for a splat, transformed as appropriate.\r\n     * @param {number} globalIndex Global index of splat\r\n     * @param {THREE.Vector3} outCenter THREE.Vector3 instance in which to store splat center\r\n     * @param {boolean} applySceneTransform By default, if the splat mesh is static, the transform of the scene to which the splat at\r\n     *                                      'globalIndex' belongs will be applied to the splat center. If 'applySceneTransform' is true,\r\n     *                                      the scene transform will always be applied and if 'applySceneTransform' is false, the\r\n     *                                      scene transform will never be applied. If undefined, the default behavior will apply.\r\n     */\r\n    getSplatCenter = function() {\r\n\r\n        const paramsObj = {};\r\n\r\n        return function(globalIndex, outCenter, applySceneTransform) {\r\n            this.getLocalSplatParameters(globalIndex, paramsObj, applySceneTransform);\r\n            paramsObj.splatBuffer.getSplatCenter(paramsObj.localIndex, outCenter, paramsObj.sceneTransform);\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Get the scale and rotation for a splat, transformed as appropriate.\r\n     * @param {number} globalIndex Global index of splat\r\n     * @param {THREE.Vector3} outScale THREE.Vector3 instance in which to store splat scale\r\n     * @param {THREE.Quaternion} outRotation THREE.Quaternion instance in which to store splat rotation\r\n     * @param {boolean} applySceneTransform By default, if the splat mesh is static, the transform of the scene to which the splat at\r\n     *                                      'globalIndex' belongs will be applied to the splat scale and rotation. If\r\n     *                                      'applySceneTransform' is true, the scene transform will always be applied and if\r\n     *                                      'applySceneTransform' is false, the scene transform will never be applied. If undefined,\r\n     *                                      the default behavior will apply.\r\n     */\r\n    getSplatScaleAndRotation = function() {\r\n\r\n        const paramsObj = {};\r\n\r\n        return function(globalIndex, outScale, outRotation, applySceneTransform) {\r\n            this.getLocalSplatParameters(globalIndex, paramsObj, applySceneTransform);\r\n            paramsObj.splatBuffer.getSplatScaleAndRotation(paramsObj.localIndex, outScale, outRotation, paramsObj.sceneTransform);\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Get the color for a splat.\r\n     * @param {number} globalIndex Global index of splat\r\n     * @param {THREE.Vector4} outColor THREE.Vector4 instance in which to store splat color\r\n     */\r\n    getSplatColor = function() {\r\n\r\n        const paramsObj = {};\r\n\r\n        return function(globalIndex, outColor) {\r\n            this.getLocalSplatParameters(globalIndex, paramsObj);\r\n            paramsObj.splatBuffer.getSplatColor(paramsObj.localIndex, outColor, paramsObj.sceneTransform);\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Store the transform of the scene at 'sceneIndex' in 'outTransform'.\r\n     * @param {number} sceneIndex Index of the desired scene\r\n     * @param {THREE.Matrix4} outTransform Instance of THREE.Matrix4 in which to store the scene's transform\r\n     */\r\n    getSceneTransform(sceneIndex, outTransform) {\r\n        const scene = this.getScene(sceneIndex);\r\n        scene.updateTransform();\r\n        outTransform.copy(scene.transform);\r\n    }\r\n\r\n    /**\r\n     * Get the scene at 'sceneIndex'.\r\n     * @param {number} sceneIndex Index of the desired scene\r\n     * @return {SplatScene}\r\n     */\r\n    getScene(sceneIndex) {\r\n        if (sceneIndex < 0 || sceneIndex >= this.scenes.length) {\r\n            throw new Error('SplatMesh::getScene() -> Invalid scene index.');\r\n        }\r\n        return this.scenes[sceneIndex];\r\n    }\r\n\r\n    getSplatBufferForSplat(globalIndex) {\r\n        return this.getScene(this.globalSplatIndexToSceneIndexMap[globalIndex]).splatBuffer;\r\n    }\r\n\r\n    getSceneIndexForSplat(globalIndex) {\r\n        return this.globalSplatIndexToSceneIndexMap[globalIndex];\r\n    }\r\n\r\n    getSceneTransformForSplat(globalIndex) {\r\n        return this.getScene(this.globalSplatIndexToSceneIndexMap[globalIndex]).transform;\r\n    }\r\n\r\n    getSplatLocalIndex(globalIndex) {\r\n        return this.globalSplatIndexToLocalSplatIndexMap[globalIndex];\r\n    }\r\n\r\n    static getIntegerMatrixArray(matrix) {\r\n        const matrixElements = matrix.elements;\r\n        const intMatrixArray = [];\r\n        for (let i = 0; i < 16; i++) {\r\n            intMatrixArray[i] = Math.round(matrixElements[i] * 1000.0);\r\n        }\r\n        return intMatrixArray;\r\n    }\r\n}\r\n","import SorterWasm from './sorter.wasm';\r\nimport { Constants } from '../Constants.js';\r\n\r\nfunction sortWorker(self) {\r\n\r\n    let wasmInstance;\r\n    let wasmMemory;\r\n    let useSharedMemory;\r\n    let integerBasedSort;\r\n    let dynamicMode;\r\n    let splatCount;\r\n    let indexesToSortOffset;\r\n    let sortedIndexesOffset;\r\n    let transformIndexesOffset;\r\n    let transformsOffset;\r\n    let precomputedDistancesOffset;\r\n    let mappedDistancesOffset;\r\n    let frequenciesOffset;\r\n    let centersOffset;\r\n    let modelViewProjOffset;\r\n    let countsZero;\r\n    let sortedIndexesOut;\r\n\r\n    let Constants;\r\n\r\n    function sort(splatSortCount, splatRenderCount, modelViewProj,\r\n                  usePrecomputedDistances, copyIndexesToSort, copyPrecomputedDistances, copyTransforms) {\r\n        const sortStartTime = performance.now();\r\n\r\n        if (!useSharedMemory) {\r\n            const indexesToSort = new Uint32Array(wasmMemory, indexesToSortOffset, copyIndexesToSort.byteLength / Constants.BytesPerInt);\r\n            indexesToSort.set(copyIndexesToSort);\r\n            const transforms = new Float32Array(wasmMemory, transformsOffset, copyTransforms.byteLength / Constants.BytesPerFloat);\r\n            transforms.set(copyTransforms);\r\n            if (usePrecomputedDistances) {\r\n                let precomputedDistances;\r\n                if (integerBasedSort) {\r\n                    precomputedDistances = new Int32Array(wasmMemory, precomputedDistancesOffset,\r\n                                                          copyPrecomputedDistances.byteLength / Constants.BytesPerInt);\r\n                } else {\r\n                    precomputedDistances = new Float32Array(wasmMemory, precomputedDistancesOffset,\r\n                                                            copyPrecomputedDistances.byteLength / Constants.BytesPerFloat);\r\n                }\r\n                precomputedDistances.set(copyPrecomputedDistances);\r\n            }\r\n        }\r\n\r\n        if (!countsZero) countsZero = new Uint32Array(Constants.DepthMapRange);\r\n        new Float32Array(wasmMemory, modelViewProjOffset, 16).set(modelViewProj);\r\n        new Uint32Array(wasmMemory, frequenciesOffset, Constants.DepthMapRange).set(countsZero);\r\n        wasmInstance.exports.sortIndexes(indexesToSortOffset, centersOffset, precomputedDistancesOffset,\r\n                                         mappedDistancesOffset, frequenciesOffset, modelViewProjOffset,\r\n                                         sortedIndexesOffset, transformIndexesOffset, transformsOffset, Constants.DepthMapRange,\r\n                                         splatSortCount, splatRenderCount, splatCount, usePrecomputedDistances, integerBasedSort,\r\n                                         dynamicMode);\r\n\r\n        const sortMessage = {\r\n            'sortDone': true,\r\n            'splatSortCount': splatSortCount,\r\n            'splatRenderCount': splatRenderCount,\r\n            'sortTime': 0\r\n        };\r\n        if (!useSharedMemory) {\r\n            const sortedIndexes = new Uint32Array(wasmMemory, sortedIndexesOffset, splatRenderCount);\r\n            if (!sortedIndexesOut || sortedIndexesOut.length < splatRenderCount) {\r\n                sortedIndexesOut = new Uint32Array(splatRenderCount);\r\n            }\r\n            sortedIndexesOut.set(sortedIndexes);\r\n            sortMessage.sortedIndexes = sortedIndexesOut;\r\n        }\r\n        const sortEndTime = performance.now();\r\n\r\n        sortMessage.sortTime = sortEndTime - sortStartTime;\r\n\r\n        self.postMessage(sortMessage);\r\n    }\r\n\r\n    self.onmessage = (e) => {\r\n        if (e.data.centers) {\r\n            centers = e.data.centers;\r\n            transformIndexes = e.data.transformIndexes;\r\n            if (integerBasedSort) {\r\n                new Int32Array(wasmMemory, centersOffset + e.data.range.from * Constants.BytesPerInt * 4,\r\n                               e.data.range.count * 4).set(new Int32Array(centers));\r\n            } else {\r\n                new Float32Array(wasmMemory, centersOffset + e.data.range.from * Constants.BytesPerFloat * 4,\r\n                                 e.data.range.count * 4).set(new Float32Array(centers));\r\n            }\r\n            if (dynamicMode) {\r\n                new Uint32Array(wasmMemory, transformIndexesOffset + e.data.range.from * 4,\r\n                                e.data.range.count).set(new Uint32Array(transformIndexes));\r\n            }\r\n            self.postMessage({\r\n                'centerDataSet': true,\r\n            });\r\n        } else if (e.data.sort) {\r\n            const renderCount = e.data.sort.splatRenderCount || 0;\r\n            const sortCount = e.data.sort.splatSortCount || 0;\r\n            const usePrecomputedDistances = e.data.sort.usePrecomputedDistances;\r\n\r\n            let copyIndexesToSort;\r\n            let copyPrecomputedDistances;\r\n            let copyTransforms;\r\n            if (!useSharedMemory) {\r\n                copyIndexesToSort = e.data.sort.indexesToSort;\r\n                copyTransforms = e.data.sort.transforms;\r\n                if (usePrecomputedDistances) copyPrecomputedDistances = e.data.sort.precomputedDistances;\r\n            }\r\n            sort(sortCount, renderCount, e.data.sort.modelViewProj, usePrecomputedDistances,\r\n                 copyIndexesToSort, copyPrecomputedDistances, copyTransforms);\r\n        } else if (e.data.init) {\r\n            // Yep, this is super hacky and gross :(\r\n            Constants = e.data.init.Constants;\r\n\r\n            splatCount = e.data.init.splatCount;\r\n            useSharedMemory = e.data.init.useSharedMemory;\r\n            integerBasedSort = e.data.init.integerBasedSort;\r\n            dynamicMode = e.data.init.dynamicMode;\r\n\r\n            const CENTERS_BYTES_PER_ENTRY = integerBasedSort ? (Constants.BytesPerInt * 4) : (Constants.BytesPerFloat * 4);\r\n\r\n            const sorterWasmBytes = new Uint8Array(e.data.init.sorterWasmBytes);\r\n\r\n            const matrixSize = 16 * Constants.BytesPerFloat;\r\n            const memoryRequiredForIndexesToSort = splatCount * Constants.BytesPerInt;\r\n            const memoryRequiredForCenters = splatCount * CENTERS_BYTES_PER_ENTRY;\r\n            const memoryRequiredForModelViewProjectionMatrix = matrixSize;\r\n            const memoryRequiredForPrecomputedDistances = integerBasedSort ?\r\n                                                          (splatCount * Constants.BytesPerInt) : (splatCount * Constants.BytesPerFloat);\r\n            const memoryRequiredForMappedDistances = splatCount * Constants.BytesPerInt;\r\n            const memoryRequiredForSortedIndexes = splatCount * Constants.BytesPerInt;\r\n            const memoryRequiredForIntermediateSortBuffers = Constants.DepthMapRange * Constants.BytesPerInt * 2;\r\n            const memoryRequiredforTransformIndexes = dynamicMode ? (splatCount * Constants.BytesPerInt) : 0;\r\n            const memoryRequiredforTransforms = dynamicMode ? (Constants.MaxScenes * matrixSize) : 0;\r\n            const extraMemory = Constants.MemoryPageSize * 32;\r\n\r\n            const totalRequiredMemory = memoryRequiredForIndexesToSort +\r\n                                        memoryRequiredForCenters +\r\n                                        memoryRequiredForModelViewProjectionMatrix +\r\n                                        memoryRequiredForPrecomputedDistances +\r\n                                        memoryRequiredForMappedDistances +\r\n                                        memoryRequiredForIntermediateSortBuffers +\r\n                                        memoryRequiredForSortedIndexes +\r\n                                        memoryRequiredforTransformIndexes +\r\n                                        memoryRequiredforTransforms +\r\n                                        extraMemory;\r\n            const totalPagesRequired = Math.floor(totalRequiredMemory / Constants.MemoryPageSize ) + 1;\r\n            const sorterWasmImport = {\r\n                module: {},\r\n                env: {\r\n                    memory: new WebAssembly.Memory({\r\n                        initial: totalPagesRequired * 2,\r\n                        maximum: totalPagesRequired * 4,\r\n                        shared: true,\r\n                    }),\r\n                }\r\n            };\r\n            WebAssembly.compile(sorterWasmBytes)\r\n            .then((wasmModule) => {\r\n                return WebAssembly.instantiate(wasmModule, sorterWasmImport);\r\n            })\r\n            .then((instance) => {\r\n                wasmInstance = instance;\r\n                indexesToSortOffset = 0;\r\n                centersOffset = indexesToSortOffset + memoryRequiredForIndexesToSort;\r\n                modelViewProjOffset = centersOffset + memoryRequiredForCenters;\r\n                precomputedDistancesOffset = modelViewProjOffset + memoryRequiredForModelViewProjectionMatrix;\r\n                mappedDistancesOffset = precomputedDistancesOffset + memoryRequiredForPrecomputedDistances;\r\n                frequenciesOffset = mappedDistancesOffset + memoryRequiredForMappedDistances;\r\n                sortedIndexesOffset = frequenciesOffset + memoryRequiredForIntermediateSortBuffers;\r\n                transformIndexesOffset = sortedIndexesOffset + memoryRequiredForSortedIndexes;\r\n                transformsOffset = transformIndexesOffset + memoryRequiredforTransformIndexes;\r\n                wasmMemory = sorterWasmImport.env.memory.buffer;\r\n                if (useSharedMemory) {\r\n                    self.postMessage({\r\n                        'sortSetupPhase1Complete': true,\r\n                        'indexesToSortBuffer': wasmMemory,\r\n                        'indexesToSortOffset': indexesToSortOffset,\r\n                        'sortedIndexesBuffer': wasmMemory,\r\n                        'sortedIndexesOffset': sortedIndexesOffset,\r\n                        'precomputedDistancesBuffer': wasmMemory,\r\n                        'precomputedDistancesOffset': precomputedDistancesOffset,\r\n                        'transformsBuffer': wasmMemory,\r\n                        'transformsOffset': transformsOffset\r\n                    });\r\n                } else {\r\n                    self.postMessage({\r\n                        'sortSetupPhase1Complete': true\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    };\r\n}\r\n\r\nexport function createSortWorker(splatCount, useSharedMemory, integerBasedSort, dynamicMode) {\r\n    const worker = new Worker(\r\n        URL.createObjectURL(\r\n            new Blob(['(', sortWorker.toString(), ')(self)'], {\r\n                type: 'application/javascript',\r\n            }),\r\n        ),\r\n    );\r\n\r\n    const sorterWasmBinaryString = atob(SorterWasm);\r\n    const sorterWasmBytes = new Uint8Array(sorterWasmBinaryString.length);\r\n    for (let i = 0; i < sorterWasmBinaryString.length; i++) {\r\n        sorterWasmBytes[i] = sorterWasmBinaryString.charCodeAt(i);\r\n    }\r\n\r\n    worker.postMessage({\r\n        'init': {\r\n            'sorterWasmBytes': sorterWasmBytes.buffer,\r\n            'splatCount': splatCount,\r\n            'useSharedMemory': useSharedMemory,\r\n            'integerBasedSort': integerBasedSort,\r\n            'dynamicMode': dynamicMode,\r\n            // Super hacky\r\n            'Constants': {\r\n                'BytesPerFloat': Constants.BytesPerFloat,\r\n                'BytesPerInt': Constants.BytesPerInt,\r\n                'DepthMapRange': Constants.DepthMapRange,\r\n                'MemoryPageSize': Constants.MemoryPageSize,\r\n                'MaxScenes': Constants.MaxScenes\r\n            }\r\n        }\r\n    });\r\n    return worker;\r\n}\r\n","export const WebXRMode = {\r\n    None: 0,\r\n    VR: 1,\r\n    AR: 2\r\n};\r\n","/*\r\nCopyright © 2010-2024 three.js authors & Mark Kellogg\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n*/\r\n\r\nexport class VRButton {\r\n\r\n    static createButton( renderer ) {\r\n\r\n        const button = document.createElement( 'button' );\r\n\r\n        function showEnterVR( /* device */ ) {\r\n\r\n            let currentSession = null;\r\n\r\n            async function onSessionStarted( session ) {\r\n\r\n                session.addEventListener( 'end', onSessionEnded );\r\n\r\n                await renderer.xr.setSession( session );\r\n                button.textContent = 'EXIT VR';\r\n\r\n                currentSession = session;\r\n\r\n            }\r\n\r\n            function onSessionEnded( /* event */ ) {\r\n\r\n                currentSession.removeEventListener( 'end', onSessionEnded );\r\n\r\n                button.textContent = 'ENTER VR';\r\n\r\n                currentSession = null;\r\n\r\n            }\r\n\r\n            //\r\n\r\n            button.style.display = '';\r\n\r\n            button.style.cursor = 'pointer';\r\n            button.style.left = 'calc(50% - 50px)';\r\n            button.style.width = '100px';\r\n\r\n            button.textContent = 'ENTER VR';\r\n\r\n            // WebXR's requestReferenceSpace only works if the corresponding feature\r\n            // was requested at session creation time. For simplicity, just ask for\r\n            // the interesting ones as optional features, but be aware that the\r\n            // requestReferenceSpace call will fail if it turns out to be unavailable.\r\n            // ('local' is always available for immersive sessions and doesn't need to\r\n            // be requested separately.)\r\n\r\n            const sessionInit = { optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking', 'layers'] };\r\n\r\n            button.onmouseenter = function() {\r\n\r\n                button.style.opacity = '1.0';\r\n\r\n            };\r\n\r\n            button.onmouseleave = function() {\r\n\r\n                button.style.opacity = '0.5';\r\n\r\n            };\r\n\r\n            button.onclick = function() {\r\n\r\n                if ( currentSession === null ) {\r\n\r\n                    navigator.xr.requestSession( 'immersive-vr', sessionInit ).then( onSessionStarted );\r\n\r\n                } else {\r\n\r\n                    currentSession.end();\r\n\r\n                    if ( navigator.xr.offerSession !== undefined ) {\r\n\r\n                        navigator.xr.offerSession( 'immersive-vr', sessionInit )\r\n                            .then( onSessionStarted )\r\n                            .catch( ( err ) => {\r\n\r\n                                console.warn( err );\r\n\r\n                            } );\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            };\r\n\r\n            if ( navigator.xr.offerSession !== undefined ) {\r\n\r\n                navigator.xr.offerSession( 'immersive-vr', sessionInit )\r\n                    .then( onSessionStarted )\r\n                    .catch( ( err ) => {\r\n\r\n                        console.warn( err );\r\n\r\n                    } );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function disableButton() {\r\n\r\n            button.style.display = '';\r\n\r\n            button.style.cursor = 'auto';\r\n            button.style.left = 'calc(50% - 75px)';\r\n            button.style.width = '150px';\r\n\r\n            button.onmouseenter = null;\r\n            button.onmouseleave = null;\r\n\r\n            button.onclick = null;\r\n\r\n        }\r\n\r\n        function showWebXRNotFound() {\r\n\r\n            disableButton();\r\n\r\n            button.textContent = 'VR NOT SUPPORTED';\r\n\r\n        }\r\n\r\n        function showVRNotAllowed( exception ) {\r\n\r\n            disableButton();\r\n\r\n            console.warn( 'Exception when trying to call xr.isSessionSupported', exception );\r\n\r\n            button.textContent = 'VR NOT ALLOWED';\r\n\r\n        }\r\n\r\n        function stylizeElement( element ) {\r\n\r\n            element.style.position = 'absolute';\r\n            element.style.bottom = '20px';\r\n            element.style.padding = '12px 6px';\r\n            element.style.border = '1px solid #fff';\r\n            element.style.borderRadius = '4px';\r\n            element.style.background = 'rgba(0,0,0,0.1)';\r\n            element.style.color = '#fff';\r\n            element.style.font = 'normal 13px sans-serif';\r\n            element.style.textAlign = 'center';\r\n            element.style.opacity = '0.5';\r\n            element.style.outline = 'none';\r\n            element.style.zIndex = '999';\r\n\r\n        }\r\n\r\n        if ( 'xr' in navigator ) {\r\n\r\n            button.id = 'VRButton';\r\n            button.style.display = 'none';\r\n\r\n            stylizeElement( button );\r\n\r\n            navigator.xr.isSessionSupported( 'immersive-vr' ).then( function( supported ) {\r\n\r\n                supported ? showEnterVR() : showWebXRNotFound();\r\n\r\n                if ( supported && VRButton.xrSessionIsGranted ) {\r\n\r\n                    button.click();\r\n\r\n                }\r\n\r\n            } ).catch( showVRNotAllowed );\r\n\r\n            return button;\r\n\r\n        } else {\r\n\r\n            const message = document.createElement( 'a' );\r\n\r\n            if ( window.isSecureContext === false ) {\r\n\r\n                message.href = document.location.href.replace( /^http:/, 'https:' );\r\n                message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\r\n\r\n            } else {\r\n\r\n                message.href = 'https://immersiveweb.dev/';\r\n                message.innerHTML = 'WEBXR NOT AVAILABLE';\r\n\r\n            }\r\n\r\n            message.style.left = 'calc(50% - 90px)';\r\n            message.style.width = '180px';\r\n            message.style.textDecoration = 'none';\r\n\r\n            stylizeElement( message );\r\n\r\n            return message;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    static registerSessionGrantedListener() {\r\n\r\n        if ( typeof navigator !== 'undefined' && 'xr' in navigator ) {\r\n\r\n            // WebXRViewer (based on Firefox) has a bug where addEventListener\r\n            // throws a silent exception and aborts execution entirely.\r\n            if ( /WebXRViewer\\//i.test( navigator.userAgent ) ) return;\r\n\r\n            navigator.xr.addEventListener( 'sessiongranted', () => {\r\n\r\n                VRButton.xrSessionIsGranted = true;\r\n\r\n            } );\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nVRButton.xrSessionIsGranted = false;\r\nVRButton.registerSessionGrantedListener();\r\n","/*\r\nCopyright © 2010-2024 three.js authors & Mark Kellogg\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n*/\r\n\r\nexport class ARButton {\r\n\r\n    static createButton( renderer, sessionInit = {} ) {\r\n\r\n        const button = document.createElement( 'button' );\r\n\r\n        function showStartAR( /* device */ ) {\r\n\r\n            if ( sessionInit.domOverlay === undefined ) {\r\n\r\n                const overlay = document.createElement( 'div' );\r\n                overlay.style.display = 'none';\r\n                document.body.appendChild( overlay );\r\n\r\n                const svg = document.createElementNS( 'http://www.w3.org/2000/svg', 'svg' );\r\n                svg.setAttribute( 'width', 38 );\r\n                svg.setAttribute( 'height', 38 );\r\n                svg.style.position = 'absolute';\r\n                svg.style.right = '20px';\r\n                svg.style.top = '20px';\r\n                svg.addEventListener( 'click', function() {\r\n\r\n                    currentSession.end();\r\n\r\n                } );\r\n                overlay.appendChild( svg );\r\n\r\n                const path = document.createElementNS( 'http://www.w3.org/2000/svg', 'path' );\r\n                path.setAttribute( 'd', 'M 12,12 L 28,28 M 28,12 12,28' );\r\n                path.setAttribute( 'stroke', '#fff' );\r\n                path.setAttribute( 'stroke-width', 2 );\r\n                svg.appendChild( path );\r\n\r\n                if ( sessionInit.optionalFeatures === undefined ) {\r\n\r\n                    sessionInit.optionalFeatures = [];\r\n\r\n                }\r\n\r\n                sessionInit.optionalFeatures.push( 'dom-overlay' );\r\n                sessionInit.domOverlay = { root: overlay };\r\n\r\n            }\r\n\r\n            //\r\n\r\n            let currentSession = null;\r\n\r\n            async function onSessionStarted( session ) {\r\n\r\n                session.addEventListener( 'end', onSessionEnded );\r\n\r\n                renderer.xr.setReferenceSpaceType( 'local' );\r\n\r\n                await renderer.xr.setSession( session );\r\n\r\n                button.textContent = 'STOP AR';\r\n                sessionInit.domOverlay.root.style.display = '';\r\n\r\n                currentSession = session;\r\n\r\n            }\r\n\r\n            function onSessionEnded( /* event */ ) {\r\n\r\n                currentSession.removeEventListener( 'end', onSessionEnded );\r\n\r\n                button.textContent = 'START AR';\r\n                sessionInit.domOverlay.root.style.display = 'none';\r\n\r\n                currentSession = null;\r\n\r\n            }\r\n\r\n            //\r\n\r\n            button.style.display = '';\r\n\r\n            button.style.cursor = 'pointer';\r\n            button.style.left = 'calc(50% - 50px)';\r\n            button.style.width = '100px';\r\n\r\n            button.textContent = 'START AR';\r\n\r\n            button.onmouseenter = function() {\r\n\r\n                button.style.opacity = '1.0';\r\n\r\n            };\r\n\r\n            button.onmouseleave = function() {\r\n\r\n                button.style.opacity = '0.5';\r\n\r\n            };\r\n\r\n            button.onclick = function() {\r\n\r\n                if ( currentSession === null ) {\r\n\r\n                    navigator.xr.requestSession( 'immersive-ar', sessionInit ).then( onSessionStarted );\r\n\r\n                } else {\r\n\r\n                    currentSession.end();\r\n\r\n                    if ( navigator.xr.offerSession !== undefined ) {\r\n\r\n                        navigator.xr.offerSession( 'immersive-ar', sessionInit )\r\n                            .then( onSessionStarted )\r\n                            .catch( ( err ) => {\r\n\r\n                                console.warn( err );\r\n\r\n                            } );\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            };\r\n\r\n            if ( navigator.xr.offerSession !== undefined ) {\r\n\r\n                navigator.xr.offerSession( 'immersive-ar', sessionInit )\r\n                    .then( onSessionStarted )\r\n                    .catch( ( err ) => {\r\n\r\n                        console.warn( err );\r\n\r\n                    } );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function disableButton() {\r\n\r\n            button.style.display = '';\r\n\r\n            button.style.cursor = 'auto';\r\n            button.style.left = 'calc(50% - 75px)';\r\n            button.style.width = '150px';\r\n\r\n            button.onmouseenter = null;\r\n            button.onmouseleave = null;\r\n\r\n            button.onclick = null;\r\n\r\n        }\r\n\r\n        function showARNotSupported() {\r\n\r\n            disableButton();\r\n\r\n            button.textContent = 'AR NOT SUPPORTED';\r\n\r\n        }\r\n\r\n        function showARNotAllowed( exception ) {\r\n\r\n            disableButton();\r\n\r\n            console.warn( 'Exception when trying to call xr.isSessionSupported', exception );\r\n\r\n            button.textContent = 'AR NOT ALLOWED';\r\n\r\n        }\r\n\r\n        function stylizeElement( element ) {\r\n\r\n            element.style.position = 'absolute';\r\n            element.style.bottom = '20px';\r\n            element.style.padding = '12px 6px';\r\n            element.style.border = '1px solid #fff';\r\n            element.style.borderRadius = '4px';\r\n            element.style.background = 'rgba(0,0,0,0.1)';\r\n            element.style.color = '#fff';\r\n            element.style.font = 'normal 13px sans-serif';\r\n            element.style.textAlign = 'center';\r\n            element.style.opacity = '0.5';\r\n            element.style.outline = 'none';\r\n            element.style.zIndex = '999';\r\n\r\n        }\r\n\r\n        if ( 'xr' in navigator ) {\r\n\r\n            button.id = 'ARButton';\r\n            button.style.display = 'none';\r\n\r\n            stylizeElement( button );\r\n\r\n            navigator.xr.isSessionSupported( 'immersive-ar' ).then( function( supported ) {\r\n\r\n                supported ? showStartAR() : showARNotSupported();\r\n\r\n            } ).catch( showARNotAllowed );\r\n\r\n            return button;\r\n\r\n        } else {\r\n\r\n            const message = document.createElement( 'a' );\r\n\r\n            if ( window.isSecureContext === false ) {\r\n\r\n                message.href = document.location.href.replace( /^http:/, 'https:' );\r\n                message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\r\n\r\n            } else {\r\n\r\n                message.href = 'https://immersiveweb.dev/';\r\n                message.innerHTML = 'WEBXR NOT AVAILABLE';\r\n\r\n            }\r\n\r\n            message.style.left = 'calc(50% - 90px)';\r\n            message.style.width = '180px';\r\n            message.style.textDecoration = 'none';\r\n\r\n            stylizeElement( message );\r\n\r\n            return message;\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n","export const RenderMode = {\r\n    Always: 0,\r\n    OnChange: 1,\r\n    Never: 2\r\n};\r\n","import * as THREE from 'three';\r\nimport { OrbitControls } from './OrbitControls.js';\r\nimport { PlyLoader } from './loaders/ply/PlyLoader.js';\r\nimport { SplatLoader } from './loaders/splat/SplatLoader.js';\r\nimport { KSplatLoader } from './loaders/ksplat/KSplatLoader.js';\r\nimport { sceneFormatFromPath } from './loaders/Utils.js';\r\nimport { LoadingSpinner } from './ui/LoadingSpinner.js';\r\nimport { LoadingProgressBar } from './ui/LoadingProgressBar.js';\r\nimport { InfoPanel } from './ui/InfoPanel.js';\r\nimport { SceneHelper } from './SceneHelper.js';\r\nimport { Raycaster } from './raycaster/Raycaster.js';\r\nimport { SplatMesh } from './SplatMesh.js';\r\nimport { createSortWorker } from './worker/SortWorker.js';\r\nimport { Constants } from './Constants.js';\r\nimport { getCurrentTime } from './Util.js';\r\nimport { AbortablePromise, AbortedPromiseError } from './AbortablePromise.js';\r\nimport { SceneFormat } from './loaders/SceneFormat.js';\r\nimport { WebXRMode } from './webxr/WebXRMode.js';\r\nimport { VRButton } from './webxr/VRButton.js';\r\nimport { ARButton } from './webxr/ARButton.js';\r\nimport { delayedExecute } from './Util.js';\r\nimport { LoaderStatus } from './loaders/LoaderStatus.js';\r\nimport { RenderMode } from './RenderMode.js';\r\nimport { SceneRevealMode } from './SceneRevealMode.js';\r\n\r\nconst THREE_CAMERA_FOV = 50;\r\nconst MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT = .75;\r\nconst MIN_SPLAT_COUNT_TO_SHOW_SPLAT_TREE_LOADING_SPINNER = 1500000;\r\nconst FOCUS_MARKER_FADE_IN_SPEED = 10.0;\r\nconst FOCUS_MARKER_FADE_OUT_SPEED = 2.5;\r\nconst CONSECUTIVE_RENDERED_FRAMES_FOR_FPS_CALCULATION = 60;\r\n\r\n/**\r\n * Viewer: Manages the rendering of splat scenes. Manages an instance of SplatMesh as well as a web worker\r\n * that performs the sort for its splats.\r\n */\r\nexport class Viewer {\r\n\r\n    constructor(options = {}) {\r\n\r\n        // The natural 'up' vector for viewing the scene (only has an effect when used with orbit controls and\r\n        // when the viewer uses its own camera).\r\n        if (!options.cameraUp) options.cameraUp = [0, 1, 0];\r\n        this.cameraUp = new THREE.Vector3().fromArray(options.cameraUp);\r\n\r\n        // The camera's initial position (only used when the viewer uses its own camera).\r\n        if (!options.initialCameraPosition) options.initialCameraPosition = [0, 10, 15];\r\n        this.initialCameraPosition = new THREE.Vector3().fromArray(options.initialCameraPosition);\r\n\r\n        // The initial focal point of the camera and center of the camera's orbit (only used when the viewer uses its own camera).\r\n        if (!options.initialCameraLookAt) options.initialCameraLookAt = [0, 0, 0];\r\n        this.initialCameraLookAt = new THREE.Vector3().fromArray(options.initialCameraLookAt);\r\n\r\n        // 'dropInMode' is a flag that is used internally to support the usage of the viewer as a Three.js scene object\r\n        this.dropInMode = options.dropInMode || false;\r\n\r\n        // If 'selfDrivenMode' is true, the viewer manages its own update/animation loop via requestAnimationFrame()\r\n        if (options.selfDrivenMode === undefined || options.selfDrivenMode === null) options.selfDrivenMode = true;\r\n        this.selfDrivenMode = options.selfDrivenMode && !this.dropInMode;\r\n        this.selfDrivenUpdateFunc = this.selfDrivenUpdate.bind(this);\r\n\r\n        // If 'useBuiltInControls' is true, the viewer will create its own instance of OrbitControls and attach to the camera\r\n        if (options.useBuiltInControls === undefined) options.useBuiltInControls = true;\r\n        this.useBuiltInControls = options.useBuiltInControls;\r\n\r\n        // parent element of the Three.js renderer canvas\r\n        this.rootElement = options.rootElement;\r\n\r\n        // Tells the viewer to pretend the device pixel ratio is 1, which can boost performance on devices where it is larger,\r\n        // at a small cost to visual quality\r\n        this.ignoreDevicePixelRatio = options.ignoreDevicePixelRatio || false;\r\n        this.devicePixelRatio = this.ignoreDevicePixelRatio ? 1 : window.devicePixelRatio;\r\n\r\n        // Tells the viewer to use 16-bit floating point values when storing splat covariance data in textures, instead of 32-bit\r\n        this.halfPrecisionCovariancesOnGPU = options.halfPrecisionCovariancesOnGPU || false;\r\n\r\n        // If 'threeScene' is valid, it will be rendered by the viewer along with the splat mesh\r\n        this.threeScene = options.threeScene;\r\n        // Allows for usage of an external Three.js renderer\r\n        this.renderer = options.renderer;\r\n        // Allows for usage of an external Three.js camera\r\n        this.camera = options.camera;\r\n\r\n        // If 'gpuAcceleratedSort' is true, a partially GPU-accelerated approach to sorting splats will be used.\r\n        // Currently this means pre-computing splat distances from the camera on the GPU\r\n        this.gpuAcceleratedSort = options.gpuAcceleratedSort || false;\r\n\r\n        // if 'integerBasedSort' is true, the integer version of splat centers as well as other values used to calculate\r\n        // splat distances are used instead of the float version. This speeds up computation, but introduces the possibility of\r\n        // overflow in larger scenes.\r\n        if (options.integerBasedSort === undefined || options.integerBasedSort === null) {\r\n            options.integerBasedSort = true;\r\n        }\r\n        this.integerBasedSort = options.integerBasedSort;\r\n\r\n        // If 'sharedMemoryForWorkers' is true, a SharedArrayBuffer will be used to communicate with web workers. This method\r\n        // is faster than copying memory to or from web workers, but comes with security implications as outlined here:\r\n        // https://web.dev/articles/cross-origin-isolation-guide\r\n        // If enabled, it requires specific CORS headers to be present in the response from the server that is sent when\r\n        // loading the application. More information is available in the README.\r\n        if (options.sharedMemoryForWorkers === undefined || options.sharedMemoryForWorkers === null) options.sharedMemoryForWorkers = true;\r\n        this.sharedMemoryForWorkers = options.sharedMemoryForWorkers;\r\n\r\n        // if 'dynamicScene' is true, it tells the viewer to assume scene elements are not stationary or that the number of splats in the\r\n        // scene may change. This prevents optimizations that depend on a static scene from being made. Additionally, if 'dynamicScene' is\r\n        // true it tells the splat mesh to not apply scene tranforms to splat data that is returned by functions like\r\n        // SplatMesh.getSplatCenter() by default.\r\n        this.dynamicScene = !!options.dynamicScene;\r\n\r\n        // When true, will perform additional steps during rendering to address artifacts caused by the rendering of gaussians at a\r\n        // substantially different resolution than that at which they were rendered during training. This will only work correctly\r\n        // for models that were trained using a process that utilizes this compensation calculation. For more details:\r\n        // https://github.com/nerfstudio-project/gsplat/pull/117\r\n        // https://github.com/graphdeco-inria/gaussian-splatting/issues/294#issuecomment-1772688093\r\n        this.antialiased = options.antialiased || false;\r\n\r\n        this.webXRMode = options.webXRMode || WebXRMode.None;\r\n\r\n        if (this.webXRMode !== WebXRMode.None) {\r\n            this.gpuAcceleratedSort = false;\r\n        }\r\n\r\n        // if 'renderMode' is RenderMode.Always, then the viewer will rrender the scene on every update. If it is RenderMode.OnChange,\r\n        // it will only render when something in the scene has changed.\r\n        this.renderMode = options.renderMode || RenderMode.Always;\r\n\r\n        // SceneRevealMode.Default results in a nice, slow fade-in effect for progressively loaded scenes,\r\n        // and a fast fade-in for non progressively loaded scenes.\r\n        // SceneRevealMode.Gradual will force a slow fade-in for all scenes.\r\n        // SceneRevealMode.Instant will force all loaded scene data to be immediately visible.\r\n        this.sceneRevealMode = options.sceneRevealMode || SceneRevealMode.Default;\r\n\r\n        // Hacky, experimental, non-scientific parameter for tweaking focal length related calculations. For scenes with very\r\n        // small gaussians, small details, and small dimensions -- increasing this value can help improve visual quality.\r\n        this.focalAdjustment = options.focalAdjustment || 1.0;\r\n\r\n        // Specify the maximum screen-space splat size, can help deal with large splats that get too unwieldy\r\n        this.maxScreenSpaceSplatSize = options.maxScreenSpaceSplatSize || 2048;\r\n\r\n        this.createSplatMesh();\r\n\r\n        this.controls = null;\r\n        this.perspectiveControls = null;\r\n        this.orthographicControls = null;\r\n\r\n        this.orthographicCamera = null;\r\n        this.perspectiveCamera = null;\r\n\r\n        this.showMeshCursor = false;\r\n        this.showControlPlane = false;\r\n        this.showInfo = false;\r\n\r\n        this.sceneHelper = null;\r\n\r\n        this.sortWorker = null;\r\n        this.sortRunning = false;\r\n        this.splatRenderCount = 0;\r\n        this.sortWorkerIndexesToSort = null;\r\n        this.sortWorkerSortedIndexes = null;\r\n        this.sortWorkerPrecomputedDistances = null;\r\n        this.sortWorkerTransforms = null;\r\n        this.runAfterFirstSort = [];\r\n\r\n        this.selfDrivenModeRunning = false;\r\n        this.splatRenderReady = false;\r\n\r\n        this.raycaster = new Raycaster();\r\n\r\n        this.infoPanel = null;\r\n\r\n        this.startInOrthographicMode = false;\r\n\r\n        this.currentFPS = 0;\r\n        this.lastSortTime = 0;\r\n        this.consecutiveRenderFrames = 0;\r\n\r\n        this.previousCameraTarget = new THREE.Vector3();\r\n        this.nextCameraTarget = new THREE.Vector3();\r\n\r\n        this.mousePosition = new THREE.Vector2();\r\n        this.mouseDownPosition = new THREE.Vector2();\r\n        this.mouseDownTime = null;\r\n\r\n        this.resizeObserver = null;\r\n        this.mouseMoveListener = null;\r\n        this.mouseDownListener = null;\r\n        this.mouseUpListener = null;\r\n        this.keyDownListener = null;\r\n\r\n        this.sortPromise = null;\r\n        this.sortPromiseResolver = null;\r\n        this.splatSceneDownloadPromises = {};\r\n        this.splatSceneDownloadAndBuildPromise = null;\r\n        this.splatSceneRemovalPromise = null;\r\n\r\n        this.loadingSpinner = new LoadingSpinner(null, this.rootElement || document.body);\r\n        this.loadingSpinner.hide();\r\n        this.loadingProgressBar = new LoadingProgressBar(this.rootElement || document.body);\r\n        this.loadingProgressBar.hide();\r\n        this.infoPanel = new InfoPanel(this.rootElement || document.body);\r\n        this.infoPanel.hide();\r\n\r\n        this.usingExternalCamera = (this.dropInMode || this.camera) ? true : false;\r\n        this.usingExternalRenderer = (this.dropInMode || this.renderer) ? true : false;\r\n\r\n        this.initialized = false;\r\n        this.disposing = false;\r\n        this.disposed = false;\r\n        if (!this.dropInMode) this.init();\r\n    }\r\n\r\n    createSplatMesh() {\r\n        this.splatMesh = new SplatMesh(this.dynamicScene, this.halfPrecisionCovariancesOnGPU, this.devicePixelRatio,\r\n                                       this.gpuAcceleratedSort, this.integerBasedSort, this.antialiased, this.maxScreenSpaceSplatSize);\r\n        this.splatMesh.frustumCulled = false;\r\n    }\r\n\r\n    init() {\r\n\r\n        if (this.initialized) return;\r\n\r\n        if (!this.rootElement) {\r\n            if (!this.usingExternalRenderer) {\r\n                this.rootElement = document.createElement('div');\r\n                this.rootElement.style.width = '100%';\r\n                this.rootElement.style.height = '100%';\r\n                this.rootElement.style.position = 'absolute';\r\n                document.body.appendChild(this.rootElement);\r\n            } else {\r\n                this.rootElement = this.renderer.domElement.parentElement || document.body;\r\n            }\r\n        }\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n        this.getRenderDimensions(renderDimensions);\r\n\r\n        if (!this.usingExternalCamera) {\r\n            this.perspectiveCamera = new THREE.PerspectiveCamera(THREE_CAMERA_FOV, renderDimensions.x / renderDimensions.y, 0.1, 1000);\r\n            this.orthographicCamera = new THREE.OrthographicCamera(renderDimensions.x / -2, renderDimensions.x / 2,\r\n                                                                   renderDimensions.y / 2, renderDimensions.y / -2, 0.1, 1000 );\r\n            this.camera = this.startInOrthographicMode ? this.orthographicCamera : this.perspectiveCamera;\r\n            this.camera.position.copy(this.initialCameraPosition);\r\n            this.camera.up.copy(this.cameraUp).normalize();\r\n            this.camera.lookAt(this.initialCameraLookAt);\r\n        }\r\n\r\n        if (!this.usingExternalRenderer) {\r\n            this.renderer = new THREE.WebGLRenderer({\r\n                antialias: false,\r\n                precision: 'highp'\r\n            });\r\n            this.renderer.setPixelRatio(this.devicePixelRatio);\r\n            this.renderer.autoClear = true;\r\n            this.renderer.setClearColor(new THREE.Color( 0x000000 ), 0.0);\r\n            this.renderer.setSize(renderDimensions.x, renderDimensions.y);\r\n\r\n            this.resizeObserver = new ResizeObserver(() => {\r\n                this.getRenderDimensions(renderDimensions);\r\n                this.renderer.setSize(renderDimensions.x, renderDimensions.y);\r\n                this.forceRenderNextFrame();\r\n            });\r\n            this.resizeObserver.observe(this.rootElement);\r\n            this.rootElement.appendChild(this.renderer.domElement);\r\n        }\r\n\r\n        if (this.webXRMode) {\r\n            if (this.webXRMode === WebXRMode.VR) {\r\n                this.rootElement.appendChild(VRButton.createButton(this.renderer));\r\n            } else if (this.webXRMode === WebXRMode.AR) {\r\n                this.rootElement.appendChild(ARButton.createButton(this.renderer));\r\n            }\r\n            this.renderer.xr.enabled = true;\r\n            this.camera.position.copy(this.initialCameraPosition);\r\n            this.camera.up.copy(this.cameraUp).normalize();\r\n            this.camera.lookAt(this.initialCameraLookAt);\r\n        }\r\n\r\n        this.threeScene = this.threeScene || new THREE.Scene();\r\n        this.sceneHelper = new SceneHelper(this.threeScene);\r\n        this.sceneHelper.setupMeshCursor();\r\n        this.sceneHelper.setupFocusMarker();\r\n        this.sceneHelper.setupControlPlane();\r\n\r\n        if (this.useBuiltInControls && this.webXRMode === WebXRMode.None) {\r\n            if (!this.usingExternalCamera) {\r\n                this.perspectiveControls = new OrbitControls(this.perspectiveCamera, this.renderer.domElement);\r\n                this.orthographicControls = new OrbitControls(this.orthographicCamera, this.renderer.domElement);\r\n            } else {\r\n                if (this.camera.isOrthographicCamera) {\r\n                    this.orthographicControls = new OrbitControls(this.camera, this.renderer.domElement);\r\n                } else {\r\n                    this.perspectiveControls = new OrbitControls(this.camera, this.renderer.domElement);\r\n                }\r\n            }\r\n            for (let controls of [this.perspectiveControls, this.orthographicControls]) {\r\n                if (controls) {\r\n                    controls.listenToKeyEvents(window);\r\n                    controls.rotateSpeed = 0.5;\r\n                    controls.maxPolarAngle = Math.PI * .75;\r\n                    controls.minPolarAngle = 0.1;\r\n                    controls.enableDamping = true;\r\n                    controls.dampingFactor = 0.05;\r\n                    controls.target.copy(this.initialCameraLookAt);\r\n                }\r\n            }\r\n            this.controls = this.camera.isOrthographicCamera ? this.orthographicControls : this.perspectiveControls;\r\n            this.mouseMoveListener = this.onMouseMove.bind(this);\r\n            this.renderer.domElement.addEventListener('pointermove', this.mouseMoveListener, false);\r\n            this.mouseDownListener = this.onMouseDown.bind(this);\r\n            this.renderer.domElement.addEventListener('pointerdown', this.mouseDownListener, false);\r\n            this.mouseUpListener = this.onMouseUp.bind(this);\r\n            this.renderer.domElement.addEventListener('pointerup', this.mouseUpListener, false);\r\n            this.keyDownListener = this.onKeyDown.bind(this);\r\n            window.addEventListener('keydown', this.keyDownListener, false);\r\n        }\r\n\r\n        this.loadingProgressBar.setContainer(this.rootElement);\r\n        this.loadingSpinner.setContainer(this.rootElement);\r\n        this.infoPanel.setContainer(this.rootElement);\r\n\r\n        this.initialized = true;\r\n    }\r\n\r\n    removeEventHandlers() {\r\n        if (this.useBuiltInControls) {\r\n            this.renderer.domElement.removeEventListener('pointermove', this.mouseMoveListener);\r\n            this.mouseMoveListener = null;\r\n            this.renderer.domElement.removeEventListener('pointerdown', this.mouseDownListener);\r\n            this.mouseDownListener = null;\r\n            this.renderer.domElement.removeEventListener('pointerup', this.mouseUpListener);\r\n            this.mouseUpListener = null;\r\n            window.removeEventListener('keydown', this.keyDownListener);\r\n            this.keyDownListener = null;\r\n        }\r\n    }\r\n\r\n    setRenderMode(renderMode) {\r\n        this.renderMode = renderMode;\r\n    }\r\n\r\n    onKeyDown = function() {\r\n\r\n        const forward = new THREE.Vector3();\r\n        const tempMatrixLeft = new THREE.Matrix4();\r\n        const tempMatrixRight = new THREE.Matrix4();\r\n\r\n        return function(e) {\r\n            forward.set(0, 0, -1);\r\n            forward.transformDirection(this.camera.matrixWorld);\r\n            tempMatrixLeft.makeRotationAxis(forward, Math.PI / 128);\r\n            tempMatrixRight.makeRotationAxis(forward, -Math.PI / 128);\r\n            switch (e.code) {\r\n                case 'KeyG':\r\n                    this.focalAdjustment += 0.02;\r\n                    this.forceRenderNextFrame();\r\n                break;\r\n                case 'KeyF':\r\n                    this.focalAdjustment -= 0.02;\r\n                    this.forceRenderNextFrame();\r\n                break;\r\n                case 'ArrowLeft':\r\n                    this.camera.up.transformDirection(tempMatrixLeft);\r\n                break;\r\n                case 'ArrowRight':\r\n                    this.camera.up.transformDirection(tempMatrixRight);\r\n                break;\r\n                case 'KeyC':\r\n                    this.showMeshCursor = !this.showMeshCursor;\r\n                break;\r\n                case 'KeyU':\r\n                    this.showControlPlane = !this.showControlPlane;\r\n                break;\r\n                case 'KeyI':\r\n                    this.showInfo = !this.showInfo;\r\n                    if (this.showInfo) {\r\n                        this.infoPanel.show();\r\n                    } else {\r\n                        this.infoPanel.hide();\r\n                    }\r\n                break;\r\n                case 'KeyO':\r\n                    if (!this.usingExternalCamera) {\r\n                        this.setOrthographicMode(!this.camera.isOrthographicCamera);\r\n                    }\r\n                break;\r\n                case 'KeyP':\r\n                    if (!this.usingExternalCamera) {\r\n                        this.splatMesh.setPointCloudModeEnabled(!this.splatMesh.getPointCloudModeEnabled());\r\n                    }\r\n                break;\r\n                case 'Equal':\r\n                    if (!this.usingExternalCamera) {\r\n                        this.splatMesh.setSplatScale(this.splatMesh.getSplatScale() + 0.05);\r\n                    }\r\n                break;\r\n                case 'Minus':\r\n                    if (!this.usingExternalCamera) {\r\n                        this.splatMesh.setSplatScale(Math.max(this.splatMesh.getSplatScale() - 0.05, 0.0));\r\n                    }\r\n                break;\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    onMouseMove(mouse) {\r\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\r\n    }\r\n\r\n    onMouseDown() {\r\n        this.mouseDownPosition.copy(this.mousePosition);\r\n        this.mouseDownTime = getCurrentTime();\r\n    }\r\n\r\n    onMouseUp = function() {\r\n\r\n        const clickOffset = new THREE.Vector2();\r\n\r\n        return function(mouse) {\r\n            clickOffset.copy(this.mousePosition).sub(this.mouseDownPosition);\r\n            const mouseUpTime = getCurrentTime();\r\n            const wasClick = mouseUpTime - this.mouseDownTime < 0.5 && clickOffset.length() < 2;\r\n            if (wasClick) {\r\n                this.onMouseClick(mouse);\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    onMouseClick(mouse) {\r\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\r\n        this.checkForFocalPointChange();\r\n    }\r\n\r\n    checkForFocalPointChange = function() {\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n        const toNewFocalPoint = new THREE.Vector3();\r\n        const outHits = [];\r\n\r\n        return function() {\r\n            if (!this.transitioningCameraTarget) {\r\n                this.getRenderDimensions(renderDimensions);\r\n                outHits.length = 0;\r\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\r\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\r\n                if (outHits.length > 0) {\r\n                    const hit = outHits[0];\r\n                    const intersectionPoint = hit.origin;\r\n                    toNewFocalPoint.copy(intersectionPoint).sub(this.camera.position);\r\n                    if (toNewFocalPoint.length() > MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT) {\r\n                        this.previousCameraTarget.copy(this.controls.target);\r\n                        this.nextCameraTarget.copy(intersectionPoint);\r\n                        this.transitioningCameraTarget = true;\r\n                        this.transitioningCameraTargetStartTime = getCurrentTime();\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    getRenderDimensions(outDimensions) {\r\n        if (this.rootElement) {\r\n            outDimensions.x = this.rootElement.offsetWidth;\r\n            outDimensions.y = this.rootElement.offsetHeight;\r\n        } else {\r\n            this.renderer.getSize(outDimensions);\r\n        }\r\n    }\r\n\r\n    setOrthographicMode(orthographicMode) {\r\n        if (orthographicMode === this.camera.isOrthographicCamera) return;\r\n        const fromCamera = this.camera;\r\n        const toCamera = orthographicMode ? this.orthographicCamera : this.perspectiveCamera;\r\n        toCamera.position.copy(fromCamera.position);\r\n        toCamera.up.copy(fromCamera.up);\r\n        toCamera.rotation.copy(fromCamera.rotation);\r\n        toCamera.quaternion.copy(fromCamera.quaternion);\r\n        toCamera.matrix.copy(fromCamera.matrix);\r\n        this.camera = toCamera;\r\n\r\n        if (this.controls) {\r\n            const fromControls = this.controls;\r\n            const toControls = orthographicMode ? this.orthographicControls : this.perspectiveControls;\r\n            toControls.target.copy(fromControls.target);\r\n            toControls.clearDampedRotation();\r\n            fromControls.clearDampedRotation();\r\n            if (orthographicMode) {\r\n                Viewer.setCameraZoomFromPosition(toCamera, fromCamera, fromControls);\r\n            } else {\r\n                Viewer.setCameraPositionFromZoom(toCamera, fromCamera, toControls);\r\n            }\r\n            this.controls = toControls;\r\n            this.camera.lookAt(this.controls.target);\r\n        }\r\n    }\r\n\r\n    static setCameraPositionFromZoom = function() {\r\n\r\n        const tempVector = new THREE.Vector3();\r\n\r\n        return function(positionCamera, zoomedCamera, controls) {\r\n            const toLookAtDistance = 1 / (zoomedCamera.zoom * 0.001);\r\n            tempVector.copy(controls.target).sub(positionCamera.position).normalize().multiplyScalar(toLookAtDistance).negate();\r\n            positionCamera.position.copy(controls.target).add(tempVector);\r\n        };\r\n\r\n    }();\r\n\r\n\r\n    static setCameraZoomFromPosition = function() {\r\n\r\n        const tempVector = new THREE.Vector3();\r\n\r\n        return function(zoomCamera, positionZamera, controls) {\r\n            const toLookAtDistance = tempVector.copy(controls.target).sub(positionZamera.position).length();\r\n            zoomCamera.zoom = 1 / (toLookAtDistance * .001);\r\n        };\r\n\r\n    }();\r\n\r\n    updateSplatMesh = function() {\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n\r\n        return function() {\r\n            if (!this.splatMesh) return;\r\n            const splatCount = this.splatMesh.getSplatCount();\r\n            if (splatCount > 0) {\r\n                this.splatMesh.updateTransforms();\r\n                this.getRenderDimensions(renderDimensions);\r\n                const focalLengthX = this.camera.projectionMatrix.elements[0] * 0.5 *\r\n                                     this.devicePixelRatio * renderDimensions.x;\r\n                const focalLengthY = this.camera.projectionMatrix.elements[5] * 0.5 *\r\n                                     this.devicePixelRatio * renderDimensions.y;\r\n\r\n                const focalMultiplier = this.camera.isOrthographicCamera ? (1.0 / this.devicePixelRatio) : 1.0;\r\n                const focalAdjustment = this.focalAdjustment * focalMultiplier;\r\n                const inverseFocalAdjustment = 1.0 / focalAdjustment;\r\n\r\n                this.splatMesh.updateUniforms(renderDimensions, focalLengthX * focalAdjustment, focalLengthY * focalAdjustment,\r\n                                              this.camera.isOrthographicCamera, this.camera.zoom || 1.0, inverseFocalAdjustment);\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    isLoadingOrUnloading() {\r\n        return Object.keys(this.splatSceneDownloadPromises).length > 0 || this.splatSceneDownloadAndBuildPromise !== null ||\r\n                           this.splatSceneRemovalPromise !== null;\r\n    }\r\n\r\n    isDisposingOrDisposed() {\r\n        return this.disposing || this.disposed;\r\n    }\r\n\r\n    addSplatSceneDownloadPromise(promise) {\r\n        this.splatSceneDownloadPromises[promise.id] = promise;\r\n    }\r\n\r\n    removeSplatSceneDownloadPromise(promise) {\r\n        delete this.splatSceneDownloadPromises[promise.id];\r\n    }\r\n\r\n    setSplatSceneDownloadAndBuildPromise(promise) {\r\n        this.splatSceneDownloadAndBuildPromise = promise;\r\n    }\r\n\r\n    clearSplatSceneDownloadAndBuildPromise() {\r\n        this.splatSceneDownloadAndBuildPromise = null;\r\n    }\r\n\r\n    /**\r\n     * Add a splat scene to the viewer and display any loading UI if appropriate.\r\n     * @param {string} path Path to splat scene to be loaded\r\n     * @param {object} options {\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     *         showLoadingUI:         Display a loading spinner while the scene is loading, defaults to true\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     *\r\n     *         onProgress:                 Function to be called as file data are received, or other processing occurs\r\n     *\r\n     * }\r\n     * @return {AbortablePromise}\r\n     */\r\n    addSplatScene(path, options = {}) {\r\n\r\n        if (this.isLoadingOrUnloading()) {\r\n            throw new Error('Cannot add splat scene while another load or unload is already in progress.');\r\n        }\r\n\r\n        if (this.isDisposingOrDisposed()) {\r\n            throw new Error('Cannot add splat scene after dispose() is called.');\r\n        }\r\n\r\n        const format = (options.format !== undefined && options.format !== null) ? options.format : sceneFormatFromPath(path);\r\n        const streamBuildSections = Viewer.isStreamable(format) && options.streamView;\r\n        const showLoadingUI = (options.showLoadingUI !== undefined && options.showLoadingUI !== null) ? options.showLoadingUI : true;\r\n\r\n        let loadingUITaskId = null;\r\n        if (showLoadingUI) {\r\n            this.loadingSpinner.removeAllTasks();\r\n            loadingUITaskId = this.loadingSpinner.addTask('Downloading...');\r\n        }\r\n        const hideLoadingUI = () => {\r\n            this.loadingProgressBar.hide();\r\n            this.loadingSpinner.removeAllTasks();\r\n        };\r\n\r\n        const onProgressUIUpdate = (percentComplete, percentCompleteLabel, loaderStatus) => {\r\n            if (showLoadingUI) {\r\n                if (loaderStatus === LoaderStatus.Downloading) {\r\n                    if (percentComplete == 100) {\r\n                        this.loadingSpinner.setMessageForTask(loadingUITaskId, 'Download complete!');\r\n                    } else {\r\n                        if (streamBuildSections) {\r\n                            this.loadingSpinner.setMessageForTask(loadingUITaskId, 'Downloading splats...');\r\n                        } else {\r\n                            const suffix = percentCompleteLabel ? `: ${percentCompleteLabel}` : `...`;\r\n                            this.loadingSpinner.setMessageForTask(loadingUITaskId, `Downloading${suffix}`);\r\n                        }\r\n                    }\r\n                } else if (loaderStatus === LoaderStatus.Processing) {\r\n                    this.loadingSpinner.setMessageForTask(loadingUITaskId, 'Processing splats...');\r\n                } else {\r\n                    this.loadingSpinner.setMessageForTask(loadingUITaskId, 'Ready!');\r\n                }\r\n            }\r\n        };\r\n\r\n        let downloadDone = false;\r\n        let downloadedPercentage = 0;\r\n        const splatBuffersAddedUIUpdate = (firstBuild, finalBuild) => {\r\n            if (showLoadingUI) {\r\n                if (firstBuild && streamBuildSections || finalBuild && !streamBuildSections) {\r\n                    this.runAfterFirstSort.push(() => {\r\n                        this.loadingSpinner.removeTask(loadingUITaskId);\r\n                        if (!finalBuild && !downloadDone) this.loadingProgressBar.show();\r\n                    });\r\n                }\r\n                if (streamBuildSections) {\r\n                    if (finalBuild) {\r\n                        downloadDone = true;\r\n                        this.loadingProgressBar.hide();\r\n                    } else {\r\n                        this.loadingProgressBar.setProgress(downloadedPercentage);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        const onProgress = (percentComplete, percentCompleteLabel, loaderStatus) => {\r\n            downloadedPercentage = percentComplete;\r\n            onProgressUIUpdate(percentComplete, percentCompleteLabel, loaderStatus);\r\n            if (options.onProgress) options.onProgress(percentComplete, percentCompleteLabel, loaderStatus);\r\n        };\r\n\r\n        const buildSection = (splatBuffer, firstBuild, finalBuild) => {\r\n            if (!streamBuildSections && options.onProgress) options.onProgress(0, '0%', LoaderStatus.Processing);\r\n            const addSplatBufferOptions = {\r\n                'rotation': options.rotation || options.orientation,\r\n                'position': options.position,\r\n                'scale': options.scale,\r\n                'splatAlphaRemovalThreshold': options.splatAlphaRemovalThreshold,\r\n            };\r\n            return this.addSplatBuffers([splatBuffer], [addSplatBufferOptions],\r\n                                         finalBuild, firstBuild && showLoadingUI, showLoadingUI).then(() => {\r\n                if (!streamBuildSections && options.onProgress) options.onProgress(100, '100%', LoaderStatus.Processing);\r\n                splatBuffersAddedUIUpdate(firstBuild, finalBuild);\r\n            });\r\n        };\r\n\r\n        const loadFunc = streamBuildSections ? this.downloadAndBuildSingleSplatSceneStreaming.bind(this) :\r\n                                               this.downloadAndBuildSingleSplatSceneNonStreaming.bind(this);\r\n        return loadFunc(path, format, options.splatAlphaRemovalThreshold, buildSection.bind(this), onProgress, hideLoadingUI.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Download a single non-streamed splat scene, convert to splat buffer and then rebuild the viewer's splat mesh\r\n     * by calling 'buildFunc'. Also sets/clears relevant instance synchronization objects, and calls appropriate functions\r\n     * on success or failure.\r\n     * @param {string} path Path to splat scene to be loaded\r\n     * @param {SceneFormat} format Format of the splat scene file\r\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified value (valid range: 0 - 255)\r\n     * @param {function} buildFunc Function to build the viewer's splat mesh with the downloaded splat buffer\r\n     * @param {function} onProgress Function to be called as file data are received, or other processing occurs\r\n     * @param {function} onException Function to be called when exception occurs\r\n     * @return {AbortablePromise}\r\n     */\r\n    downloadAndBuildSingleSplatSceneNonStreaming(path, format, splatAlphaRemovalThreshold, buildFunc, onProgress, onException) {\r\n        const downloadPromise = this.downloadSplatSceneToSplatBuffer(path, splatAlphaRemovalThreshold, onProgress, false, undefined, format)\r\n        .then((splatBuffer) => {\r\n            this.removeSplatSceneDownloadPromise(downloadPromise);\r\n            return buildFunc(splatBuffer, true, true).then(() => {\r\n                this.clearSplatSceneDownloadAndBuildPromise();\r\n            });\r\n        })\r\n        .catch((e) => {\r\n            if (onException) onException();\r\n            this.clearSplatSceneDownloadAndBuildPromise();\r\n            this.removeSplatSceneDownloadPromise(downloadPromise);\r\n            if (!(e instanceof AbortedPromiseError)) {\r\n                throw (new Error(`Viewer::addSplatScene -> Could not load file ${path}`));\r\n            }\r\n        });\r\n\r\n        this.addSplatSceneDownloadPromise(downloadPromise);\r\n        this.setSplatSceneDownloadAndBuildPromise(downloadPromise);\r\n\r\n        return downloadPromise;\r\n    }\r\n\r\n    /**\r\n     * Download a single splat scene and convert to splat buffer in a streamed manner, allowing rendering as the file downloads.\r\n     * As each section is downloaded, the viewer's splat mesh is rebuilt by calling 'buildFunc'\r\n     * Also sets/clears relevant instance synchronization objects, and calls appropriate functions on success or failure.\r\n     * @param {string} path Path to splat scene to be loaded\r\n     * @param {SceneFormat} format Format of the splat scene file\r\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified value (valid range: 0 - 255)\r\n     * @param {function} buildFunc Function to rebuild the viewer's splat mesh after a new splat buffer section is downloaded\r\n     * @param {function} onDownloadProgress Function to be called as file data are received\r\n     * @param {function} onDownloadException Function to be called when exception occurs at any point during the full download\r\n     * @return {AbortablePromise}\r\n     */\r\n    downloadAndBuildSingleSplatSceneStreaming(path, format, splatAlphaRemovalThreshold, buildFunc,\r\n                                              onDownloadProgress, onDownloadException) {\r\n        let firstStreamedSectionDownloadAndBuildResolver;\r\n        let firstStreamedSectionDownloadAndBuildRejecter;\r\n        let splatSceneDownloadAndBuildResolver;\r\n        let splatSceneDownloadAndBuildRejecter;\r\n        let steamedSectionBuildCount = 0;\r\n        let streamedSectionBuilding = false;\r\n        const queuedStreamedSectionBuilds = [];\r\n\r\n        const checkAndBuildStreamedSections = () => {\r\n            if (queuedStreamedSectionBuilds.length > 0 && !streamedSectionBuilding && !this.isDisposingOrDisposed()) {\r\n                streamedSectionBuilding = true;\r\n                const queuedBuild = queuedStreamedSectionBuilds.shift();\r\n                buildFunc(queuedBuild.splatBuffer, queuedBuild.firstBuild, queuedBuild.finalBuild)\r\n                .then(() => {\r\n                    streamedSectionBuilding = false;\r\n                    if (queuedBuild.firstBuild) {\r\n                        firstStreamedSectionDownloadAndBuildRejecter = null;\r\n                        firstStreamedSectionDownloadAndBuildResolver();\r\n                    } else if (queuedBuild.finalBuild) {\r\n                        splatSceneDownloadAndBuildResolver();\r\n                        this.clearSplatSceneDownloadAndBuildPromise();\r\n                    }\r\n                    delayedExecute(() => checkAndBuildStreamedSections());\r\n                });\r\n            }\r\n        };\r\n\r\n        const onStreamedSectionProgress = (splatBuffer, finalBuild) => {\r\n            if (!this.isDisposingOrDisposed()) {\r\n                queuedStreamedSectionBuilds.push({\r\n                    splatBuffer,\r\n                    firstBuild: steamedSectionBuildCount === 0,\r\n                    finalBuild\r\n                });\r\n                steamedSectionBuildCount++;\r\n                checkAndBuildStreamedSections();\r\n            }\r\n        };\r\n\r\n        let splatSceneDownloadPromise = this.downloadSplatSceneToSplatBuffer(path, splatAlphaRemovalThreshold,\r\n                                                                             onDownloadProgress, true, onStreamedSectionProgress, format);\r\n\r\n        const firstStreamedSectionBuildPromise = new AbortablePromise((resolver, rejecter) => {\r\n            firstStreamedSectionDownloadAndBuildResolver = resolver;\r\n            firstStreamedSectionDownloadAndBuildRejecter = rejecter;\r\n        }, splatSceneDownloadPromise.abortHandler);\r\n\r\n        const splatSceneDownloadAndBuildPromise = new AbortablePromise((resolver, rejecter) => {\r\n            splatSceneDownloadAndBuildResolver = resolver;\r\n            splatSceneDownloadAndBuildRejecter = rejecter;\r\n        });\r\n\r\n        this.addSplatSceneDownloadPromise(splatSceneDownloadPromise);\r\n        this.setSplatSceneDownloadAndBuildPromise(splatSceneDownloadAndBuildPromise);\r\n\r\n        splatSceneDownloadPromise.then(() => {\r\n            this.removeSplatSceneDownloadPromise(splatSceneDownloadPromise);\r\n        })\r\n        .catch((e) => {\r\n            this.clearSplatSceneDownloadAndBuildPromise();\r\n            this.removeSplatSceneDownloadPromise(splatSceneDownloadPromise);\r\n            if (!(e instanceof AbortedPromiseError)) {\r\n                splatSceneDownloadAndBuildRejecter(e);\r\n                if (firstStreamedSectionDownloadAndBuildRejecter) firstStreamedSectionDownloadAndBuildRejecter(e);\r\n                if (onDownloadException) onDownloadException(e);\r\n            }\r\n        });\r\n\r\n        return firstStreamedSectionBuildPromise;\r\n    }\r\n\r\n    /**\r\n     * Add multiple splat scenes to the viewer and display any loading UI if appropriate.\r\n     * @param {Array<object>} sceneOptions Array of per-scene options: {\r\n     *\r\n     *         path: Path to splat scene to be loaded\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     * }\r\n     * @param {boolean} showLoadingUI Display a loading spinner while the scene is loading, defaults to true\r\n     * @param {function} onProgress Function to be called as file data are received\r\n     * @return {AbortablePromise}\r\n     */\r\n    addSplatScenes(sceneOptions, showLoadingUI = true, onProgress = undefined) {\r\n\r\n        if (this.isLoadingOrUnloading()) {\r\n            throw new Error('Cannot add splat scene while another load or unload is already in progress.');\r\n        }\r\n\r\n        if (this.isDisposingOrDisposed()) {\r\n            throw new Error('Cannot add splat scene after dispose() is called.');\r\n        }\r\n\r\n        const fileCount = sceneOptions.length;\r\n        const percentComplete = [];\r\n        if (showLoadingUI) {\r\n            this.loadingSpinner.removeAllTasks();\r\n            this.loadingSpinner.show();\r\n        }\r\n        const onLoadProgress = (fileIndex, percent, percentLabel) => {\r\n            percentComplete[fileIndex] = percent;\r\n            let totalPercent = 0;\r\n            for (let i = 0; i < fileCount; i++) totalPercent += percentComplete[i] || 0;\r\n            totalPercent = totalPercent / fileCount;\r\n            percentLabel = `${totalPercent.toFixed(2)}%`;\r\n            if (showLoadingUI) {\r\n                this.loadingSpinner.setMessage(totalPercent == 100 ? `Download complete!` : `Downloading: ${percentLabel}`);\r\n            }\r\n            if (onProgress) onProgress(totalPercent, percentLabel, LoaderStatus.Downloading);\r\n        };\r\n\r\n        const downloadPromises = [];\r\n        const nativeLoadPromises = [];\r\n        const abortHandlers = [];\r\n        for (let i = 0; i < sceneOptions.length; i++) {\r\n            const options = sceneOptions[i];\r\n            const format = (options.format !== undefined && options.format !== null) ? options.format : sceneFormatFromPath(options.path);\r\n            const downloadPromise = this.downloadSplatSceneToSplatBuffer(options.path, options.splatAlphaRemovalThreshold,\r\n                                                                         onLoadProgress.bind(this, i), false, undefined, format);\r\n            abortHandlers.push(downloadPromise.abortHandler);\r\n            downloadPromises.push(downloadPromise);\r\n            nativeLoadPromises.push(downloadPromise.promise);\r\n            this.addSplatSceneDownloadPromise(downloadPromise);\r\n        }\r\n\r\n        const downloadPromise = new AbortablePromise((resolve, reject) => {\r\n            Promise.all(nativeLoadPromises)\r\n            .then((splatBuffers) => {\r\n                if (showLoadingUI) this.loadingSpinner.hide();\r\n                if (onProgress) options.onProgress(0, '0%', LoaderStatus.Processing);\r\n                this.addSplatBuffers(splatBuffers, sceneOptions, true, showLoadingUI, showLoadingUI).then(() => {\r\n                    if (onProgress) onProgress(100, '100%', LoaderStatus.Processing);\r\n                    this.clearSplatSceneDownloadAndBuildPromise();\r\n                    resolve();\r\n                });\r\n            })\r\n            .catch((e) => {\r\n                if (showLoadingUI) this.loadingSpinner.hide();\r\n                this.clearSplatSceneDownloadAndBuildPromise();\r\n                if (!(e instanceof AbortedPromiseError)) {\r\n                    reject(new Error(`Viewer::addSplatScenes -> Could not load one or more splat scenes.`));\r\n                } else {\r\n                    resolve();\r\n                }\r\n            })\r\n            .finally(() => {\r\n                for (let downloadPromise of downloadPromises) {\r\n                    this.removeSplatSceneDownloadPromise(downloadPromise);\r\n                }\r\n            });\r\n        }, () => {\r\n            for (let abortHandler of abortHandlers) abortHandler();\r\n        });\r\n        this.setSplatSceneDownloadAndBuildPromise(downloadPromise);\r\n        return downloadPromise;\r\n    }\r\n\r\n    /**\r\n     * Download a splat scene and convert to SplatBuffer instance.\r\n     * @param {string} path Path to splat scene to be loaded\r\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified\r\n     *                                            value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     * @param {function} onProgress Function to be called as file data are received\r\n     * @param {boolean} streamBuiltSections Construct file sections into splat buffers as they are downloaded\r\n     * @param {function} onSectionBuilt Function to be called when new section is added to the file\r\n     * @param {string} format File format of the scene\r\n     * @return {AbortablePromise}\r\n     */\r\n    downloadSplatSceneToSplatBuffer(path, splatAlphaRemovalThreshold = 1, onProgress = undefined,\r\n                                    streamBuiltSections = false, onSectionBuilt = undefined, format) {\r\n        if (format === SceneFormat.Splat) {\r\n            return SplatLoader.loadFromURL(path, onProgress, streamBuiltSections, onSectionBuilt, splatAlphaRemovalThreshold, 0, false);\r\n        } else if (format === SceneFormat.KSplat) {\r\n            return KSplatLoader.loadFromURL(path, onProgress, streamBuiltSections, onSectionBuilt);\r\n        } else if (format === SceneFormat.Ply) {\r\n            return PlyLoader.loadFromURL(path, onProgress, streamBuiltSections, onSectionBuilt, splatAlphaRemovalThreshold, 0);\r\n        }\r\n        return AbortablePromise.reject(new Error(`Viewer::downloadSplatSceneToSplatBuffer -> File format not supported: ${path}`));\r\n    }\r\n\r\n    static isStreamable(format) {\r\n        return format === SceneFormat.Splat || format === SceneFormat.KSplat || format === SceneFormat.Ply;\r\n    }\r\n\r\n    /**\r\n     * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer and set up the sorting web worker.\r\n     * This function will terminate the existing sort worker (if there is one).\r\n     */\r\n    addSplatBuffers = function() {\r\n\r\n        return function(splatBuffers, splatBufferOptions = [], finalBuild = true,\r\n                        showLoadingUI = true, showLoadingUIForSplatTreeBuild = true) {\r\n\r\n            if (this.isDisposingOrDisposed()) return Promise.resolve();\r\n\r\n            this.splatRenderReady = false;\r\n            let splatProcessingTaskId = null;\r\n\r\n            const finish = (buildResults) => {\r\n                if (this.isDisposingOrDisposed()) return;\r\n\r\n                if (splatProcessingTaskId !== null) {\r\n                    this.loadingSpinner.removeTask(splatProcessingTaskId);\r\n                    splatProcessingTaskId = null;\r\n                }\r\n\r\n                // If we aren't calculating the splat distances from the center on the GPU, the sorting worker needs splat centers and\r\n                // transform indexes so that it can calculate those distance values.\r\n                if (!this.gpuAcceleratedSort && this.sortWorker) {\r\n                    this.sortWorker.postMessage({\r\n                        'centers': buildResults.centers.buffer,\r\n                        'transformIndexes': buildResults.sceneIndexes.buffer,\r\n                        'range': {\r\n                            'from': buildResults.from,\r\n                            'to': buildResults.to,\r\n                            'count': buildResults.count\r\n                        }\r\n                    });\r\n                }\r\n\r\n                this.splatRenderReady = true;\r\n                this.sortNeededForSceneChange = true;\r\n            };\r\n\r\n            return new Promise((resolve) => {\r\n                if (showLoadingUI) {\r\n                    splatProcessingTaskId = this.loadingSpinner.addTask('Processing splats...');\r\n                }\r\n                delayedExecute(() => {\r\n                    if (this.isDisposingOrDisposed()) {\r\n                        resolve();\r\n                    } else {\r\n                        const buildResults = this.addSplatBuffersToMesh(splatBuffers, splatBufferOptions,\r\n                                                                        finalBuild, showLoadingUIForSplatTreeBuild);\r\n                        const maxSplatCount = this.splatMesh.getMaxSplatCount();\r\n                        if (this.sortWorker && this.sortWorker.maxSplatCount !== maxSplatCount) this.disposeSortWorker();\r\n                        const sortWorkerSetupPromise = (!this.sortWorker && maxSplatCount > 0) ?\r\n                                                         this.setupSortWorker(this.splatMesh) : Promise.resolve();\r\n                        sortWorkerSetupPromise.then(() => {\r\n                            finish(buildResults);\r\n                            resolve();\r\n                        });\r\n                    }\r\n                }, true);\r\n            });\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer. This function is additive; all splat\r\n     * buffers contained by the viewer's splat mesh before calling this function will be preserved.\r\n     * @param {Array<SplatBuffer>} splatBuffers SplatBuffer instances\r\n     * @param {Array<object>} splatBufferOptions Array of options objects: {\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     * }\r\n     * @param {boolean} finalBuild Will the splat mesh be in its final state after this build?\r\n     * @param {boolean} showLoadingUIForSplatTreeBuild Whether or not to show the loading spinner during construction of the splat tree.\r\n     * @return {object} Object containing info about the splats that are updated\r\n     */\r\n    addSplatBuffersToMesh(splatBuffers, splatBufferOptions, finalBuild = true, showLoadingUIForSplatTreeBuild = false) {\r\n        if (this.isDisposingOrDisposed()) return;\r\n        const allSplatBuffers = this.splatMesh.splatBuffers || [];\r\n        const allSplatBufferOptions = this.splatMesh.splatBufferOptions || [];\r\n        allSplatBuffers.push(...splatBuffers);\r\n        allSplatBufferOptions.push(...splatBufferOptions);\r\n        if (this.renderer) this.splatMesh.setRenderer(this.renderer);\r\n        let splatOptimizingTaskId;\r\n        const onSplatTreeIndexesUpload = (finished) => {\r\n            if (this.isDisposingOrDisposed()) return;\r\n            const splatCount = this.splatMesh.getSplatCount();\r\n            if (showLoadingUIForSplatTreeBuild && splatCount >= MIN_SPLAT_COUNT_TO_SHOW_SPLAT_TREE_LOADING_SPINNER) {\r\n                if (!finished && !splatOptimizingTaskId) {\r\n                    this.loadingSpinner.setMinimized(true, true);\r\n                    splatOptimizingTaskId = this.loadingSpinner.addTask('Optimizing splats...');\r\n                }\r\n            }\r\n        };\r\n        const onSplatTreeReady = (finished) => {\r\n            if (this.isDisposingOrDisposed()) return;\r\n            if (finished && splatOptimizingTaskId) {\r\n                this.loadingSpinner.removeTask(splatOptimizingTaskId);\r\n            }\r\n        };\r\n        return this.splatMesh.build(allSplatBuffers, allSplatBufferOptions, true, finalBuild, onSplatTreeIndexesUpload, onSplatTreeReady);\r\n    }\r\n\r\n    /**\r\n     * Set up the splat sorting web worker.\r\n     * @param {SplatMesh} splatMesh SplatMesh instance that contains the splats to be sorted\r\n     * @return {Promise}\r\n     */\r\n    setupSortWorker(splatMesh) {\r\n        if (this.isDisposingOrDisposed()) return;\r\n        return new Promise((resolve) => {\r\n            const DistancesArrayType = this.integerBasedSort ? Int32Array : Float32Array;\r\n            const splatCount = splatMesh.getSplatCount();\r\n            const maxSplatCount = splatMesh.getMaxSplatCount();\r\n            this.sortWorker = createSortWorker(maxSplatCount, this.sharedMemoryForWorkers,\r\n                                               this.integerBasedSort, this.splatMesh.dynamicMode);\r\n            let sortCount = 0;\r\n            this.sortWorker.onmessage = (e) => {\r\n                if (e.data.sortDone) {\r\n                    this.sortRunning = false;\r\n                    if (this.sharedMemoryForWorkers) {\r\n                        this.splatMesh.updateRenderIndexes(this.sortWorkerSortedIndexes, e.data.splatRenderCount);\r\n                    } else {\r\n                        const sortedIndexes = new Uint32Array(e.data.sortedIndexes.buffer, 0, e.data.splatRenderCount);\r\n                        this.splatMesh.updateRenderIndexes(sortedIndexes, e.data.splatRenderCount);\r\n                    }\r\n                    this.lastSortTime = e.data.sortTime;\r\n                    this.sortPromiseResolver();\r\n                    this.sortPromiseResolver = null;\r\n                    this.forceRenderNextFrame();\r\n                    if (sortCount === 0) {\r\n                        this.runAfterFirstSort.forEach((func) => {\r\n                            func();\r\n                        });\r\n                        this.runAfterFirstSort.length = 0;\r\n                    }\r\n                    sortCount++;\r\n                } else if (e.data.sortCanceled) {\r\n                    this.sortRunning = false;\r\n                } else if (e.data.sortSetupPhase1Complete) {\r\n                    console.log('Sorting web worker WASM setup complete.');\r\n                    if (this.sharedMemoryForWorkers) {\r\n                        this.sortWorkerSortedIndexes = new Uint32Array(e.data.sortedIndexesBuffer,\r\n                                                                       e.data.sortedIndexesOffset, maxSplatCount);\r\n                        this.sortWorkerIndexesToSort = new Uint32Array(e.data.indexesToSortBuffer,\r\n                                                                       e.data.indexesToSortOffset, maxSplatCount);\r\n                        this.sortWorkerPrecomputedDistances = new DistancesArrayType(e.data.precomputedDistancesBuffer,\r\n                                                                                     e.data.precomputedDistancesOffset,\r\n                                                                                     maxSplatCount);\r\n                         this.sortWorkerTransforms = new Float32Array(e.data.transformsBuffer,\r\n                                                                      e.data.transformsOffset, Constants.MaxScenes * 16);\r\n                    } else {\r\n                        this.sortWorkerIndexesToSort = new Uint32Array(maxSplatCount);\r\n                        this.sortWorkerPrecomputedDistances = new DistancesArrayType(maxSplatCount);\r\n                        this.sortWorkerTransforms = new Float32Array(Constants.MaxScenes * 16);\r\n                    }\r\n                    for (let i = 0; i < splatCount; i++) this.sortWorkerIndexesToSort[i] = i;\r\n                    this.sortWorker.maxSplatCount = maxSplatCount;\r\n\r\n                    console.log('Sorting web worker ready.');\r\n                    const splatDataTextures = this.splatMesh.getSplatDataTextures();\r\n                    const covariancesTextureSize = splatDataTextures.covariances.size;\r\n                    const centersColorsTextureSize = splatDataTextures.centerColors.size;\r\n                    console.log('Covariances texture size: ' + covariancesTextureSize.x + ' x ' + covariancesTextureSize.y);\r\n                    console.log('Centers/colors texture size: ' + centersColorsTextureSize.x + ' x ' + centersColorsTextureSize.y);\r\n\r\n                    resolve();\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    disposeSortWorker() {\r\n        if (this.sortWorker) this.sortWorker.terminate();\r\n        this.sortWorker = null;\r\n        this.sortPromise = null;\r\n        if (this.sortPromiseResolver) {\r\n            this.sortPromiseResolver();\r\n            this.sortPromiseResolver = null;\r\n        }\r\n        this.sortRunning = false;\r\n    }\r\n\r\n    removeSplatScene(index, showLoadingUI = true) {\r\n        if (this.isLoadingOrUnloading()) {\r\n            throw new Error('Cannot remove splat scene while another load or unload is already in progress.');\r\n        }\r\n\r\n        if (this.isDisposingOrDisposed()) {\r\n            throw new Error('Cannot remove splat scene after dispose() is called.');\r\n        }\r\n\r\n        let sortPromise;\r\n\r\n        this.splatSceneRemovalPromise = new Promise((resolve, reject) => {\r\n            let revmovalTaskId;\r\n\r\n            if (showLoadingUI) {\r\n                this.loadingSpinner.removeAllTasks();\r\n                this.loadingSpinner.show();\r\n                revmovalTaskId = this.loadingSpinner.addTask('Removing splat scene...');\r\n            }\r\n\r\n            const checkAndHideLoadingUI = () => {\r\n                if (showLoadingUI) {\r\n                    this.loadingSpinner.hide();\r\n                    this.loadingSpinner.removeTask(revmovalTaskId);\r\n                }\r\n            };\r\n\r\n            const onDone = (error) => {\r\n                checkAndHideLoadingUI();\r\n                this.splatSceneRemovalPromise = null;\r\n                if (!error) resolve();\r\n                else reject(error);\r\n            };\r\n\r\n            const checkForEarlyExit = () => {\r\n                if (this.isDisposingOrDisposed()) {\r\n                    onDone();\r\n                    return true;\r\n                }\r\n                return false;\r\n            };\r\n\r\n            sortPromise = this.sortPromise || Promise.resolve();\r\n            sortPromise.then(() => {\r\n                if (checkForEarlyExit()) return;\r\n                const savedSplatBuffers = [];\r\n                const savedSceneOptions = [];\r\n                const savedSceneTransformComponents = [];\r\n                const savedVisibleRegionFadeStartRadius = this.splatMesh.visibleRegionFadeStartRadius;\r\n                for (let i = 0; i < this.splatMesh.scenes.length; i++) {\r\n                    if (i !== index) {\r\n                        const scene = this.splatMesh.scenes[i];\r\n                        savedSplatBuffers.push(scene.splatBuffer);\r\n                        savedSceneOptions.push(this.splatMesh.sceneOptions[i]);\r\n                        savedSceneTransformComponents.push({\r\n                            'position': scene.position.clone(),\r\n                            'quaternion': scene.quaternion.clone(),\r\n                            'scale': scene.scale.clone()\r\n                        });\r\n                    }\r\n                }\r\n                this.disposeSortWorker();\r\n                this.splatMesh.dispose();\r\n                this.createSplatMesh();\r\n                this.addSplatBuffers(savedSplatBuffers, savedSceneOptions, true, false, true)\r\n                .then(() => {\r\n                    if (checkForEarlyExit()) return;\r\n                    checkAndHideLoadingUI();\r\n                    this.splatMesh.visibleRegionFadeStartRadius = savedVisibleRegionFadeStartRadius;\r\n                    this.splatMesh.scenes.forEach((scene, index) => {\r\n                        scene.position.copy(savedSceneTransformComponents[index].position);\r\n                        scene.quaternion.copy(savedSceneTransformComponents[index].quaternion);\r\n                        scene.scale.copy(savedSceneTransformComponents[index].scale);\r\n                    });\r\n                    this.splatMesh.updateTransforms();\r\n                    this.splatRenderReady = false;\r\n                    this.updateSplatSort(true)\r\n                    .then(() => {\r\n                        if (checkForEarlyExit()) {\r\n                            this.splatRenderReady = true;\r\n                            return;\r\n                        }\r\n                        sortPromise = this.sortPromise || Promise.resolve();\r\n                        sortPromise.then(() => {\r\n                            this.splatRenderReady = true;\r\n                            onDone();\r\n                        });\r\n                    });\r\n                })\r\n                .catch((e) => {\r\n                    onDone(e);\r\n                });\r\n            });\r\n        });\r\n\r\n        return this.splatSceneRemovalPromise;\r\n    }\r\n\r\n    /**\r\n     * Start self-driven mode\r\n     */\r\n    start() {\r\n        if (this.selfDrivenMode) {\r\n            if (this.webXRMode) {\r\n                this.renderer.setAnimationLoop(this.selfDrivenUpdateFunc);\r\n            } else {\r\n                this.requestFrameId = requestAnimationFrame(this.selfDrivenUpdateFunc);\r\n            }\r\n            this.selfDrivenModeRunning = true;\r\n        } else {\r\n            throw new Error('Cannot start viewer unless it is in self driven mode.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stop self-driven mode\r\n     */\r\n    stop() {\r\n        if (this.selfDrivenMode && this.selfDrivenModeRunning) {\r\n            if (!this.webXRMode) {\r\n                cancelAnimationFrame(this.requestFrameId);\r\n            }\r\n            this.selfDrivenModeRunning = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose of all resources held directly and indirectly by this viewer.\r\n     */\r\n    async dispose() {\r\n        this.disposing = true;\r\n        let waitPromises = [];\r\n        let promisesToAbort = [];\r\n        for (let promiseKey in this.splatSceneDownloadPromises) {\r\n            if (this.splatSceneDownloadPromises.hasOwnProperty(promiseKey)) {\r\n                const downloadPromiseToAbort = this.splatSceneDownloadPromises[promiseKey];\r\n                promisesToAbort.push(downloadPromiseToAbort);\r\n                waitPromises.push(downloadPromiseToAbort.promise);\r\n            }\r\n        }\r\n        if (this.sortPromise) {\r\n            waitPromises.push(this.sortPromise);\r\n        }\r\n        const disposePromise = Promise.all(waitPromises).finally(() => {\r\n            this.stop();\r\n            if (this.controls) {\r\n                this.controls.dispose();\r\n                this.controls = null;\r\n            }\r\n            if (this.splatMesh) {\r\n                this.splatMesh.dispose();\r\n                this.splatMesh = null;\r\n            }\r\n            if (this.sceneHelper) {\r\n                this.sceneHelper.dispose();\r\n                this.sceneHelper = null;\r\n            }\r\n            if (this.resizeObserver) {\r\n                this.resizeObserver.unobserve(this.rootElement);\r\n                this.resizeObserver = null;\r\n            }\r\n            this.disposeSortWorker();\r\n            this.removeEventHandlers();\r\n\r\n            this.loadingSpinner.removeAllTasks();\r\n            this.loadingSpinner.setContainer(null);\r\n            this.loadingProgressBar.hide();\r\n            this.loadingProgressBar.setContainer(null);\r\n            this.infoPanel.setContainer(null);\r\n\r\n            this.camera = null;\r\n            this.threeScene = null;\r\n            this.splatRenderReady = false;\r\n            this.initialized = false;\r\n            if (this.renderer) {\r\n                if (!this.usingExternalRenderer) {\r\n                    this.rootElement.removeChild(this.renderer.domElement);\r\n                    this.renderer.dispose();\r\n                }\r\n                this.renderer = null;\r\n            }\r\n\r\n            if (!this.usingExternalRenderer) {\r\n                document.body.removeChild(this.rootElement);\r\n            }\r\n\r\n            this.sortWorkerSortedIndexes = null;\r\n            this.sortWorkerIndexesToSort = null;\r\n            this.sortWorkerPrecomputedDistances = null;\r\n            this.sortWorkerTransforms = null;\r\n            this.disposed = true;\r\n            this.disposing = false;\r\n        });\r\n        promisesToAbort.forEach((toAbort) => {\r\n            toAbort.abort();\r\n        });\r\n        return disposePromise;\r\n    }\r\n\r\n    selfDrivenUpdate() {\r\n        if (this.selfDrivenMode && !this.webXRMode) {\r\n            this.requestFrameId = requestAnimationFrame(this.selfDrivenUpdateFunc);\r\n        }\r\n        this.update();\r\n        if (this.shouldRender()) {\r\n            this.render();\r\n            this.consecutiveRenderFrames++;\r\n        } else {\r\n            this.consecutiveRenderFrames = 0;\r\n        }\r\n        this.renderNextFrame = false;\r\n    }\r\n\r\n    forceRenderNextFrame() {\r\n        this.renderNextFrame = true;\r\n    }\r\n\r\n    shouldRender = function() {\r\n\r\n        let renderCount = 0;\r\n        const lastCameraPosition = new THREE.Vector3();\r\n        const lastCameraOrientation = new THREE.Quaternion();\r\n        const changeEpsilon = 0.0001;\r\n\r\n        return function() {\r\n            let shouldRender = false;\r\n            let cameraChanged = false;\r\n            if (this.camera) {\r\n                const cp = this.camera.position;\r\n                const co = this.camera.quaternion;\r\n                cameraChanged = Math.abs(cp.x - lastCameraPosition.x) > changeEpsilon ||\r\n                                Math.abs(cp.y - lastCameraPosition.y) > changeEpsilon ||\r\n                                Math.abs(cp.z - lastCameraPosition.z) > changeEpsilon ||\r\n                                Math.abs(co.x - lastCameraOrientation.x) > changeEpsilon ||\r\n                                Math.abs(co.y - lastCameraOrientation.y) > changeEpsilon ||\r\n                                Math.abs(co.z - lastCameraOrientation.z) > changeEpsilon ||\r\n                                Math.abs(co.w - lastCameraOrientation.w) > changeEpsilon;\r\n            }\r\n\r\n            shouldRender = this.renderMode !== RenderMode.Never && (renderCount === 0 || this.splatMesh.visibleRegionChanging ||\r\n                           cameraChanged || this.renderMode === RenderMode.Always || this.dynamicMode === true || this.renderNextFrame);\r\n\r\n            if (this.camera) {\r\n                lastCameraPosition.copy(this.camera.position);\r\n                lastCameraOrientation.copy(this.camera.quaternion);\r\n            }\r\n\r\n            renderCount++;\r\n            return shouldRender;\r\n        };\r\n\r\n    }();\r\n\r\n    render = function() {\r\n\r\n        return function() {\r\n            if (!this.initialized || !this.splatRenderReady) return;\r\n\r\n            const hasRenderables = (threeScene) => {\r\n                for (let child of threeScene.children) {\r\n                    if (child.visible) return true;\r\n                }\r\n                return false;\r\n            };\r\n\r\n            const savedAuoClear = this.renderer.autoClear;\r\n            if (hasRenderables(this.threeScene)) {\r\n                this.renderer.render(this.threeScene, this.camera);\r\n                this.renderer.autoClear = false;\r\n            }\r\n            this.renderer.render(this.splatMesh, this.camera);\r\n            this.renderer.autoClear = false;\r\n            if (this.sceneHelper.getFocusMarkerOpacity() > 0.0) this.renderer.render(this.sceneHelper.focusMarker, this.camera);\r\n            if (this.showControlPlane) this.renderer.render(this.sceneHelper.controlPlane, this.camera);\r\n            this.renderer.autoClear = savedAuoClear;\r\n        };\r\n\r\n    }();\r\n\r\n    update(renderer, camera) {\r\n        if (this.dropInMode) this.updateForDropInMode(renderer, camera);\r\n        if (!this.initialized || !this.splatRenderReady) return;\r\n        if (this.controls) {\r\n            this.controls.update();\r\n            if (this.camera.isOrthographicCamera && !this.usingExternalCamera) {\r\n                Viewer.setCameraPositionFromZoom(this.camera, this.camera, this.controls);\r\n            }\r\n        }\r\n        this.splatMesh.updateVisibleRegionFadeDistance(this.sceneRevealMode);\r\n        this.updateSplatSort();\r\n        this.updateForRendererSizeChanges();\r\n        this.updateSplatMesh();\r\n        this.updateMeshCursor();\r\n        this.updateFPS();\r\n        this.timingSensitiveUpdates();\r\n        this.updateInfoPanel();\r\n        this.updateControlPlane();\r\n    }\r\n\r\n    updateForDropInMode(renderer, camera) {\r\n        this.renderer = renderer;\r\n        if (this.splatMesh) this.splatMesh.setRenderer(this.renderer);\r\n        this.camera = camera;\r\n        if (this.controls) this.controls.object = camera;\r\n        this.init();\r\n    }\r\n\r\n    updateFPS = function() {\r\n\r\n        let lastCalcTime = getCurrentTime();\r\n        let frameCount = 0;\r\n\r\n        return function() {\r\n            if (this.consecutiveRenderFrames > CONSECUTIVE_RENDERED_FRAMES_FOR_FPS_CALCULATION) {\r\n                const currentTime = getCurrentTime();\r\n                const calcDelta = currentTime - lastCalcTime;\r\n                if (calcDelta >= 1.0) {\r\n                    this.currentFPS = frameCount;\r\n                    frameCount = 0;\r\n                    lastCalcTime = currentTime;\r\n                } else {\r\n                    frameCount++;\r\n                }\r\n            } else {\r\n                this.currentFPS = null;\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    updateForRendererSizeChanges = function() {\r\n\r\n        const lastRendererSize = new THREE.Vector2();\r\n        const currentRendererSize = new THREE.Vector2();\r\n        let lastCameraOrthographic;\r\n\r\n        return function() {\r\n            if (!this.usingExternalCamera) {\r\n                this.renderer.getSize(currentRendererSize);\r\n                if (lastCameraOrthographic === undefined || lastCameraOrthographic !== this.camera.isOrthographicCamera ||\r\n                    currentRendererSize.x !== lastRendererSize.x || currentRendererSize.y !== lastRendererSize.y) {\r\n                    if (this.camera.isOrthographicCamera) {\r\n                        this.camera.left = -currentRendererSize.x / 2.0;\r\n                        this.camera.right = currentRendererSize.x / 2.0;\r\n                        this.camera.top = currentRendererSize.y / 2.0;\r\n                        this.camera.bottom = -currentRendererSize.y / 2.0;\r\n                    } else {\r\n                        this.camera.aspect = currentRendererSize.x / currentRendererSize.y;\r\n                    }\r\n                    this.camera.updateProjectionMatrix();\r\n                    lastRendererSize.copy(currentRendererSize);\r\n                    lastCameraOrthographic = this.camera.isOrthographicCamera;\r\n                }\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    timingSensitiveUpdates = function() {\r\n\r\n        let lastUpdateTime;\r\n\r\n        return function() {\r\n            const currentTime = getCurrentTime();\r\n            if (!lastUpdateTime) lastUpdateTime = currentTime;\r\n            const timeDelta = currentTime - lastUpdateTime;\r\n\r\n            this.updateCameraTransition(currentTime);\r\n            this.updateFocusMarker(timeDelta);\r\n\r\n            lastUpdateTime = currentTime;\r\n        };\r\n\r\n    }();\r\n\r\n    updateCameraTransition = function() {\r\n\r\n        let tempCameraTarget = new THREE.Vector3();\r\n        let toPreviousTarget = new THREE.Vector3();\r\n        let toNextTarget = new THREE.Vector3();\r\n\r\n        return function(currentTime) {\r\n            if (this.transitioningCameraTarget) {\r\n                toPreviousTarget.copy(this.previousCameraTarget).sub(this.camera.position).normalize();\r\n                toNextTarget.copy(this.nextCameraTarget).sub(this.camera.position).normalize();\r\n                const rotationAngle = Math.acos(toPreviousTarget.dot(toNextTarget));\r\n                const rotationSpeed = rotationAngle / (Math.PI / 3) * .65 + .3;\r\n                const t = (rotationSpeed / rotationAngle * (currentTime - this.transitioningCameraTargetStartTime));\r\n                tempCameraTarget.copy(this.previousCameraTarget).lerp(this.nextCameraTarget, t);\r\n                this.camera.lookAt(tempCameraTarget);\r\n                this.controls.target.copy(tempCameraTarget);\r\n                if (t >= 1.0) {\r\n                    this.transitioningCameraTarget = false;\r\n                }\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    updateFocusMarker = function() {\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n        let wasTransitioning = false;\r\n\r\n        return function(timeDelta) {\r\n            this.getRenderDimensions(renderDimensions);\r\n            if (this.transitioningCameraTarget) {\r\n                this.sceneHelper.setFocusMarkerVisibility(true);\r\n                const currentFocusMarkerOpacity = Math.max(this.sceneHelper.getFocusMarkerOpacity(), 0.0);\r\n                let newFocusMarkerOpacity = Math.min(currentFocusMarkerOpacity + FOCUS_MARKER_FADE_IN_SPEED * timeDelta, 1.0);\r\n                this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\r\n                this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\r\n                wasTransitioning = true;\r\n                this.forceRenderNextFrame();\r\n            } else {\r\n                let currentFocusMarkerOpacity;\r\n                if (wasTransitioning) currentFocusMarkerOpacity = 1.0;\r\n                else currentFocusMarkerOpacity = Math.min(this.sceneHelper.getFocusMarkerOpacity(), 1.0);\r\n                if (currentFocusMarkerOpacity > 0) {\r\n                    this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\r\n                    let newFocusMarkerOpacity = Math.max(currentFocusMarkerOpacity - FOCUS_MARKER_FADE_OUT_SPEED * timeDelta, 0.0);\r\n                    this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\r\n                    if (newFocusMarkerOpacity === 0.0) this.sceneHelper.setFocusMarkerVisibility(false);\r\n                }\r\n                if (currentFocusMarkerOpacity > 0.0) this.forceRenderNextFrame();\r\n                wasTransitioning = false;\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    updateMeshCursor = function() {\r\n\r\n        const outHits = [];\r\n        const renderDimensions = new THREE.Vector2();\r\n\r\n        return function() {\r\n            if (this.showMeshCursor) {\r\n                this.forceRenderNextFrame();\r\n                this.getRenderDimensions(renderDimensions);\r\n                outHits.length = 0;\r\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\r\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\r\n                if (outHits.length > 0) {\r\n                    this.sceneHelper.setMeshCursorVisibility(true);\r\n                    this.sceneHelper.positionAndOrientMeshCursor(outHits[0].origin, this.camera);\r\n                } else {\r\n                    this.sceneHelper.setMeshCursorVisibility(false);\r\n                }\r\n            } else {\r\n                if (this.sceneHelper.getMeschCursorVisibility()) this.forceRenderNextFrame();\r\n                this.sceneHelper.setMeshCursorVisibility(false);\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    updateInfoPanel = function() {\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n\r\n        return function() {\r\n            if (!this.showInfo) return;\r\n            const splatCount = this.splatMesh.getSplatCount();\r\n            this.getRenderDimensions(renderDimensions);\r\n            const cameraLookAtPosition = this.controls ? this.controls.target : null;\r\n            const meshCursorPosition = this.showMeshCursor ? this.sceneHelper.meshCursor.position : null;\r\n            const splatRenderCountPct = splatCount > 0 ? this.splatRenderCount / splatCount * 100 : 0;\r\n            this.infoPanel.update(renderDimensions, this.camera.position, cameraLookAtPosition,\r\n                                  this.camera.up, this.camera.isOrthographicCamera, meshCursorPosition,\r\n                                  this.currentFPS || 'N/A', splatCount, this.splatRenderCount, splatRenderCountPct,\r\n                                  this.lastSortTime, this.focalAdjustment, this.splatMesh.getSplatScale(),\r\n                                  this.splatMesh.getPointCloudModeEnabled());\r\n        };\r\n\r\n    }();\r\n\r\n    updateControlPlane() {\r\n        if (this.showControlPlane) {\r\n            this.sceneHelper.setControlPlaneVisibility(true);\r\n            this.sceneHelper.positionAndOrientControlPlane(this.controls.target, this.camera.up);\r\n        } else {\r\n            this.sceneHelper.setControlPlaneVisibility(false);\r\n        }\r\n    }\r\n\r\n    updateSplatSort = function() {\r\n\r\n        const mvpMatrix = new THREE.Matrix4();\r\n        const cameraPositionArray = [];\r\n        const lastSortViewDir = new THREE.Vector3(0, 0, -1);\r\n        const sortViewDir = new THREE.Vector3(0, 0, -1);\r\n        const lastSortViewPos = new THREE.Vector3();\r\n        const sortViewOffset = new THREE.Vector3();\r\n        const queuedSorts = [];\r\n\r\n        const partialSorts = [\r\n            {\r\n                'angleThreshold': 0.55,\r\n                'sortFractions': [0.125, 0.33333, 0.75]\r\n            },\r\n            {\r\n                'angleThreshold': 0.65,\r\n                'sortFractions': [0.33333, 0.66667]\r\n            },\r\n            {\r\n                'angleThreshold': 0.8,\r\n                'sortFractions': [0.5]\r\n            }\r\n        ];\r\n\r\n        return async function(force = false) {\r\n            if (this.sortRunning) return;\r\n            if (this.splatMesh.getSplatCount() <= 0) return;\r\n\r\n            let angleDiff = 0;\r\n            let positionDiff = 0;\r\n            let needsRefreshForRotation = false;\r\n            let needsRefreshForPosition = false;\r\n\r\n            sortViewDir.set(0, 0, -1).applyQuaternion(this.camera.quaternion);\r\n            angleDiff = sortViewDir.dot(lastSortViewDir);\r\n            positionDiff = sortViewOffset.copy(this.camera.position).sub(lastSortViewPos).length();\r\n\r\n            if (!force) {\r\n                if (!this.sortNeededForSceneChange && !this.splatMesh.dynamicMode && queuedSorts.length === 0) {\r\n                    if (angleDiff <= 0.99) needsRefreshForRotation = true;\r\n                    if (positionDiff >= 1.0) needsRefreshForPosition = true;\r\n                    if (!needsRefreshForRotation && !needsRefreshForPosition) return;\r\n                }\r\n            }\r\n\r\n            this.sortRunning = true;\r\n            const { splatRenderCount, shouldSortAll } = this.gatherSceneNodesForSort();\r\n            this.splatRenderCount = splatRenderCount;\r\n\r\n            mvpMatrix.copy(this.camera.matrixWorld).invert();\r\n            mvpMatrix.premultiply(this.camera.projectionMatrix);\r\n            mvpMatrix.multiply(this.splatMesh.matrixWorld);\r\n\r\n            if (this.gpuAcceleratedSort && (queuedSorts.length <= 1 || queuedSorts.length % 2 === 0)) {\r\n                await this.splatMesh.computeDistancesOnGPU(mvpMatrix, this.sortWorkerPrecomputedDistances);\r\n            }\r\n\r\n            if (this.splatMesh.dynamicMode || shouldSortAll) {\r\n                queuedSorts.push(this.splatRenderCount);\r\n            } else {\r\n                if (queuedSorts.length === 0) {\r\n                    for (let partialSort of partialSorts) {\r\n                        if (angleDiff < partialSort.angleThreshold) {\r\n                            for (let sortFraction of partialSort.sortFractions) {\r\n                                queuedSorts.push(Math.floor(this.splatRenderCount * sortFraction));\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    queuedSorts.push(this.splatRenderCount);\r\n                }\r\n            }\r\n            let sortCount = Math.min(queuedSorts.shift(), this.splatRenderCount);\r\n\r\n            cameraPositionArray[0] = this.camera.position.x;\r\n            cameraPositionArray[1] = this.camera.position.y;\r\n            cameraPositionArray[2] = this.camera.position.z;\r\n\r\n            const sortMessage = {\r\n                'modelViewProj': mvpMatrix.elements,\r\n                'cameraPosition': cameraPositionArray,\r\n                'splatRenderCount': this.splatRenderCount,\r\n                'splatSortCount': sortCount,\r\n                'usePrecomputedDistances': this.gpuAcceleratedSort\r\n            };\r\n            if (this.splatMesh.dynamicMode) {\r\n                this.splatMesh.fillTransformsArray(this.sortWorkerTransforms);\r\n            }\r\n            if (!this.sharedMemoryForWorkers) {\r\n                sortMessage.indexesToSort = this.sortWorkerIndexesToSort;\r\n                sortMessage.transforms = this.sortWorkerTransforms;\r\n                if (this.gpuAcceleratedSort) {\r\n                    sortMessage.precomputedDistances = this.sortWorkerPrecomputedDistances;\r\n                }\r\n            }\r\n\r\n            this.sortPromise = new Promise((resolve) => {\r\n                this.sortPromiseResolver = resolve;\r\n            });\r\n\r\n            this.sortWorker.postMessage({\r\n                'sort': sortMessage\r\n            });\r\n\r\n            if (queuedSorts.length === 0) {\r\n                lastSortViewPos.copy(this.camera.position);\r\n                lastSortViewDir.copy(sortViewDir);\r\n            }\r\n\r\n            this.sortNeededForSceneChange = false;\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Determine which splats to render by checking which are inside or close to the view frustum\r\n     */\r\n    gatherSceneNodesForSort = function() {\r\n\r\n        const nodeRenderList = [];\r\n        let allSplatsSortBuffer = null;\r\n        const tempVectorYZ = new THREE.Vector3();\r\n        const tempVectorXZ = new THREE.Vector3();\r\n        const tempVector = new THREE.Vector3();\r\n        const modelView = new THREE.Matrix4();\r\n        const baseModelView = new THREE.Matrix4();\r\n        const sceneTransform = new THREE.Matrix4();\r\n        const renderDimensions = new THREE.Vector3();\r\n        const forward = new THREE.Vector3(0, 0, -1);\r\n\r\n        const tempMax = new THREE.Vector3();\r\n        const nodeSize = (node) => {\r\n            return tempMax.copy(node.max).sub(node.min).length();\r\n        };\r\n\r\n        return function(gatherAllNodes = false) {\r\n\r\n            this.getRenderDimensions(renderDimensions);\r\n            const cameraFocalLength = (renderDimensions.y / 2.0) / Math.tan(this.camera.fov / 2.0 * THREE.MathUtils.DEG2RAD);\r\n            const fovXOver2 = Math.atan(renderDimensions.x / 2.0 / cameraFocalLength);\r\n            const fovYOver2 = Math.atan(renderDimensions.y / 2.0 / cameraFocalLength);\r\n            const cosFovXOver2 = Math.cos(fovXOver2);\r\n            const cosFovYOver2 = Math.cos(fovYOver2);\r\n\r\n            const splatTree = this.splatMesh.getSplatTree();\r\n\r\n            if (splatTree) {\r\n                baseModelView.copy(this.camera.matrixWorld).invert();\r\n                baseModelView.multiply(this.splatMesh.matrixWorld);\r\n\r\n                let nodeRenderCount = 0;\r\n                let splatRenderCount = 0;\r\n\r\n                for (let s = 0; s < splatTree.subTrees.length; s++) {\r\n                    const subTree = splatTree.subTrees[s];\r\n                    modelView.copy(baseModelView);\r\n                    if (this.splatMesh.dynamicMode) {\r\n                        this.splatMesh.getSceneTransform(s, sceneTransform);\r\n                        modelView.multiply(sceneTransform);\r\n                    }\r\n                    const nodeCount = subTree.nodesWithIndexes.length;\r\n                    for (let i = 0; i < nodeCount; i++) {\r\n                        const node = subTree.nodesWithIndexes[i];\r\n                        if (!node.data || !node.data.indexes || node.data.indexes.length === 0) continue;\r\n                        tempVector.copy(node.center).applyMatrix4(modelView);\r\n\r\n                        const distanceToNode = tempVector.length();\r\n                        tempVector.normalize();\r\n\r\n                        tempVectorYZ.copy(tempVector).setX(0).normalize();\r\n                        tempVectorXZ.copy(tempVector).setY(0).normalize();\r\n\r\n                        const cameraAngleXZDot = forward.dot(tempVectorXZ);\r\n                        const cameraAngleYZDot = forward.dot(tempVectorYZ);\r\n\r\n                        const ns = nodeSize(node);\r\n                        const outOfFovY = cameraAngleYZDot < (cosFovYOver2 - .6);\r\n                        const outOfFovX = cameraAngleXZDot < (cosFovXOver2 - .6);\r\n                        if (!gatherAllNodes && ((outOfFovX || outOfFovY) && distanceToNode > ns)) {\r\n                            continue;\r\n                        }\r\n                        splatRenderCount += node.data.indexes.length;\r\n                        nodeRenderList[nodeRenderCount] = node;\r\n                        node.data.distanceToNode = distanceToNode;\r\n                        nodeRenderCount++;\r\n                    }\r\n                }\r\n\r\n                nodeRenderList.length = nodeRenderCount;\r\n                nodeRenderList.sort((a, b) => {\r\n                    if (a.data.distanceToNode < b.data.distanceToNode) return -1;\r\n                    else return 1;\r\n                });\r\n\r\n                let currentByteOffset = splatRenderCount * Constants.BytesPerInt;\r\n                for (let i = 0; i < nodeRenderCount; i++) {\r\n                    const node = nodeRenderList[i];\r\n                    const windowSizeInts = node.data.indexes.length;\r\n                    const windowSizeBytes = windowSizeInts * Constants.BytesPerInt;\r\n                    let destView = new Uint32Array(this.sortWorkerIndexesToSort.buffer,\r\n                                                   currentByteOffset - windowSizeBytes, windowSizeInts);\r\n                    destView.set(node.data.indexes);\r\n                    currentByteOffset -= windowSizeBytes;\r\n                }\r\n\r\n                return {\r\n                    'splatRenderCount': splatRenderCount,\r\n                    'shouldSortAll': false\r\n                };\r\n            } else {\r\n                const totalSplatCount = this.splatMesh.getSplatCount();\r\n                if (!allSplatsSortBuffer || allSplatsSortBuffer.length !== totalSplatCount) {\r\n                    allSplatsSortBuffer = new Uint32Array(totalSplatCount);\r\n                    for (let i = 0; i < totalSplatCount; i++) {\r\n                        allSplatsSortBuffer[i] = i;\r\n                    }\r\n                }\r\n                this.sortWorkerIndexesToSort.set(allSplatsSortBuffer);\r\n                return {\r\n                    'splatRenderCount': totalSplatCount,\r\n                    'shouldSortAll': true\r\n                };\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    getSplatMesh() {\r\n        return this.splatMesh;\r\n    }\r\n\r\n    /**\r\n     * Get a reference to a splat scene.\r\n     * @param {number} sceneIndex The index of the scene to which the reference will be returned\r\n     * @return {SplatScene}\r\n     */\r\n    getSplatScene(sceneIndex) {\r\n        return this.splatMesh.getScene(sceneIndex);\r\n    }\r\n\r\n    isMobile() {\r\n        return navigator.userAgent.includes('Mobi');\r\n    }\r\n}\r\n","\u0000asm\u0001\u0000\u0000\u0000\u0000\f\u0006dylink\u0000\u0000\u0000\u0000\u0000\u0001\u001b\u0003`\u0000\u0000`\u0010\u0000`\u0000\u0001\u0002\u0012\u0001\u0003env\u0006memory\u0002\u0003\u0000��\u0004\u0003\u0004\u0003\u0000\u0001\u0002\u00079\u0003\u0011__wasm_call_ctors\u0000\u0000\u000bsortIndexes\u0000\u0001\u0013emscripten_tls_init\u0000\u0002\n�\u0010\u0003\u0003\u0000\u0001\u000b�\u0010\u0005\u0001|\u0003{\u0002\u0003}\u0002~ \u000b \nk!\f\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\u000eA����x!\r \u000b \fM\r\u0002 \f!\u0001\u0003@ \u0003 \u0001A\u0002t\"\u0005j \u0002 \u0000 \u0005j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00056\u0002\u0000 \u0005 \u000e \u0005 \u000eH\u001b!\u000e \u0005 \r \u0005 \rJ\u001b!\r \u0001A\u0001j\"\u0001 \u000bG\r\u0000\u000b\f\u0002\u000b \u000f\u0004@A����\u0007!\u000eA����x!\r \u000b \fM\r\u0002A!\u000f \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0014j(\u0002\u0000\"\u0015A\u0002tj(\u0002\u0000\"\nG\u0004@\u0002~ \u0005�\t\u0002\b \b \nA\u0006tj\"\u000f�\t\u0002\u0000 \u000f*\u0002\u0010� \u0001 \u000f*\u0002 � \u0002 \u000f*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000f�\t\u0002\u0004 \u000f*\u0002\u0014� \u0001 \u000f*\u0002$� \u0002 \u000f*\u00024� \u0003��\u0001��\u0001 \u0005�\t\u0002( \u000f�\t\u0002\b \u000f*\u0002\u0018� \u0001 \u000f*\u0002(� \u0002 \u000f*\u00028� \u0003��\u0001��\u0001 \u0005�\t\u00028 \u000f�\t\u0002\f \u000f*\u0002\u001c� \u0001 \u000f*\u0002,� \u0002 \u000f*\u0002<� \u0003��\u0001��\u0001\"\u0011�\u001f\u0002��\u0014 \u0011�\u001f\u0003��\"\u0001�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@\"\u0012��\u0001\"\u0013�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Cc\u0004@ \u0010�\f\u0001\u000bB���������\u000b!\u0019\u0002~ \u0013�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Cc\u0004@ \u0010�\f\u0001\u000bB���������\u000b�\u0012!\u0013\u0002~ \u0011�\u001f\u0000��\u0014 \u0011�\u001f\u0001��\"\u0001 \u0012��\u0001\"\u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Cc\u0004@ \u0010�\f\u0001\u000bB���������\u000b!\u001a \u0013 \u0019�\u001e\u0001!\u0012\u0002~ \u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Cc\u0004@ \u0010�\f\u0001\u000bB���������\u000b�\u0012 \u001a�\u001e\u0001 \u0012�\r\u0000\u0001\u0002\u0003\b\t\n\u000b\u0010\u0011\u0012\u0013\u0018\u0019\u001a\u001b!\u0012 \n!\u000f\u000b \u0003 \u0014j \u0001 \u0015A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j \u0011�\u001b\u0003j\"\n6\u0002\u0000 \n \u000e \n \u000eH\u001b!\u000e \n \r \n \rJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0002\u000b\u0002 \u0005*\u0002\u0018�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\n\u0002 \u0005*\u0002\b�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0002\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0005A����\u0007!\u000eA����x!\r \u000b \fM\r\u0001 \u0002�\u0011 \n�\u001c\u0001 \u0005�\u001c\u0002!\u0012 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0002j \u0001 \u0000 \u0002j(\u0002\u0000A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j\"\u00026\u0002\u0000 \u0002 \u000e \u0002 \u000eH\u001b!\u000e \u0002 \r \u0002 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0001\u000b \r\u0004@A����\u0007!\u000eA����x!\r \u000b \fM\r\u0001 \f!\u0001\u0003@ \u0003 \u0001A\u0002t\"\u0005j\u0002 \u0002 \u0000 \u0005j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\n6\u0002\u0000 \n \u000e \n \u000eH\u001b!\u000e \n \r \n \rJ\u001b!\r \u0001A\u0001j\"\u0001 \u000bG\r\u0000\u000b\f\u0001\u000b\u0002@ \u000fE\u0004@ \u000b \fK\r\u0001A����x!\rA����\u0007!\u000e\f\u0002\u000bA����\u0007!\u000eA����x!\r \u000b \fM\r\u0001A!\u000f \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0014j(\u0002\u0000A\u0002t\"\u0015j(\u0002\u0000\"\nG\u0004@ \u0005�\t\u0002\b \b \nA\u0006tj\"\u000f�\t\u0002\u0000 \u000f*\u0002\u0010� \u0001 \u000f*\u0002 � \u0002 \u000f*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000f�\t\u0002\u0004 \u000f*\u0002\u0014� \u0001 \u000f*\u0002$� \u0002 \u000f*\u00024� \u0003��\u0001��\u0001 \u0005�\t\u0002( \u000f�\t\u0002\b \u000f*\u0002\u0018� \u0001 \u000f*\u0002(� \u0002 \u000f*\u00028� \u0003��\u0001��\u0001 \u0005�\t\u00028 \u000f�\t\u0002\f \u000f*\u0002\u001c� \u0001 \u000f*\u0002,� \u0002 \u000f*\u0002<� \u0003��\u0001��\u0001!\u0011 \n!\u000f\u000b \u0003 \u0014j\u0002 \u0011 \u0001 \u0015A\u0002t\"\nj)\u0002\u0000�\u0012��\u0001\"\u0012�\u001f\u0000 \u0012�\u001f\u0001� \u0011 \u0011�\r\b\t\n\u000b\f\r\u000e\u000f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0001 \nA\brj)\u0002\u0000�\u0012��\u0001\"\u0012�\u001f\u0000� \u0012�\u001f\u0001��D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\n6\u0002\u0000 \n \u000e \n \u000eH\u001b!\u000e \n \r \n \rJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000b \u0005*\u0002(!\u0016 \u0005*\u0002\u0018!\u0017 \u0005*\u0002\b!\u0018A����\u0007!\u000eA����x!\r \f!\u0005\u0003@\u0002 \u0018 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\u0000� \u0017 \u0002*\u0002\u0004�� \u0016 \u0002*\u0002\b���D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\n \u0003 \u0007j \n6\u0002\u0000 \n \u000e \n \u000eH\u001b!\u000e \n \r \n \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \u000e���!\u0016 \f!\r\u0003@\u0002 \u0016 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \u000ek��\"\u0017�C\u0000\u0000\u0000O]\u0004@ \u0017�\f\u0001\u000bA����x\u000b!\n \u0001 \n6\u0002\u0000 \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\u000e\u0003@ \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \u000eA\u0001j\"\u000e \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\u000e\u0003@ \u0006 \u000eA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \u000eA\u0001J!\u0002 \u0001!\u000e \u0002\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\u000e\u0003@ \u0006 \u000b \u0004 \u0003 \u000eA\u0001k\"\u000eA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \f \u000eH\r\u0000\u000b\u000b\u000b\u0004\u0000A\u0000\u000b","import * as THREE from 'three';\r\nimport { Viewer } from './Viewer.js';\r\n\r\n/**\r\n * DropInViewer: Wrapper for a Viewer instance that enables it to be added to a Three.js scene like\r\n * any other Three.js scene object (Mesh, Object3D, etc.)\r\n */\r\nexport class DropInViewer extends THREE.Group {\r\n\r\n    constructor(options = {}) {\r\n        super();\r\n\r\n        options.selfDrivenMode = false;\r\n        options.useBuiltInControls = false;\r\n        options.rootElement = null;\r\n        options.ignoreDevicePixelRatio = false;\r\n        options.dropInMode = true;\r\n        options.camera = undefined;\r\n        options.renderer = undefined;\r\n\r\n        this.viewer = new Viewer(options);\r\n        this.splatMesh = null;\r\n\r\n        this.callbackMesh = DropInViewer.createCallbackMesh();\r\n        this.add(this.callbackMesh);\r\n        this.callbackMesh.onBeforeRender = DropInViewer.onBeforeRender.bind(this, this.viewer);\r\n\r\n    }\r\n\r\n    /**\r\n     * Add a single splat scene to the viewer.\r\n     * @param {string} path Path to splat scene to be loaded\r\n     * @param {object} options {\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     *         showLoadingUI:         Display a loading spinner while the scene is loading, defaults to true\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     *\r\n     *         onProgress:                 Function to be called as file data are received\r\n     *\r\n     * }\r\n     * @return {AbortablePromise}\r\n     */\r\n    addSplatScene(path, options = {}) {\r\n        if (options.showLoadingUI !== false) options.showLoadingUI = true;\r\n        return this.viewer.addSplatScene(path, options);\r\n    }\r\n\r\n    /**\r\n     * Add multiple splat scenes to the viewer.\r\n     * @param {Array<object>} sceneOptions Array of per-scene options: {\r\n     *\r\n     *         path: Path to splat scene to be loaded\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     * }\r\n     * @param {boolean} showLoadingUI Display a loading spinner while the scene is loading, defaults to true\r\n     * @return {AbortablePromise}\r\n     */\r\n    addSplatScenes(sceneOptions, showLoadingUI) {\r\n        if (showLoadingUI !== false) showLoadingUI = true;\r\n        return this.viewer.addSplatScenes(sceneOptions, showLoadingUI);\r\n    }\r\n\r\n    /**\r\n     * Get a reference to a splat scene.\r\n     * @param {number} sceneIndex The index of the scene to which the reference will be returned\r\n     * @return {SplatScene}\r\n     */\r\n    getSplatScene(sceneIndex) {\r\n        return this.viewer.getSplatScene(sceneIndex);\r\n    }\r\n\r\n    removeSplatScene(index) {\r\n        return this.viewer.removeSplatScene(index);\r\n    }\r\n\r\n    dispose() {\r\n        return this.viewer.dispose();\r\n    }\r\n\r\n    static onBeforeRender(viewer, renderer, threeScene, camera) {\r\n        if (this.splatMesh !== this.viewer.splatMesh) {\r\n            if (this.splatMesh) {\r\n                this.remove(this.splatMesh);\r\n            }\r\n            this.splatMesh = this.viewer.splatMesh;\r\n            this.add(this.viewer.splatMesh);\r\n        }\r\n        viewer.update(renderer, camera);\r\n    }\r\n\r\n    static createCallbackMesh() {\r\n        const geometry = new THREE.SphereGeometry(1, 8, 8);\r\n        const material = new THREE.MeshBasicMaterial();\r\n        material.colorWrite = false;\r\n        material.depthWrite = false;\r\n        const mesh = new THREE.Mesh(geometry, material);\r\n        mesh.frustumCulled = false;\r\n        return mesh;\r\n    }\r\n\r\n}\r\n"],"names":["UncompressedSplatArray","static","X","Y","Z","SCALE0","SCALE1","SCALE2","ROTATION0","ROTATION1","ROTATION2","ROTATION3","FDC0","FDC1","FDC2","OPACITY","constructor","this","splats","splatCount","createSplat","addSplat","splat","push","getSplat","index","addDefaultSplat","newSplat","addSplatFromComonents","x","y","z","scale0","scale1","scale2","rot0","rot1","rot2","rot3","r","g","b","opacity","addSplatFromArray","src","srcIndex","srcSplat","AbortablePromise","promiseFunc","abortHandler","promiseResolve","promiseReject","promise","Promise","resolve","reject","bind","args","error","id","idGen","then","onResolve","onResolveResult","args2","catch","onFail","abort","AbortedPromiseError","Error","msg","super","floatView","Float32Array","int32View","Int32Array","buffer","uintEncodedFloat","f","fetchWithProgress","path","onProgress","saveChunks","abortController","AbortController","signal","aborted","rejectFunc","fetch","async","data","reader","body","getReader","bytesDownloaded","_fileSize","headers","get","fileSize","parseInt","undefined","chunks","value","chunk","done","read","Blob","arrayBuffer","percent","percentLabel","length","toFixed","clamp","val","min","max","Math","getCurrentTime","performance","now","disposeAllMeshes","object3D","geometry","dispose","material","children","child","delayedExecute","func","fast","window","setTimeout","SplatBuffer","BytesPerCenter","BytesPerColor","BytesPerScale","BytesPerRotation","BytesPerSplat","ScaleRange","bufferData","secLoadedCountsToMax","constructFromBuffer","fbf","compressionLevel","THREE","DataUtils","fromHalfFloat","getSplatCount","getMaxSplatCount","maxSplatCount","getBucketIndex","section","localSplatIndex","bucketIndex","maxSplatIndexInFullBuckets","fullBucketCount","bucketSize","floor","bucketSplatIndex","partiallyFullBucketIndex","currentPartiallyFilledBucketSize","partiallyFilledBucketLengths","getSplatCenter","globalSplatIndex","outCenter","transform","sectionIndex","globalSplatIndexToSectionMap","sections","splatCountOffset","centerBase","uint16PerSplat","bucketBase","BucketStorageSizeFloats","sf","compressionScaleFactor","sr","compressionScaleRange","dataArrayUint16","bucketArray","float32PerSplat","dataArrayFloat32","applyMatrix4","getSplatScaleAndRotation","scaleMatrix","Matrix4","rotationMatrix","tempMatrix","tempPosition","Vector3","outScale","outRotation","floatsPerSplat","sectionFloatArray","splatFloatBase","scaleBase","SplatScaleOffsetFloat","set","rotationBase","SplatRotationOffsetFloat","makeScale","makeRotationFromQuaternion","copy","multiply","decompose","getSplatColor","outColor","colorBase","bytesPerSplat","bytesPerCenter","bytesPerScale","bytesPerRotation","dataArrayUint8","fillSplatCenterArray","outCenterArray","srcFrom","srcTo","destFrom","center","i","centerDestBase","CenterComponentCount","tempMatrix4","Matrix3","covarianceMatrix","transformedCovariance","transform3x3","transform3x3Transpose","thf","toHalfFloat","scale","rotation","outCovariance","outOffset","desiredOutputCompressionLevel","setFromMatrix4","transpose","premultiply","elements","fillSplatCovarianceArray","covarianceArray","Quaternion","covarianceDestBase","CovarianceComponentCount","computeCovariance","fillSplatColorArray","outColorArray","minimumAlpha","splatColorOffset","colorSrcBase","colorDestBase","ColorComponentCount","alpha","parseHeader","headerArrayUint8","Uint8Array","HeaderSizeBytes","headerArrayUint16","Uint16Array","headerArrayUint32","Uint32Array","headerArrayFloat32","versionMajor","versionMinor","maxSectionCount","sectionCount","sceneCenter","writeHeaderCountsToBuffer","writeHeaderToBuffer","header","parseSectionHeaders","offset","CompressionLevels","bytesPerColor","sectionHeaderArrayUint16","SectionHeaderSizeBytes","sectionHeaderArrayUint32","sectionHeaderArrayFloat32","sectionHeaders","sectionHeaderBase","sectionHeaderBaseUint16","sectionHeaderBaseUint32","sectionBase","bucketCount","bucketBlockSize","halfBucketBlockSize","bucketStorageSizeBytes","partiallyFilledBucketCount","bucketsMetaDataSizeBytes","bucketsStorageSizeBytes","splatDataStorageSizeBytes","storageSizeBytes","sectionHeader","base","bucketsBase","dataBase","writeSectionHeaderToBuffer","sectionHeadeArrayUint16","sectionHeadeArrayUint32","sectionHeadeArrayFloat32","BucketStorageSizeBytes","writeSectionHeaderSplatCountToBuffer","globalSplatIndexToLocalSplatIndexMap","uint32PerSplat","linkBufferArrays","buildMaps","dataArrayUint32","cumulativeSplatCount","j","updateLoadedCounts","newSectionCount","newSplatCount","updateSectionLoadedCounts","sectionHeaderOffset","generateFromUncompressedSplatArrays","splatArrays","blockSize","options","sectionBuffers","sectionHeaderBuffers","totalSplatCount","tempRotation","sa","splatArray","sectionOptions","sectionBlockSize","blockSizeFactor","BucketBlockSize","sectionBucketSize","ceil","bucketSizeFactor","BucketSize","validSplats","targetSplat","OFFSET","bucketInfo","computeBucketsForUncompressedSplatArray","fullBuckets","partiallyFullBucketLengths","partiallyFullBuckets","map","bucket","buckets","sectionDataSizeBytes","bucketMetaDataSizeBytes","bucketDataBytes","sectionSizeBytes","sectionBuffer","ArrayBuffer","doubleCompressionScaleRange","bucketCenter","bucketCenterDelta","outSplatCount","fromArray","row","rot","RotationComponentCount","ScaleComponentCount","normalize","w","sub","round","rgba","Uint8ClampedArray","bucketMetaDataArray","pfb","sectionHeaderBuffer","sectionsCumulativeSizeBytes","byteLength","unifiedBufferSize","unifiedBuffer","currentUnifiedBase","halfBlockSize","dimensions","yBlocks","zBlocks","blockCenter","xBlock","yBlock","zBlock","bucketId","toArray","partiallyFullBucketArray","hasOwnProperty","HeaderMagicBytes","HeaderEndTokenBytes","HeaderEndToken","DataTypeMap","Map","Int8Array","Int16Array","Float64Array","unpackUnorm","bits","t","unpack111011","result","lerp","a","getElementPropStorage","element","name","properties","find","p","storage","CompressedPlyParser","decodeHeaderText","headerText","chunkElement","vertexElement","headerLines","split","filter","line","startsWith","words","count","has","StorageType","storageSizeByes","BYTES_PER_ELEMENT","type","byteSize","headerSizeBytes","indexOf","decodeHeader","plyBuffer","endHeaderTokenOffset","buf","search","endIndex","TextDecoder","decode","slice","readElementData","readBuffer","readOffset","fromIndex","toIndex","propertyFilter","dataView","DataView","e","property","requiredStorageSizeBytes","getInt8","getUint8","getInt16","getUint16","getInt32","getUint32","getFloat32","getFloat64","readPly","readIndex","getElementStorageArrays","minX","minY","minZ","maxX","maxY","maxZ","minScaleX","minScaleY","minScaleZ","positionExtremes","scaleExtremes","maxScaleX","maxScaleY","maxScaleZ","position","color","s","c","Vector4","chunkSplatIndexOffset","positionArray","scaleArray","rotationArray","colorArray","outSplat","chunkIndex","norm","sqrt","m","unpackRot","exp","parseToUncompressedSplatBufferSection","vertexDataBuffer","veretxReadOffset","outBuffer","outBytesPerCenter","outBytesPerScale","outBytesPerRotation","outBytesPerSplat","tempSplat","decompressSplat","outBase","parseToUncompressedSplatArray","identity","PlyParser","checkTextForEndHeader","endHeaderTestText","includes","checkBufferForEndHeader","searchOfset","chunkSize","decoder","endHeaderTestChunk","prunedLines","propertyTypes","compressed","trim","match","splatCountMatch","propertyMatch","propertyType","fieldOffsets","fieldSize","double","int","uint","float","short","ushort","uchar","fieldName","decodeHeadeFromBuffer","headerOffset","readChunkSize","headerChunk","findVertexData","readRawVertexFast","vertexData","propertiesToRead","outVertex","rawVertex","fromSplat","toSplat","vertexDataOffset","toBuffer","toOffset","parsedSplat","parseToUncompressedSplat","Fields","SH_C0","SplatPartitioner","sectionFilters","groupingParameters","partitionGenerator","partitionUncompressedSplatArray","results","newArrays","sectionSplats","sectionFilter","parameters","getStandardPartitioner","partitionSize","centerA","centerB","clampDistance","clampPoint","point","sort","centerADist","lengthSq","patitionCount","currentStartSplat","startSplat","splatIndex","blocksSize","SplatBufferGenerator","splatPartitioner","alphaRemovalThreshold","sectionSize","generateFromUncompressedSplatArray","partitionResults","getStandardGenerator","LoaderStatus","Constants","storeChunksInBuffer","inBytes","sizeBytes","PlyLoader","loadFromURL","fileName","streamLoadData","onStreamedSectionProgress","streamedSectionSizeBytes","StreamingSectionSize","splatDataOffsetBytes","streamBufferIn","streamBufferOut","streamedSplatBuffer","compressedPlyHeaderChunksBuffer","streamLoadCompleteResolver","headerLoaded","readyToLoadSplatData","streamLoadPromise","numBytesStreamed","numBytesParsed","numBytesDownloaded","textDecoder","chunkData","loadComplete","startBytes","endBytes","sizeRequiredForHeaderAndChunks","splatBufferSizeBytes","CurrentMajorVersion","CurrentMinorVersion","numBytesToProcess","addedSplatCount","numBytesToParse","numBytesLeftOver","parsedDataViewOffset","dataToParse","keepChunks","keepSize","unshift","plyFileData","loadFromFileData","splatBuffer","SplatParser","fromBuffer","fromOffset","inBase","RowSizeBytes","inCenter","inScale","CenterSizeBytes","inColor","ScaleSizeBytes","inRotation","RotationSizeBytes","quat","parseStandardSplatToUncompressedSplatArray","inBuffer","ColorSizeBytes","SplatLoader","optimizeSplatData","streamSectionSizeBytes","streamSplatBuffer","numBytesLoaded","percentStr","bytesLoadedSinceLastSection","fullBuffer","splatFileData","KSplatLoader","checkVersion","minVersionMajor","minVersionMinor","onSectionBuilt","streamBuffer","headerBuffer","sectionHeadersBuffer","headerLoading","sectionHeadersLoaded","sectionHeadersLoading","totalBytesToDownload","queuedCheckAndLoadSectionsCount","checkAndLoadSectionHeaders","performLoad","totalSectionStorageStorageByes","totalStorageSizeBytes","checkAndLoadSections","baseDataOffset","reachedSections","loadedSplatCount","bytesRequiredToReachSectionSplatData","bytesPastSSectionSplatDataStart","loadedSplatsForSection","fileData","downLoadLink","blob","document","createElement","appendChild","download","href","URL","createObjectURL","click","SceneFormat","Splat","KSplat","Ply","sceneFormatFromPath","endsWith","_changeEvent","_startEvent","_endEvent","_ray","Ray","_plane","Plane","TILT_LIMIT","cos","MathUtils","DEG2RAD","OrbitControls","EventDispatcher","object","domElement","style","touchAction","enabled","target","minDistance","maxDistance","Infinity","minZoom","maxZoom","minPolarAngle","maxPolarAngle","PI","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","panSpeed","screenSpacePanning","keyPanSpeed","zoomToCursor","autoRotate","autoRotateSpeed","keys","LEFT","UP","RIGHT","BOTTOM","mouseButtons","MOUSE","ROTATE","MIDDLE","DOLLY","PAN","touches","ONE","TOUCH","TWO","DOLLY_PAN","target0","clone","position0","zoom0","zoom","_domElementKeyEvents","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","getDistance","distanceTo","listenToKeyEvents","addEventListener","onKeyDown","stopListenToKeyEvents","removeEventListener","saveState","scope","reset","updateProjectionMatrix","dispatchEvent","update","state","STATE","NONE","setFromUnitVectors","up","quatInverse","invert","lastPosition","lastQuaternion","lastTargetPosition","twoPI","applyQuaternion","setFromVector3","rotateLeft","sphericalDelta","isFinite","makeSafe","addScaledVector","panOffset","add","performCursorZoom","isOrthographicCamera","radius","setFromSpherical","lookAt","multiplyScalar","zoomChanged","newRadius","isPerspectiveCamera","prevRadius","radiusDelta","dollyDirection","updateMatrixWorld","mouseBefore","mouse","unproject","mouseAfter","console","warn","transformDirection","matrix","origin","direction","abs","dot","setFromNormalAndCoplanarPoint","intersectPlane","distanceToSquared","EPS","quaternion","onContextMenu","onPointerDown","onPointerUp","onMouseWheel","onPointerMove","clearDampedRotation","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","Spherical","rotateStart","Vector2","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","pointers","pointerPositions","getZoomScale","pow","angle","rotateUp","panLeft","v","distance","objectMatrix","setFromMatrixColumn","panUp","crossVectors","pan","deltaX","deltaY","targetDistance","tan","fov","clientHeight","right","left","clientWidth","top","bottom","dollyOut","dollyScale","dollyIn","updateMouseParameters","event","rect","getBoundingClientRect","clientX","clientY","width","h","height","dist","handleMouseDownRotate","handleMouseDownPan","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","dx","dy","handleTouchMoveRotate","getSecondPointerPosition","subVectors","handleTouchMovePan","handleTouchMoveDolly","setPointerCapture","pointerId","addPointer","pointerType","trackPointer","DOLLY_ROTATE","onTouchStart","mouseAction","button","handleMouseDownDolly","ctrlKey","metaKey","shiftKey","onMouseDown","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","onTouchMove","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","onMouseMove","splice","removePointer","releasePointerCapture","preventDefault","handleMouseWheel","needsUpdate","code","handleKeyDown","pointer","passive","LoadingSpinner","message","container","taskIDGen","elementID","elementIDGen","tasks","spinnerContainerOuter","className","display","spinnerContainerPrimary","spinnerPrimary","classList","messageContainerPrimary","innerHTML","spinnerContainerMin","spinnerMin","messageContainerMin","setMinimized","fadeTransitions","addTask","newTask","removeTask","task","removeAllTasks","setMessageForTask","show","setMessage","hide","visible","setContainer","removeChild","zIndex","minimized","instant","showHideSpinner","displayStyle","fadeTransitionsIndex","out","duration","onComplete","startTime","startOpacity","parseFloat","isNaN","interval","setInterval","elapsed","clearInterval","fadeElement","LoadingProgressBar","progressBarContainerOuter","progressBarBox","progressBarBackground","progressBar","setProgress","progress","InfoPanel","infoCells","layout","infoPanelContainer","append","infoPanel","infoTable","layoutEntry","labelCell","spacerCell","infoCell","renderDimensions","cameraPosition","cameraLookAtPosition","cameraUp","orthographicCamera","meshCursorPosition","currentFPS","splatRenderCount","splatRenderCountPct","lastSortTime","focalAdjustment","splatScale","pointCloudMode","cameraPosString","cla","cameraLookAtString","cameraLookAt","cameraUpString","cursPos","cursorPosString","cursorPosition","fps","renderWindow","renderSplatCount","sortTime","ArrowHelper","Object3D","dir","headLength","headRadius","lineGeometry","CylinderGeometry","translate","coneGeometry","Mesh","MeshBasicMaterial","toneMapped","matrixAutoUpdate","cone","setDirection","_axis","radians","acos","setFromAxisAngle","setColor","source","SceneHelper","threeScene","splatRenderTarget","renderTargetCopyQuad","renderTargetCopyCamera","meshCursor","focusMarker","controlPlane","debugRoot","secondaryDebugRoot","updateSplatRenderTargetForRenderDimensions","destroySplatRendertarget","WebGLRenderTarget","format","RGBAFormat","stencilBuffer","depthBuffer","depthTexture","DepthTexture","DepthFormat","UnsignedIntType","setupRenderTargetCopyObjects","renderTargetCopyMaterial","ShaderMaterial","vertexShader","fragmentShader","uniforms","sourceColorTexture","sourceDepthTexture","depthWrite","depthTest","transparent","blending","CustomBlending","blendSrc","SrcAlphaFactor","blendSrcAlpha","blendDst","OneMinusSrcAlphaFactor","blendDstAlpha","extensions","fragDepth","PlaneGeometry","OrthographicCamera","destroyRenderTargetCopyObjects","setupMeshCursor","ConeGeometry","coneMaterial","downArrow","upArrow","leftArrow","rightArrow","destroyMeshCursor","remove","setMeshCursorVisibility","getMeschCursorVisibility","setMeshCursorPosition","positionAndOrientMeshCursor","camera","setupFocusMarker","sphereGeometry","SphereGeometry","focusMarkerMaterial","buildFocusMarkerMaterial","destroyFocusMarker","updateFocusMarker","toCamera","viewport","matrixWorld","toCameraDistance","realFocusPosition","uniformsNeedUpdate","setFocusMarkerVisibility","setFocusMarkerOpacity","getFocusMarkerOpacity","setupControlPlane","planeGeometry","rotateX","planeMaterial","side","DoubleSide","planeMesh","arrowDir","arrowOrigin","arrowHelper","destroyControlPlane","setControlPlaneVisibility","positionAndOrientControlPlane","tempQuaternion","defaultUp","addDebugMeshes","createDebugMeshes","createSecondaryDebugMeshes","destroyDebugMeshes","renderOrder","debugMeshRoot","createMesh","sphereMesh","buildDebugMaterial","boxGeometry","BoxGeometry","boxMesh","separation","Color","FrontSide","VectorRight","VectorUp","VectorBackward","setParameters","boxContainsPoint","box","epsilon","intersectBox","planeIntersectionPoint","planeIntersectionPointArray","originArray","directionArray","outHit","normal","hitNormal","extremeVec","multiplier","sign","toSide","idx1","idx2","intersectSphere","toSphereCenterVec","toClosestApproach","toClosestApproachSq","diffSq","radiusSq","thc","t0","t1","Hit","hitClone","Raycaster","raycastAgainstTrueSplatEllipsoid","ray","setFromCameraAndScreenPosition","ndcCoords","screenPosition","screenDimensions","setFromMatrixPosition","near","far","intersectSplatMesh","toLocal","fromLocal","sceneTransform","localRay","tempPoint","splatMesh","outHits","splatTree","getSplatTree","subTrees","subTree","dynamicMode","getSceneTransform","outHitsForSubTree","rootNode","castRayAtSplatTreeNode","forEach","hit","tempColor","tempCenter","tempScale","tempHit","scaleEpsilon","uniformScaleMatrix","toSphereSpace","fromSphereSpace","tempRay","node","boundingBox","indexes","splatGlobalIndex","uniformScale","log10","SplatScene","updateTransform","copyTransformData","otherScene","compose","SplatTreeNode","depth","Box3","SplatSubTree","maxDepth","maxCentersPerNode","sceneDimensions","sceneMin","sceneMax","nodesWithIndexes","convertWorkerSubTreeNode","workerSubTreeNode","minVector","maxVector","convertedNode","convertWorkerSubTree","workerSubTree","convertedSubTree","visitLeavesFromNode","visitFunc","createSplatTreeWorker","self","WorkerSplatTreeNodeIDGen","WorkerBox3","containsPoint","WorkerSplatSubTree","addedIndexes","disposed","WorkerSplatTreeNode","processSplatTreeNode","tree","indexToCenter","sceneCenters","newIndexes","nodeDimensions","halfDimensions","nodeCenter","childrenBounds","splatCounts","baseIndexes","childNode","buildSubTree","centerCount","onmessage","process","allCenters","postMessage","createSplatTree","centers","SplatTree","diposeSplatTreeWorker","splatTreeWorker","terminate","processSplatMesh","filterFunc","onIndexesUpload","onSplatTreeConstruction","Worker","toString","addCentersForScene","splatOffset","addedCount","addBase","checkForEarlyExit","scenes","getScene","transferBuffers","array","workerProcessCenters","countLeaves","leafCount","visitLeaves","WebGLExtensions","gl","getExtension","extension","init","capabilities","isWebGL2","WebGLCapabilities","maxAnisotropy","getMaxPrecision","precision","getShaderPrecisionFormat","VERTEX_SHADER","HIGH_FLOAT","FRAGMENT_SHADER","MEDIUM_FLOAT","WebGL2RenderingContext","maxPrecision","drawBuffers","logarithmicDepthBuffer","maxTextures","getParameter","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","maxTextureSize","MAX_TEXTURE_SIZE","maxCubemapSize","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","MAX_VERTEX_ATTRIBS","maxVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","vertexTextures","floatFragmentTextures","getMaxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","floatVertexTextures","maxSamples","MAX_SAMPLES","SceneRevealMode","Default","Gradual","Instant","dummyGeometry","BufferGeometry","dummyMaterial","SplatMesh","halfPrecisionCovariancesOnGPU","devicePixelRatio","enableDistancesComputationOnGPU","integerBasedDistancesComputation","antialiased","maxScreenSpaceSplatSize","renderer","baseSplatTree","splatDataTextures","distancesTransformFeedback","program","centersBuffer","transformIndexesBuffer","outDistancesBuffer","centersLoc","modelViewProjLoc","transformIndexesLoc","transformsLocs","globalSplatIndexToSceneIndexMap","lastBuildSplatCount","lastBuildScenes","lastBuildMaxSplatCount","lastBuildSceneCount","firstRenderTime","finalBuild","webGLUtils","calculatedSceneCenter","maxSplatDistanceFromSceneCenter","visibleRegionBufferRadius","visibleRegionRadius","visibleRegionFadeStartRadius","visibleRegionChanging","pointCloudModeEnabled","lastRenderer","buildMaterial","vertexShaderSource","MaxScenes","fadeInComplete","orthographicMode","currentTime","covariancesTexture","centersColorsTexture","focal","orthoZoom","inverseFocalAdjustment","basisViewport","debugColor","covariancesTextureSize","centersColorsTextureSize","transformMatrices","alphaTest","NormalBlending","buildGeomtery","baseGeometry","setIndex","positionsArray","positions","BufferAttribute","setAttribute","setXYZ","InstancedBufferGeometry","splatIndexArray","splatIndexes","InstancedBufferAttribute","setUsage","DynamicDrawUsage","instanceCount","buildScenes","splatBuffers","sceneOptions","createScene","splatAlphaRemovalThreshold","buildSplatIndexMaps","localSplatIndexMap","sceneIndexMap","buildSplatTree","minAlphas","onSplatTreeIndexesUpload","disposeSplatTree","buildStartTime","splatColor","sceneIndex","getSceneIndexForSplat","minAlpha","buildTime","log","leavesWithVertices","avgSplatCount","nodeCount","nodeSplatCount","build","keepSceneTransforms","getTotalMaxSplatCountForSplatBuffers","newScenes","newScene","existingScene","splatBuffersChanged","isUpdateBuild","disposeMeshData","indexMaps","setupDistancesComputationTransformFeedback","dataUpdateResults","refreshGPUDataFromSplatBuffers","onSplatTreeReadyCallback","disposeTextures","computeDistancesOnGPUSyncTimeout","clearTimeout","disposeDistancesComputationGPUResources","textureKey","textureContainer","texture","onSplatTreeReady","callback","getDataForDistancesComputation","start","end","getIntegerCenters","getFloatCenters","sceneIndexes","getSceneIndexes","sinceLastBuildOnly","uploadSplatDataToTextures","updateStart","updateGPUDataForDistancesComputation","from","to","updateGPUCentersBufferForDistancesComputation","updateGPUTransformIndexesBufferForDistancesComputation","computeTextureUpdateRegion","endSplat","textureWidth","textureHeight","elementsPerTexel","elementsPerSplat","texelsPerSplat","startSplatTexels","startRow","startRowElement","endSplatTexels","endRow","dataStart","dataEnd","updateDataTexture","paddedData","textureDesc","textureProps","bytesPerElement","getContext","updateRegion","size","updateElementCount","updateDataView","updateHeight","dataTexture","glType","convert","glFormat","colorSpace","currentTexture","TEXTURE_BINDING_2D","bindTexture","TEXTURE_2D","__webglTexture","texSubImage2D","updateCenterColorsPaddedData","colors","paddedCenterColors","colorsBase","centersBase","centerColorsBase","arr","computeDataTextureSize","elementsPerSplatl","texSize","fillSplatDataArrays","baseData","covariances","covariancesTextureDescriptor","paddedCovariances","covariancesEndSplat","covariance","covariancesTextureProps","covaranceBytesPerElement","centerColorsTextureDescriptor","centerColorsTexture","centerColorsTextureProps","transformIndexesTexDesc","paddedTransformIndexes","paddedTransformIndexesTexture","transformIndexesTextureProps","covTexSize","CovariancesDataType","covariancesTextureType","HalfFloatType","FloatType","covTex","DataTexture","RGFormat","centersColsTexSize","paddedCentersCols","centersColsTex","RGBAIntegerFormat","internalFormat","centerColors","transformIndexesTexSize","transformIndexesTexture","RedIntegerFormat","transformIndexesTextureSize","updateVisibleRegion","avgCenter","scene","distFromCSceneCenter","updateVisibleRegionFadeDistance","sceneRevealMode","defaultFadeInRate","fadeInRate","shaderFadeInComplete","updateRenderIndexes","globalIndexes","attributes","updateTransforms","updateUniforms","cameraFocalLengthX","cameraFocalLengthY","orthographicZoom","transforms","setSplatScale","getSplatScale","setPointCloudModeEnabled","getPointCloudModeEnabled","getSplatDataTextures","getTotalSplatCountForScenes","getTotalSplatCountForSplatBuffers","getTotalMaxSplatCountForScenes","vao","deleteVertexArray","deleteProgram","deleteShader","disposeDistancesComputationGPUBufferResources","deleteTransformFeedback","deleteBuffer","setRenderer","WebGLUtils","currentMaxSplatCount","rebuildGPUObjects","rebuildBuffers","createShader","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","typeName","errors","getShaderInfoLog","vsSource","currentVao","VERTEX_ARRAY_BINDING","currentProgram","CURRENT_PROGRAM","currentProgramDeleted","getProgramParameter","DELETE_STATUS","createVertexArray","bindVertexArray","createProgram","attachShader","transformFeedbackVaryings","SEPARATE_ATTRIBS","linkProgram","LINK_STATUS","getProgramInfoLog","useProgram","getAttribLocation","getUniformLocation","createBuffer","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribIPointer","INT","vertexAttribPointer","FLOAT","UNSIGNED_INT","STATIC_READ","createTransformFeedback","bindTransformFeedback","TRANSFORM_FEEDBACK","bindBufferBase","TRANSFORM_FEEDBACK_BUFFER","isUpdate","offsetSplats","ArrayType","subBufferOffset","bufferSubData","maxArray","STATIC_DRAW","transformIndexes","fillTransformsArray","tempArray","sceneTransformElements","computeDistancesOnGPU","modelViewProjMatrix","outComputedDistances","enable","RASTERIZER_DISCARD","iTempMatrix","getIntegerMatrixArray","iTransform","uniform4i","uniformMatrix4fv","iViewProjMatrix","iViewProj","uniform3i","viewProj","uniform3f","beginTransformFeedback","POINTS","drawArrays","endTransformFeedback","disable","sync","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","checkSync","timeout","bitflags","clientWaitSync","TIMEOUT_EXPIRED","WAIT_FAILED","deleteSync","getBufferSubData","getLocalSplatParameters","globalIndex","paramsObj","returnSceneTransform","getSplatBufferForSplat","localIndex","getSplatLocalIndex","getSceneTransformForSplat","applySceneTransform","srcStart","srcEnd","destStart","padFour","floatCenters","intCenters","componentCount","paddedFloatCenters","outTransform","matrixElements","intMatrixArray","sortWorker","wasmInstance","wasmMemory","useSharedMemory","integerBasedSort","indexesToSortOffset","sortedIndexesOffset","transformIndexesOffset","transformsOffset","precomputedDistancesOffset","mappedDistancesOffset","frequenciesOffset","centersOffset","modelViewProjOffset","countsZero","sortedIndexesOut","range","BytesPerInt","BytesPerFloat","centerDataSet","renderCount","sortCount","splatSortCount","usePrecomputedDistances","copyIndexesToSort","copyPrecomputedDistances","copyTransforms","indexesToSort","precomputedDistances","modelViewProj","sortStartTime","DepthMapRange","exports","sortIndexes","sortMessage","sortDone","sortedIndexes","sortEndTime","CENTERS_BYTES_PER_ENTRY","sorterWasmBytes","matrixSize","memoryRequiredForIndexesToSort","memoryRequiredForCenters","memoryRequiredForModelViewProjectionMatrix","memoryRequiredForPrecomputedDistances","memoryRequiredForMappedDistances","memoryRequiredForSortedIndexes","memoryRequiredForIntermediateSortBuffers","memoryRequiredforTransformIndexes","memoryRequiredforTransforms","extraMemory","MemoryPageSize","totalRequiredMemory","totalPagesRequired","sorterWasmImport","module","env","memory","WebAssembly","Memory","initial","maximum","shared","compile","wasmModule","instantiate","instance","sortSetupPhase1Complete","indexesToSortBuffer","sortedIndexesBuffer","precomputedDistancesBuffer","transformsBuffer","WebXRMode","None","VR","AR","VRButton","createButton","disableButton","cursor","onmouseenter","onmouseleave","onclick","stylizeElement","padding","border","borderRadius","background","font","textAlign","outline","navigator","xr","isSessionSupported","supported","currentSession","onSessionStarted","session","onSessionEnded","setSession","textContent","sessionInit","optionalFeatures","requestSession","offerSession","err","showEnterVR","xrSessionIsGranted","exception","isSecureContext","location","replace","textDecoration","registerSessionGrantedListener","test","userAgent","ARButton","domOverlay","overlay","svg","createElementNS","root","setReferenceSpaceType","showStartAR","RenderMode","Always","OnChange","Never","Viewer","initialCameraPosition","initialCameraLookAt","dropInMode","selfDrivenMode","selfDrivenUpdateFunc","selfDrivenUpdate","useBuiltInControls","rootElement","ignoreDevicePixelRatio","gpuAcceleratedSort","sharedMemoryForWorkers","dynamicScene","webXRMode","renderMode","createSplatMesh","controls","perspectiveControls","orthographicControls","perspectiveCamera","showMeshCursor","showControlPlane","showInfo","sceneHelper","sortRunning","sortWorkerIndexesToSort","sortWorkerSortedIndexes","sortWorkerPrecomputedDistances","sortWorkerTransforms","runAfterFirstSort","selfDrivenModeRunning","splatRenderReady","raycaster","startInOrthographicMode","consecutiveRenderFrames","previousCameraTarget","nextCameraTarget","mousePosition","mouseDownPosition","mouseDownTime","resizeObserver","mouseMoveListener","mouseDownListener","mouseUpListener","keyDownListener","sortPromise","sortPromiseResolver","splatSceneDownloadPromises","splatSceneDownloadAndBuildPromise","splatSceneRemovalPromise","loadingSpinner","loadingProgressBar","usingExternalCamera","usingExternalRenderer","initialized","disposing","frustumCulled","parentElement","getRenderDimensions","PerspectiveCamera","WebGLRenderer","antialias","setPixelRatio","autoClear","setClearColor","setSize","ResizeObserver","forceRenderNextFrame","observe","Scene","onMouseUp","removeEventHandlers","setRenderMode","forward","tempMatrixLeft","tempMatrixRight","makeRotationAxis","setOrthographicMode","offsetX","offsetY","clickOffset","onMouseClick","checkForFocalPointChange","toNewFocalPoint","transitioningCameraTarget","intersectionPoint","transitioningCameraTargetStartTime","outDimensions","offsetWidth","offsetHeight","getSize","fromCamera","fromControls","toControls","setCameraZoomFromPosition","setCameraPositionFromZoom","tempVector","positionCamera","zoomedCamera","toLookAtDistance","negate","zoomCamera","positionZamera","updateSplatMesh","focalLengthX","projectionMatrix","focalLengthY","focalMultiplier","isLoadingOrUnloading","Object","isDisposingOrDisposed","addSplatSceneDownloadPromise","removeSplatSceneDownloadPromise","setSplatSceneDownloadAndBuildPromise","clearSplatSceneDownloadAndBuildPromise","addSplatScene","streamBuildSections","isStreamable","streamView","showLoadingUI","loadingUITaskId","onProgressUIUpdate","percentComplete","percentCompleteLabel","loaderStatus","suffix","downloadDone","downloadedPercentage","splatBuffersAddedUIUpdate","firstBuild","downloadAndBuildSingleSplatSceneStreaming","downloadAndBuildSingleSplatSceneNonStreaming","addSplatBufferOptions","orientation","addSplatBuffers","buildFunc","onException","downloadPromise","downloadSplatSceneToSplatBuffer","onDownloadProgress","onDownloadException","firstStreamedSectionDownloadAndBuildResolver","firstStreamedSectionDownloadAndBuildRejecter","splatSceneDownloadAndBuildResolver","splatSceneDownloadAndBuildRejecter","steamedSectionBuildCount","streamedSectionBuilding","queuedStreamedSectionBuilds","checkAndBuildStreamedSections","queuedBuild","shift","splatSceneDownloadPromise","firstStreamedSectionBuildPromise","resolver","rejecter","addSplatScenes","fileCount","onLoadProgress","fileIndex","totalPercent","downloadPromises","nativeLoadPromises","abortHandlers","all","finally","streamBuiltSections","splatBufferOptions","showLoadingUIForSplatTreeBuild","splatProcessingTaskId","finish","buildResults","sortNeededForSceneChange","addSplatBuffersToMesh","disposeSortWorker","setupSortWorker","allSplatBuffers","allSplatBufferOptions","splatOptimizingTaskId","finished","DistancesArrayType","worker","sorterWasmBinaryString","atob","charCodeAt","createSortWorker","sortCanceled","removeSplatScene","revmovalTaskId","checkAndHideLoadingUI","onDone","savedSplatBuffers","savedSceneOptions","savedSceneTransformComponents","savedVisibleRegionFadeStartRadius","updateSplatSort","setAnimationLoop","requestFrameId","requestAnimationFrame","stop","cancelAnimationFrame","waitPromises","promisesToAbort","promiseKey","downloadPromiseToAbort","disposePromise","unobserve","toAbort","shouldRender","render","renderNextFrame","lastCameraPosition","lastCameraOrientation","changeEpsilon","cameraChanged","cp","co","savedAuoClear","hasRenderables","updateForDropInMode","updateForRendererSizeChanges","updateMeshCursor","updateFPS","timingSensitiveUpdates","updateInfoPanel","updateControlPlane","lastCalcTime","frameCount","lastRendererSize","currentRendererSize","lastCameraOrthographic","aspect","lastUpdateTime","timeDelta","updateCameraTransition","tempCameraTarget","toPreviousTarget","toNextTarget","rotationAngle","wasTransitioning","currentFocusMarkerOpacity","newFocusMarkerOpacity","mvpMatrix","cameraPositionArray","lastSortViewDir","sortViewDir","lastSortViewPos","sortViewOffset","queuedSorts","partialSorts","angleThreshold","sortFractions","force","angleDiff","positionDiff","needsRefreshForRotation","needsRefreshForPosition","shouldSortAll","gatherSceneNodesForSort","partialSort","sortFraction","nodeRenderList","allSplatsSortBuffer","tempVectorYZ","tempVectorXZ","modelView","baseModelView","tempMax","nodeSize","gatherAllNodes","cameraFocalLength","fovXOver2","atan","fovYOver2","cosFovXOver2","cosFovYOver2","nodeRenderCount","distanceToNode","setX","setY","cameraAngleXZDot","cameraAngleYZDot","ns","currentByteOffset","windowSizeInts","windowSizeBytes","getSplatMesh","getSplatScene","isMobile","DropInViewer","Group","viewer","callbackMesh","createCallbackMesh","onBeforeRender","colorWrite","mesh"],"mappings":"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"}
{"version":3,"file":"gaussian-splats-3d.umd.min.cjs","sources":["../src/AbortablePromise.js","../src/Util.js","../src/loaders/UncompressedSplatArray.js","../src/Constants.js","../src/loaders/SplatBuffer.js","../src/loaders/ply/PlayCanvasCompressedPlyParser.js","../src/loaders/ply/PlyFormat.js","../src/loaders/ply/PlyParserUtils.js","../src/loaders/ply/INRIAV1PlyParser.js","../src/loaders/ply/INRIAV2PlyParser.js","../src/loaders/ply/PlyParser.js","../src/loaders/SplatPartitioner.js","../src/loaders/SplatBufferGenerator.js","../src/loaders/LoaderStatus.js","../src/loaders/ply/PlyLoader.js","../src/loaders/splat/SplatParser.js","../src/loaders/splat/SplatLoader.js","../src/loaders/ksplat/KSplatLoader.js","../src/loaders/SceneFormat.js","../src/loaders/Utils.js","../src/OrbitControls.js","../src/ui/LoadingSpinner.js","../src/ui/Util.js","../src/ui/LoadingProgressBar.js","../src/ui/InfoPanel.js","../src/ArrowHelper.js","../src/SceneHelper.js","../src/raycaster/Ray.js","../src/raycaster/Hit.js","../src/raycaster/Raycaster.js","../src/splatmesh/SplatMaterial.js","../src/splatmesh/SplatGeometry.js","../src/splatmesh/SplatScene.js","../src/splattree/SplatTree.js","../src/three-shim/WebGLExtensions.js","../src/three-shim/WebGLCapabilities.js","../src/SceneRevealMode.js","../src/LogLevel.js","../src/splatmesh/SplatMesh.js","../src/worker/sorter.wasm","../src/worker/sorter_no_simd.wasm","../src/worker/SortWorker.js","../src/webxr/WebXRMode.js","../src/webxr/VRButton.js","../src/webxr/ARButton.js","../src/RenderMode.js","../src/Viewer.js","../src/worker/sorter_non_shared.wasm","../src/worker/sorter_no_simd_non_shared.wasm","../src/DropInViewer.js"],"sourcesContent":["/**\r\n * AbortablePromise: A quick & dirty wrapper for JavaScript's Promise class that allows the underlying\r\n * asynchronous operation to be cancelled. It is only meant for simple situations where no complex promise\r\n * chaining or merging occurs. It needs a significant amount of work to truly replicate the full\r\n * functionality of JavaScript's Promise class. Look at Util.fetchWithProgress() for example usage.\r\n *\r\n * This class was primarily added to allow splat scene downloads to be cancelled. It has not been tested\r\n * very thoroughly and the implementation is kinda janky. If you can at all help it, please avoid using it :)\r\n */\r\nexport class AbortablePromise {\r\n\r\n    static idGen = 0;\r\n\r\n    constructor(promiseFunc, abortHandler) {\r\n\r\n        let resolver;\r\n        let rejecter;\r\n        this.promise = new Promise((resolve, reject) => {\r\n            resolver = resolve;\r\n            rejecter = reject;\r\n        });\r\n\r\n        const promiseResolve = resolver.bind(this);\r\n        const promiseReject = rejecter.bind(this);\r\n\r\n        const resolve = (...args) => {\r\n            promiseResolve(...args);\r\n        };\r\n\r\n        const reject = (error) => {\r\n            promiseReject(error);\r\n        };\r\n\r\n        promiseFunc(resolve.bind(this), reject.bind(this));\r\n        this.abortHandler = abortHandler;\r\n        this.id = AbortablePromise.idGen++;\r\n    }\r\n\r\n    then(onResolve) {\r\n        return new AbortablePromise((resolve, reject) => {\r\n            this.promise = this.promise\r\n            .then((...args) => {\r\n                const onResolveResult = onResolve(...args);\r\n                if (onResolveResult instanceof Promise || onResolveResult instanceof AbortablePromise) {\r\n                    onResolveResult.then((...args2) => {\r\n                        resolve(...args2);\r\n                    });\r\n                } else {\r\n                    resolve(onResolveResult);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                reject(error);\r\n            });\r\n        }, this.abortHandler);\r\n    }\r\n\r\n    catch(onFail) {\r\n        return new AbortablePromise((resolve) => {\r\n            this.promise = this.promise.then((...args) => {\r\n                resolve(...args);\r\n            })\r\n            .catch(onFail);\r\n        }, this.abortHandler);\r\n    }\r\n\r\n    abort() {\r\n        if (this.abortHandler) this.abortHandler();\r\n    }\r\n\r\n}\r\n\r\nexport class AbortedPromiseError extends Error {\r\n\r\n    constructor(msg) {\r\n        super(msg);\r\n    }\r\n\r\n}\r\n","import { AbortablePromise, AbortedPromiseError } from './AbortablePromise.js';\r\n\r\nexport const floatToHalf = function() {\r\n\r\n    const floatView = new Float32Array(1);\r\n    const int32View = new Int32Array(floatView.buffer);\r\n\r\n    return function(val) {\r\n        floatView[0] = val;\r\n        const x = int32View[0];\r\n\r\n        let bits = (x >> 16) & 0x8000;\r\n        let m = (x >> 12) & 0x07ff;\r\n        const e = (x >> 23) & 0xff;\r\n\r\n        if (e < 103) return bits;\r\n\r\n        if (e > 142) {\r\n            bits |= 0x7c00;\r\n            bits |= ((e == 255) ? 0 : 1) && (x & 0x007fffff);\r\n            return bits;\r\n        }\r\n\r\n        if (e < 113) {\r\n            m |= 0x0800;\r\n            bits |= (m >> (114 - e)) + ((m >> (113 - e)) & 1);\r\n            return bits;\r\n        }\r\n\r\n        bits |= (( e - 112) << 10) | (m >> 1);\r\n        bits += m & 1;\r\n        return bits;\r\n    };\r\n\r\n}();\r\n\r\nexport const uintEncodedFloat = function() {\r\n\r\n    const floatView = new Float32Array(1);\r\n    const int32View = new Int32Array(floatView.buffer);\r\n\r\n    return function(f) {\r\n        floatView[0] = f;\r\n        return int32View[0];\r\n    };\r\n\r\n}();\r\n\r\nexport const rgbaToInteger = function(r, g, b, a) {\r\n    return r + (g << 8) + (b << 16) + (a << 24);\r\n};\r\n\r\nexport const rgbaArrayToInteger = function(arr, offset) {\r\n    return arr[offset] + (arr[offset + 1] << 8) + (arr[offset + 2] << 16) + (arr[offset + 3] << 24);\r\n};\r\n\r\nexport const fetchWithProgress = function(path, onProgress, saveChunks = true) {\r\n\r\n    const abortController = new AbortController();\r\n    const signal = abortController.signal;\r\n    let aborted = false;\r\n    let rejectFunc = null;\r\n    const abortHandler = (reason) => {\r\n        abortController.abort(reason);\r\n        rejectFunc(new AbortedPromiseError('Fetch aborted.'));\r\n        aborted = true;\r\n    };\r\n\r\n    return new AbortablePromise((resolve, reject) => {\r\n        rejectFunc = reject;\r\n        fetch(path, { signal })\r\n        .then(async (data) => {\r\n            const reader = data.body.getReader();\r\n            let bytesDownloaded = 0;\r\n            let _fileSize = data.headers.get('Content-Length');\r\n            let fileSize = _fileSize ? parseInt(_fileSize) : undefined;\r\n\r\n            const chunks = [];\r\n\r\n            while (!aborted) {\r\n                try {\r\n                    const { value: chunk, done } = await reader.read();\r\n                    if (done) {\r\n                        if (onProgress) {\r\n                            onProgress(100, '100%', chunk, fileSize);\r\n                        }\r\n                        if (saveChunks) {\r\n                            const buffer = new Blob(chunks).arrayBuffer();\r\n                            resolve(buffer);\r\n                        } else {\r\n                            resolve();\r\n                        }\r\n                        break;\r\n                    }\r\n                    bytesDownloaded += chunk.length;\r\n                    let percent;\r\n                    let percentLabel;\r\n                    if (fileSize !== undefined) {\r\n                        percent = bytesDownloaded / fileSize * 100;\r\n                        percentLabel = `${percent.toFixed(2)}%`;\r\n                    }\r\n                    if (saveChunks) chunks.push(chunk);\r\n                    if (onProgress) {\r\n                        const cancelSaveChucnks = onProgress(percent, percentLabel, chunk, fileSize);\r\n                        if (cancelSaveChucnks) saveChunks = false;\r\n                    }\r\n                } catch (error) {\r\n                    reject(error);\r\n                    break;\r\n                }\r\n            }\r\n        });\r\n    }, abortHandler);\r\n\r\n};\r\n\r\nexport const clamp = function(val, min, max) {\r\n    return Math.max(Math.min(val, max), min);\r\n};\r\n\r\nexport const getCurrentTime = function() {\r\n    return performance.now() / 1000;\r\n};\r\n\r\nexport const disposeAllMeshes = (object3D) => {\r\n    if (object3D.geometry) {\r\n        object3D.geometry.dispose();\r\n        object3D.geometry = null;\r\n    }\r\n    if (object3D.material) {\r\n        object3D.material.dispose();\r\n        object3D.material = null;\r\n    }\r\n    if (object3D.children) {\r\n        for (let child of object3D.children) {\r\n            disposeAllMeshes(child);\r\n        }\r\n    }\r\n};\r\n\r\nexport const delayedExecute = (func, fast) => {\r\n    return new Promise((resolve) => {\r\n        window.setTimeout(() => {\r\n            resolve(func());\r\n        }, fast ? 1 : 50);\r\n    });\r\n};\r\n\r\n\r\nexport const getSphericalHarmonicsComponentCountForDegree = (sphericalHarmonicsDegree = 0) => {\r\n    switch (sphericalHarmonicsDegree) {\r\n        case 1:\r\n            return 9;\r\n        case 2:\r\n            return 24;\r\n    }\r\n    return 0;\r\n};\r\n\r\nexport const nativePromiseWithExtractedComponents = () => {\r\n    let resolver;\r\n    let rejecter;\r\n    const promise = new Promise((resolve, reject) => {\r\n        resolver = resolve;\r\n        rejecter = reject;\r\n    });\r\n    return {\r\n        'promise': promise,\r\n        'resolve': resolver,\r\n        'reject': rejecter\r\n    };\r\n};\r\n\r\nexport const abortablePromiseWithExtractedComponents = (abortHandler) => {\r\n    let resolver;\r\n    let rejecter;\r\n    if (!abortHandler) {\r\n        abortHandler = () => {};\r\n    }\r\n    const promise = new AbortablePromise((resolve, reject) => {\r\n        resolver = resolve;\r\n        rejecter = reject;\r\n    }, abortHandler);\r\n    return {\r\n        'promise': promise,\r\n        'resolve': resolver,\r\n        'reject': rejecter\r\n    };\r\n};\r\n\r\nclass Semver {\r\n    constructor(major, minor, patch) {\r\n        this.major = major;\r\n        this.minor = minor;\r\n        this.patch = patch;\r\n    }\r\n\r\n    toString() {\r\n        return `${this.major}_${this.minor}_${this.patch}`;\r\n    }\r\n}\r\n\r\nexport function isIOS() {\r\n    const ua = navigator.userAgent;\r\n    return ua.indexOf('iPhone') > 0 || ua.indexOf('iPad') > 0;\r\n}\r\n\r\nexport function getIOSSemever() {\r\n    if (isIOS()) {\r\n        const extract = navigator.userAgent.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\r\n        return new Semver(\r\n            parseInt(extract[1] || 0, 10),\r\n            parseInt(extract[2] || 0, 10),\r\n            parseInt(extract[3] || 0, 10)\r\n        );\r\n    } else {\r\n        return null; // or [0,0,0]\r\n    }\r\n}\r\n","import { getSphericalHarmonicsComponentCountForDegree } from '../Util.js';\r\n\r\nconst BASE_COMPONENT_COUNT = 14;\r\n\r\nexport class UncompressedSplatArray {\r\n\r\n    static OFFSET = {\r\n        X: 0,\r\n        Y: 1,\r\n        Z: 2,\r\n        SCALE0: 3,\r\n        SCALE1: 4,\r\n        SCALE2: 5,\r\n        ROTATION0: 6,\r\n        ROTATION1: 7,\r\n        ROTATION2: 8,\r\n        ROTATION3: 9,\r\n        FDC0: 10,\r\n        FDC1: 11,\r\n        FDC2: 12,\r\n        OPACITY: 13,\r\n        FRC0: 14,\r\n        FRC1: 15,\r\n        FRC2: 16,\r\n        FRC3: 17,\r\n        FRC4: 18,\r\n        FRC5: 19,\r\n        FRC6: 20,\r\n        FRC7: 21,\r\n        FRC8: 22,\r\n        FRC9: 23,\r\n        FRC10: 24,\r\n        FRC11: 25,\r\n        FRC12: 26,\r\n        FRC13: 27,\r\n        FRC14: 28,\r\n        FRC15: 29,\r\n        FRC16: 30,\r\n        FRC17: 31,\r\n        FRC18: 32,\r\n        FRC19: 33,\r\n        FRC20: 34,\r\n        FRC21: 35,\r\n        FRC22: 36,\r\n        FRC23: 37\r\n    };\r\n\r\n    constructor(sphericalHarmonicsDegree = 0) {\r\n        this.sphericalHarmonicsDegree = sphericalHarmonicsDegree;\r\n        this.sphericalHarmonicsCount = getSphericalHarmonicsComponentCountForDegree(this.sphericalHarmonicsDegree);\r\n        this.componentCount = this.sphericalHarmonicsCount + BASE_COMPONENT_COUNT;\r\n        this.defaultSphericalHarmonics = new Array(this.sphericalHarmonicsCount).fill(0);\r\n        this.splats = [];\r\n        this.splatCount = 0;\r\n    }\r\n\r\n    static createSplat(sphericalHarmonicsDegree = 0) {\r\n        const baseSplat = [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0];\r\n        let shEntries = getSphericalHarmonicsComponentCountForDegree(sphericalHarmonicsDegree);\r\n        for (let i = 0; i < shEntries; i++) baseSplat.push(0);\r\n        return baseSplat;\r\n    }\r\n\r\n    addSplat(splat) {\r\n        this.splats.push(splat);\r\n        this.splatCount++;\r\n    }\r\n\r\n    getSplat(index) {\r\n        return this.splats[index];\r\n    }\r\n\r\n    addDefaultSplat() {\r\n        const newSplat = UncompressedSplatArray.createSplat(this.sphericalHarmonicsDegree);\r\n        this.addSplat(newSplat);\r\n        return newSplat;\r\n    }\r\n\r\n    addSplatFromComonents(x, y, z, scale0, scale1, scale2, rot0, rot1, rot2, rot3, r, g, b, opacity, ...rest) {\r\n        const newSplat = [x, y, z, scale0, scale1, scale2, rot0, rot1, rot2, rot3, r, g, b, opacity, ...this.defaultSphericalHarmonics];\r\n        for (let i = 0; i < rest.length && i < this.sphericalHarmonicsCount; i++) {\r\n            newSplat[i] = rest[i];\r\n        }\r\n        this.addSplat(newSplat);\r\n        return newSplat;\r\n    }\r\n\r\n    addSplatFromArray(src, srcIndex) {\r\n        const srcSplat = src.splats[srcIndex];\r\n        const newSplat = UncompressedSplatArray.createSplat(this.sphericalHarmonicsDegree);\r\n        for (let i = 0; i < this.componentCount && i < srcSplat.length; i++) {\r\n            newSplat[i] = srcSplat[i];\r\n        }\r\n        this.addSplat(newSplat);\r\n    }\r\n}\r\n","export class Constants {\r\n\r\n    static DepthMapRange = 1 << 16;\r\n    static MemoryPageSize = 65536;\r\n    static BytesPerFloat = 4;\r\n    static BytesPerInt = 4;\r\n    static MaxScenes = 32;\r\n    static ProgressiveLoadSectionSize = 262144;\r\n    static ProgressiveLoadSectionDelayDuration = 15;\r\n    static SphericalHarmonics8BitCompressionRange = 3;\r\n}\r\n","import * as THREE from 'three';\r\nimport { UncompressedSplatArray } from './UncompressedSplatArray.js';\r\nimport { clamp, getSphericalHarmonicsComponentCountForDegree } from '../Util.js';\r\nimport { Constants } from '../Constants.js';\r\n\r\nconst SphericalHarmonics8BitCompressionHalfRange = Constants.SphericalHarmonics8BitCompressionRange / 2.0;\r\n\r\nconst toHalfFloat = THREE.DataUtils.toHalfFloat.bind(THREE.DataUtils);\r\n\r\nconst toUint8 = (v) => {\r\n    v = clamp(v, -SphericalHarmonics8BitCompressionHalfRange, SphericalHarmonics8BitCompressionHalfRange);\r\n    return clamp(Math.floor((v * (0.5 / SphericalHarmonics8BitCompressionHalfRange) + 0.5) * 255), 0, 255);\r\n};\r\n\r\nconst fromUint8 = (v) => {\r\n    return (v / 255) * Constants.SphericalHarmonics8BitCompressionRange - SphericalHarmonics8BitCompressionHalfRange;\r\n};\r\n\r\nconst fromHalfFloat = THREE.DataUtils.fromHalfFloat.bind(THREE.DataUtils);\r\n\r\nconst fromHalfFloatToUint8 = (v) => {\r\n    return toUint8(fromHalfFloat(v));\r\n};\r\n\r\nconst toUncompressedFloat = (f, compressionLevel, isSH = false) => {\r\n    if (compressionLevel === 0) {\r\n        return f;\r\n    } else if (compressionLevel === 1 || compressionLevel === 2 && !isSH) {\r\n        return THREE.DataUtils.fromHalfFloat(f);\r\n    } else if (compressionLevel === 2) {\r\n        return fromUint8(f);\r\n    }\r\n};\r\n\r\nconst dataViewFloatForCompressionLevel = (dataView, floatIndex, compressionLevel, isSH = false) => {\r\n    if (compressionLevel === 0) {\r\n        return dataView.getFloat32(floatIndex * 4, true);\r\n    } else if (compressionLevel === 1 || compressionLevel === 2 && !isSH) {\r\n        return dataView.getUint16(floatIndex * 2, true);\r\n    } else {\r\n        return dataView.getUint8(floatIndex, true);\r\n    }\r\n};\r\n\r\nconst copyBetweenBuffers = (srcBuffer, srcOffset, destBuffer, destOffset, byteCount = 0) => {\r\n    const src = new Uint8Array(srcBuffer, srcOffset);\r\n    const dest = new Uint8Array(destBuffer, destOffset);\r\n    for (let i = 0; i < byteCount; i++) {\r\n        dest[i] = src[i];\r\n    }\r\n};\r\n\r\n/**\r\n * SplatBuffer: Container for splat data from a single scene/file and capable of (mediocre) compression.\r\n */\r\nexport class SplatBuffer {\r\n\r\n    static CurrentMajorVersion = 0;\r\n    static CurrentMinorVersion = 1;\r\n\r\n    static CenterComponentCount = 3;\r\n    static ScaleComponentCount = 3;\r\n    static RotationComponentCount = 4;\r\n    static ColorComponentCount = 4;\r\n    static CovarianceComponentCount = 6;\r\n\r\n    static SplatScaleOffsetFloat = 3;\r\n    static SplatRotationOffsetFloat = 6;\r\n\r\n    static CompressionLevels = {\r\n        0: {\r\n            BytesPerCenter: 12,\r\n            BytesPerScale: 12,\r\n            BytesPerRotation: 16,\r\n            BytesPerColor: 4,\r\n            ScaleOffsetBytes: 12,\r\n            RotationffsetBytes: 24,\r\n            ColorOffsetBytes: 40,\r\n            SphericalHarmonicsOffsetBytes: 44,\r\n            ScaleRange: 1,\r\n            BytesPerSphericalHarmonicsComponent: 4,\r\n            SphericalHarmonicsOffsetFloat: 11,\r\n            SphericalHarmonicsDegrees: {\r\n                0: { BytesPerSplat: 44 },\r\n                1: { BytesPerSplat: 80 },\r\n                2: { BytesPerSplat: 140 }\r\n            },\r\n        },\r\n        1: {\r\n            BytesPerCenter: 6,\r\n            BytesPerScale: 6,\r\n            BytesPerRotation: 8,\r\n            BytesPerColor: 4,\r\n            ScaleOffsetBytes: 6,\r\n            RotationffsetBytes: 12,\r\n            ColorOffsetBytes: 20,\r\n            SphericalHarmonicsOffsetBytes: 24,\r\n            ScaleRange: 32767,\r\n            BytesPerSphericalHarmonicsComponent: 2,\r\n            SphericalHarmonicsOffsetFloat: 12,\r\n            SphericalHarmonicsDegrees: {\r\n                0: { BytesPerSplat: 24 },\r\n                1: { BytesPerSplat: 42 },\r\n                2: { BytesPerSplat: 72 }\r\n            },\r\n        },\r\n        2: {\r\n            BytesPerCenter: 6,\r\n            BytesPerScale: 6,\r\n            BytesPerRotation: 8,\r\n            BytesPerColor: 4,\r\n            ScaleOffsetBytes: 6,\r\n            RotationffsetBytes: 12,\r\n            ColorOffsetBytes: 20,\r\n            SphericalHarmonicsOffsetBytes: 24,\r\n            ScaleRange: 32767,\r\n            BytesPerSphericalHarmonicsComponent: 1,\r\n            SphericalHarmonicsOffsetFloat: 12,\r\n            SphericalHarmonicsDegrees: {\r\n                0: { BytesPerSplat: 24 },\r\n                1: { BytesPerSplat: 33 },\r\n                2: { BytesPerSplat: 48 }\r\n            },\r\n        }\r\n    };\r\n\r\n    static CovarianceSizeFloats = 6;\r\n\r\n    static HeaderSizeBytes = 4096;\r\n    static SectionHeaderSizeBytes = 1024;\r\n\r\n    static BucketStorageSizeBytes = 12;\r\n    static BucketStorageSizeFloats = 3;\r\n\r\n    static BucketBlockSize = 5.0;\r\n    static BucketSize = 256;\r\n\r\n    constructor(bufferData, secLoadedCountsToMax = true) {\r\n        this.constructFromBuffer(bufferData, secLoadedCountsToMax);\r\n    }\r\n\r\n    getSplatCount() {\r\n        return this.splatCount;\r\n    }\r\n\r\n    getMaxSplatCount() {\r\n        return this.maxSplatCount;\r\n    }\r\n\r\n    getMinSphericalHarmonicsDegree() {\r\n        let minSphericalHarmonicsDegree = 0;\r\n        for (let i = 0; i < this.sections.length; i++) {\r\n            const section = this.sections[i];\r\n            if (i === 0 || section.sphericalHarmonicsDegree < minSphericalHarmonicsDegree) {\r\n                minSphericalHarmonicsDegree = section.sphericalHarmonicsDegree;\r\n            }\r\n        }\r\n        return minSphericalHarmonicsDegree;\r\n    }\r\n\r\n    getBucketIndex(section, localSplatIndex) {\r\n        let bucketIndex;\r\n        const maxSplatIndexInFullBuckets = section.fullBucketCount * section.bucketSize;\r\n        if (localSplatIndex < maxSplatIndexInFullBuckets) {\r\n            bucketIndex = Math.floor(localSplatIndex / section.bucketSize);\r\n        } else {\r\n            let bucketSplatIndex = maxSplatIndexInFullBuckets;\r\n            bucketIndex = section.fullBucketCount;\r\n            let partiallyFullBucketIndex = 0;\r\n            while (bucketSplatIndex < section.splatCount) {\r\n                let currentPartiallyFilledBucketSize = section.partiallyFilledBucketLengths[partiallyFullBucketIndex];\r\n                if (localSplatIndex >= bucketSplatIndex && localSplatIndex < bucketSplatIndex + currentPartiallyFilledBucketSize) {\r\n                    break;\r\n                }\r\n                bucketSplatIndex += currentPartiallyFilledBucketSize;\r\n                bucketIndex++;\r\n                partiallyFullBucketIndex++;\r\n            }\r\n        }\r\n        return bucketIndex;\r\n    }\r\n\r\n    getSplatCenter(globalSplatIndex, outCenter, transform) {\r\n        const sectionIndex = this.globalSplatIndexToSectionMap[globalSplatIndex];\r\n        const section = this.sections[sectionIndex];\r\n        const localSplatIndex = globalSplatIndex - section.splatCountOffset;\r\n\r\n        const srcSplatCentersBase = section.bytesPerSplat * localSplatIndex;\r\n        const dataView = new DataView(this.bufferData, section.dataBase + srcSplatCentersBase);\r\n\r\n        const x = dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel);\r\n        const y = dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel);\r\n        const z = dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel);\r\n        if (this.compressionLevel >= 1) {\r\n            const bucketIndex = this.getBucketIndex(section, localSplatIndex);\r\n            const bucketBase = bucketIndex * SplatBuffer.BucketStorageSizeFloats;\r\n            const sf = section.compressionScaleFactor;\r\n            const sr = section.compressionScaleRange;\r\n            outCenter.x = (x - sr) * sf + section.bucketArray[bucketBase];\r\n            outCenter.y = (y - sr) * sf + section.bucketArray[bucketBase + 1];\r\n            outCenter.z = (z - sr) * sf + section.bucketArray[bucketBase + 2];\r\n        } else {\r\n            outCenter.x = x;\r\n            outCenter.y = y;\r\n            outCenter.z = z;\r\n        }\r\n        if (transform) outCenter.applyMatrix4(transform);\r\n    }\r\n\r\n    getSplatScaleAndRotation = function() {\r\n\r\n        const scaleMatrix = new THREE.Matrix4();\r\n        const rotationMatrix = new THREE.Matrix4();\r\n        const tempMatrix = new THREE.Matrix4();\r\n        const tempPosition = new THREE.Vector3();\r\n        const scale = new THREE.Vector3();\r\n        const rotation = new THREE.Quaternion();\r\n\r\n        return function(index, outScale, outRotation, transform) {\r\n            const sectionIndex = this.globalSplatIndexToSectionMap[index];\r\n            const section = this.sections[sectionIndex];\r\n            const localSplatIndex = index - section.splatCountOffset;\r\n\r\n            const srcSplatScalesBase = section.bytesPerSplat * localSplatIndex +\r\n                                       SplatBuffer.CompressionLevels[this.compressionLevel].ScaleOffsetBytes;\r\n\r\n            const dataView = new DataView(this.bufferData, section.dataBase + srcSplatScalesBase);\r\n\r\n            scale.set(toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel), this.compressionLevel),\r\n                      toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel), this.compressionLevel),\r\n                      toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel), this.compressionLevel));\r\n\r\n            rotation.set(toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 4, this.compressionLevel), this.compressionLevel),\r\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 5, this.compressionLevel), this.compressionLevel),\r\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 6, this.compressionLevel), this.compressionLevel),\r\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 3, this.compressionLevel), this.compressionLevel));\r\n\r\n            if (transform) {\r\n                scaleMatrix.makeScale(scale.x, scale.y, scale.z);\r\n                rotationMatrix.makeRotationFromQuaternion(rotation);\r\n                tempMatrix.copy(scaleMatrix).multiply(rotationMatrix).multiply(transform);\r\n                tempMatrix.decompose(tempPosition, outRotation, outScale);\r\n            } else {\r\n                outScale.copy(scale);\r\n                outRotation.copy(rotation);\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    getSplatColor(globalSplatIndex, outColor) {\r\n        const sectionIndex = this.globalSplatIndexToSectionMap[globalSplatIndex];\r\n        const section = this.sections[sectionIndex];\r\n        const localSplatIndex = globalSplatIndex - section.splatCountOffset;\r\n\r\n        const srcSplatColorsBase = section.bytesPerSplat * localSplatIndex +\r\n                                   SplatBuffer.CompressionLevels[this.compressionLevel].ColorOffsetBytes;\r\n        const splatColorsArray = new Uint8Array(this.bufferData, section.dataBase + srcSplatColorsBase, 4);\r\n\r\n        outColor.set(splatColorsArray[0], splatColorsArray[1],\r\n                     splatColorsArray[2], splatColorsArray[3]);\r\n    }\r\n\r\n    fillSplatCenterArray(outCenterArray, transform, srcFrom, srcTo, destFrom) {\r\n        const splatCount = this.splatCount;\r\n\r\n        srcFrom = srcFrom || 0;\r\n        srcTo = srcTo || splatCount - 1;\r\n        if (destFrom === undefined) destFrom = srcFrom;\r\n\r\n        const center = new THREE.Vector3();\r\n        for (let i = srcFrom; i <= srcTo; i++) {\r\n            const sectionIndex = this.globalSplatIndexToSectionMap[i];\r\n            const section = this.sections[sectionIndex];\r\n            const localSplatIndex = i - section.splatCountOffset;\r\n            const centerDestBase = (i - srcFrom + destFrom) * SplatBuffer.CenterComponentCount;\r\n\r\n            const srcSplatCentersBase = section.bytesPerSplat * localSplatIndex;\r\n            const dataView = new DataView(this.bufferData, section.dataBase + srcSplatCentersBase);\r\n\r\n            const x = dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel);\r\n            const y = dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel);\r\n            const z = dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel);\r\n            if (this.compressionLevel >= 1) {\r\n                const bucketIndex = this.getBucketIndex(section, localSplatIndex);\r\n                const bucketBase = bucketIndex * SplatBuffer.BucketStorageSizeFloats;\r\n                const sf = section.compressionScaleFactor;\r\n                const sr = section.compressionScaleRange;\r\n                center.x = (x - sr) * sf + section.bucketArray[bucketBase];\r\n                center.y = (y - sr) * sf + section.bucketArray[bucketBase + 1];\r\n                center.z = (z - sr) * sf + section.bucketArray[bucketBase + 2];\r\n            } else {\r\n                center.x = x;\r\n                center.y = y;\r\n                center.z = z;\r\n            }\r\n            if (transform) {\r\n                center.applyMatrix4(transform);\r\n            }\r\n            outCenterArray[centerDestBase] = center.x;\r\n            outCenterArray[centerDestBase + 1] = center.y;\r\n            outCenterArray[centerDestBase + 2] = center.z;\r\n        }\r\n    }\r\n\r\n    static computeCovariance = function() {\r\n\r\n        const tempMatrix4 = new THREE.Matrix4();\r\n        const scaleMatrix = new THREE.Matrix3();\r\n        const rotationMatrix = new THREE.Matrix3();\r\n        const covarianceMatrix = new THREE.Matrix3();\r\n        const transformedCovariance = new THREE.Matrix3();\r\n        const transform3x3 = new THREE.Matrix3();\r\n        const transform3x3Transpose = new THREE.Matrix3();\r\n\r\n        return function(scale, rotation, transform, outCovariance, outOffset = 0, desiredOutputCompressionLevel) {\r\n\r\n            tempMatrix4.makeScale(scale.x, scale.y, scale.z);\r\n            scaleMatrix.setFromMatrix4(tempMatrix4);\r\n\r\n            tempMatrix4.makeRotationFromQuaternion(rotation);\r\n            rotationMatrix.setFromMatrix4(tempMatrix4);\r\n\r\n            covarianceMatrix.copy(rotationMatrix).multiply(scaleMatrix);\r\n            transformedCovariance.copy(covarianceMatrix).transpose().premultiply(covarianceMatrix);\r\n\r\n            if (transform) {\r\n                transform3x3.setFromMatrix4(transform);\r\n                transform3x3Transpose.copy(transform3x3).transpose();\r\n                transformedCovariance.multiply(transform3x3Transpose);\r\n                transformedCovariance.premultiply(transform3x3);\r\n            }\r\n\r\n            if (desiredOutputCompressionLevel >= 1) {\r\n                outCovariance[outOffset] = toHalfFloat(transformedCovariance.elements[0]);\r\n                outCovariance[outOffset + 1] = toHalfFloat(transformedCovariance.elements[3]);\r\n                outCovariance[outOffset + 2] = toHalfFloat(transformedCovariance.elements[6]);\r\n                outCovariance[outOffset + 3] = toHalfFloat(transformedCovariance.elements[4]);\r\n                outCovariance[outOffset + 4] = toHalfFloat(transformedCovariance.elements[7]);\r\n                outCovariance[outOffset + 5] = toHalfFloat(transformedCovariance.elements[8]);\r\n            } else {\r\n                outCovariance[outOffset] = transformedCovariance.elements[0];\r\n                outCovariance[outOffset + 1] = transformedCovariance.elements[3];\r\n                outCovariance[outOffset + 2] = transformedCovariance.elements[6];\r\n                outCovariance[outOffset + 3] = transformedCovariance.elements[4];\r\n                outCovariance[outOffset + 4] = transformedCovariance.elements[7];\r\n                outCovariance[outOffset + 5] = transformedCovariance.elements[8];\r\n            }\r\n\r\n        };\r\n\r\n    }();\r\n\r\n    fillSplatCovarianceArray(covarianceArray, transform, srcFrom, srcTo, destFrom, desiredOutputCompressionLevel) {\r\n        const splatCount = this.splatCount;\r\n\r\n        const scale = new THREE.Vector3();\r\n        const rotation = new THREE.Quaternion();\r\n\r\n        srcFrom = srcFrom || 0;\r\n        srcTo = srcTo || splatCount - 1;\r\n        if (destFrom === undefined) destFrom = srcFrom;\r\n\r\n        for (let i = srcFrom; i <= srcTo; i++) {\r\n            const sectionIndex = this.globalSplatIndexToSectionMap[i];\r\n            const section = this.sections[sectionIndex];\r\n            const localSplatIndex = i - section.splatCountOffset;\r\n\r\n            const covarianceDestBase = (i - srcFrom + destFrom) * SplatBuffer.CovarianceComponentCount;\r\n            const srcSplatScalesBase = section.bytesPerSplat * localSplatIndex +\r\n                                       SplatBuffer.CompressionLevels[this.compressionLevel].ScaleOffsetBytes;\r\n\r\n            const dataView = new DataView(this.bufferData, section.dataBase + srcSplatScalesBase);\r\n\r\n            scale.set(toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel), this.compressionLevel),\r\n                      toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel), this.compressionLevel),\r\n                      toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel), this.compressionLevel));\r\n            rotation.set(toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 4, this.compressionLevel), this.compressionLevel),\r\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 5, this.compressionLevel), this.compressionLevel),\r\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 6, this.compressionLevel), this.compressionLevel),\r\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 3, this.compressionLevel), this.compressionLevel));\r\n\r\n            SplatBuffer.computeCovariance(scale, rotation, transform, covarianceArray, covarianceDestBase, desiredOutputCompressionLevel);\r\n        }\r\n    }\r\n\r\n    fillSplatColorArray(outColorArray, minimumAlpha, srcFrom, srcTo, destFrom) {\r\n        const splatCount = this.splatCount;\r\n\r\n        srcFrom = srcFrom || 0;\r\n        srcTo = srcTo || splatCount - 1;\r\n        if (destFrom === undefined) destFrom = srcFrom;\r\n\r\n        for (let i = srcFrom; i <= srcTo; i++) {\r\n\r\n            const sectionIndex = this.globalSplatIndexToSectionMap[i];\r\n            const section = this.sections[sectionIndex];\r\n            const localSplatIndex = i - section.splatCountOffset;\r\n\r\n            const colorDestBase = (i - srcFrom + destFrom) * SplatBuffer.ColorComponentCount;\r\n            const srcSplatColorsBase = section.bytesPerSplat * localSplatIndex +\r\n                                       SplatBuffer.CompressionLevels[this.compressionLevel].ColorOffsetBytes;\r\n\r\n            const dataView = new Uint8Array(this.bufferData, section.dataBase + srcSplatColorsBase);\r\n\r\n            let alpha = dataView[3];\r\n            alpha = (alpha >= minimumAlpha) ? alpha : 0;\r\n\r\n            outColorArray[colorDestBase] = dataView[0];\r\n            outColorArray[colorDestBase + 1] = dataView[1];\r\n            outColorArray[colorDestBase + 2] = dataView[2];\r\n            outColorArray[colorDestBase + 3] = alpha;\r\n        }\r\n    }\r\n\r\n    fillSphericalHarmonicsArray = function() {\r\n\r\n        const sphericalHarmonicVectors = [];\r\n        for (let i = 0; i < 15; i++) {\r\n            sphericalHarmonicVectors[i] = new THREE.Vector3();\r\n        }\r\n\r\n        const tempMatrix3 = new THREE.Matrix3();\r\n\r\n        const sh11 = [];\r\n        const sh12 = [];\r\n        const sh13 = [];\r\n\r\n        const sh21 = [];\r\n        const sh22 = [];\r\n        const sh23 = [];\r\n        const sh24 = [];\r\n        const sh25 = [];\r\n\r\n        const shIn1 = [];\r\n        const shIn2 = [];\r\n        const shIn3 = [];\r\n        const shIn4 = [];\r\n        const shIn5 = [];\r\n\r\n        const shOut1 = [];\r\n        const shOut2 = [];\r\n        const shOut3 = [];\r\n        const shOut4 = [];\r\n        const shOut5 = [];\r\n\r\n        const noop = (v) => v;\r\n\r\n        const set3 = (array, val1, val2, val3) => {\r\n            array[0] = val1;\r\n            array[1] = val2;\r\n            array[2] = val3;\r\n        };\r\n\r\n        const set3FromArray = (array, srcDestView, stride, srcBase, compressionLevel) => {\r\n            array[0] = dataViewFloatForCompressionLevel(srcDestView, srcBase, compressionLevel, true);\r\n            array[1] = dataViewFloatForCompressionLevel(srcDestView, srcBase + stride, compressionLevel, true);\r\n            array[2] = dataViewFloatForCompressionLevel(srcDestView, srcBase + stride + stride, compressionLevel, true);\r\n        };\r\n\r\n        const copy3 = (srcArray, destArray) => {\r\n            destArray[0] = srcArray[0];\r\n            destArray[1] = srcArray[1];\r\n            destArray[2] = srcArray[2];\r\n        };\r\n\r\n        const setOutput3 = (srcArray, destArray, destBase, conversionFunc) => {\r\n            destArray[destBase] = conversionFunc(srcArray[0]);\r\n            destArray[destBase + 1] = conversionFunc(srcArray[1]);\r\n            destArray[destBase + 2] = conversionFunc(srcArray[2]);\r\n        };\r\n\r\n        const toUncompressedFloatArray3 = (src, dest, compressionLevel) => {\r\n            dest[0] = toUncompressedFloat(src[0], compressionLevel, true);\r\n            dest[1] = toUncompressedFloat(src[1], compressionLevel, true);\r\n            dest[2] = toUncompressedFloat(src[2], compressionLevel, true);\r\n            return dest;\r\n        };\r\n\r\n        return function(outSphericalHarmonicsArray, outSphericalHarmonicsDegree, transform,\r\n                        srcFrom, srcTo, destFrom, desiredOutputCompressionLevel) {\r\n            const splatCount = this.splatCount;\r\n\r\n            srcFrom = srcFrom || 0;\r\n            srcTo = srcTo || splatCount - 1;\r\n            if (destFrom === undefined) destFrom = srcFrom;\r\n\r\n            if (transform && outSphericalHarmonicsDegree >= 1) {\r\n                tempMatrix3.setFromMatrix4(transform);\r\n                set3(sh11, tempMatrix3.elements[4], -tempMatrix3.elements[7], tempMatrix3.elements[1]);\r\n                set3(sh12, -tempMatrix3.elements[5], tempMatrix3.elements[8], -tempMatrix3.elements[2]);\r\n                set3(sh13, tempMatrix3.elements[3], -tempMatrix3.elements[6], tempMatrix3.elements[0]);\r\n            }\r\n\r\n            for (let i = srcFrom; i <= srcTo; i++) {\r\n\r\n                const sectionIndex = this.globalSplatIndexToSectionMap[i];\r\n                const section = this.sections[sectionIndex];\r\n                outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, section.sphericalHarmonicsDegree);\r\n                const outSphericalHarmonicsComponentsCount = getSphericalHarmonicsComponentCountForDegree(outSphericalHarmonicsDegree);\r\n\r\n                const localSplatIndex = i - section.splatCountOffset;\r\n\r\n                const srcSplatSHBase = section.bytesPerSplat * localSplatIndex +\r\n                                       SplatBuffer.CompressionLevels[this.compressionLevel].SphericalHarmonicsOffsetBytes;\r\n\r\n                const dataView = new DataView(this.bufferData, section.dataBase + srcSplatSHBase);\r\n\r\n                const shDestBase = (i - srcFrom + destFrom) * outSphericalHarmonicsComponentsCount;\r\n\r\n                let compressionLevelForOutputConversion = transform ? 0 : this.compressionLevel;\r\n                let outputConversionFunc = noop;\r\n                if (compressionLevelForOutputConversion !== desiredOutputCompressionLevel) {\r\n                    if (compressionLevelForOutputConversion === 1) {\r\n                        if (desiredOutputCompressionLevel === 0) outputConversionFunc = fromHalfFloat;\r\n                        else if (desiredOutputCompressionLevel == 2) outputConversionFunc = fromHalfFloatToUint8;\r\n                    } else if (compressionLevelForOutputConversion === 0) {\r\n                        if (desiredOutputCompressionLevel === 1) outputConversionFunc = toHalfFloat;\r\n                        else if (desiredOutputCompressionLevel == 2) outputConversionFunc = toUint8;\r\n                    }\r\n                }\r\n\r\n                if (outSphericalHarmonicsDegree >= 1) {\r\n\r\n                    set3FromArray(shIn1, dataView, 3, 0, this.compressionLevel);\r\n                    set3FromArray(shIn2, dataView, 3, 1, this.compressionLevel);\r\n                    set3FromArray(shIn3, dataView, 3, 2, this.compressionLevel);\r\n\r\n                    if (transform) {\r\n                        toUncompressedFloatArray3(shIn1, shIn1, this.compressionLevel);\r\n                        toUncompressedFloatArray3(shIn2, shIn2, this.compressionLevel);\r\n                        toUncompressedFloatArray3(shIn3, shIn3, this.compressionLevel);\r\n                        SplatBuffer.rotateSphericalHarmonics3(shIn1, shIn2, shIn3, sh11, sh12, sh13, shOut1, shOut2, shOut3);\r\n                    } else {\r\n                        copy3(shIn1, shOut1);\r\n                        copy3(shIn2, shOut2);\r\n                        copy3(shIn3, shOut3);\r\n                    }\r\n\r\n                    setOutput3(shOut1, outSphericalHarmonicsArray, shDestBase, outputConversionFunc);\r\n                    setOutput3(shOut2, outSphericalHarmonicsArray, shDestBase + 3, outputConversionFunc);\r\n                    setOutput3(shOut3, outSphericalHarmonicsArray, shDestBase + 6, outputConversionFunc);\r\n\r\n                    if (outSphericalHarmonicsDegree >= 2) {\r\n\r\n                        set3FromArray(shIn1, dataView, 5, 9, this.compressionLevel);\r\n                        set3FromArray(shIn2, dataView, 5, 10, this.compressionLevel);\r\n                        set3FromArray(shIn3, dataView, 5, 11, this.compressionLevel);\r\n                        set3FromArray(shIn4, dataView, 5, 12, this.compressionLevel);\r\n                        set3FromArray(shIn5, dataView, 5, 13, this.compressionLevel);\r\n\r\n                        if (transform) {\r\n                            toUncompressedFloatArray3(shIn1, shIn1, this.compressionLevel);\r\n                            toUncompressedFloatArray3(shIn2, shIn2, this.compressionLevel);\r\n                            toUncompressedFloatArray3(shIn3, shIn3, this.compressionLevel);\r\n                            toUncompressedFloatArray3(shIn4, shIn4, this.compressionLevel);\r\n                            toUncompressedFloatArray3(shIn5, shIn5, this.compressionLevel);\r\n                            SplatBuffer.rotateSphericalHarmonics5(shIn1, shIn2, shIn3, shIn4, shIn5,\r\n                                                                  sh11, sh12, sh13, sh21, sh22, sh23, sh24, sh25,\r\n                                                                  shOut1, shOut2, shOut3, shOut4, shOut5);\r\n                        } else {\r\n                            copy3(shIn1, shOut1);\r\n                            copy3(shIn2, shOut2);\r\n                            copy3(shIn3, shOut3);\r\n                            copy3(shIn4, shOut4);\r\n                            copy3(shIn5, shOut5);\r\n                        }\r\n\r\n                        setOutput3(shOut1, outSphericalHarmonicsArray, shDestBase + 9, outputConversionFunc);\r\n                        setOutput3(shOut2, outSphericalHarmonicsArray, shDestBase + 12, outputConversionFunc);\r\n                        setOutput3(shOut3, outSphericalHarmonicsArray, shDestBase + 15, outputConversionFunc);\r\n                        setOutput3(shOut4, outSphericalHarmonicsArray, shDestBase + 18, outputConversionFunc);\r\n                        setOutput3(shOut5, outSphericalHarmonicsArray, shDestBase + 21, outputConversionFunc);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    static dot3 = (v1, v2, v3, transformRow, outArray) => {\r\n        outArray[0] = outArray[1] = outArray[2] = 0;\r\n        const t0 = transformRow[0];\r\n        const t1 = transformRow[1];\r\n        const t2 = transformRow[2];\r\n        SplatBuffer.addInto3(v1[0] * t0, v1[1] * t0, v1[2] * t0, outArray);\r\n        SplatBuffer.addInto3(v2[0] * t1, v2[1] * t1, v2[2] * t1, outArray);\r\n        SplatBuffer.addInto3(v3[0] * t2, v3[1] * t2, v3[2] * t2, outArray);\r\n    };\r\n\r\n    static addInto3 = (val1, val2, val3, destArray) => {\r\n        destArray[0] = destArray[0] + val1;\r\n        destArray[1] = destArray[1] + val2;\r\n        destArray[2] = destArray[2] + val3;\r\n    };\r\n\r\n    static dot5 = (v1, v2, v3, v4, v5, transformRow, outArray) => {\r\n        outArray[0] = outArray[1] = outArray[2] = 0;\r\n        const t0 = transformRow[0];\r\n        const t1 = transformRow[1];\r\n        const t2 = transformRow[2];\r\n        const t3 = transformRow[3];\r\n        const t4 = transformRow[4];\r\n        SplatBuffer.addInto3(v1[0] * t0, v1[1] * t0, v1[2] * t0, outArray);\r\n        SplatBuffer.addInto3(v2[0] * t1, v2[1] * t1, v2[2] * t1, outArray);\r\n        SplatBuffer.addInto3(v3[0] * t2, v3[1] * t2, v3[2] * t2, outArray);\r\n        SplatBuffer.addInto3(v4[0] * t3, v4[1] * t3, v4[2] * t3, outArray);\r\n        SplatBuffer.addInto3(v5[0] * t4, v5[1] * t4, v5[2] * t4, outArray);\r\n    };\r\n\r\n    static rotateSphericalHarmonics3 = (in1, in2, in3, tsh11, tsh12, tsh13, out1, out2, out3) => {\r\n        SplatBuffer.dot3(in1, in2, in3, tsh11, out1);\r\n        SplatBuffer.dot3(in1, in2, in3, tsh12, out2);\r\n        SplatBuffer.dot3(in1, in2, in3, tsh13, out3);\r\n    };\r\n\r\n    static rotateSphericalHarmonics5 = (in1, in2, in3, in4, in5, tsh11, tsh12, tsh13,\r\n                                        tsh21, tsh22, tsh23, tsh24, tsh25, out1, out2, out3, out4, out5) => {\r\n\r\n        const kSqrt0104 = Math.sqrt(1.0 / 4.0);\r\n        const kSqrt0304 = Math.sqrt(3.0 / 4.0);\r\n        const kSqrt0103 = Math.sqrt(1.0 / 3.0);\r\n        const kSqrt0403 = Math.sqrt(4.0 / 3.0);\r\n        const kSqrt0112 = Math.sqrt(1.0 / 12.0);\r\n\r\n        tsh21[0] = kSqrt0104 * ((tsh13[2] * tsh11[0] + tsh13[0] * tsh11[2]) + (tsh11[2] * tsh13[0] + tsh11[0] * tsh13[2]));\r\n        tsh21[1] = (tsh13[1] * tsh11[0] + tsh11[1] * tsh13[0]);\r\n        tsh21[2] = kSqrt0304 * (tsh13[1] * tsh11[1] + tsh11[1] * tsh13[1]);\r\n        tsh21[3] = (tsh13[1] * tsh11[2] + tsh11[1] * tsh13[2]);\r\n        tsh21[4] = kSqrt0104 * ((tsh13[2] * tsh11[2] - tsh13[0] * tsh11[0]) + (tsh11[2] * tsh13[2] - tsh11[0] * tsh13[0]));\r\n        SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh21, out1);\r\n\r\n        tsh22[0] = kSqrt0104 * ((tsh12[2] * tsh11[0] + tsh12[0] * tsh11[2]) + (tsh11[2] * tsh12[0] + tsh11[0] * tsh12[2]));\r\n        tsh22[1] = tsh12[1] * tsh11[0] + tsh11[1] * tsh12[0];\r\n        tsh22[2] = kSqrt0304 * (tsh12[1] * tsh11[1] + tsh11[1] * tsh12[1]);\r\n        tsh22[3] = tsh12[1] * tsh11[2] + tsh11[1] * tsh12[2];\r\n        tsh22[4] = kSqrt0104 * ((tsh12[2] * tsh11[2] - tsh12[0] * tsh11[0]) + (tsh11[2] * tsh12[2] - tsh11[0] * tsh12[0]));\r\n        SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh22, out2);\r\n\r\n        tsh23[0] = kSqrt0103 * (tsh12[2] * tsh12[0] + tsh12[0] * tsh12[2]) + -kSqrt0112 *\r\n                   ((tsh13[2] * tsh13[0] + tsh13[0] * tsh13[2]) + (tsh11[2] * tsh11[0] + tsh11[0] * tsh11[2]));\r\n        tsh23[1] = kSqrt0403 * tsh12[1] * tsh12[0] + -kSqrt0103 * (tsh13[1] * tsh13[0] + tsh11[1] * tsh11[0]);\r\n        tsh23[2] = tsh12[1] * tsh12[1] + -kSqrt0104 * (tsh13[1] * tsh13[1] + tsh11[1] * tsh11[1]);\r\n        tsh23[3] = kSqrt0403 * tsh12[1] * tsh12[2] + -kSqrt0103 * (tsh13[1] * tsh13[2] + tsh11[1] * tsh11[2]);\r\n        tsh23[4] = kSqrt0103 * (tsh12[2] * tsh12[2] - tsh12[0] * tsh12[0]) + -kSqrt0112 *\r\n                   ((tsh13[2] * tsh13[2] - tsh13[0] * tsh13[0]) + (tsh11[2] * tsh11[2] - tsh11[0] * tsh11[0]));\r\n        SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh23, out3);\r\n\r\n        tsh24[0] = kSqrt0104 * ((tsh12[2] * tsh13[0] + tsh12[0] * tsh13[2]) + (tsh13[2] * tsh12[0] + tsh13[0] * tsh12[2]));\r\n        tsh24[1] = tsh12[1] * tsh13[0] + tsh13[1] * tsh12[0];\r\n        tsh24[2] = kSqrt0304 * (tsh12[1] * tsh13[1] + tsh13[1] * tsh12[1]);\r\n        tsh24[3] = tsh12[1] * tsh13[2] + tsh13[1] * tsh12[2];\r\n        tsh24[4] = kSqrt0104 * ((tsh12[2] * tsh13[2] - tsh12[0] * tsh13[0]) + (tsh13[2] * tsh12[2] - tsh13[0] * tsh12[0]));\r\n        SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh24, out4);\r\n\r\n        tsh25[0] = kSqrt0104 * ((tsh13[2] * tsh13[0] + tsh13[0] * tsh13[2]) - (tsh11[2] * tsh11[0] + tsh11[0] * tsh11[2]));\r\n        tsh25[1] = (tsh13[1] * tsh13[0] - tsh11[1] * tsh11[0]);\r\n        tsh25[2] = kSqrt0304 * (tsh13[1] * tsh13[1] - tsh11[1] * tsh11[1]);\r\n        tsh25[3] = (tsh13[1] * tsh13[2] - tsh11[1] * tsh11[2]);\r\n        tsh25[4] = kSqrt0104 * ((tsh13[2] * tsh13[2] - tsh13[0] * tsh13[0]) - (tsh11[2] * tsh11[2] - tsh11[0] * tsh11[0]));\r\n        SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh25, out5);\r\n    };\r\n\r\n    static parseHeader(buffer) {\r\n        const headerArrayUint8 = new Uint8Array(buffer, 0, SplatBuffer.HeaderSizeBytes);\r\n        const headerArrayUint16 = new Uint16Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 2);\r\n        const headerArrayUint32 = new Uint32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\r\n        const headerArrayFloat32 = new Float32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\r\n        const versionMajor = headerArrayUint8[0];\r\n        const versionMinor = headerArrayUint8[1];\r\n        const maxSectionCount = headerArrayUint32[1];\r\n        const sectionCount = headerArrayUint32[2];\r\n        const maxSplatCount = headerArrayUint32[3];\r\n        const splatCount = headerArrayUint32[4];\r\n        const compressionLevel = headerArrayUint16[10];\r\n        const sceneCenter = new THREE.Vector3(headerArrayFloat32[6], headerArrayFloat32[7], headerArrayFloat32[8]);\r\n\r\n        return {\r\n            versionMajor,\r\n            versionMinor,\r\n            maxSectionCount,\r\n            sectionCount,\r\n            maxSplatCount,\r\n            splatCount,\r\n            compressionLevel,\r\n            sceneCenter\r\n        };\r\n    }\r\n\r\n    static writeHeaderCountsToBuffer(sectionCount, splatCount, buffer) {\r\n        const headerArrayUint32 = new Uint32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\r\n        headerArrayUint32[2] = sectionCount;\r\n        headerArrayUint32[4] = splatCount;\r\n    }\r\n\r\n    static writeHeaderToBuffer(header, buffer) {\r\n        const headerArrayUint8 = new Uint8Array(buffer, 0, SplatBuffer.HeaderSizeBytes);\r\n        const headerArrayUint16 = new Uint16Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 2);\r\n        const headerArrayUint32 = new Uint32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\r\n        const headerArrayFloat32 = new Float32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\r\n        headerArrayUint8[0] = header.versionMajor;\r\n        headerArrayUint8[1] = header.versionMinor;\r\n        headerArrayUint8[2] = 0; // unused for now\r\n        headerArrayUint8[3] = 0; // unused for now\r\n        headerArrayUint32[1] = header.maxSectionCount;\r\n        headerArrayUint32[2] = header.sectionCount;\r\n        headerArrayUint32[3] = header.maxSplatCount;\r\n        headerArrayUint32[4] = header.splatCount;\r\n        headerArrayUint16[10] = header.compressionLevel;\r\n        headerArrayFloat32[6] = header.sceneCenter.x;\r\n        headerArrayFloat32[7] = header.sceneCenter.y;\r\n        headerArrayFloat32[8] = header.sceneCenter.z;\r\n    }\r\n\r\n    static parseSectionHeaders(header, buffer, offset = 0, secLoadedCountsToMax) {\r\n        const compressionLevel = header.compressionLevel;\r\n\r\n        const maxSectionCount = header.maxSectionCount;\r\n        const sectionHeaderArrayUint16 = new Uint16Array(buffer, offset, maxSectionCount * SplatBuffer.SectionHeaderSizeBytes / 2);\r\n        const sectionHeaderArrayUint32 = new Uint32Array(buffer, offset, maxSectionCount * SplatBuffer.SectionHeaderSizeBytes / 4);\r\n        const sectionHeaderArrayFloat32 = new Float32Array(buffer, offset, maxSectionCount * SplatBuffer.SectionHeaderSizeBytes / 4);\r\n\r\n        const sectionHeaders = [];\r\n        let sectionHeaderBase = 0;\r\n        let sectionHeaderBaseUint16 = sectionHeaderBase / 2;\r\n        let sectionHeaderBaseUint32 = sectionHeaderBase / 4;\r\n        let sectionBase = SplatBuffer.HeaderSizeBytes + header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes;\r\n        let splatCountOffset = 0;\r\n        for (let i = 0; i < maxSectionCount; i++) {\r\n            const maxSplatCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 1];\r\n            const bucketSize = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 2];\r\n            const bucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 3];\r\n            const bucketBlockSize = sectionHeaderArrayFloat32[sectionHeaderBaseUint32 + 4];\r\n            const halfBucketBlockSize = bucketBlockSize / 2.0;\r\n            const bucketStorageSizeBytes = sectionHeaderArrayUint16[sectionHeaderBaseUint16 + 10];\r\n            const compressionScaleRange = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 6] ||\r\n                                          SplatBuffer.CompressionLevels[compressionLevel].ScaleRange;\r\n            const fullBucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 8];\r\n            const partiallyFilledBucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 9];\r\n            const bucketsMetaDataSizeBytes = partiallyFilledBucketCount * 4;\r\n            const bucketsStorageSizeBytes = bucketStorageSizeBytes * bucketCount + bucketsMetaDataSizeBytes;\r\n\r\n            const sphericalHarmonicsDegree = sectionHeaderArrayUint16[sectionHeaderBaseUint16 + 20];\r\n            const { bytesPerSplat } = SplatBuffer.calculateComponentStorage(compressionLevel, sphericalHarmonicsDegree);\r\n\r\n            const splatDataStorageSizeBytes = bytesPerSplat * maxSplatCount;\r\n            const storageSizeBytes = splatDataStorageSizeBytes + bucketsStorageSizeBytes;\r\n            const sectionHeader = {\r\n                bytesPerSplat: bytesPerSplat,\r\n                splatCountOffset: splatCountOffset,\r\n                splatCount: secLoadedCountsToMax ? maxSplatCount : 0,\r\n                maxSplatCount: maxSplatCount,\r\n                bucketSize: bucketSize,\r\n                bucketCount: bucketCount,\r\n                bucketBlockSize: bucketBlockSize,\r\n                halfBucketBlockSize: halfBucketBlockSize,\r\n                bucketStorageSizeBytes: bucketStorageSizeBytes,\r\n                bucketsStorageSizeBytes: bucketsStorageSizeBytes,\r\n                splatDataStorageSizeBytes: splatDataStorageSizeBytes,\r\n                storageSizeBytes: storageSizeBytes,\r\n                compressionScaleRange: compressionScaleRange,\r\n                compressionScaleFactor: halfBucketBlockSize / compressionScaleRange,\r\n                base: sectionBase,\r\n                bucketsBase: sectionBase + bucketsMetaDataSizeBytes,\r\n                dataBase: sectionBase + bucketsStorageSizeBytes,\r\n                fullBucketCount: fullBucketCount,\r\n                partiallyFilledBucketCount: partiallyFilledBucketCount,\r\n                sphericalHarmonicsDegree: sphericalHarmonicsDegree\r\n            };\r\n            sectionHeaders[i] = sectionHeader;\r\n            sectionBase += storageSizeBytes;\r\n            sectionHeaderBase += SplatBuffer.SectionHeaderSizeBytes;\r\n            sectionHeaderBaseUint16 = sectionHeaderBase / 2;\r\n            sectionHeaderBaseUint32 = sectionHeaderBase / 4;\r\n            splatCountOffset += maxSplatCount;\r\n        }\r\n\r\n        return sectionHeaders;\r\n    }\r\n\r\n\r\n    static writeSectionHeaderToBuffer(sectionHeader, compressionLevel, buffer, offset = 0) {\r\n        const sectionHeadeArrayUint16 = new Uint16Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 2);\r\n        const sectionHeadeArrayUint32 = new Uint32Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 4);\r\n        const sectionHeadeArrayFloat32 = new Float32Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 4);\r\n\r\n        sectionHeadeArrayUint32[0] = sectionHeader.splatCount;\r\n        sectionHeadeArrayUint32[1] = sectionHeader.maxSplatCount;\r\n        sectionHeadeArrayUint32[2] = compressionLevel >= 1 ? sectionHeader.bucketSize : 0;\r\n        sectionHeadeArrayUint32[3] = compressionLevel >= 1 ? sectionHeader.bucketCount : 0;\r\n        sectionHeadeArrayFloat32[4] = compressionLevel >= 1 ? sectionHeader.bucketBlockSize : 0.0;\r\n        sectionHeadeArrayUint16[10] = compressionLevel >= 1 ? SplatBuffer.BucketStorageSizeBytes : 0;\r\n        sectionHeadeArrayUint32[6] = compressionLevel >= 1 ? sectionHeader.compressionScaleRange : 0;\r\n        sectionHeadeArrayUint32[7] = sectionHeader.storageSizeBytes;\r\n        sectionHeadeArrayUint32[8] = compressionLevel >= 1 ? sectionHeader.fullBucketCount : 0;\r\n        sectionHeadeArrayUint32[9] = compressionLevel >= 1 ? sectionHeader.partiallyFilledBucketCount : 0;\r\n        sectionHeadeArrayUint16[20] = sectionHeader.sphericalHarmonicsDegree;\r\n\r\n    }\r\n\r\n    static writeSectionHeaderSplatCountToBuffer(splatCount, buffer, offset = 0) {\r\n        const sectionHeadeArrayUint32 = new Uint32Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 4);\r\n        sectionHeadeArrayUint32[0] = splatCount;\r\n    }\r\n\r\n    constructFromBuffer(bufferData, secLoadedCountsToMax) {\r\n        this.bufferData = bufferData;\r\n\r\n        this.globalSplatIndexToLocalSplatIndexMap = [];\r\n        this.globalSplatIndexToSectionMap = [];\r\n\r\n        const header = SplatBuffer.parseHeader(this.bufferData);\r\n        this.versionMajor = header.versionMajor;\r\n        this.versionMinor = header.versionMinor;\r\n        this.maxSectionCount = header.maxSectionCount;\r\n        this.sectionCount = secLoadedCountsToMax ? header.maxSectionCount : 0;\r\n        this.maxSplatCount = header.maxSplatCount;\r\n        this.splatCount = secLoadedCountsToMax ? header.maxSplatCount : 0;\r\n        this.compressionLevel = header.compressionLevel;\r\n        this.sceneCenter = new THREE.Vector3().copy(header.sceneCenter);\r\n\r\n        this.sections = SplatBuffer.parseSectionHeaders(header, this.bufferData, SplatBuffer.HeaderSizeBytes, secLoadedCountsToMax);\r\n\r\n        this.linkBufferArrays();\r\n        this.buildMaps();\r\n    }\r\n\r\n    static calculateComponentStorage(compressionLevel, sphericalHarmonicsDegree) {\r\n        const bytesPerCenter = SplatBuffer.CompressionLevels[compressionLevel].BytesPerCenter;\r\n        const bytesPerScale = SplatBuffer.CompressionLevels[compressionLevel].BytesPerScale;\r\n        const bytesPerRotation = SplatBuffer.CompressionLevels[compressionLevel].BytesPerRotation;\r\n        const bytesPerColor = SplatBuffer.CompressionLevels[compressionLevel].BytesPerColor;\r\n        const sphericalHarmonicsComponentsPerSplat = getSphericalHarmonicsComponentCountForDegree(sphericalHarmonicsDegree);\r\n        const sphericalHarmonicsBytesPerSplat = SplatBuffer.CompressionLevels[compressionLevel].BytesPerSphericalHarmonicsComponent *\r\n                                                sphericalHarmonicsComponentsPerSplat;\r\n        const bytesPerSplat = bytesPerCenter + bytesPerScale + bytesPerRotation +\r\n                              bytesPerColor + sphericalHarmonicsBytesPerSplat;\r\n        return {\r\n            bytesPerCenter,\r\n            bytesPerScale,\r\n            bytesPerRotation,\r\n            bytesPerColor,\r\n            sphericalHarmonicsComponentsPerSplat,\r\n            sphericalHarmonicsBytesPerSplat,\r\n            bytesPerSplat\r\n        };\r\n    }\r\n\r\n    linkBufferArrays() {\r\n        for (let i = 0; i < this.maxSectionCount; i++) {\r\n            const section = this.sections[i];\r\n            section.bucketArray = new Float32Array(this.bufferData, section.bucketsBase,\r\n                                                   section.bucketCount * SplatBuffer.BucketStorageSizeFloats);\r\n            if (section.partiallyFilledBucketCount > 0) {\r\n                section.partiallyFilledBucketLengths = new Uint32Array(this.bufferData, section.base,\r\n                                                                       section.partiallyFilledBucketCount);\r\n            }\r\n        }\r\n    }\r\n\r\n    buildMaps() {\r\n        let cumulativeSplatCount = 0;\r\n        for (let i = 0; i < this.maxSectionCount; i++) {\r\n            const section = this.sections[i];\r\n            for (let j = 0; j < section.maxSplatCount; j++) {\r\n                const globalSplatIndex = cumulativeSplatCount + j;\r\n                this.globalSplatIndexToLocalSplatIndexMap[globalSplatIndex] = j;\r\n                this.globalSplatIndexToSectionMap[globalSplatIndex] = i;\r\n            }\r\n            cumulativeSplatCount += section.maxSplatCount;\r\n        }\r\n    }\r\n\r\n    updateLoadedCounts(newSectionCount, newSplatCount) {\r\n        SplatBuffer.writeHeaderCountsToBuffer(newSectionCount, newSplatCount, this.bufferData);\r\n        this.sectionCount = newSectionCount;\r\n        this.splatCount = newSplatCount;\r\n    }\r\n\r\n    updateSectionLoadedCounts(sectionIndex, newSplatCount) {\r\n        const sectionHeaderOffset = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * sectionIndex;\r\n        SplatBuffer.writeSectionHeaderSplatCountToBuffer(newSplatCount, this.bufferData, sectionHeaderOffset);\r\n        this.sections[sectionIndex].splatCount = newSplatCount;\r\n    }\r\n\r\n    static writeSplatDataToSectionBuffer = function() {\r\n\r\n        const tempCenterBuffer = new ArrayBuffer(12);\r\n        const tempScaleBuffer = new ArrayBuffer(12);\r\n        const tempRotationBuffer = new ArrayBuffer(16);\r\n        const tempColorBuffer = new ArrayBuffer(4);\r\n        const tempSHBuffer = new ArrayBuffer(256);\r\n        const tempRot = new THREE.Quaternion();\r\n        const tempScale = new THREE.Vector3();\r\n        const bucketCenterDelta = new THREE.Vector3();\r\n\r\n        const {\r\n            X: OFFSET_X, Y: OFFSET_Y, Z: OFFSET_Z,\r\n            SCALE0: OFFSET_SCALE0, SCALE1: OFFSET_SCALE1, SCALE2: OFFSET_SCALE2,\r\n            ROTATION0: OFFSET_ROT0, ROTATION1: OFFSET_ROT1, ROTATION2: OFFSET_ROT2, ROTATION3: OFFSET_ROT3,\r\n            FDC0: OFFSET_FDC0, FDC1: OFFSET_FDC1, FDC2: OFFSET_FDC2, OPACITY: OFFSET_OPACITY,\r\n            FRC0: OFFSET_FRC0, FRC9: OFFSET_FRC9,\r\n        } = UncompressedSplatArray.OFFSET;\r\n\r\n        const compressPositionOffset = (v, compressionScaleFactor, compressionScaleRange) => {\r\n            const doubleCompressionScaleRange = compressionScaleRange * 2 + 1;\r\n            v = Math.round(v * compressionScaleFactor) + compressionScaleRange;\r\n            return clamp(v, 0, doubleCompressionScaleRange);\r\n        };\r\n\r\n        return function(targetSplat, sectionBuffer, bufferOffset, compressionLevel, sphericalHarmonicsDegree,\r\n                        bucketCenter, compressionScaleFactor, compressionScaleRange) {\r\n\r\n            const sphericalHarmonicsComponentsPerSplat = getSphericalHarmonicsComponentCountForDegree(sphericalHarmonicsDegree);\r\n            const bytesPerCenter = SplatBuffer.CompressionLevels[compressionLevel].BytesPerCenter;\r\n            const bytesPerScale = SplatBuffer.CompressionLevels[compressionLevel].BytesPerScale;\r\n            const bytesPerRotation = SplatBuffer.CompressionLevels[compressionLevel].BytesPerRotation;\r\n            const bytesPerColor = SplatBuffer.CompressionLevels[compressionLevel].BytesPerColor;\r\n\r\n            const centerBase = bufferOffset;\r\n            const scaleBase = centerBase + bytesPerCenter;\r\n            const rotationBase = scaleBase + bytesPerScale;\r\n            const colorBase = rotationBase + bytesPerRotation;\r\n            const sphericalHarmonicsBase = colorBase + bytesPerColor;\r\n\r\n            if (targetSplat[OFFSET_ROT0] !== undefined) {\r\n                tempRot.set(targetSplat[OFFSET_ROT0], targetSplat[OFFSET_ROT1], targetSplat[OFFSET_ROT2], targetSplat[OFFSET_ROT3]);\r\n                tempRot.normalize();\r\n            } else {\r\n                tempRot.set(1.0, 0.0, 0.0, 0.0);\r\n            }\r\n\r\n            if (targetSplat[OFFSET_SCALE0] !== undefined) {\r\n                tempScale.set(targetSplat[OFFSET_SCALE0], targetSplat[OFFSET_SCALE1], targetSplat[OFFSET_SCALE2]);\r\n            } else {\r\n                tempScale.set(0.01, 0.01, 0.01);\r\n            }\r\n\r\n            if (compressionLevel === 0) {\r\n                const center = new Float32Array(sectionBuffer, centerBase, SplatBuffer.CenterComponentCount);\r\n                const rot = new Float32Array(sectionBuffer, rotationBase, SplatBuffer.RotationComponentCount);\r\n                const scale = new Float32Array(sectionBuffer, scaleBase, SplatBuffer.ScaleComponentCount);\r\n\r\n                rot.set([tempRot.x, tempRot.y, tempRot.z, tempRot.w]);\r\n                scale.set([tempScale.x, tempScale.y, tempScale.z]);\r\n                center.set([targetSplat[OFFSET_X], targetSplat[OFFSET_Y], targetSplat[OFFSET_Z]]);\r\n\r\n                if (sphericalHarmonicsDegree > 0) {\r\n                    const shOut = new Float32Array(sectionBuffer, sphericalHarmonicsBase, sphericalHarmonicsComponentsPerSplat);\r\n                    if (sphericalHarmonicsDegree >= 1) {\r\n                            for (let s = 0; s < 9; s++) shOut[s] = targetSplat[OFFSET_FRC0 + s] || 0;\r\n                            if (sphericalHarmonicsDegree >= 2) {\r\n                                for (let s = 0; s < 15; s++) shOut[s + 9] = targetSplat[OFFSET_FRC9 + s] || 0;\r\n                            }\r\n                    }\r\n                }\r\n            } else {\r\n                const center = new Uint16Array(tempCenterBuffer, 0, SplatBuffer.CenterComponentCount);\r\n                const rot = new Uint16Array(tempRotationBuffer, 0, SplatBuffer.RotationComponentCount);\r\n                const scale = new Uint16Array(tempScaleBuffer, 0, SplatBuffer.ScaleComponentCount);\r\n\r\n                rot.set([toHalfFloat(tempRot.x), toHalfFloat(tempRot.y), toHalfFloat(tempRot.z), toHalfFloat(tempRot.w)]);\r\n                scale.set([toHalfFloat(tempScale.x), toHalfFloat(tempScale.y), toHalfFloat(tempScale.z)]);\r\n\r\n                bucketCenterDelta.set(targetSplat[OFFSET_X], targetSplat[OFFSET_Y], targetSplat[OFFSET_Z]).sub(bucketCenter);\r\n                bucketCenterDelta.x = compressPositionOffset(bucketCenterDelta.x, compressionScaleFactor, compressionScaleRange);\r\n                bucketCenterDelta.y = compressPositionOffset(bucketCenterDelta.y, compressionScaleFactor, compressionScaleRange);\r\n                bucketCenterDelta.z = compressPositionOffset(bucketCenterDelta.z, compressionScaleFactor, compressionScaleRange);\r\n                center.set([bucketCenterDelta.x, bucketCenterDelta.y, bucketCenterDelta.z]);\r\n\r\n                if (sphericalHarmonicsDegree > 0) {\r\n                    const SHArrayType = compressionLevel === 1 ? Uint16Array : Uint8Array;\r\n                    const bytesPerSHComponent = compressionLevel === 1 ? 2 : 1;\r\n                    const shOut = new SHArrayType(tempSHBuffer, 0, sphericalHarmonicsComponentsPerSplat);\r\n                    if (sphericalHarmonicsDegree >= 1) {\r\n                        for (let s = 0; s < 9; s++) {\r\n                            const srcVal = targetSplat[OFFSET_FRC0 + s] || 0;\r\n                            shOut[s] = compressionLevel === 1 ? toHalfFloat(srcVal) : toUint8(srcVal);\r\n                        }\r\n                        const degree1ByteCount = 9 * bytesPerSHComponent;\r\n                        copyBetweenBuffers(shOut.buffer, 0, sectionBuffer, sphericalHarmonicsBase, degree1ByteCount);\r\n                        if (sphericalHarmonicsDegree >= 2) {\r\n                            for (let s = 0; s < 15; s++) {\r\n                                const srcVal = targetSplat[OFFSET_FRC9 + s] || 0;\r\n                                shOut[s + 9] = compressionLevel === 1 ? toHalfFloat(srcVal) : toUint8(srcVal);\r\n                            }\r\n                            copyBetweenBuffers(shOut.buffer, degree1ByteCount, sectionBuffer,\r\n                                               sphericalHarmonicsBase + degree1ByteCount, 15 * bytesPerSHComponent);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                copyBetweenBuffers(center.buffer, 0, sectionBuffer, centerBase, 6);\r\n                copyBetweenBuffers(scale.buffer, 0, sectionBuffer, scaleBase, 6);\r\n                copyBetweenBuffers(rot.buffer, 0, sectionBuffer, rotationBase, 8);\r\n            }\r\n\r\n            const rgba = new Uint8ClampedArray(tempColorBuffer, 0, 4);\r\n            rgba.set([targetSplat[OFFSET_FDC0] || 0, targetSplat[OFFSET_FDC1] || 0, targetSplat[OFFSET_FDC2] || 0]);\r\n            rgba[3] = targetSplat[OFFSET_OPACITY] || 0;\r\n\r\n            copyBetweenBuffers(rgba.buffer, 0, sectionBuffer, colorBase, 4);\r\n        };\r\n\r\n    }();\r\n\r\n    static generateFromUncompressedSplatArrays(splatArrays, minimumAlpha, compressionLevel,\r\n                                               sceneCenter, blockSize, bucketSize, options = []) {\r\n\r\n        let shDegree = 0;\r\n        for (let sa = 0; sa < splatArrays.length; sa ++) {\r\n            const splatArray = splatArrays[sa];\r\n            shDegree = Math.max(splatArray.sphericalHarmonicsDegree, shDegree);\r\n        }\r\n\r\n        const { bytesPerSplat } = SplatBuffer.calculateComponentStorage(compressionLevel, shDegree);\r\n        const compressionScaleRange = SplatBuffer.CompressionLevels[compressionLevel].ScaleRange;\r\n\r\n        const sectionBuffers = [];\r\n        const sectionHeaderBuffers = [];\r\n        let totalSplatCount = 0;\r\n\r\n        for (let sa = 0; sa < splatArrays.length; sa ++) {\r\n            const splatArray = splatArrays[sa];\r\n            const validSplats = new UncompressedSplatArray(shDegree);\r\n            for (let i = 0; i < splatArray.splatCount; i++) {\r\n                const targetSplat = splatArray.splats[i];\r\n                if ((targetSplat[UncompressedSplatArray.OFFSET.OPACITY] || 0) >= minimumAlpha) {\r\n                    validSplats.addSplat(targetSplat);\r\n                }\r\n            }\r\n\r\n            const sectionOptions = options[sa] || {};\r\n            const sectionBlockSize = (sectionOptions.blockSizeFactor || 1) * (blockSize || SplatBuffer.BucketBlockSize);\r\n            const sectionBucketSize = Math.ceil((sectionOptions.bucketSizeFactor || 1) * (bucketSize || SplatBuffer.BucketSize));\r\n\r\n            const bucketInfo = SplatBuffer.computeBucketsForUncompressedSplatArray(validSplats, sectionBlockSize, sectionBucketSize);\r\n            const fullBucketCount = bucketInfo.fullBuckets.length;\r\n            const partiallyFullBucketLengths = bucketInfo.partiallyFullBuckets.map((bucket) => bucket.splats.length);\r\n            const partiallyFilledBucketCount = partiallyFullBucketLengths.length;\r\n            const buckets = [...bucketInfo.fullBuckets, ...bucketInfo.partiallyFullBuckets];\r\n\r\n            const sectionDataSizeBytes = validSplats.splats.length * bytesPerSplat;\r\n            const bucketMetaDataSizeBytes = partiallyFilledBucketCount * 4;\r\n            const bucketDataBytes = compressionLevel >= 1 ? buckets.length *\r\n                                                            SplatBuffer.BucketStorageSizeBytes + bucketMetaDataSizeBytes : 0;\r\n            const sectionSizeBytes = sectionDataSizeBytes + bucketDataBytes;\r\n            const sectionBuffer = new ArrayBuffer(sectionSizeBytes);\r\n\r\n            const compressionScaleFactor = compressionScaleRange / (sectionBlockSize * 0.5);\r\n            const bucketCenter = new THREE.Vector3();\r\n\r\n            let outSplatCount = 0;\r\n            for (let b = 0; b < buckets.length; b++) {\r\n                const bucket = buckets[b];\r\n                bucketCenter.fromArray(bucket.center);\r\n                for (let i = 0; i < bucket.splats.length; i++) {\r\n                    let row = bucket.splats[i];\r\n                    const targetSplat = validSplats.splats[row];\r\n                    const bufferOffset = bucketDataBytes + outSplatCount * bytesPerSplat;\r\n                    SplatBuffer.writeSplatDataToSectionBuffer(targetSplat, sectionBuffer, bufferOffset, compressionLevel, shDegree,\r\n                                                              bucketCenter, compressionScaleFactor, compressionScaleRange);\r\n                    outSplatCount++;\r\n                }\r\n            }\r\n            totalSplatCount += outSplatCount;\r\n\r\n            if (compressionLevel >= 1) {\r\n                const bucketMetaDataArray = new Uint32Array(sectionBuffer, 0, partiallyFullBucketLengths.length * 4);\r\n                for (let pfb = 0; pfb < partiallyFullBucketLengths.length; pfb ++) {\r\n                    bucketMetaDataArray[pfb] = partiallyFullBucketLengths[pfb];\r\n                }\r\n                const bucketArray = new Float32Array(sectionBuffer, bucketMetaDataSizeBytes,\r\n                                                     buckets.length * SplatBuffer.BucketStorageSizeFloats);\r\n                for (let b = 0; b < buckets.length; b++) {\r\n                    const bucket = buckets[b];\r\n                    const base = b * 3;\r\n                    bucketArray[base] = bucket.center[0];\r\n                    bucketArray[base + 1] = bucket.center[1];\r\n                    bucketArray[base + 2] = bucket.center[2];\r\n                }\r\n            }\r\n            sectionBuffers.push(sectionBuffer);\r\n\r\n            const sectionHeaderBuffer = new ArrayBuffer(SplatBuffer.SectionHeaderSizeBytes);\r\n            SplatBuffer.writeSectionHeaderToBuffer({\r\n                maxSplatCount: outSplatCount,\r\n                splatCount: outSplatCount,\r\n                bucketSize: sectionBucketSize,\r\n                bucketCount: buckets.length,\r\n                bucketBlockSize: sectionBlockSize,\r\n                compressionScaleRange: compressionScaleRange,\r\n                storageSizeBytes: sectionSizeBytes,\r\n                fullBucketCount: fullBucketCount,\r\n                partiallyFilledBucketCount: partiallyFilledBucketCount,\r\n                sphericalHarmonicsDegree: shDegree\r\n            }, compressionLevel, sectionHeaderBuffer, 0);\r\n            sectionHeaderBuffers.push(sectionHeaderBuffer);\r\n\r\n        }\r\n\r\n        let sectionsCumulativeSizeBytes = 0;\r\n        for (let sectionBuffer of sectionBuffers) sectionsCumulativeSizeBytes += sectionBuffer.byteLength;\r\n        const unifiedBufferSize = SplatBuffer.HeaderSizeBytes +\r\n                                  SplatBuffer.SectionHeaderSizeBytes * sectionBuffers.length + sectionsCumulativeSizeBytes;\r\n        const unifiedBuffer = new ArrayBuffer(unifiedBufferSize);\r\n\r\n        SplatBuffer.writeHeaderToBuffer({\r\n            versionMajor: 0,\r\n            versionMinor: 1,\r\n            maxSectionCount: sectionBuffers.length,\r\n            sectionCount: sectionBuffers.length,\r\n            maxSplatCount: totalSplatCount,\r\n            splatCount: totalSplatCount,\r\n            compressionLevel: compressionLevel,\r\n            sceneCenter: sceneCenter\r\n        }, unifiedBuffer);\r\n\r\n        let currentUnifiedBase = SplatBuffer.HeaderSizeBytes;\r\n        for (let sectionHeaderBuffer of sectionHeaderBuffers) {\r\n            new Uint8Array(unifiedBuffer, currentUnifiedBase, SplatBuffer.SectionHeaderSizeBytes).set(new Uint8Array(sectionHeaderBuffer));\r\n            currentUnifiedBase += SplatBuffer.SectionHeaderSizeBytes;\r\n        }\r\n\r\n        for (let sectionBuffer of sectionBuffers) {\r\n            new Uint8Array(unifiedBuffer, currentUnifiedBase, sectionBuffer.byteLength).set(new Uint8Array(sectionBuffer));\r\n            currentUnifiedBase += sectionBuffer.byteLength;\r\n        }\r\n\r\n        const splatBuffer = new SplatBuffer(unifiedBuffer);\r\n        return splatBuffer;\r\n    }\r\n\r\n    static computeBucketsForUncompressedSplatArray(splatArray, blockSize, bucketSize) {\r\n        let splatCount = splatArray.splatCount;\r\n        const halfBlockSize = blockSize / 2.0;\r\n\r\n        const min = new THREE.Vector3();\r\n        const max = new THREE.Vector3();\r\n\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const targetSplat = splatArray.splats[i];\r\n            const center = [targetSplat[UncompressedSplatArray.OFFSET.X],\r\n                            targetSplat[UncompressedSplatArray.OFFSET.Y],\r\n                            targetSplat[UncompressedSplatArray.OFFSET.Z]];\r\n            if (i === 0 || center[0] < min.x) min.x = center[0];\r\n            if (i === 0 || center[0] > max.x) max.x = center[0];\r\n            if (i === 0 || center[1] < min.y) min.y = center[1];\r\n            if (i === 0 || center[1] > max.y) max.y = center[1];\r\n            if (i === 0 || center[2] < min.z) min.z = center[2];\r\n            if (i === 0 || center[2] > max.z) max.z = center[2];\r\n        }\r\n\r\n        const dimensions = new THREE.Vector3().copy(max).sub(min);\r\n        const yBlocks = Math.ceil(dimensions.y / blockSize);\r\n        const zBlocks = Math.ceil(dimensions.z / blockSize);\r\n\r\n        const blockCenter = new THREE.Vector3();\r\n        const fullBuckets = [];\r\n        const partiallyFullBuckets = {};\r\n\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const targetSplat = splatArray.splats[i];\r\n            const center = [targetSplat[UncompressedSplatArray.OFFSET.X],\r\n                            targetSplat[UncompressedSplatArray.OFFSET.Y],\r\n                            targetSplat[UncompressedSplatArray.OFFSET.Z]];\r\n            const xBlock = Math.floor((center[0] - min.x) / blockSize);\r\n            const yBlock = Math.floor((center[1] - min.y) / blockSize);\r\n            const zBlock = Math.floor((center[2] - min.z) / blockSize);\r\n\r\n            blockCenter.x = xBlock * blockSize + min.x + halfBlockSize;\r\n            blockCenter.y = yBlock * blockSize + min.y + halfBlockSize;\r\n            blockCenter.z = zBlock * blockSize + min.z + halfBlockSize;\r\n\r\n            const bucketId = xBlock * (yBlocks * zBlocks) + yBlock * zBlocks + zBlock;\r\n            let bucket = partiallyFullBuckets[bucketId];\r\n            if (!bucket) {\r\n                partiallyFullBuckets[bucketId] = bucket = {\r\n                    'splats': [],\r\n                    'center': blockCenter.toArray()\r\n                };\r\n            }\r\n\r\n            bucket.splats.push(i);\r\n            if (bucket.splats.length >= bucketSize) {\r\n                fullBuckets.push(bucket);\r\n                partiallyFullBuckets[bucketId] = null;\r\n            }\r\n        }\r\n\r\n        const partiallyFullBucketArray = [];\r\n        for (let bucketId in partiallyFullBuckets) {\r\n            if (partiallyFullBuckets.hasOwnProperty(bucketId)) {\r\n                const bucket = partiallyFullBuckets[bucketId];\r\n                if (bucket) {\r\n                    partiallyFullBucketArray.push(bucket);\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            'fullBuckets': fullBuckets,\r\n            'partiallyFullBuckets': partiallyFullBucketArray,\r\n        };\r\n    }\r\n\r\n}\r\n","import { UncompressedSplatArray } from '../UncompressedSplatArray.js';\r\nimport { SplatBuffer } from '../SplatBuffer.js';\r\nimport { clamp } from '../../Util.js';\r\nimport * as THREE from 'three';\r\n\r\nconst HeaderMagicBytes = new Uint8Array([112, 108, 121, 10]);\r\nconst HeaderEndTokenBytes = new Uint8Array([10, 101, 110, 100, 95, 104, 101, 97, 100, 101, 114, 10]);\r\nconst HeaderEndToken = 'end_header';\r\n\r\nconst DataTypeMap = new Map([\r\n  ['char', Int8Array],\r\n  ['uchar', Uint8Array],\r\n  ['short', Int16Array],\r\n  ['ushort', Uint16Array],\r\n  ['int', Int32Array],\r\n  ['uint', Uint32Array],\r\n  ['float', Float32Array],\r\n  ['double', Float64Array],\r\n]);\r\n\r\nconst unpackUnorm = (value, bits) => {\r\n  const t = (1 << bits) - 1;\r\n  return (value & t) / t;\r\n};\r\n\r\nconst unpack111011 = (result, value) => {\r\n  result.x = unpackUnorm(value >>> 21, 11);\r\n  result.y = unpackUnorm(value >>> 11, 10);\r\n  result.z = unpackUnorm(value, 11);\r\n};\r\n\r\nconst unpack8888 = (result, value) => {\r\n  result.x = unpackUnorm(value >>> 24, 8);\r\n  result.y = unpackUnorm(value >>> 16, 8);\r\n  result.z = unpackUnorm(value >>> 8, 8);\r\n  result.w = unpackUnorm(value, 8);\r\n};\r\n\r\n// unpack quaternion with 2,10,10,10 format (largest element, 3x10bit element)\r\nconst unpackRot = (result, value) => {\r\n  const norm = 1.0 / (Math.sqrt(2) * 0.5);\r\n  const a = (unpackUnorm(value >>> 20, 10) - 0.5) * norm;\r\n  const b = (unpackUnorm(value >>> 10, 10) - 0.5) * norm;\r\n  const c = (unpackUnorm(value, 10) - 0.5) * norm;\r\n  const m = Math.sqrt(1.0 - (a * a + b * b + c * c));\r\n\r\n  switch (value >>> 30) {\r\n    case 0:\r\n      result.set(m, a, b, c);\r\n      break;\r\n    case 1:\r\n      result.set(a, m, b, c);\r\n      break;\r\n    case 2:\r\n      result.set(a, b, m, c);\r\n      break;\r\n    case 3:\r\n      result.set(a, b, c, m);\r\n      break;\r\n  }\r\n};\r\n\r\nconst lerp = (a, b, t) => {\r\n  return a * (1 - t) + b * t;\r\n};\r\n\r\nconst getElementPropStorage = (element, name) => {\r\n  return element.properties.find((p) => p.name === name && p.storage)\r\n    ?.storage;\r\n};\r\n\r\nexport class PlayCanvasCompressedPlyParser {\r\n\r\n  static decodeHeaderText(headerText) {\r\n\r\n    let element;\r\n    let chunkElement;\r\n    let vertexElement;\r\n\r\n    const headerLines = headerText.split('\\n').filter((line) => !line.startsWith('comment '));\r\n\r\n    let bytesPerSplat = 0;\r\n    let done = false;\r\n    for (let i = 1; i < headerLines.length; ++i) {\r\n      const words = headerLines[i].split(' ');\r\n\r\n      switch (words[0]) {\r\n        case 'format':\r\n          if (words[1] !== 'binary_little_endian') {\r\n            throw new Error('Unsupported ply format');\r\n          }\r\n          break;\r\n        case 'element':\r\n          element = {\r\n            name: words[1],\r\n            count: parseInt(words[2], 10),\r\n            properties: [],\r\n            storageSizeBytes: 0\r\n          };\r\n          if (element.name === 'chunk') chunkElement = element;\r\n          else if (element.name === 'vertex') vertexElement = element;\r\n          break;\r\n        case 'property': {\r\n          if (!DataTypeMap.has(words[1])) {\r\n            throw new Error(\r\n              `Unrecognized property data type '${words[1]}' in ply header`\r\n            );\r\n          }\r\n          const StorageType = DataTypeMap.get(words[1]);\r\n          const storageSizeByes = StorageType.BYTES_PER_ELEMENT * element.count;\r\n          if (element.name === 'vertex') bytesPerSplat += StorageType.BYTES_PER_ELEMENT;\r\n          element.properties.push({\r\n            type: words[1],\r\n            name: words[2],\r\n            storage: null,\r\n            byteSize: StorageType.BYTES_PER_ELEMENT,\r\n            storageSizeByes: storageSizeByes\r\n          });\r\n          element.storageSizeBytes += storageSizeByes;\r\n          break;\r\n        }\r\n        case HeaderEndToken:\r\n          done = true;\r\n        break;\r\n        default:\r\n          throw new Error(\r\n            `Unrecognized header value '${words[0]}' in ply header`\r\n          );\r\n      }\r\n      if (done) break;\r\n    }\r\n\r\n    return {\r\n      'chunkElement': chunkElement,\r\n      'vertexElement': vertexElement,\r\n      'bytesPerSplat': bytesPerSplat,\r\n      'headerSizeBytes': headerText.indexOf(HeaderEndToken) + HeaderEndToken.length + 1,\r\n      'sphericalHarmonicsDegree': 0\r\n    };\r\n  }\r\n\r\n  static decodeHeader(plyBuffer) {\r\n\r\n    /**\r\n     * Searches for the first occurrence of a sequence within a buffer.\r\n     * @example\r\n     * find(new Uint8Array([1, 2, 3, 4]), new Uint8Array([3, 4])); // 2\r\n     * @param {Uint8Array} buf - The buffer in which to search.\r\n     * @param {Uint8Array} search - The sequence to search for.\r\n     * @return {number} The index of the first occurrence of the search sequence in the buffer, or -1 if not found.\r\n     */\r\n    const find = (buf, search) => {\r\n      const endIndex = buf.length - search.length;\r\n      let i;\r\n      let j;\r\n      for (i = 0; i <= endIndex; ++i) {\r\n        for (j = 0; j < search.length; ++j) {\r\n          if (buf[i + j] !== search[j]) {\r\n            break;\r\n          }\r\n        }\r\n        if (j === search.length) {\r\n          return i;\r\n        }\r\n      }\r\n      return -1;\r\n    };\r\n\r\n    /**\r\n     * Checks if array 'a' starts with the same elements as array 'b'.\r\n     * @example\r\n     * startsWith(new Uint8Array([1, 2, 3, 4]), new Uint8Array([1, 2])); // true\r\n     * @param {Uint8Array} a - The array to check against.\r\n     * @param {Uint8Array} b - The array of elements to look for at the start of 'a'.\r\n     * @return {boolean} - True if 'a' starts with all elements of 'b', otherwise false.\r\n     */\r\n    const startsWith = (a, b) => {\r\n      if (a.length < b.length) {\r\n        return false;\r\n      }\r\n\r\n      for (let i = 0; i < b.length; ++i) {\r\n        if (a[i] !== b[i]) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    };\r\n\r\n    let buf = new Uint8Array(plyBuffer);\r\n    let endHeaderTokenOffset;\r\n\r\n    if (buf.length >= HeaderMagicBytes.length && !startsWith(buf, HeaderMagicBytes)) {\r\n      throw new Error('Invalid PLY header');\r\n    }\r\n\r\n    endHeaderTokenOffset = find(buf, HeaderEndTokenBytes);\r\n    if (endHeaderTokenOffset === -1) {\r\n      throw new Error('End of PLY header not found');\r\n    }\r\n\r\n    const headerText = new TextDecoder('ascii').decode(\r\n      buf.slice(0, endHeaderTokenOffset)\r\n    );\r\n\r\n    const {chunkElement, vertexElement, bytesPerSplat} = PlayCanvasCompressedPlyParser.decodeHeaderText(headerText);\r\n\r\n    return {\r\n      'headerSizeBytes': endHeaderTokenOffset + HeaderEndTokenBytes.length,\r\n      'bytesPerSplat': bytesPerSplat,\r\n      'chunkElement': chunkElement,\r\n      'vertexElement': vertexElement\r\n    };\r\n  }\r\n\r\n  static readElementData(element, readBuffer, readOffset, fromIndex, toIndex, propertyFilter = null) {\r\n\r\n    let dataView = readBuffer instanceof DataView ? readBuffer : new DataView(readBuffer);\r\n\r\n    fromIndex = fromIndex || 0;\r\n    toIndex = toIndex || element.count - 1;\r\n    for (let e = fromIndex; e <= toIndex; ++e) {\r\n      for (let j = 0; j < element.properties.length; ++j) {\r\n        const property = element.properties[j];\r\n\r\n        const StorageType = DataTypeMap.get(property.type);\r\n        const requiredStorageSizeBytes = StorageType.BYTES_PER_ELEMENT * element.count;\r\n        if ((!property.storage || property.storage.byteLength < requiredStorageSizeBytes) &&\r\n            (!propertyFilter || propertyFilter(property.name))) {\r\n          property.storage = new StorageType(element.count);\r\n        }\r\n\r\n        if (property.storage) {\r\n          switch (property.type) {\r\n            case 'char':\r\n              property.storage[e] = dataView.getInt8(readOffset);\r\n              break;\r\n            case 'uchar':\r\n              property.storage[e] = dataView.getUint8(readOffset);\r\n              break;\r\n            case 'short':\r\n              property.storage[e] = dataView.getInt16(readOffset, true);\r\n              break;\r\n            case 'ushort':\r\n              property.storage[e] = dataView.getUint16(readOffset, true);\r\n              break;\r\n            case 'int':\r\n              property.storage[e] = dataView.getInt32(readOffset, true);\r\n              break;\r\n            case 'uint':\r\n              property.storage[e] = dataView.getUint32(readOffset, true);\r\n              break;\r\n            case 'float':\r\n              property.storage[e] = dataView.getFloat32(readOffset, true);\r\n              break;\r\n            case 'double':\r\n              property.storage[e] = dataView.getFloat64(readOffset, true);\r\n              break;\r\n          }\r\n        }\r\n\r\n        readOffset += property.byteSize;\r\n      }\r\n    }\r\n\r\n    return readOffset;\r\n  }\r\n\r\n  static readPly(plyBuffer, propertyFilter = null) {\r\n\r\n    const header = PlayCanvasCompressedPlyParser.decodeHeader(plyBuffer);\r\n\r\n    let readIndex = PlayCanvasCompressedPlyParser.readElementData(header.chunkElement, plyBuffer,\r\n                                                                  header.headerSizeBytes, null, null, propertyFilter);\r\n    PlayCanvasCompressedPlyParser.readElementData(header.vertexElement, plyBuffer, readIndex, null, null, propertyFilter);\r\n\r\n    return {\r\n      'chunkElement': header.chunkElement,\r\n      'vertexElement': header.vertexElement\r\n    };\r\n  }\r\n\r\n  static getElementStorageArrays(chunkElement, vertexElement) {\r\n    const minX = getElementPropStorage(chunkElement, 'min_x');\r\n    const minY = getElementPropStorage(chunkElement, 'min_y');\r\n    const minZ = getElementPropStorage(chunkElement, 'min_z');\r\n    const maxX = getElementPropStorage(chunkElement, 'max_x');\r\n    const maxY = getElementPropStorage(chunkElement, 'max_y');\r\n    const maxZ = getElementPropStorage(chunkElement, 'max_z');\r\n    const minScaleX = getElementPropStorage(chunkElement, 'min_scale_x');\r\n    const minScaleY = getElementPropStorage(chunkElement, 'min_scale_y');\r\n    const minScaleZ = getElementPropStorage(chunkElement, 'min_scale_z');\r\n    const maxScaleX = getElementPropStorage(chunkElement, 'max_scale_x');\r\n    const maxScaleY = getElementPropStorage(chunkElement, 'max_scale_y');\r\n    const maxScaleZ = getElementPropStorage(chunkElement, 'max_scale_z');\r\n    const position = getElementPropStorage(vertexElement, 'packed_position');\r\n    const rotation = getElementPropStorage(vertexElement, 'packed_rotation');\r\n    const scale = getElementPropStorage(vertexElement, 'packed_scale');\r\n    const color = getElementPropStorage(vertexElement, 'packed_color');\r\n    return {\r\n      positionExtremes: {\r\n        minX, maxX,\r\n        minY, maxY,\r\n        minZ, maxZ\r\n      },\r\n      scaleExtremes: {\r\n        minScaleX, maxScaleX, minScaleY,\r\n        maxScaleY, minScaleZ, maxScaleZ\r\n      },\r\n      position,\r\n      rotation,\r\n      scale,\r\n      color\r\n    };\r\n  }\r\n\r\n  static decompressSplat = function() {\r\n\r\n    const p = new THREE.Vector3();\r\n    const r = new THREE.Quaternion();\r\n    const s = new THREE.Vector3();\r\n    const c = new THREE.Vector4();\r\n\r\n    const OFFSET = UncompressedSplatArray.OFFSET;\r\n\r\n    return function(index, chunkSplatIndexOffset, positionArray, positionExtremes, scaleArray, scaleExtremes,\r\n                    rotationArray, colorArray, outSplat) {\r\n      outSplat = outSplat || UncompressedSplatArray.createSplat();\r\n\r\n      const chunkIndex = Math.floor((chunkSplatIndexOffset + index) / 256);\r\n\r\n      unpack111011(p, positionArray[index]);\r\n      unpackRot(r, rotationArray[index]);\r\n      unpack111011(s, scaleArray[index]);\r\n      unpack8888(c, colorArray[index]);\r\n\r\n      outSplat[OFFSET.X] = lerp(positionExtremes.minX[chunkIndex], positionExtremes.maxX[chunkIndex], p.x);\r\n      outSplat[OFFSET.Y] = lerp(positionExtremes.minY[chunkIndex], positionExtremes.maxY[chunkIndex], p.y);\r\n      outSplat[OFFSET.Z] = lerp(positionExtremes.minZ[chunkIndex], positionExtremes.maxZ[chunkIndex], p.z);\r\n\r\n      outSplat[OFFSET.ROTATION0] = r.x;\r\n      outSplat[OFFSET.ROTATION1] = r.y;\r\n      outSplat[OFFSET.ROTATION2] = r.z;\r\n      outSplat[OFFSET.ROTATION3] = r.w;\r\n\r\n      outSplat[OFFSET.SCALE0] = Math.exp(lerp(scaleExtremes.minScaleX[chunkIndex], scaleExtremes.maxScaleX[chunkIndex], s.x));\r\n      outSplat[OFFSET.SCALE1] = Math.exp(lerp(scaleExtremes.minScaleY[chunkIndex], scaleExtremes.maxScaleY[chunkIndex], s.y));\r\n      outSplat[OFFSET.SCALE2] = Math.exp(lerp(scaleExtremes.minScaleZ[chunkIndex], scaleExtremes.maxScaleZ[chunkIndex], s.z));\r\n\r\n      outSplat[OFFSET.FDC0] = clamp(Math.floor(c.x * 255), 0, 255);\r\n      outSplat[OFFSET.FDC1] = clamp(Math.floor(c.y * 255), 0, 255);\r\n      outSplat[OFFSET.FDC2] = clamp(Math.floor(c.z * 255), 0, 255);\r\n      outSplat[OFFSET.OPACITY] = clamp(Math.floor(c.w * 255), 0, 255);\r\n\r\n      return outSplat;\r\n    };\r\n\r\n  }();\r\n\r\n  static parseToUncompressedSplatBufferSection(chunkElement, vertexElement, fromIndex, toIndex, chunkSplatIndexOffset,\r\n                                               vertexDataBuffer, veretxReadOffset, outBuffer, outOffset, propertyFilter = null) {\r\n\r\n    PlayCanvasCompressedPlyParser.readElementData(vertexElement, vertexDataBuffer, veretxReadOffset, fromIndex, toIndex, propertyFilter);\r\n\r\n    const outBytesPerSplat = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[0].BytesPerSplat;\r\n\r\n    const { positionExtremes, scaleExtremes, position, rotation, scale, color } =\r\n      PlayCanvasCompressedPlyParser.getElementStorageArrays(chunkElement, vertexElement);\r\n\r\n    const tempSplat = UncompressedSplatArray.createSplat();\r\n\r\n    for (let i = fromIndex; i <= toIndex; ++i) {\r\n      PlayCanvasCompressedPlyParser.decompressSplat(i, chunkSplatIndexOffset, position, positionExtremes,\r\n                                                    scale, scaleExtremes, rotation, color, tempSplat);\r\n      const outBase = i * outBytesPerSplat + outOffset;\r\n      SplatBuffer.writeSplatDataToSectionBuffer(tempSplat, outBuffer, outBase, 0, 0);\r\n    }\r\n  }\r\n\r\n  static parseToUncompressedSplatArray(plyBuffer) {\r\n    const { chunkElement, vertexElement } = PlayCanvasCompressedPlyParser.readPly(plyBuffer);\r\n\r\n    const splatArray = new UncompressedSplatArray();\r\n\r\n    const { positionExtremes, scaleExtremes, position, rotation, scale, color } =\r\n      PlayCanvasCompressedPlyParser.getElementStorageArrays(chunkElement, vertexElement);\r\n\r\n    for (let i = 0; i < vertexElement.count; ++i) {\r\n\r\n      splatArray.addDefaultSplat();\r\n      const newSplat = splatArray.getSplat(splatArray.splatCount - 1);\r\n\r\n      PlayCanvasCompressedPlyParser.decompressSplat(i, 0, position, positionExtremes, scale, scaleExtremes, rotation, color, newSplat);\r\n    }\r\n\r\n    const mat = new THREE.Matrix4();\r\n    mat.identity();\r\n\r\n    return splatArray;\r\n  }\r\n\r\n}\r\n","export const PlyFormat = {\r\n    'INRIAV1': 0,\r\n    'INRIAV2': 1,\r\n    'PlayCanvasCompressed': 2\r\n};\r\n","import { PlyFormat } from './PlyFormat.js';\r\n\r\nconst [\r\n        FieldSizeIdDouble, FieldSizeIdInt, FieldSizeIdUInt, FieldSizeIdFloat, FieldSizeIdShort, FieldSizeIdUShort, FieldSizeIdUChar\r\n      ] = [0, 1, 2, 3, 4, 5, 6];\r\n\r\nconst FieldSizeStringMap = {\r\n    'double': FieldSizeIdDouble,\r\n    'int': FieldSizeIdInt,\r\n    'uint': FieldSizeIdUInt,\r\n    'float': FieldSizeIdFloat,\r\n    'short': FieldSizeIdShort,\r\n    'ushort': FieldSizeIdUShort,\r\n    'uchar': FieldSizeIdUChar,\r\n};\r\n\r\nconst FieldSize = {\r\n    [FieldSizeIdDouble]: 8,\r\n    [FieldSizeIdInt]: 4,\r\n    [FieldSizeIdUInt]: 4,\r\n    [FieldSizeIdFloat]: 4,\r\n    [FieldSizeIdShort]: 2,\r\n    [FieldSizeIdUShort]: 2,\r\n    [FieldSizeIdUChar]: 1,\r\n};\r\n\r\nexport class PlyParserUtils {\r\n\r\n    static HeaderEndToken = 'end_header';\r\n\r\n    constructor() {\r\n    }\r\n\r\n    decodeSectionHeader(headerLines, fieldNameIdMap, headerStartLine = 0) {\r\n\r\n        const extractedLines = [];\r\n\r\n        let processingSection = false;\r\n        let headerEndLine = -1;\r\n        let vertexCount = 0;\r\n        let endOfHeader = false;\r\n        let sectionName = null;\r\n\r\n        const fieldIds = [];\r\n        const fieldTypes = [];\r\n        const allFieldNames = [];\r\n        const usedFieldNames = [];\r\n        const fieldTypesByName = {};\r\n\r\n        for (let i = headerStartLine; i < headerLines.length; i++) {\r\n            const line = headerLines[i].trim();\r\n            if (line.startsWith('element')) {\r\n                if (processingSection) {\r\n                    headerEndLine--;\r\n                    break;\r\n                } else {\r\n                    processingSection = true;\r\n                    headerStartLine = i;\r\n                    headerEndLine = i;\r\n                    const lineComponents = line.split(' ');\r\n                    let validComponents = 0;\r\n                    for (let lineComponent of lineComponents) {\r\n                        const trimmedComponent = lineComponent.trim();\r\n                        if (trimmedComponent.length > 0) {\r\n                            validComponents++;\r\n                            if (validComponents === 2) {\r\n                                sectionName = trimmedComponent;\r\n                            } else if (validComponents === 3) {\r\n                                vertexCount = parseInt(trimmedComponent);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } else if (line.startsWith('property')) {\r\n                const fieldMatch = line.match(/(\\w+)\\s+(\\w+)\\s+(\\w+)/);\r\n                if (fieldMatch) {\r\n                    const fieldTypeStr = fieldMatch[2];\r\n                    const fieldName = fieldMatch[3];\r\n                    allFieldNames.push(fieldName);\r\n                    const fieldId = fieldNameIdMap[fieldName];\r\n                    fieldTypesByName[fieldName] = fieldTypeStr;\r\n                    const fieldType = FieldSizeStringMap[fieldTypeStr];\r\n                    if (fieldId !== undefined) {\r\n                        usedFieldNames.push(fieldName);\r\n                        fieldIds.push(fieldId);\r\n                        fieldTypes[fieldId] = fieldType;\r\n                    }\r\n                }\r\n            }\r\n            if (line === PlyParserUtils.HeaderEndToken) {\r\n                endOfHeader = true;\r\n                break;\r\n            }\r\n            if (processingSection) {\r\n                extractedLines.push(line);\r\n                headerEndLine++;\r\n            }\r\n        }\r\n\r\n        const fieldOffsets = [];\r\n        let bytesPerVertex = 0;\r\n        for (let fieldName of allFieldNames) {\r\n            const fieldType = fieldTypesByName[fieldName];\r\n            if (fieldTypesByName.hasOwnProperty(fieldName)) {\r\n                const fieldId = fieldNameIdMap[fieldName];\r\n                if (fieldId !== undefined) {\r\n                    fieldOffsets[fieldId] = bytesPerVertex;\r\n                }\r\n            }\r\n            bytesPerVertex += FieldSize[FieldSizeStringMap[fieldType]];\r\n        }\r\n\r\n        const sphericalHarmonics = this.decodeSphericalHarmonicsFromSectionHeader(allFieldNames, fieldNameIdMap);\r\n\r\n        return {\r\n            'headerLines': extractedLines,\r\n            'headerStartLine': headerStartLine,\r\n            'headerEndLine': headerEndLine,\r\n            'fieldTypes': fieldTypes,\r\n            'fieldIds': fieldIds,\r\n            'fieldOffsets': fieldOffsets,\r\n            'bytesPerVertex': bytesPerVertex,\r\n            'vertexCount': vertexCount,\r\n            'dataSizeBytes': bytesPerVertex * vertexCount,\r\n            'endOfHeader': endOfHeader,\r\n            'sectionName': sectionName,\r\n            'sphericalHarmonicsDegree': sphericalHarmonics.degree,\r\n            'sphericalHarmonicsCoefficientsPerChannel': sphericalHarmonics.coefficientsPerChannel,\r\n            'sphericalHarmonicsDegree1Fields': sphericalHarmonics.degree1Fields,\r\n            'sphericalHarmonicsDegree2Fields': sphericalHarmonics.degree2Fields\r\n        };\r\n\r\n    }\r\n\r\n    decodeSphericalHarmonicsFromSectionHeader(fieldNames, fieldNameIdMap) {\r\n        let sphericalHarmonicsFieldCount = 0;\r\n        let coefficientsPerChannel = 0;\r\n        for (let fieldName of fieldNames) {\r\n            if (fieldName.startsWith('f_rest')) sphericalHarmonicsFieldCount++;\r\n        }\r\n        coefficientsPerChannel = sphericalHarmonicsFieldCount / 3;\r\n        let degree = 0;\r\n        if (coefficientsPerChannel >= 3) degree = 1;\r\n        if (coefficientsPerChannel >= 8) degree = 2;\r\n\r\n        let degree1Fields = [];\r\n        let degree2Fields = [];\r\n\r\n        for (let rgb = 0; rgb < 3; rgb++) {\r\n            if (degree >= 1) {\r\n                for (let i = 0; i < 3; i++) {\r\n                    degree1Fields.push(fieldNameIdMap['f_rest_' + (i + coefficientsPerChannel * rgb)]);\r\n                }\r\n            }\r\n            if (degree >= 2) {\r\n                for (let i = 0; i < 5; i++) {\r\n                    degree2Fields.push(fieldNameIdMap['f_rest_' + (i + coefficientsPerChannel * rgb + 3)]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            'degree': degree,\r\n            'coefficientsPerChannel': coefficientsPerChannel,\r\n            'degree1Fields': degree1Fields,\r\n            'degree2Fields': degree2Fields\r\n        };\r\n    }\r\n\r\n    static getHeaderSectionNames(headerLines) {\r\n        const sectionNames = [];\r\n        for (let headerLine of headerLines) {\r\n            if (headerLine.startsWith('element')) {\r\n                const lineComponents = headerLine.split(' ');\r\n                let validComponents = 0;\r\n                for (let lineComponent of lineComponents) {\r\n                    const trimmedComponent = lineComponent.trim();\r\n                    if (trimmedComponent.length > 0) {\r\n                        validComponents++;\r\n                        if (validComponents === 2) {\r\n                            sectionNames.push(trimmedComponent);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return sectionNames;\r\n    }\r\n\r\n    static checkTextForEndHeader(endHeaderTestText) {\r\n        if (endHeaderTestText.includes(PlyParserUtils.HeaderEndToken)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    static checkBufferForEndHeader(buffer, searchOfset, chunkSize, decoder) {\r\n        const endHeaderTestChunk = new Uint8Array(buffer, Math.max(0, searchOfset - chunkSize), chunkSize);\r\n        const endHeaderTestText = decoder.decode(endHeaderTestChunk);\r\n        return PlyParserUtils.checkTextForEndHeader(endHeaderTestText);\r\n    }\r\n\r\n    static extractHeaderFromBufferToText(plyBuffer) {\r\n        const decoder = new TextDecoder();\r\n        let headerOffset = 0;\r\n        let headerText = '';\r\n        const readChunkSize = 100;\r\n\r\n        while (true) {\r\n            if (headerOffset + readChunkSize >= plyBuffer.byteLength) {\r\n                throw new Error('End of file reached while searching for end of header');\r\n            }\r\n            const headerChunk = new Uint8Array(plyBuffer, headerOffset, readChunkSize);\r\n            headerText += decoder.decode(headerChunk);\r\n            headerOffset += readChunkSize;\r\n\r\n            if (PlyParserUtils.checkBufferForEndHeader(plyBuffer, headerOffset, readChunkSize * 2, decoder)) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return headerText;\r\n    }\r\n\r\n    readHeaderFromBuffer(plyBuffer) {\r\n        const decoder = new TextDecoder();\r\n        let headerOffset = 0;\r\n        let headerText = '';\r\n        const readChunkSize = 100;\r\n\r\n        while (true) {\r\n            if (headerOffset + readChunkSize >= plyBuffer.byteLength) {\r\n                throw new Error('End of file reached while searching for end of header');\r\n            }\r\n            const headerChunk = new Uint8Array(plyBuffer, headerOffset, readChunkSize);\r\n            headerText += decoder.decode(headerChunk);\r\n            headerOffset += readChunkSize;\r\n\r\n            if (PlyParserUtils.checkBufferForEndHeader(plyBuffer, headerOffset, readChunkSize * 2, decoder)) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return headerText;\r\n    }\r\n\r\n    static convertHeaderTextToLines(headerText) {\r\n        const headerLines = headerText.split('\\n');\r\n        const prunedLines = [];\r\n        for (let i = 0; i < headerLines.length; i++) {\r\n            const line = headerLines[i].trim();\r\n            prunedLines.push(line);\r\n            if (line === PlyParserUtils.HeaderEndToken) {\r\n                break;\r\n            }\r\n        }\r\n        return prunedLines;\r\n    }\r\n\r\n    static determineHeaderFormatFromHeaderText(headertText) {\r\n        const headerLines = PlyParserUtils.convertHeaderTextToLines(headertText);\r\n        let format = PlyFormat.INRIAV1;\r\n        for (let i = 0; i < headerLines.length; i++) {\r\n            const line = headerLines[i].trim();\r\n            if (line.startsWith('element chunk') || line.match(/[A-Za-z]*packed_[A-Za-z]*/)) {\r\n                format = PlyFormat.PlayCanvasCompressed;\r\n            } else if (line.startsWith('element codebook_centers')) {\r\n                format = PlyFormat.INRIAV2;\r\n            } else if (line === PlyParserUtils.HeaderEndToken) {\r\n                break;\r\n            }\r\n        }\r\n        return format;\r\n    }\r\n\r\n    static determineHeaderFormatFromPlyBuffer(plyBuffer) {\r\n        const headertText = PlyParserUtils.extractHeaderFromBufferToText(plyBuffer);\r\n        return PlyParserUtils.determineHeaderFormatFromHeaderText(headertText);\r\n    }\r\n\r\n    static readVertex(vertexData, header, row, dataOffset, fieldsToRead, rawVertex, normalize = true) {\r\n        const offset = row * header.bytesPerVertex + dataOffset;\r\n        const fieldOffsets = header.fieldOffsets;\r\n        const fieldTypes = header.fieldTypes;\r\n        for (let fieldId of fieldsToRead) {\r\n            const fieldType = fieldTypes[fieldId];\r\n            if (fieldType === FieldSizeIdFloat) {\r\n                rawVertex[fieldId] = vertexData.getFloat32(offset + fieldOffsets[fieldId], true);\r\n            } else if (fieldType === FieldSizeIdShort) {\r\n                rawVertex[fieldId] = vertexData.getInt16(offset + fieldOffsets[fieldId], true);\r\n            } else if (fieldType === FieldSizeIdUShort) {\r\n                rawVertex[fieldId] = vertexData.getUint16(offset + fieldOffsets[fieldId], true);\r\n            } else if (fieldType === FieldSizeIdInt) {\r\n                rawVertex[fieldId] = vertexData.getInt32(offset + fieldOffsets[fieldId], true);\r\n            } else if (fieldType === FieldSizeIdUInt) {\r\n                rawVertex[fieldId] = vertexData.getUint32(offset + fieldOffsets[fieldId], true);\r\n            } else if (fieldType === FieldSizeIdUChar) {\r\n                if (normalize) {\r\n                    rawVertex[fieldId] = vertexData.getUint8(offset + fieldOffsets[fieldId]) / 255.0;\r\n                } else {\r\n                    rawVertex[fieldId] = vertexData.getUint8(offset + fieldOffsets[fieldId]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { clamp } from '../../Util.js';\r\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\r\nimport { SplatBuffer } from '../SplatBuffer.js';\r\nimport { PlyParserUtils } from './PlyParserUtils.js';\r\n\r\nconst FieldNamesToRead = ['scale_0', 'scale_1', 'scale_2', 'rot_0', 'rot_1', 'rot_2', 'rot_3',\r\n                          'x', 'y', 'z', 'f_dc_0', 'f_dc_1', 'f_dc_2', 'opacity', 'red', 'green', 'blue',\r\n                          'f_rest_0', 'f_rest_1', 'f_rest_2', 'f_rest_15', 'f_rest_16', 'f_rest_17', 'f_rest_30', 'f_rest_31', 'f_rest_32',\r\n                          'f_rest_3', 'f_rest_4', 'f_rest_5', 'f_rest_6', 'f_rest_7',\r\n                          'f_rest_18', 'f_rest_19', 'f_rest_20', 'f_rest_21', 'f_rest_22',\r\n                          'f_rest_33', 'f_rest_34', 'f_rest_35', 'f_rest_36', 'f_rest_37'];\r\n\r\nconst FieldsToReadIndexes = FieldNamesToRead.map((e, i) => i);\r\n\r\nconst [\r\n        SCALE_0, SCALE_1, SCALE_2, ROT_0, ROT_1, ROT_2, ROT_3, X, Y, Z, F_DC_0, F_DC_1, F_DC_2, OPACITY, RED, GREEN, BLUE, F_REST_0\r\n      ] = FieldsToReadIndexes;\r\n\r\nexport class INRIAV1PlyParser {\r\n\r\n    constructor() {\r\n        this.plyParserutils = new PlyParserUtils();\r\n    }\r\n\r\n    decodeHeaderLines(headerLines) {\r\n        const fieldNameIdMap = FieldsToReadIndexes.reduce((acc, element) => {\r\n            acc[FieldNamesToRead[element]] = element;\r\n            return acc;\r\n        }, {});\r\n        const header = this.plyParserutils.decodeSectionHeader(headerLines, fieldNameIdMap, 0);\r\n        header.splatCount = header.vertexCount;\r\n        header.bytesPerSplat = header.bytesPerVertex;\r\n        return header;\r\n    }\r\n\r\n    decodeHeaderText(headerText) {\r\n        const headerLines = PlyParserUtils.convertHeaderTextToLines(headerText);\r\n        const header = this.decodeHeaderLines(headerLines);\r\n        header.headerText = headerText;\r\n        header.headerSizeBytes = headerText.indexOf(PlyParserUtils.HeaderEndToken) + PlyParserUtils.HeaderEndToken.length + 1;\r\n        return header;\r\n    }\r\n\r\n    decodeHeaderFromBuffer(plyBuffer) {\r\n        const headerText = this.plyParserutils.readHeaderFromBuffer(plyBuffer);\r\n        return this.decodeHeaderText(headerText);\r\n    }\r\n\r\n    findSplatData(plyBuffer, header) {\r\n        return new DataView(plyBuffer, header.headerSizeBytes);\r\n    }\r\n\r\n    parseToUncompressedSplatBufferSection(header, fromSplat, toSplat, splatData, splatDataOffset,\r\n                                                 toBuffer, toOffset, outSphericalHarmonicsDegree = 0) {\r\n        outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, header.sphericalHarmonicsDegree);\r\n        const outBytesPerSplat = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[outSphericalHarmonicsDegree].BytesPerSplat;\r\n\r\n        for (let i = fromSplat; i <= toSplat; i++) {\r\n            const parsedSplat = INRIAV1PlyParser.parseToUncompressedSplat(splatData, i, header,\r\n                                                                          splatDataOffset, outSphericalHarmonicsDegree);\r\n            const outBase = i * outBytesPerSplat + toOffset;\r\n            SplatBuffer.writeSplatDataToSectionBuffer(parsedSplat, toBuffer, outBase, 0, outSphericalHarmonicsDegree);\r\n        }\r\n    }\r\n\r\n    decodeSectionSplatData(sectionSplatData, splatCount, sectionHeader, outSphericalHarmonicsDegree) {\r\n        outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, sectionHeader.sphericalHarmonicsDegree);\r\n        const splatArray = new UncompressedSplatArray(outSphericalHarmonicsDegree);\r\n        for (let row = 0; row < splatCount; row++) {\r\n            const newSplat = INRIAV1PlyParser.parseToUncompressedSplat(sectionSplatData, row, sectionHeader,\r\n                                                                       0, outSphericalHarmonicsDegree);\r\n            splatArray.addSplat(newSplat);\r\n        }\r\n        return splatArray;\r\n    }\r\n\r\n    static parseToUncompressedSplat = function() {\r\n\r\n        let rawSplat = [];\r\n        const tempRotation = new THREE.Quaternion();\r\n\r\n        const OFFSET_X = UncompressedSplatArray.OFFSET.X;\r\n        const OFFSET_Y = UncompressedSplatArray.OFFSET.Y;\r\n        const OFFSET_Z = UncompressedSplatArray.OFFSET.Z;\r\n\r\n        const OFFSET_SCALE0 = UncompressedSplatArray.OFFSET.SCALE0;\r\n        const OFFSET_SCALE1 = UncompressedSplatArray.OFFSET.SCALE1;\r\n        const OFFSET_SCALE2 = UncompressedSplatArray.OFFSET.SCALE2;\r\n\r\n        const OFFSET_ROTATION0 = UncompressedSplatArray.OFFSET.ROTATION0;\r\n        const OFFSET_ROTATION1 = UncompressedSplatArray.OFFSET.ROTATION1;\r\n        const OFFSET_ROTATION2 = UncompressedSplatArray.OFFSET.ROTATION2;\r\n        const OFFSET_ROTATION3 = UncompressedSplatArray.OFFSET.ROTATION3;\r\n\r\n        const OFFSET_FDC0 = UncompressedSplatArray.OFFSET.FDC0;\r\n        const OFFSET_FDC1 = UncompressedSplatArray.OFFSET.FDC1;\r\n        const OFFSET_FDC2 = UncompressedSplatArray.OFFSET.FDC2;\r\n        const OFFSET_OPACITY = UncompressedSplatArray.OFFSET.OPACITY;\r\n\r\n        const OFFSET_FRC = [];\r\n\r\n        for (let i = 0; i < 45; i++) {\r\n            OFFSET_FRC[i] = UncompressedSplatArray.OFFSET.FRC0 + i;\r\n        }\r\n\r\n        return function(splatData, row, header, splatDataOffset = 0, outSphericalHarmonicsDegree = 0) {\r\n            outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, header.sphericalHarmonicsDegree);\r\n            INRIAV1PlyParser.readSplat(splatData, header, row, splatDataOffset, rawSplat);\r\n            const newSplat = UncompressedSplatArray.createSplat(outSphericalHarmonicsDegree);\r\n            if (rawSplat[SCALE_0] !== undefined) {\r\n                newSplat[OFFSET_SCALE0] = Math.exp(rawSplat[SCALE_0]);\r\n                newSplat[OFFSET_SCALE1] = Math.exp(rawSplat[SCALE_1]);\r\n                newSplat[OFFSET_SCALE2] = Math.exp(rawSplat[SCALE_2]);\r\n            } else {\r\n                newSplat[OFFSET_SCALE0] = 0.01;\r\n                newSplat[OFFSET_SCALE1] = 0.01;\r\n                newSplat[OFFSET_SCALE2] = 0.01;\r\n            }\r\n\r\n            if (rawSplat[F_DC_0] !== undefined) {\r\n                const SH_C0 = 0.28209479177387814;\r\n                newSplat[OFFSET_FDC0] = (0.5 + SH_C0 * rawSplat[F_DC_0]) * 255;\r\n                newSplat[OFFSET_FDC1] = (0.5 + SH_C0 * rawSplat[F_DC_1]) * 255;\r\n                newSplat[OFFSET_FDC2] = (0.5 + SH_C0 * rawSplat[F_DC_2]) * 255;\r\n            } else if (rawSplat[RED] !== undefined) {\r\n                newSplat[OFFSET_FDC0] = rawSplat[RED] * 255;\r\n                newSplat[OFFSET_FDC1] = rawSplat[GREEN] * 255;\r\n                newSplat[OFFSET_FDC2] = rawSplat[BLUE] * 255;\r\n            } else {\r\n                newSplat[OFFSET_FDC0] = 0;\r\n                newSplat[OFFSET_FDC1] = 0;\r\n                newSplat[OFFSET_FDC2] = 0;\r\n            }\r\n\r\n            if (rawSplat[OPACITY] !== undefined) {\r\n                newSplat[OFFSET_OPACITY] = (1 / (1 + Math.exp(-rawSplat[OPACITY]))) * 255;\r\n            }\r\n\r\n            newSplat[OFFSET_FDC0] = clamp(Math.floor(newSplat[OFFSET_FDC0]), 0, 255);\r\n            newSplat[OFFSET_FDC1] = clamp(Math.floor(newSplat[OFFSET_FDC1]), 0, 255);\r\n            newSplat[OFFSET_FDC2] = clamp(Math.floor(newSplat[OFFSET_FDC2]), 0, 255);\r\n            newSplat[OFFSET_OPACITY] = clamp(Math.floor(newSplat[OFFSET_OPACITY]), 0, 255);\r\n\r\n            if (outSphericalHarmonicsDegree >= 1) {\r\n                if (rawSplat[F_REST_0] !== undefined) {\r\n                    for (let i = 0; i < 9; i++) {\r\n                        newSplat[OFFSET_FRC[i]] = rawSplat[header.sphericalHarmonicsDegree1Fields[i]];\r\n                    }\r\n                    if (outSphericalHarmonicsDegree >= 2) {\r\n                        for (let i = 0; i < 15; i++) {\r\n                            newSplat[OFFSET_FRC[9 + i]] = rawSplat[header.sphericalHarmonicsDegree2Fields[i]];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            tempRotation.set(rawSplat[ROT_0], rawSplat[ROT_1], rawSplat[ROT_2], rawSplat[ROT_3]);\r\n            tempRotation.normalize();\r\n\r\n            newSplat[OFFSET_ROTATION0] = tempRotation.x;\r\n            newSplat[OFFSET_ROTATION1] = tempRotation.y;\r\n            newSplat[OFFSET_ROTATION2] = tempRotation.z;\r\n            newSplat[OFFSET_ROTATION3] = tempRotation.w;\r\n\r\n            newSplat[OFFSET_X] = rawSplat[X];\r\n            newSplat[OFFSET_Y] = rawSplat[Y];\r\n            newSplat[OFFSET_Z] = rawSplat[Z];\r\n\r\n            return newSplat;\r\n        };\r\n\r\n    }();\r\n\r\n    static readSplat(splatData, header, row, dataOffset, rawSplat) {\r\n        return PlyParserUtils.readVertex(splatData, header, row, dataOffset, FieldsToReadIndexes, rawSplat, true);\r\n    }\r\n\r\n    parseToUncompressedSplatArray(plyBuffer, outSphericalHarmonicsDegree = 0) {\r\n        const header = this.decodeHeaderFromBuffer(plyBuffer);\r\n        const splatCount = header.splatCount;\r\n        const splatData = this.findSplatData(plyBuffer, header);\r\n        const splatArray = this.decodeSectionSplatData(splatData, splatCount, header, outSphericalHarmonicsDegree);\r\n        return splatArray;\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { PlyParserUtils } from './PlyParserUtils.js';\r\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\r\nimport { clamp } from '../../Util.js';\r\n\r\nconst CodeBookEntryNamesToRead = [\r\n    'features_dc', 'features_rest_0', 'features_rest_1', 'features_rest_2', 'features_rest_3', 'features_rest_4', 'features_rest_5',\r\n    'features_rest_6', 'features_rest_7', 'features_rest_8', 'features_rest_9', 'features_rest_10', 'features_rest_11', 'features_rest_12',\r\n    'features_rest_13', 'features_rest_14', 'opacity', 'scaling', 'rotation_re', 'rotation_im'\r\n];\r\nconst CodeBookEntriesToReadIndexes = CodeBookEntryNamesToRead.map((e, i) => i);\r\n\r\nconst [\r\n        CB_FEATURES_DC, CB_FEATURES_REST_0, CB_FEATURES_REST_3, CB_OPACITY, CB_SCALING, CB_ROTATION_RE, CB_ROTATION_IM\r\n      ] = [0, 1, 4, 16, 17, 18, 19];\r\n\r\nconst FieldNamesToRead = ['scale_0', 'scale_1', 'scale_2', 'rot_0', 'rot_1', 'rot_2', 'rot_3',\r\n                          'x', 'y', 'z', 'f_dc_0', 'f_dc_1', 'f_dc_2', 'opacity', 'red', 'green', 'blue',\r\n                          'f_rest_0', 'f_rest_1', 'f_rest_2', 'f_rest_3', 'f_rest_4', 'f_rest_5', 'f_rest_6', 'f_rest_7', 'f_rest_8',\r\n                          'f_rest_9', 'f_rest_10', 'f_rest_11', 'f_rest_12', 'f_rest_13', 'f_rest_14', 'f_rest_15', 'f_rest_16',\r\n                          'f_rest_17', 'f_rest_18', 'f_rest_19', 'f_rest_20', 'f_rest_21', 'f_rest_22', 'f_rest_23', 'f_rest_24',\r\n                          'f_rest_25', 'f_rest_26', 'f_rest_27', 'f_rest_28', 'f_rest_29', 'f_rest_30', 'f_rest_31', 'f_rest_32',\r\n                          'f_rest_33', 'f_rest_34', 'f_rest_35', 'f_rest_36', 'f_rest_37', 'f_rest_38', 'f_rest_39', 'f_rest_40',\r\n                          'f_rest_41', 'f_rest_42', 'f_rest_43', 'f_rest_44', 'f_rest_45'\r\n                         ];\r\nconst FieldsToReadIndexes = FieldNamesToRead.map((e, i) => i);\r\n\r\nconst [\r\n        PLY_SCALE_0, PLY_SCALE_1, PLY_SCALE_2, PLY_ROT_0, PLY_ROT_1, PLY_ROT_2, PLY_ROT_3, PLY_X, PLY_Y, PLY_Z,\r\n        PLY_F_DC_0, PLY_F_DC_1, PLY_F_DC_2, PLY_OPACITY,\r\n      ] = FieldsToReadIndexes;\r\n\r\nconst PLY_RED = PLY_F_DC_0;\r\nconst PLY_GREEN = PLY_F_DC_1;\r\nconst PLY_BLUE = PLY_F_DC_2;\r\n\r\nconst fromHalfFloat = (hf) =>{\r\n    const t = (31744 & hf) >> 10;\r\n    const a = 1023 & hf;\r\n    return (hf >> 15 ? -1 : 1)*(t ? t === 31 ? a ? NaN : 1/0 : Math.pow(2, t - 15) *( 1 + a / 1024) : a / 1024*6103515625e-14);\r\n};\r\n\r\nexport class INRIAV2PlyParser {\r\n\r\n    constructor() {\r\n        this.plyParserutils = new PlyParserUtils();\r\n    }\r\n\r\n    decodeSectionHeadersFromHeaderLines(headerLines) {\r\n        const fieldNameIdMap = FieldsToReadIndexes.reduce((acc, element) => {\r\n            acc[FieldNamesToRead[element]] = element;\r\n            return acc;\r\n        }, {});\r\n\r\n        const codeBookEntriesToReadIdMap = CodeBookEntriesToReadIndexes.reduce((acc, element) => {\r\n            acc[CodeBookEntryNamesToRead[element]] = element;\r\n            return acc;\r\n        }, {});\r\n\r\n        const sectionNames = PlyParserUtils.getHeaderSectionNames(headerLines);\r\n        let codeBookSectionIndex;\r\n        for (let s = 0; s < sectionNames.length; s++) {\r\n            const sectionName = sectionNames[s];\r\n            if (sectionName === 'codebook_centers') {\r\n                codeBookSectionIndex = s;\r\n            }\r\n        }\r\n\r\n        let currentStartLine = 0;\r\n        let lastSectionFound = false;\r\n        const sectionHeaders = [];\r\n        let sectionIndex = 0;\r\n        while (!lastSectionFound) {\r\n            let sectionHeader;\r\n            if (sectionIndex === codeBookSectionIndex) {\r\n                sectionHeader = this.plyParserutils.decodeSectionHeader(headerLines, codeBookEntriesToReadIdMap, currentStartLine);\r\n            } else {\r\n                sectionHeader = this.plyParserutils.decodeSectionHeader(headerLines, fieldNameIdMap, currentStartLine);\r\n            }\r\n            lastSectionFound = sectionHeader.endOfHeader;\r\n            currentStartLine = sectionHeader.headerEndLine + 1;\r\n            if (!lastSectionFound) {\r\n                sectionHeader.splatCount = sectionHeader.vertexCount;\r\n                sectionHeader.bytesPerSplat = sectionHeader.bytesPerVertex;\r\n            }\r\n            sectionHeaders.push(sectionHeader);\r\n            sectionIndex++;\r\n        }\r\n        return sectionHeaders;\r\n    }\r\n\r\n    decodeSectionHeadersFromHeaderText(headerText) {\r\n        const headerLines = PlyParserUtils.convertHeaderTextToLines(headerText);\r\n        return this.decodeSectionHeadersFromHeaderLines(headerLines);\r\n    }\r\n\r\n    getSplatCountFromSectionHeaders(sectionHeaders) {\r\n        let splatCount = 0;\r\n        for (let sectionHeader of sectionHeaders) {\r\n            if (sectionHeader.sectionName !== 'codebook_centers') {\r\n                splatCount += sectionHeader.vertexCount;\r\n            }\r\n        }\r\n        return splatCount;\r\n    }\r\n\r\n    decodeHeaderFromHeaderText(headerText) {\r\n        const headerSizeBytes = headerText.indexOf(PlyParserUtils.HeaderEndToken) + PlyParserUtils.HeaderEndToken.length + 1;\r\n        const sectionHeaders = this.decodeSectionHeadersFromHeaderText(headerText);\r\n        const splatCount = this.getSplatCountFromSectionHeaders(sectionHeaders);\r\n        return {\r\n            'headerSizeBytes': headerSizeBytes,\r\n            'sectionHeaders': sectionHeaders,\r\n            'splatCount': splatCount\r\n        };\r\n    }\r\n\r\n    decodeHeaderFromBuffer(plyBuffer) {\r\n        const headerText = this.plyParserutils.readHeaderFromBuffer(plyBuffer);\r\n        return this.decodeHeaderFromHeaderText(headerText);\r\n    }\r\n\r\n    findVertexData(plyBuffer, header, targetSection) {\r\n        let byteOffset = header.headerSizeBytes;\r\n        for (let s = 0; s < targetSection && s < header.sectionHeaders.length; s++) {\r\n            const sectionHeader = header.sectionHeaders[s];\r\n            byteOffset += sectionHeader.dataSizeBytes;\r\n        }\r\n        return new DataView(plyBuffer, byteOffset, header.sectionHeaders[targetSection].dataSizeBytes);\r\n    }\r\n\r\n    decodeCodeBook(codeBookData, sectionHeader) {\r\n\r\n        const rawVertex = [];\r\n        const codeBook = [];\r\n        for (let row = 0; row < sectionHeader.vertexCount; row++) {\r\n            PlyParserUtils.readVertex(codeBookData, sectionHeader, row, 0, CodeBookEntriesToReadIndexes, rawVertex);\r\n            for (let index of CodeBookEntriesToReadIndexes) {\r\n                const codeBookElementOffset = CodeBookEntriesToReadIndexes[index];\r\n                let codeBookPage = codeBook[codeBookElementOffset];\r\n                if (!codeBookPage) {\r\n                    codeBook[codeBookElementOffset] = codeBookPage = [];\r\n                }\r\n                codeBookPage.push(rawVertex[index]);\r\n            }\r\n        }\r\n        for (let page = 0; page < codeBook.length; page++) {\r\n            const codeBookPage = codeBook[page];\r\n            const SH_C0 = 0.28209479177387814;\r\n            for (let i = 0; i < codeBookPage.length; i++) {\r\n               const baseValue = fromHalfFloat(codeBookPage[i]);\r\n                if (page === CB_OPACITY) {\r\n                    codeBookPage[i] = Math.round((1 / (1 + Math.exp(-baseValue))) * 255);\r\n                } else if (page === CB_FEATURES_DC) {\r\n                    codeBookPage[i] = Math.round((0.5 + SH_C0 * baseValue) * 255);\r\n                } else if (page === CB_SCALING) {\r\n                    codeBookPage[i] = Math.exp(baseValue);\r\n                } else {\r\n                    codeBookPage[i] = baseValue;\r\n                }\r\n            }\r\n        }\r\n        return codeBook;\r\n    }\r\n\r\n    decodeSectionSplatData(sectionSplatData, splatCount, sectionHeader, codeBook, outSphericalHarmonicsDegree) {\r\n        outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, sectionHeader.sphericalHarmonicsDegree);\r\n        const splatArray = new UncompressedSplatArray(outSphericalHarmonicsDegree);\r\n        for (let row = 0; row < splatCount; row++) {\r\n            const newSplat = INRIAV2PlyParser.parseToUncompressedSplat(sectionSplatData, row, sectionHeader, codeBook,\r\n                                                                       0, outSphericalHarmonicsDegree);\r\n            splatArray.addSplat(newSplat);\r\n        }\r\n        return splatArray;\r\n    }\r\n\r\n    static parseToUncompressedSplat = function() {\r\n\r\n        let rawSplat = [];\r\n        const tempRotation = new THREE.Quaternion();\r\n\r\n        const OFFSET_X = UncompressedSplatArray.OFFSET.X;\r\n        const OFFSET_Y = UncompressedSplatArray.OFFSET.Y;\r\n        const OFFSET_Z = UncompressedSplatArray.OFFSET.Z;\r\n\r\n        const OFFSET_SCALE0 = UncompressedSplatArray.OFFSET.SCALE0;\r\n        const OFFSET_SCALE1 = UncompressedSplatArray.OFFSET.SCALE1;\r\n        const OFFSET_SCALE2 = UncompressedSplatArray.OFFSET.SCALE2;\r\n\r\n        const OFFSET_ROTATION0 = UncompressedSplatArray.OFFSET.ROTATION0;\r\n        const OFFSET_ROTATION1 = UncompressedSplatArray.OFFSET.ROTATION1;\r\n        const OFFSET_ROTATION2 = UncompressedSplatArray.OFFSET.ROTATION2;\r\n        const OFFSET_ROTATION3 = UncompressedSplatArray.OFFSET.ROTATION3;\r\n\r\n        const OFFSET_FDC0 = UncompressedSplatArray.OFFSET.FDC0;\r\n        const OFFSET_FDC1 = UncompressedSplatArray.OFFSET.FDC1;\r\n        const OFFSET_FDC2 = UncompressedSplatArray.OFFSET.FDC2;\r\n        const OFFSET_OPACITY = UncompressedSplatArray.OFFSET.OPACITY;\r\n\r\n        const OFFSET_FRC = [];\r\n\r\n        for (let i = 0; i < 45; i++) {\r\n            OFFSET_FRC[i] = UncompressedSplatArray.OFFSET.FRC0 + i;\r\n        }\r\n\r\n        return function(splatData, row, header, codeBook, splatDataOffset = 0, outSphericalHarmonicsDegree = 0) {\r\n            outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, header.sphericalHarmonicsDegree);\r\n            INRIAV2PlyParser.readSplat(splatData, header, row, splatDataOffset, rawSplat);\r\n            const newSplat = UncompressedSplatArray.createSplat(outSphericalHarmonicsDegree);\r\n            if (rawSplat[PLY_SCALE_0] !== undefined) {\r\n                newSplat[OFFSET_SCALE0] = codeBook[CB_SCALING][rawSplat[PLY_SCALE_0]];\r\n                newSplat[OFFSET_SCALE1] = codeBook[CB_SCALING][rawSplat[PLY_SCALE_1]];\r\n                newSplat[OFFSET_SCALE2] = codeBook[CB_SCALING][rawSplat[PLY_SCALE_2]];\r\n            } else {\r\n                newSplat[OFFSET_SCALE0] = 0.01;\r\n                newSplat[OFFSET_SCALE1] = 0.01;\r\n                newSplat[OFFSET_SCALE2] = 0.01;\r\n            }\r\n\r\n            if (rawSplat[PLY_F_DC_0] !== undefined) {\r\n                newSplat[OFFSET_FDC0] = codeBook[CB_FEATURES_DC][rawSplat[PLY_F_DC_0]];\r\n                newSplat[OFFSET_FDC1] = codeBook[CB_FEATURES_DC][rawSplat[PLY_F_DC_1]];\r\n                newSplat[OFFSET_FDC2] = codeBook[CB_FEATURES_DC][rawSplat[PLY_F_DC_2]];\r\n            } else if (rawSplat[PLY_RED] !== undefined) {\r\n                newSplat[OFFSET_FDC0] = rawSplat[PLY_RED] * 255;\r\n                newSplat[OFFSET_FDC1] = rawSplat[PLY_GREEN] * 255;\r\n                newSplat[OFFSET_FDC2] = rawSplat[PLY_BLUE] * 255;\r\n            } else {\r\n                newSplat[OFFSET_FDC0] = 0;\r\n                newSplat[OFFSET_FDC1] = 0;\r\n                newSplat[OFFSET_FDC2] = 0;\r\n            }\r\n\r\n            if (rawSplat[PLY_OPACITY] !== undefined) {\r\n                newSplat[OFFSET_OPACITY] = codeBook[CB_OPACITY][rawSplat[PLY_OPACITY]];\r\n            }\r\n\r\n            newSplat[OFFSET_FDC0] = clamp(Math.floor(newSplat[OFFSET_FDC0]), 0, 255);\r\n            newSplat[OFFSET_FDC1] = clamp(Math.floor(newSplat[OFFSET_FDC1]), 0, 255);\r\n            newSplat[OFFSET_FDC2] = clamp(Math.floor(newSplat[OFFSET_FDC2]), 0, 255);\r\n            newSplat[OFFSET_OPACITY] = clamp(Math.floor(newSplat[OFFSET_OPACITY]), 0, 255);\r\n\r\n            if (outSphericalHarmonicsDegree >= 1 && header.sphericalHarmonicsDegree >= 1) {\r\n                for (let i = 0; i < 9; i++) {\r\n                    const codeBookPage = codeBook[CB_FEATURES_REST_0 + i % 3];\r\n                    newSplat[OFFSET_FRC[i]] = codeBookPage[rawSplat[header.sphericalHarmonicsDegree1Fields[i]]];\r\n                }\r\n                if (outSphericalHarmonicsDegree >= 2 && header.sphericalHarmonicsDegree >= 2) {\r\n                    for (let i = 0; i < 15; i++) {\r\n                        const codeBookPage = codeBook[CB_FEATURES_REST_3 + i % 5];\r\n                        newSplat[OFFSET_FRC[9 + i]] = codeBookPage[rawSplat[header.sphericalHarmonicsDegree2Fields[i]]];\r\n                    }\r\n                }\r\n            }\r\n\r\n            const rot0 = codeBook[CB_ROTATION_RE][rawSplat[PLY_ROT_0]];\r\n            const rot1 = codeBook[CB_ROTATION_IM][rawSplat[PLY_ROT_1]];\r\n            const rot2 = codeBook[CB_ROTATION_IM][rawSplat[PLY_ROT_2]];\r\n            const rot3 = codeBook[CB_ROTATION_IM][rawSplat[PLY_ROT_3]];\r\n            tempRotation.set(rot0, rot1, rot2, rot3);\r\n            tempRotation.normalize();\r\n\r\n            newSplat[OFFSET_ROTATION0] = tempRotation.x;\r\n            newSplat[OFFSET_ROTATION1] = tempRotation.y;\r\n            newSplat[OFFSET_ROTATION2] = tempRotation.z;\r\n            newSplat[OFFSET_ROTATION3] = tempRotation.w;\r\n\r\n            newSplat[OFFSET_X] = fromHalfFloat(rawSplat[PLY_X]);\r\n            newSplat[OFFSET_Y] = fromHalfFloat(rawSplat[PLY_Y]);\r\n            newSplat[OFFSET_Z] = fromHalfFloat(rawSplat[PLY_Z]);\r\n\r\n            return newSplat;\r\n        };\r\n\r\n    }();\r\n\r\n    static readSplat(splatData, header, row, dataOffset, rawSplat) {\r\n        return PlyParserUtils.readVertex(splatData, header, row, dataOffset, FieldsToReadIndexes, rawSplat, false);\r\n    }\r\n\r\n    parseToUncompressedSplatArray(plyBuffer, outSphericalHarmonicsDegree = 0) {\r\n        const splatArrays = [];\r\n        const header = this.decodeHeaderFromBuffer(plyBuffer, outSphericalHarmonicsDegree);\r\n        let codeBook;\r\n\r\n        for (let s = 0; s < header.sectionHeaders.length; s++) {\r\n            const sectionHeader = header.sectionHeaders[s];\r\n            if (sectionHeader.sectionName === 'codebook_centers') {\r\n                const codeBookData = this.findVertexData(plyBuffer, header, s);\r\n                codeBook = this.decodeCodeBook(codeBookData, sectionHeader);\r\n            }\r\n        }\r\n        for (let s = 0; s < header.sectionHeaders.length; s++) {\r\n            const sectionHeader = header.sectionHeaders[s];\r\n            if (sectionHeader.sectionName !== 'codebook_centers') {\r\n                const splatCount = sectionHeader.vertexCount;\r\n                const vertexData = this.findVertexData(plyBuffer, header, s);\r\n                const splatArray = this.decodeSectionSplatData(vertexData, splatCount, sectionHeader,\r\n                                                               codeBook, outSphericalHarmonicsDegree);\r\n                splatArrays.push(splatArray);\r\n            }\r\n        }\r\n\r\n        const unified = new UncompressedSplatArray(outSphericalHarmonicsDegree);\r\n        for (let splatArray of splatArrays) {\r\n            for (let splat of splatArray.splats) {\r\n                unified.addSplat(splat);\r\n            }\r\n        }\r\n\r\n        return unified;\r\n    }\r\n}\r\n","import { PlayCanvasCompressedPlyParser } from './PlayCanvasCompressedPlyParser.js';\r\nimport { INRIAV1PlyParser } from './INRIAV1PlyParser.js';\r\nimport { INRIAV2PlyParser } from './INRIAV2PlyParser.js';\r\nimport { PlyParserUtils } from './PlyParserUtils.js';\r\nimport { PlyFormat } from './PlyFormat.js';\r\n\r\nexport class PlyParser {\r\n\r\n    static parseToUncompressedSplatArray(plyBuffer, outSphericalHarmonicsDegree = 0) {\r\n\r\n        const plyFormat = PlyParserUtils.determineHeaderFormatFromPlyBuffer(plyBuffer);\r\n\r\n        if (plyFormat === PlyFormat.PlayCanvasCompressed) {\r\n            return PlayCanvasCompressedPlyParser.parseToUncompressedSplatArray(plyBuffer);\r\n        } else if (plyFormat === PlyFormat.INRIAV1) {\r\n            return new INRIAV1PlyParser().parseToUncompressedSplatArray(plyBuffer, outSphericalHarmonicsDegree);\r\n        } else if (plyFormat === PlyFormat.INRIAV2) {\r\n            return new INRIAV2PlyParser().parseToUncompressedSplatArray(plyBuffer, outSphericalHarmonicsDegree);\r\n        }\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { UncompressedSplatArray } from './UncompressedSplatArray.js';\r\nimport { SplatBuffer } from './SplatBuffer.js';\r\n\r\nexport class SplatPartitioner {\r\n\r\n    constructor(sectionCount, sectionFilters, groupingParameters, partitionGenerator) {\r\n        this.sectionCount = sectionCount;\r\n        this.sectionFilters = sectionFilters;\r\n        this.groupingParameters = groupingParameters;\r\n        this.partitionGenerator = partitionGenerator;\r\n    }\r\n\r\n    partitionUncompressedSplatArray(splatArray) {\r\n        let groupingParameters;\r\n        let sectionCount;\r\n        let sectionFilters;\r\n        if (this.partitionGenerator) {\r\n            const results = this.partitionGenerator(splatArray);\r\n            groupingParameters = results.groupingParameters;\r\n            sectionCount = results.sectionCount;\r\n            sectionFilters = results.sectionFilters;\r\n        } else {\r\n            groupingParameters = this.groupingParameters;\r\n            sectionCount = this.sectionCount;\r\n            sectionFilters = this.sectionFilters;\r\n        }\r\n\r\n        const newArrays = [];\r\n        for (let s = 0; s < sectionCount; s++) {\r\n            const sectionSplats = new UncompressedSplatArray(splatArray.sphericalHarmonicsDegree);\r\n            const sectionFilter = sectionFilters[s];\r\n            for (let i = 0; i < splatArray.splatCount; i++) {\r\n                if (sectionFilter(i)) {\r\n                    sectionSplats.addSplatFromArray(splatArray, i);\r\n                }\r\n            }\r\n            newArrays.push(sectionSplats);\r\n        }\r\n        return {\r\n            splatArrays: newArrays,\r\n            parameters: groupingParameters\r\n        };\r\n    }\r\n\r\n    static getStandardPartitioner(partitionSize = 0, sceneCenter = new THREE.Vector3(),\r\n                                  blockSize = SplatBuffer.BucketBlockSize, bucketSize = SplatBuffer.BucketSize) {\r\n\r\n        const partitionGenerator = (splatArray) => {\r\n\r\n            const OFFSET_X = UncompressedSplatArray.OFFSET.X;\r\n            const OFFSET_Y = UncompressedSplatArray.OFFSET.Y;\r\n            const OFFSET_Z = UncompressedSplatArray.OFFSET.Z;\r\n\r\n            if (partitionSize <= 0) partitionSize = splatArray.splatCount;\r\n\r\n            const center = new THREE.Vector3();\r\n            const clampDistance = 0.5;\r\n            const clampPoint = (point) => {\r\n                point.x = Math.floor(point.x / clampDistance) * clampDistance;\r\n                point.y = Math.floor(point.y / clampDistance) * clampDistance;\r\n                point.z = Math.floor(point.z / clampDistance) * clampDistance;\r\n            };\r\n            splatArray.splats.forEach((splat) => {\r\n                center.set(splat[OFFSET_X], splat[OFFSET_Y], splat[OFFSET_Z]).sub(sceneCenter);\r\n                clampPoint(center);\r\n                splat.centerDist = center.lengthSq();\r\n            });\r\n            splatArray.splats.sort((a, b) => {\r\n                let centerADist = a.centerDist;\r\n                let centerBDist = b.centerDist;\r\n                if (centerADist > centerBDist) return 1;\r\n                else return -1;\r\n            });\r\n\r\n            const sectionFilters = [];\r\n            const groupingParameters = [];\r\n            partitionSize = Math.min(splatArray.splatCount, partitionSize);\r\n            const patitionCount = Math.ceil(splatArray.splatCount / partitionSize);\r\n            let currentStartSplat = 0;\r\n            for (let i = 0; i < patitionCount; i ++) {\r\n                let startSplat = currentStartSplat;\r\n                sectionFilters.push((splatIndex) => {\r\n                    return splatIndex >= startSplat && splatIndex < startSplat + partitionSize;\r\n                });\r\n                groupingParameters.push({\r\n                    'blocksSize': blockSize,\r\n                    'bucketSize': bucketSize,\r\n                });\r\n                currentStartSplat += partitionSize;\r\n            }\r\n            return {\r\n                'sectionCount': sectionFilters.length,\r\n                sectionFilters,\r\n                groupingParameters\r\n            };\r\n        };\r\n        return new SplatPartitioner(undefined, undefined, undefined, partitionGenerator);\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { SplatPartitioner } from './SplatPartitioner.js';\r\nimport { SplatBuffer } from './SplatBuffer.js';\r\n\r\nexport class SplatBufferGenerator {\r\n\r\n    constructor(splatPartitioner, alphaRemovalThreshold, compressionLevel, sectionSize, sceneCenter, blockSize, bucketSize) {\r\n        this.splatPartitioner = splatPartitioner;\r\n        this.alphaRemovalThreshold = alphaRemovalThreshold;\r\n        this.compressionLevel = compressionLevel;\r\n        this.sectionSize = sectionSize;\r\n        this.sceneCenter = sceneCenter ? new THREE.Vector3().copy(sceneCenter) : undefined;\r\n        this.blockSize = blockSize;\r\n        this.bucketSize = bucketSize;\r\n    }\r\n\r\n    generateFromUncompressedSplatArray(splatArray) {\r\n        const partitionResults = this.splatPartitioner.partitionUncompressedSplatArray(splatArray);\r\n        return SplatBuffer.generateFromUncompressedSplatArrays(partitionResults.splatArrays,\r\n                                                               this.alphaRemovalThreshold, this.compressionLevel,\r\n                                                               this.sceneCenter, this.blockSize, this.bucketSize,\r\n                                                               partitionResults.parameters);\r\n    }\r\n\r\n    static getStandardGenerator(alphaRemovalThreshold = 1, compressionLevel = 1, sectionSize = 0, sceneCenter = new THREE.Vector3(),\r\n                                blockSize = SplatBuffer.BucketBlockSize, bucketSize = SplatBuffer.BucketSize) {\r\n        const splatPartitioner = SplatPartitioner.getStandardPartitioner(sectionSize, sceneCenter, blockSize, bucketSize);\r\n        return new SplatBufferGenerator(splatPartitioner, alphaRemovalThreshold, compressionLevel,\r\n                                        sectionSize, sceneCenter, blockSize, bucketSize);\r\n    }\r\n}\r\n","export const LoaderStatus = {\r\n    'Downloading': 0,\r\n    'Processing': 1,\r\n    'Done': 2\r\n};\r\n","import * as THREE from 'three';\r\nimport { PlyParser } from './PlyParser.js';\r\nimport { PlyParserUtils } from './PlyParserUtils.js';\r\nimport { INRIAV1PlyParser } from './INRIAV1PlyParser.js';\r\nimport { PlayCanvasCompressedPlyParser } from './PlayCanvasCompressedPlyParser.js';\r\nimport { PlyFormat } from './PlyFormat.js';\r\nimport { fetchWithProgress, delayedExecute, nativePromiseWithExtractedComponents } from '../../Util.js';\r\nimport { SplatBuffer } from '../SplatBuffer.js';\r\nimport { SplatBufferGenerator } from '../SplatBufferGenerator.js';\r\nimport { LoaderStatus } from '../LoaderStatus.js';\r\nimport { Constants } from '../../Constants.js';\r\n\r\nfunction storeChunksInBuffer(chunks, buffer) {\r\n    let inBytes = 0;\r\n    for (let chunk of chunks) inBytes += chunk.sizeBytes;\r\n\r\n    if (!buffer || buffer.byteLength < inBytes) {\r\n        buffer = new ArrayBuffer(inBytes);\r\n    }\r\n\r\n    let offset = 0;\r\n    for (let chunk of chunks) {\r\n        new Uint8Array(buffer, offset, chunk.sizeBytes).set(chunk.data);\r\n        offset += chunk.sizeBytes;\r\n    }\r\n\r\n    return buffer;\r\n}\r\n\r\nexport class PlyLoader {\r\n\r\n    static loadFromURL(fileName, onProgress, progressiveLoad, onStreamedSectionProgress, minimumAlpha, compressionLevel,\r\n                       outSphericalHarmonicsDegree = 0, sectionSize, sceneCenter, blockSize, bucketSize) {\r\n\r\n        const progressiveLoadSectionSizeBytes = Constants.ProgressiveLoadSectionSize;\r\n        const splatDataOffsetBytes = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes;\r\n        const sectionCount = 1;\r\n\r\n        let progressiveLoadBufferIn;\r\n        let progressiveLoadBufferOut;\r\n        let progressiveLoadSplatBuffer;\r\n        let compressedPlyHeaderChunksBuffer;\r\n        let maxSplatCount = 0;\r\n        let splatCount = 0;\r\n\r\n        let headerLoaded = false;\r\n        let readyToLoadSplatData = false;\r\n        let compressed = false;\r\n\r\n        const progressiveLoadPromise = nativePromiseWithExtractedComponents();\r\n\r\n        let numBytesStreamed = 0;\r\n        let numBytesParsed = 0;\r\n        let numBytesDownloaded = 0;\r\n        let headerText = '';\r\n        let header = null;\r\n        let chunks = [];\r\n\r\n        const textDecoder = new TextDecoder();\r\n\r\n        const inriaV1PlyParser = new INRIAV1PlyParser();\r\n\r\n        const localOnProgress = (percent, percentLabel, chunkData) => {\r\n            const loadComplete = percent >= 100;\r\n            if (progressiveLoad) {\r\n\r\n                if (chunkData) {\r\n                    chunks.push({\r\n                        'data': chunkData,\r\n                        'sizeBytes': chunkData.byteLength,\r\n                        'startBytes': numBytesDownloaded,\r\n                        'endBytes': numBytesDownloaded + chunkData.byteLength\r\n                    });\r\n                    numBytesDownloaded += chunkData.byteLength;\r\n                }\r\n\r\n                if (!headerLoaded) {\r\n                    headerText += textDecoder.decode(chunkData);\r\n                    if (PlyParserUtils.checkTextForEndHeader(headerText)) {\r\n                        const plyFormat = PlyParserUtils.determineHeaderFormatFromHeaderText(headerText);\r\n                        if (plyFormat === PlyFormat.INRIAV1) {\r\n                            header = inriaV1PlyParser.decodeHeaderText(headerText);\r\n                            maxSplatCount = header.splatCount;\r\n                            readyToLoadSplatData = true;\r\n                            compressed = false;\r\n                        } else if (plyFormat === PlyFormat.PlayCanvasCompressed) {\r\n                            header = PlayCanvasCompressedPlyParser.decodeHeaderText(headerText);\r\n                            maxSplatCount = header.vertexElement.count;\r\n                            compressed = true;\r\n                        } else {\r\n                            throw new Error('PlyLoader.loadFromURL() -> Selected Ply format cannot be progressively loaded.');\r\n                        }\r\n                        outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, header.sphericalHarmonicsDegree);\r\n\r\n                        const shDescriptor = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[outSphericalHarmonicsDegree];\r\n                        const splatBufferSizeBytes = splatDataOffsetBytes + shDescriptor.BytesPerSplat * maxSplatCount;\r\n                        progressiveLoadBufferOut = new ArrayBuffer(splatBufferSizeBytes);\r\n                        SplatBuffer.writeHeaderToBuffer({\r\n                            versionMajor: SplatBuffer.CurrentMajorVersion,\r\n                            versionMinor: SplatBuffer.CurrentMinorVersion,\r\n                            maxSectionCount: sectionCount,\r\n                            sectionCount: sectionCount,\r\n                            maxSplatCount: maxSplatCount,\r\n                            splatCount: splatCount,\r\n                            compressionLevel: 0,\r\n                            sceneCenter: new THREE.Vector3()\r\n                        }, progressiveLoadBufferOut);\r\n\r\n                        numBytesStreamed = header.headerSizeBytes;\r\n                        numBytesParsed = header.headerSizeBytes;\r\n                        headerLoaded = true;\r\n                    }\r\n                } else if (compressed && !readyToLoadSplatData) {\r\n                    const sizeRequiredForHeaderAndChunks = header.headerSizeBytes + header.chunkElement.storageSizeBytes;\r\n                    compressedPlyHeaderChunksBuffer = storeChunksInBuffer(chunks, compressedPlyHeaderChunksBuffer);\r\n                    if (compressedPlyHeaderChunksBuffer.byteLength >= sizeRequiredForHeaderAndChunks) {\r\n                        PlayCanvasCompressedPlyParser.readElementData(header.chunkElement, compressedPlyHeaderChunksBuffer,\r\n                                                                      header.headerSizeBytes);\r\n                        numBytesStreamed = sizeRequiredForHeaderAndChunks;\r\n                        numBytesParsed = sizeRequiredForHeaderAndChunks;\r\n                        readyToLoadSplatData = true;\r\n                    }\r\n                }\r\n\r\n                if (headerLoaded && readyToLoadSplatData) {\r\n\r\n                    if (chunks.length > 0) {\r\n\r\n                        progressiveLoadBufferIn = storeChunksInBuffer(chunks, progressiveLoadBufferIn);\r\n\r\n                        const bytesLoadedSinceLastStreamedSection = numBytesDownloaded - numBytesStreamed;\r\n                        if (bytesLoadedSinceLastStreamedSection > progressiveLoadSectionSizeBytes || loadComplete) {\r\n                            const numBytesToProcess = numBytesDownloaded - numBytesParsed;\r\n                            const addedSplatCount = Math.floor(numBytesToProcess / header.bytesPerSplat);\r\n                            const numBytesToParse = addedSplatCount * header.bytesPerSplat;\r\n                            const numBytesLeftOver = numBytesToProcess - numBytesToParse;\r\n                            const newSplatCount = splatCount + addedSplatCount;\r\n                            const parsedDataViewOffset = numBytesParsed - chunks[0].startBytes;\r\n                            const dataToParse = new DataView(progressiveLoadBufferIn, parsedDataViewOffset, numBytesToParse);\r\n\r\n                            const shDescriptor = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[outSphericalHarmonicsDegree];\r\n                            const outOffset = splatCount * shDescriptor.BytesPerSplat + splatDataOffsetBytes;\r\n\r\n                            if (compressed) {\r\n                                PlayCanvasCompressedPlyParser.parseToUncompressedSplatBufferSection(header.chunkElement,\r\n                                                                                                    header.vertexElement, 0,\r\n                                                                                                    addedSplatCount - 1, splatCount,\r\n                                                                                                    dataToParse, 0,\r\n                                                                                                    progressiveLoadBufferOut, outOffset);\r\n                            } else {\r\n                                inriaV1PlyParser.parseToUncompressedSplatBufferSection(header, 0, addedSplatCount - 1, dataToParse,\r\n                                                                                       0, progressiveLoadBufferOut, outOffset,\r\n                                                                                       outSphericalHarmonicsDegree);\r\n                            }\r\n\r\n                            splatCount = newSplatCount;\r\n                            if (!progressiveLoadSplatBuffer) {\r\n                                SplatBuffer.writeSectionHeaderToBuffer({\r\n                                    maxSplatCount: maxSplatCount,\r\n                                    splatCount: splatCount,\r\n                                    bucketSize: 0,\r\n                                    bucketCount: 0,\r\n                                    bucketBlockSize: 0,\r\n                                    compressionScaleRange: 0,\r\n                                    storageSizeBytes: 0,\r\n                                    fullBucketCount: 0,\r\n                                    partiallyFilledBucketCount: 0,\r\n                                    sphericalHarmonicsDegree: outSphericalHarmonicsDegree\r\n                                }, 0, progressiveLoadBufferOut, SplatBuffer.HeaderSizeBytes);\r\n                                progressiveLoadSplatBuffer = new SplatBuffer(progressiveLoadBufferOut, false);\r\n                            }\r\n                            progressiveLoadSplatBuffer.updateLoadedCounts(1, splatCount);\r\n                            onStreamedSectionProgress(progressiveLoadSplatBuffer, loadComplete);\r\n                            numBytesStreamed += progressiveLoadSectionSizeBytes;\r\n                            numBytesParsed += numBytesToParse;\r\n\r\n                            if (numBytesLeftOver === 0) {\r\n                                chunks = [];\r\n                            } else {\r\n                                let keepChunks = [];\r\n                                let keepSize = 0;\r\n                                for (let i = chunks.length - 1; i >= 0; i--) {\r\n                                    const chunk = chunks[i];\r\n                                    keepSize += chunk.sizeBytes;\r\n                                    keepChunks.unshift(chunk);\r\n                                    if (keepSize >= numBytesLeftOver) break;\r\n                                }\r\n                                chunks = keepChunks;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (loadComplete) {\r\n                        progressiveLoadPromise.resolve(progressiveLoadSplatBuffer);\r\n                    }\r\n                }\r\n\r\n            }\r\n            if (onProgress) onProgress(percent, percentLabel, LoaderStatus.Downloading);\r\n        };\r\n\r\n        return fetchWithProgress(fileName, localOnProgress, !progressiveLoad).then((plyFileData) => {\r\n            if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\r\n            const loadPromise = progressiveLoad ? progressiveLoadPromise.promise :\r\n                                PlyLoader.loadFromFileData(plyFileData, minimumAlpha, compressionLevel, outSphericalHarmonicsDegree,\r\n                                                           sectionSize, sceneCenter, blockSize, bucketSize);\r\n            return loadPromise.then((splatBuffer) => {\r\n                if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\r\n                return splatBuffer;\r\n            });\r\n        });\r\n    }\r\n\r\n    static loadFromFileData(plyFileData, minimumAlpha, compressionLevel, outSphericalHarmonicsDegree = 0,\r\n                            sectionSize, sceneCenter, blockSize, bucketSize) {\r\n        return delayedExecute(() => {\r\n            return PlyParser.parseToUncompressedSplatArray(plyFileData, outSphericalHarmonicsDegree);\r\n        })\r\n        .then((splatArray) => {\r\n            const splatBufferGenerator = SplatBufferGenerator.getStandardGenerator(minimumAlpha, compressionLevel, sectionSize,\r\n                                                                                   sceneCenter, blockSize, bucketSize);\r\n            return splatBufferGenerator.generateFromUncompressedSplatArray(splatArray);\r\n        });\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { SplatBuffer } from '../SplatBuffer.js';\r\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\r\n\r\nexport class SplatParser {\r\n\r\n    static RowSizeBytes = 32;\r\n    static CenterSizeBytes = 12;\r\n    static ScaleSizeBytes = 12;\r\n    static RotationSizeBytes = 4;\r\n    static ColorSizeBytes = 4;\r\n\r\n    static parseToUncompressedSplatBufferSection(fromSplat, toSplat, fromBuffer, fromOffset, toBuffer, toOffset) {\r\n\r\n        const outBytesPerCenter = SplatBuffer.CompressionLevels[0].BytesPerCenter;\r\n        const outBytesPerScale = SplatBuffer.CompressionLevels[0].BytesPerScale;\r\n        const outBytesPerRotation = SplatBuffer.CompressionLevels[0].BytesPerRotation;\r\n        const outBytesPerSplat = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[0].BytesPerSplat;\r\n\r\n        for (let i = fromSplat; i <= toSplat; i++) {\r\n            const inBase = i * SplatParser.RowSizeBytes + fromOffset;\r\n            const inCenter = new Float32Array(fromBuffer, inBase, 3);\r\n            const inScale = new Float32Array(fromBuffer, inBase + SplatParser.CenterSizeBytes, 3);\r\n            const inColor = new Uint8Array(fromBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes, 4);\r\n            const inRotation = new Uint8Array(fromBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes +\r\n                                              SplatParser.RotationSizeBytes, 4);\r\n\r\n            const quat = new THREE.Quaternion((inRotation[1] - 128) / 128, (inRotation[2] - 128) / 128,\r\n                                              (inRotation[3] - 128) / 128, (inRotation[0] - 128) / 128);\r\n            quat.normalize();\r\n\r\n            const outBase = i * outBytesPerSplat + toOffset;\r\n            const outCenter = new Float32Array(toBuffer, outBase, 3);\r\n            const outScale = new Float32Array(toBuffer, outBase + outBytesPerCenter, 3);\r\n            const outRotation = new Float32Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale, 4);\r\n            const outColor = new Uint8Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale + outBytesPerRotation, 4);\r\n\r\n            outCenter[0] = inCenter[0];\r\n            outCenter[1] = inCenter[1];\r\n            outCenter[2] = inCenter[2];\r\n\r\n            outScale[0] = inScale[0];\r\n            outScale[1] = inScale[1];\r\n            outScale[2] = inScale[2];\r\n\r\n            outRotation[0] = quat.w;\r\n            outRotation[1] = quat.x;\r\n            outRotation[2] = quat.y;\r\n            outRotation[3] = quat.z;\r\n\r\n            outColor[0] = inColor[0];\r\n            outColor[1] = inColor[1];\r\n            outColor[2] = inColor[2];\r\n            outColor[3] = inColor[3];\r\n        }\r\n    }\r\n\r\n    static parseStandardSplatToUncompressedSplatArray(inBuffer) {\r\n        // Standard .splat row layout:\r\n        // XYZ - Position (Float32)\r\n        // XYZ - Scale (Float32)\r\n        // RGBA - colors (uint8)\r\n        // IJKL - quaternion/rot (uint8)\r\n\r\n        const splatCount = inBuffer.byteLength / SplatParser.RowSizeBytes;\r\n\r\n        const splatArray = new UncompressedSplatArray();\r\n\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const inBase = i * SplatParser.RowSizeBytes;\r\n            const inCenter = new Float32Array(inBuffer, inBase, 3);\r\n            const inScale = new Float32Array(inBuffer, inBase + SplatParser.CenterSizeBytes, 3);\r\n            const inColor = new Uint8Array(inBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes, 4);\r\n            const inRotation = new Uint8Array(inBuffer, inBase + SplatParser.CenterSizeBytes +\r\n                                              SplatParser.ScaleSizeBytes + SplatParser.ColorSizeBytes, 4);\r\n\r\n            const quat = new THREE.Quaternion((inRotation[1] - 128) / 128, (inRotation[2] - 128) / 128,\r\n                                              (inRotation[3] - 128) / 128, (inRotation[0] - 128) / 128);\r\n            quat.normalize();\r\n\r\n            splatArray.addSplatFromComonents(inCenter[0], inCenter[1], inCenter[2], inScale[0], inScale[1], inScale[2],\r\n                                             quat.w, quat.x, quat.y, quat.z, inColor[0], inColor[1], inColor[2], inColor[3]);\r\n        }\r\n\r\n        return splatArray;\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { SplatBuffer } from '../SplatBuffer.js';\r\nimport { SplatBufferGenerator } from '../SplatBufferGenerator.js';\r\nimport { SplatParser } from './SplatParser.js';\r\nimport { fetchWithProgress, delayedExecute, nativePromiseWithExtractedComponents } from '../../Util.js';\r\nimport { LoaderStatus } from '../LoaderStatus.js';\r\nimport { Constants } from '../../Constants.js';\r\n\r\nexport class SplatLoader {\r\n\r\n    static loadFromURL(fileName, onProgress, progressiveLoad, onStreamedSectionProgress, minimumAlpha, compressionLevel,\r\n                       optimizeSplatData, sectionSize, sceneCenter, blockSize, bucketSize) {\r\n\r\n        const splatDataOffsetBytes = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes;\r\n        const progressiveLoadSectionSizeBytes = Constants.ProgressiveLoadSectionSize;\r\n        const sectionCount = 1;\r\n\r\n        let progressiveLoadBufferIn;\r\n        let progressiveLoadBufferOut;\r\n        let progressiveLoadSplatBuffer;\r\n        let maxSplatCount = 0;\r\n        let splatCount = 0;\r\n\r\n        const progressiveLoadPromise = nativePromiseWithExtractedComponents();\r\n\r\n        let numBytesStreamed = 0;\r\n        let numBytesLoaded = 0;\r\n        let chunks = [];\r\n\r\n        const localOnProgress = (percent, percentStr, chunk, fileSize) => {\r\n            const loadComplete = percent >= 100;\r\n            if (!fileSize) progressiveLoad = false;\r\n            if (progressiveLoad) {\r\n                if (!progressiveLoadBufferIn) {\r\n                    maxSplatCount = fileSize / SplatParser.RowSizeBytes;\r\n                    progressiveLoadBufferIn = new ArrayBuffer(fileSize);\r\n                    const bytesPerSplat = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[0].BytesPerSplat;\r\n                    const splatBufferSizeBytes = splatDataOffsetBytes + bytesPerSplat * maxSplatCount;\r\n                    progressiveLoadBufferOut = new ArrayBuffer(splatBufferSizeBytes);\r\n                    SplatBuffer.writeHeaderToBuffer({\r\n                        versionMajor: SplatBuffer.CurrentMajorVersion,\r\n                        versionMinor: SplatBuffer.CurrentMinorVersion,\r\n                        maxSectionCount: sectionCount,\r\n                        sectionCount: sectionCount,\r\n                        maxSplatCount: maxSplatCount,\r\n                        splatCount: splatCount,\r\n                        compressionLevel: 0,\r\n                        sceneCenter: new THREE.Vector3()\r\n                    }, progressiveLoadBufferOut);\r\n                }\r\n\r\n                if (chunk) {\r\n                    chunks.push(chunk);\r\n                    new Uint8Array(progressiveLoadBufferIn, numBytesLoaded, chunk.byteLength).set(new Uint8Array(chunk));\r\n                    numBytesLoaded += chunk.byteLength;\r\n\r\n                    const bytesLoadedSinceLastSection = numBytesLoaded - numBytesStreamed;\r\n                    if (bytesLoadedSinceLastSection > progressiveLoadSectionSizeBytes || loadComplete) {\r\n                        const bytesToUpdate = loadComplete ? bytesLoadedSinceLastSection : progressiveLoadSectionSizeBytes;\r\n                        const addedSplatCount = bytesToUpdate / SplatParser.RowSizeBytes;\r\n                        const newSplatCount = splatCount + addedSplatCount;\r\n                        SplatParser.parseToUncompressedSplatBufferSection(splatCount, newSplatCount - 1, progressiveLoadBufferIn, 0,\r\n                                                                          progressiveLoadBufferOut, splatDataOffsetBytes);\r\n                        splatCount = newSplatCount;\r\n                        if (!progressiveLoadSplatBuffer) {\r\n                            SplatBuffer.writeSectionHeaderToBuffer({\r\n                                maxSplatCount: maxSplatCount,\r\n                                splatCount: splatCount,\r\n                                bucketSize: 0,\r\n                                bucketCount: 0,\r\n                                bucketBlockSize: 0,\r\n                                compressionScaleRange: 0,\r\n                                storageSizeBytes: 0,\r\n                                fullBucketCount: 0,\r\n                                partiallyFilledBucketCount: 0\r\n                            }, 0, progressiveLoadBufferOut, SplatBuffer.HeaderSizeBytes);\r\n                            progressiveLoadSplatBuffer = new SplatBuffer(progressiveLoadBufferOut, false);\r\n                        }\r\n                        progressiveLoadSplatBuffer.updateLoadedCounts(1, splatCount);\r\n                        onStreamedSectionProgress(progressiveLoadSplatBuffer, loadComplete);\r\n                        numBytesStreamed += progressiveLoadSectionSizeBytes;\r\n                    }\r\n                }\r\n                if (loadComplete) {\r\n                    progressiveLoadPromise.resolve(progressiveLoadSplatBuffer);\r\n                }\r\n            }\r\n            if (onProgress) onProgress(percent, percentStr, LoaderStatus.Downloading);\r\n            return progressiveLoad;\r\n        };\r\n\r\n        return fetchWithProgress(fileName, localOnProgress, true).then((fullBuffer) => {\r\n            if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\r\n            const loadPromise = progressiveLoad ? progressiveLoadPromise.promise :\r\n                SplatLoader.loadFromFileData(fullBuffer, minimumAlpha, compressionLevel, optimizeSplatData,\r\n                                             sectionSize, sceneCenter, blockSize, bucketSize);\r\n            return loadPromise.then((splatBuffer) => {\r\n                if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\r\n                return splatBuffer;\r\n            });\r\n        });\r\n    }\r\n\r\n    static loadFromFileData(splatFileData, minimumAlpha, compressionLevel, optimizeSplatData,\r\n                            sectionSize, sceneCenter, blockSize, bucketSize) {\r\n        return delayedExecute(() => {\r\n            const splatArray = SplatParser.parseStandardSplatToUncompressedSplatArray(splatFileData);\r\n            if (optimizeSplatData) {\r\n                const splatBufferGenerator = SplatBufferGenerator.getStandardGenerator(minimumAlpha, compressionLevel,\r\n                                                                                       sectionSize, sceneCenter, blockSize,\r\n                                                                                       bucketSize);\r\n                return splatBufferGenerator.generateFromUncompressedSplatArray(splatArray);\r\n            } else {\r\n                return SplatBuffer.generateFromUncompressedSplatArrays([splatArray], minimumAlpha, 0, new THREE.Vector3());\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n","import { SplatBuffer } from '../SplatBuffer.js';\r\nimport { fetchWithProgress, delayedExecute, nativePromiseWithExtractedComponents } from '../../Util.js';\r\nimport { LoaderStatus } from '../LoaderStatus.js';\r\nimport { Constants } from '../../Constants.js';\r\n\r\nexport class KSplatLoader {\r\n\r\n   static checkVersion(buffer) {\r\n        const minVersionMajor = SplatBuffer.CurrentMajorVersion;\r\n        const minVersionMinor = SplatBuffer.CurrentMinorVersion;\r\n        const header = SplatBuffer.parseHeader(buffer);\r\n        if (header.versionMajor === minVersionMajor &&\r\n            header.versionMinor >= minVersionMinor ||\r\n            header.versionMajor > minVersionMajor) {\r\n           return true;\r\n        } else {\r\n            throw new Error(`KSplat version not supported: v${header.versionMajor}.${header.versionMinor}. ` +\r\n                            `Minimum required: v${minVersionMajor}.${minVersionMinor}`);\r\n        }\r\n    };\r\n\r\n    static loadFromURL(fileName, externalOnProgress, progressiveLoad, onSectionBuilt) {\r\n        let progressiveLoadBuffer;\r\n        let progressiveLoadSplatBuffer;\r\n\r\n        let headerBuffer;\r\n        let header;\r\n        let headerLoaded = false;\r\n        let headerLoading = false;\r\n\r\n        let sectionHeadersBuffer;\r\n        let sectionHeaders = [];\r\n        let sectionHeadersLoaded = false;\r\n        let sectionHeadersLoading = false;\r\n\r\n        let numBytesLoaded = 0;\r\n        let numBytesProgressivelyLoaded = 0;\r\n        let totalBytesToDownload = 0;\r\n\r\n        let downloadComplete = false;\r\n        let loadComplete = false;\r\n        let loadSectionQueued = false;\r\n\r\n        let chunks = [];\r\n\r\n        const progressiveLoadPromise = nativePromiseWithExtractedComponents();\r\n\r\n        const checkAndLoadHeader = () => {\r\n            if (!headerLoaded && !headerLoading && numBytesLoaded >= SplatBuffer.HeaderSizeBytes) {\r\n                headerLoading = true;\r\n                const headerAssemblyPromise = new Blob(chunks).arrayBuffer();\r\n                headerAssemblyPromise.then((bufferData) => {\r\n                    headerBuffer = new ArrayBuffer(SplatBuffer.HeaderSizeBytes);\r\n                    new Uint8Array(headerBuffer).set(new Uint8Array(bufferData, 0, SplatBuffer.HeaderSizeBytes));\r\n                    KSplatLoader.checkVersion(headerBuffer);\r\n                    headerLoading = false;\r\n                    headerLoaded = true;\r\n                    header = SplatBuffer.parseHeader(headerBuffer);\r\n                    window.setTimeout(() => {\r\n                        checkAndLoadSectionHeaders();\r\n                    }, 1);\r\n                });\r\n            }\r\n        };\r\n\r\n        let queuedCheckAndLoadSectionsCount = 0;\r\n        const queueCheckAndLoadSections = () => {\r\n            if (queuedCheckAndLoadSectionsCount === 0) {\r\n                queuedCheckAndLoadSectionsCount++;\r\n                window.setTimeout(() => {\r\n                    queuedCheckAndLoadSectionsCount--;\r\n                    checkAndLoadSections();\r\n                }, 1);\r\n            }\r\n        };\r\n\r\n        const checkAndLoadSectionHeaders = () => {\r\n            const performLoad = () => {\r\n                sectionHeadersLoading = true;\r\n                const sectionHeadersAssemblyPromise = new Blob(chunks).arrayBuffer();\r\n                sectionHeadersAssemblyPromise.then((bufferData) => {\r\n                    sectionHeadersLoading = false;\r\n                    sectionHeadersLoaded = true;\r\n                    sectionHeadersBuffer = new ArrayBuffer(header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes);\r\n                    new Uint8Array(sectionHeadersBuffer).set(new Uint8Array(bufferData, SplatBuffer.HeaderSizeBytes,\r\n                                                                            header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes));\r\n                    sectionHeaders = SplatBuffer.parseSectionHeaders(header, sectionHeadersBuffer, 0, false);\r\n                    let totalSectionStorageStorageByes = 0;\r\n                    for (let i = 0; i < header.maxSectionCount; i++) {\r\n                        totalSectionStorageStorageByes += sectionHeaders[i].storageSizeBytes;\r\n                    }\r\n                    const totalStorageSizeBytes = SplatBuffer.HeaderSizeBytes + header.maxSectionCount *\r\n                                                  SplatBuffer.SectionHeaderSizeBytes + totalSectionStorageStorageByes;\r\n                    if (!progressiveLoadBuffer) {\r\n                        progressiveLoadBuffer = new ArrayBuffer(totalStorageSizeBytes);\r\n                        let offset = 0;\r\n                        for (let i = 0; i < chunks.length; i++) {\r\n                            const chunk = chunks[i];\r\n                            new Uint8Array(progressiveLoadBuffer, offset, chunk.byteLength).set(new Uint8Array(chunk));\r\n                            offset += chunk.byteLength;\r\n                        }\r\n                    }\r\n\r\n                    totalBytesToDownload = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount;\r\n                    for (let i = 0; i <= sectionHeaders.length && i < header.maxSectionCount; i++) {\r\n                        totalBytesToDownload += sectionHeaders[i].storageSizeBytes;\r\n                    }\r\n\r\n                    queueCheckAndLoadSections();\r\n                });\r\n            };\r\n\r\n            if (!sectionHeadersLoading && !sectionHeadersLoaded && headerLoaded &&\r\n                numBytesLoaded >= SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount) {\r\n                performLoad();\r\n            }\r\n        };\r\n\r\n        const checkAndLoadSections = () => {\r\n            if (loadSectionQueued) return;\r\n            loadSectionQueued = true;\r\n            const checkAndLoadFunc = () => {\r\n                loadSectionQueued = false;\r\n                if (sectionHeadersLoaded) {\r\n\r\n                    if (loadComplete) return;\r\n\r\n                    downloadComplete = numBytesLoaded >= totalBytesToDownload;\r\n\r\n                    let bytesLoadedSinceLastSection = numBytesLoaded - numBytesProgressivelyLoaded;\r\n                    if (bytesLoadedSinceLastSection > Constants.ProgressiveLoadSectionSize || downloadComplete) {\r\n\r\n                        numBytesProgressivelyLoaded += Constants.ProgressiveLoadSectionSize;\r\n                        loadComplete = numBytesProgressivelyLoaded >= totalBytesToDownload;\r\n\r\n                        if (!progressiveLoadSplatBuffer) progressiveLoadSplatBuffer = new SplatBuffer(progressiveLoadBuffer, false);\r\n\r\n                        const baseDataOffset = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount;\r\n                        let sectionBase = 0;\r\n                        let reachedSections = 0;\r\n                        let loadedSplatCount = 0;\r\n                        for (let i = 0; i < header.maxSectionCount; i++) {\r\n                            const sectionHeader = sectionHeaders[i];\r\n                            const bucketsDataOffset = sectionBase + sectionHeader.partiallyFilledBucketCount * 4 +\r\n                                                    sectionHeader.bucketStorageSizeBytes * sectionHeader.bucketCount;\r\n                            const bytesRequiredToReachSectionSplatData = baseDataOffset + bucketsDataOffset;\r\n                            if (numBytesProgressivelyLoaded >= bytesRequiredToReachSectionSplatData) {\r\n                                reachedSections++;\r\n                                const bytesPastSSectionSplatDataStart = numBytesProgressivelyLoaded - bytesRequiredToReachSectionSplatData;\r\n                                const baseDescriptor = SplatBuffer.CompressionLevels[header.compressionLevel];\r\n                                const shDesc = baseDescriptor.SphericalHarmonicsDegrees[sectionHeader.sphericalHarmonicsDegree];\r\n                                const bytesPerSplat = shDesc.BytesPerSplat;\r\n                                let loadedSplatsForSection = Math.floor(bytesPastSSectionSplatDataStart / bytesPerSplat);\r\n                                loadedSplatsForSection = Math.min(loadedSplatsForSection, sectionHeader.maxSplatCount);\r\n                                loadedSplatCount += loadedSplatsForSection;\r\n                                progressiveLoadSplatBuffer.updateLoadedCounts(reachedSections, loadedSplatCount);\r\n                                progressiveLoadSplatBuffer.updateSectionLoadedCounts(i, loadedSplatsForSection);\r\n                            } else {\r\n                                break;\r\n                            }\r\n                            sectionBase += sectionHeader.storageSizeBytes;\r\n                        }\r\n\r\n                        onSectionBuilt(progressiveLoadSplatBuffer, loadComplete);\r\n\r\n                        const percentComplete = numBytesProgressivelyLoaded / totalBytesToDownload * 100;\r\n                        const percentLabel = (percentComplete).toFixed(2) + '%';\r\n\r\n                        if (externalOnProgress) externalOnProgress(percentComplete, percentLabel, LoaderStatus.Downloading);\r\n\r\n                        if (loadComplete) {\r\n                            progressiveLoadPromise.resolve(progressiveLoadSplatBuffer);\r\n                        } else {\r\n                            checkAndLoadSections();\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            window.setTimeout(checkAndLoadFunc, Constants.ProgressiveLoadSectionDelayDuration);\r\n        };\r\n\r\n        const localOnProgress = (percent, percentStr, chunk) => {\r\n            if (chunk) {\r\n                chunks.push(chunk);\r\n                if (progressiveLoadBuffer) {\r\n                    new Uint8Array(progressiveLoadBuffer, numBytesLoaded, chunk.byteLength).set(new Uint8Array(chunk));\r\n                }\r\n                numBytesLoaded += chunk.byteLength;\r\n            }\r\n            if (progressiveLoad) {\r\n                checkAndLoadHeader();\r\n                checkAndLoadSectionHeaders();\r\n                checkAndLoadSections();\r\n            } else {\r\n                if (externalOnProgress) externalOnProgress(percent, percentStr, LoaderStatus.Downloading);\r\n            }\r\n        };\r\n\r\n        return fetchWithProgress(fileName, localOnProgress, !progressiveLoad).then((fullBuffer) => {\r\n            if (externalOnProgress) externalOnProgress(0, '0%', LoaderStatus.Processing);\r\n            const loadPromise = progressiveLoad ? progressiveLoadPromise.promise : KSplatLoader.loadFromFileData(fullBuffer);\r\n            return loadPromise.then((splatBuffer) => {\r\n                if (externalOnProgress) externalOnProgress(100, '100%', LoaderStatus.Done);\r\n                return splatBuffer;\r\n            });\r\n        });\r\n    }\r\n\r\n    static loadFromFileData(fileData) {\r\n        return delayedExecute(() => {\r\n            KSplatLoader.checkVersion(fileData);\r\n            return new SplatBuffer(fileData);\r\n        });\r\n    }\r\n\r\n    static downloadFile = function() {\r\n\r\n        let downLoadLink;\r\n\r\n        return function(splatBuffer, fileName) {\r\n            const blob = new Blob([splatBuffer.bufferData], {\r\n                type: 'application/octet-stream',\r\n            });\r\n\r\n            if (!downLoadLink) {\r\n                downLoadLink = document.createElement('a');\r\n                document.body.appendChild(downLoadLink);\r\n            }\r\n            downLoadLink.download = fileName;\r\n            downLoadLink.href = URL.createObjectURL(blob);\r\n            downLoadLink.click();\r\n        };\r\n\r\n    }();\r\n\r\n}\r\n","export const SceneFormat = {\r\n    'Splat': 0,\r\n    'KSplat': 1,\r\n    'Ply': 2\r\n};\r\n","import { SceneFormat } from './SceneFormat.js';\r\n\r\nexport const sceneFormatFromPath = (path) => {\r\n    if (path.endsWith('.ply')) return SceneFormat.Ply;\r\n    else if (path.endsWith('.splat')) return SceneFormat.Splat;\r\n    else if (path.endsWith('.ksplat')) return SceneFormat.KSplat;\r\n    return null;\r\n};\r\n","/*\r\nCopyright © 2010-2024 three.js authors & Mark Kellogg\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n*/\r\n\r\nimport {\r\n    EventDispatcher,\r\n    MOUSE,\r\n    Quaternion,\r\n    Spherical,\r\n    TOUCH,\r\n    Vector2,\r\n    Vector3,\r\n    Plane,\r\n    Ray,\r\n    MathUtils\r\n} from 'three';\r\n\r\n// OrbitControls performs orbiting, dollying (zooming), and panning.\r\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\r\n//\r\n//    Orbit - left mouse / touch: one-finger move\r\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\r\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\r\n\r\nconst _changeEvent = { type: 'change' };\r\nconst _startEvent = { type: 'start' };\r\nconst _endEvent = { type: 'end' };\r\nconst _ray = new Ray();\r\nconst _plane = new Plane();\r\nconst TILT_LIMIT = Math.cos( 70 * MathUtils.DEG2RAD );\r\n\r\nclass OrbitControls extends EventDispatcher {\r\n\r\n    constructor( object, domElement ) {\r\n\r\n        super();\r\n\r\n        this.object = object;\r\n        this.domElement = domElement;\r\n        this.domElement.style.touchAction = 'none'; // disable touch scroll\r\n\r\n        // Set to false to disable this control\r\n        this.enabled = true;\r\n\r\n        // \"target\" sets the location of focus, where the object orbits around\r\n        this.target = new Vector3();\r\n\r\n        // How far you can dolly in and out ( PerspectiveCamera only )\r\n        this.minDistance = 0;\r\n        this.maxDistance = Infinity;\r\n\r\n        // How far you can zoom in and out ( OrthographicCamera only )\r\n        this.minZoom = 0;\r\n        this.maxZoom = Infinity;\r\n\r\n        // How far you can orbit vertically, upper and lower limits.\r\n        // Range is 0 to Math.PI radians.\r\n        this.minPolarAngle = 0; // radians\r\n        this.maxPolarAngle = Math.PI; // radians\r\n\r\n        // How far you can orbit horizontally, upper and lower limits.\r\n        // If set, the interval [min, max] must be a sub-interval of [- 2 PI, 2 PI], with ( max - min < 2 PI )\r\n        this.minAzimuthAngle = - Infinity; // radians\r\n        this.maxAzimuthAngle = Infinity; // radians\r\n\r\n        // Set to true to enable damping (inertia)\r\n        // If damping is enabled, you must call controls.update() in your animation loop\r\n        this.enableDamping = false;\r\n        this.dampingFactor = 0.05;\r\n\r\n        // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\r\n        // Set to false to disable zooming\r\n        this.enableZoom = true;\r\n        this.zoomSpeed = 1.0;\r\n\r\n        // Set to false to disable rotating\r\n        this.enableRotate = true;\r\n        this.rotateSpeed = 1.0;\r\n\r\n        // Set to false to disable panning\r\n        this.enablePan = true;\r\n        this.panSpeed = 1.0;\r\n        this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\r\n        this.keyPanSpeed = 7.0; // pixels moved per arrow key push\r\n        this.zoomToCursor = false;\r\n\r\n        // Set to true to automatically rotate around the target\r\n        // If auto-rotate is enabled, you must call controls.update() in your animation loop\r\n        this.autoRotate = false;\r\n        this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\r\n\r\n        // The four arrow keys\r\n        this.keys = { LEFT: 'KeyA', UP: 'KeyW', RIGHT: 'KeyD', BOTTOM: 'KeyS' };\r\n\r\n        // Mouse buttons\r\n        this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\r\n\r\n        // Touch fingers\r\n        this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\r\n\r\n        // for reset\r\n        this.target0 = this.target.clone();\r\n        this.position0 = this.object.position.clone();\r\n        this.zoom0 = this.object.zoom;\r\n\r\n        // the target DOM element for key events\r\n        this._domElementKeyEvents = null;\r\n\r\n        //\r\n        // public methods\r\n        //\r\n\r\n        this.getPolarAngle = function() {\r\n\r\n            return spherical.phi;\r\n\r\n        };\r\n\r\n        this.getAzimuthalAngle = function() {\r\n\r\n            return spherical.theta;\r\n\r\n        };\r\n\r\n        this.getDistance = function() {\r\n\r\n            return this.object.position.distanceTo( this.target );\r\n\r\n        };\r\n\r\n        this.listenToKeyEvents = function( domElement ) {\r\n\r\n            domElement.addEventListener( 'keydown', onKeyDown );\r\n            this._domElementKeyEvents = domElement;\r\n\r\n        };\r\n\r\n        this.stopListenToKeyEvents = function() {\r\n\r\n            this._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\r\n            this._domElementKeyEvents = null;\r\n\r\n        };\r\n\r\n        this.saveState = function() {\r\n\r\n            scope.target0.copy( scope.target );\r\n            scope.position0.copy( scope.object.position );\r\n            scope.zoom0 = scope.object.zoom;\r\n\r\n        };\r\n\r\n        this.reset = function() {\r\n\r\n            scope.target.copy( scope.target0 );\r\n            scope.object.position.copy( scope.position0 );\r\n            scope.object.zoom = scope.zoom0;\r\n            this.clearDampedRotation();\r\n            this.clearDampedPan();\r\n\r\n            scope.object.updateProjectionMatrix();\r\n            scope.dispatchEvent( _changeEvent );\r\n\r\n            scope.update();\r\n\r\n            state = STATE.NONE;\r\n\r\n        };\r\n\r\n        this.clearDampedRotation = function() {\r\n            sphericalDelta.theta = 0.0;\r\n            sphericalDelta.phi = 0.0;\r\n        };\r\n\r\n        this.clearDampedPan = function() {\r\n            panOffset.set(0, 0, 0);\r\n        };\r\n\r\n        // this method is exposed, but perhaps it would be better if we can make it private...\r\n        this.update = function() {\r\n\r\n            const offset = new Vector3();\r\n\r\n            // so camera.up is the orbit axis\r\n            const quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\r\n            const quatInverse = quat.clone().invert();\r\n\r\n            const lastPosition = new Vector3();\r\n            const lastQuaternion = new Quaternion();\r\n            const lastTargetPosition = new Vector3();\r\n\r\n            const twoPI = 2 * Math.PI;\r\n\r\n            return function update() {\r\n\r\n                quat.setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\r\n                quatInverse.copy(quat).invert();\r\n\r\n                const position = scope.object.position;\r\n\r\n                offset.copy( position ).sub( scope.target );\r\n\r\n                // rotate offset to \"y-axis-is-up\" space\r\n                offset.applyQuaternion( quat );\r\n\r\n                // angle from z-axis around y-axis\r\n                spherical.setFromVector3( offset );\r\n\r\n                if ( scope.autoRotate && state === STATE.NONE ) {\r\n\r\n                    rotateLeft( getAutoRotationAngle() );\r\n\r\n                }\r\n\r\n                if ( scope.enableDamping ) {\r\n\r\n                    spherical.theta += sphericalDelta.theta * scope.dampingFactor;\r\n                    spherical.phi += sphericalDelta.phi * scope.dampingFactor;\r\n\r\n                } else {\r\n\r\n                    spherical.theta += sphericalDelta.theta;\r\n                    spherical.phi += sphericalDelta.phi;\r\n\r\n                }\r\n\r\n                // restrict theta to be between desired limits\r\n\r\n                let min = scope.minAzimuthAngle;\r\n                let max = scope.maxAzimuthAngle;\r\n\r\n                if ( isFinite( min ) && isFinite( max ) ) {\r\n\r\n                    if ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;\r\n\r\n                    if ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;\r\n\r\n                    if ( min <= max ) {\r\n\r\n                        spherical.theta = Math.max( min, Math.min( max, spherical.theta ) );\r\n\r\n                    } else {\r\n\r\n                        spherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?\r\n                            Math.max( min, spherical.theta ) :\r\n                            Math.min( max, spherical.theta );\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                // restrict phi to be between desired limits\r\n                spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\r\n\r\n                spherical.makeSafe();\r\n\r\n\r\n                // move target to panned location\r\n\r\n                if ( scope.enableDamping === true ) {\r\n\r\n                    scope.target.addScaledVector( panOffset, scope.dampingFactor );\r\n\r\n                } else {\r\n\r\n                    scope.target.add( panOffset );\r\n\r\n                }\r\n\r\n                // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\r\n                // we adjust zoom later in these cases\r\n                if ( scope.zoomToCursor && performCursorZoom || scope.object.isOrthographicCamera ) {\r\n\r\n                    spherical.radius = clampDistance( spherical.radius );\r\n\r\n                } else {\r\n\r\n                    spherical.radius = clampDistance( spherical.radius * scale );\r\n\r\n                }\r\n\r\n\r\n                offset.setFromSpherical( spherical );\r\n\r\n                // rotate offset back to \"camera-up-vector-is-up\" space\r\n                offset.applyQuaternion( quatInverse );\r\n\r\n                position.copy( scope.target ).add( offset );\r\n\r\n                scope.object.lookAt( scope.target );\r\n\r\n                if ( scope.enableDamping === true ) {\r\n\r\n                    sphericalDelta.theta *= ( 1 - scope.dampingFactor );\r\n                    sphericalDelta.phi *= ( 1 - scope.dampingFactor );\r\n\r\n                    panOffset.multiplyScalar( 1 - scope.dampingFactor );\r\n\r\n                } else {\r\n\r\n                    sphericalDelta.set( 0, 0, 0 );\r\n\r\n                    panOffset.set( 0, 0, 0 );\r\n\r\n                }\r\n\r\n                // adjust camera position\r\n                let zoomChanged = false;\r\n                if ( scope.zoomToCursor && performCursorZoom ) {\r\n\r\n                    let newRadius = null;\r\n                    if ( scope.object.isPerspectiveCamera ) {\r\n\r\n                        // move the camera down the pointer ray\r\n                        // this method avoids floating point error\r\n                        const prevRadius = offset.length();\r\n                        newRadius = clampDistance( prevRadius * scale );\r\n\r\n                        const radiusDelta = prevRadius - newRadius;\r\n                        scope.object.position.addScaledVector( dollyDirection, radiusDelta );\r\n                        scope.object.updateMatrixWorld();\r\n\r\n                    } else if ( scope.object.isOrthographicCamera ) {\r\n\r\n                        // adjust the ortho camera position based on zoom changes\r\n                        const mouseBefore = new Vector3( mouse.x, mouse.y, 0 );\r\n                        mouseBefore.unproject( scope.object );\r\n\r\n                        scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\r\n                        scope.object.updateProjectionMatrix();\r\n                        zoomChanged = true;\r\n\r\n                        const mouseAfter = new Vector3( mouse.x, mouse.y, 0 );\r\n                        mouseAfter.unproject( scope.object );\r\n\r\n                        scope.object.position.sub( mouseAfter ).add( mouseBefore );\r\n                        scope.object.updateMatrixWorld();\r\n\r\n                        newRadius = offset.length();\r\n\r\n                    } else {\r\n\r\n                        console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.' );\r\n                        scope.zoomToCursor = false;\r\n\r\n                    }\r\n\r\n                    // handle the placement of the target\r\n                    if ( newRadius !== null ) {\r\n\r\n                        if ( this.screenSpacePanning ) {\r\n\r\n                            // position the orbit target in front of the new camera position\r\n                            scope.target.set( 0, 0, - 1 )\r\n                                .transformDirection( scope.object.matrix )\r\n                                .multiplyScalar( newRadius )\r\n                                .add( scope.object.position );\r\n\r\n                        } else {\r\n\r\n                            // get the ray and translation plane to compute target\r\n                            _ray.origin.copy( scope.object.position );\r\n                            _ray.direction.set( 0, 0, - 1 ).transformDirection( scope.object.matrix );\r\n\r\n                            // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\r\n                            // extremely large values\r\n                            if ( Math.abs( scope.object.up.dot( _ray.direction ) ) < TILT_LIMIT ) {\r\n\r\n                                object.lookAt( scope.target );\r\n\r\n                            } else {\r\n\r\n                                _plane.setFromNormalAndCoplanarPoint( scope.object.up, scope.target );\r\n                                _ray.intersectPlane( _plane, scope.target );\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                } else if ( scope.object.isOrthographicCamera ) {\r\n\r\n                    scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\r\n                    scope.object.updateProjectionMatrix();\r\n                    zoomChanged = true;\r\n\r\n                }\r\n\r\n                scale = 1;\r\n                performCursorZoom = false;\r\n\r\n                // update condition is:\r\n                // min(camera displacement, camera rotation in radians)^2 > EPS\r\n                // using small-angle approximation cos(x/2) = 1 - x^2 / 8\r\n\r\n                if ( zoomChanged ||\r\n                    lastPosition.distanceToSquared( scope.object.position ) > EPS ||\r\n                    8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ||\r\n                    lastTargetPosition.distanceToSquared( scope.target ) > 0 ) {\r\n\r\n                    scope.dispatchEvent( _changeEvent );\r\n\r\n                    lastPosition.copy( scope.object.position );\r\n                    lastQuaternion.copy( scope.object.quaternion );\r\n                    lastTargetPosition.copy( scope.target );\r\n\r\n                    zoomChanged = false;\r\n\r\n                    return true;\r\n\r\n                }\r\n\r\n                return false;\r\n\r\n            };\r\n\r\n        }();\r\n\r\n        this.dispose = function() {\r\n\r\n            scope.domElement.removeEventListener( 'contextmenu', onContextMenu );\r\n\r\n            scope.domElement.removeEventListener( 'pointerdown', onPointerDown );\r\n            scope.domElement.removeEventListener( 'pointercancel', onPointerUp );\r\n            scope.domElement.removeEventListener( 'wheel', onMouseWheel );\r\n\r\n            scope.domElement.removeEventListener( 'pointermove', onPointerMove );\r\n            scope.domElement.removeEventListener( 'pointerup', onPointerUp );\r\n\r\n\r\n            if ( scope._domElementKeyEvents !== null ) {\r\n\r\n                scope._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\r\n                scope._domElementKeyEvents = null;\r\n\r\n            }\r\n\r\n        };\r\n\r\n        //\r\n        // internals\r\n        //\r\n\r\n        const scope = this;\r\n\r\n        const STATE = {\r\n            NONE: - 1,\r\n            ROTATE: 0,\r\n            DOLLY: 1,\r\n            PAN: 2,\r\n            TOUCH_ROTATE: 3,\r\n            TOUCH_PAN: 4,\r\n            TOUCH_DOLLY_PAN: 5,\r\n            TOUCH_DOLLY_ROTATE: 6\r\n        };\r\n\r\n        let state = STATE.NONE;\r\n\r\n        const EPS = 0.000001;\r\n\r\n        // current position in spherical coordinates\r\n        const spherical = new Spherical();\r\n        const sphericalDelta = new Spherical();\r\n\r\n        let scale = 1;\r\n        const panOffset = new Vector3();\r\n\r\n        const rotateStart = new Vector2();\r\n        const rotateEnd = new Vector2();\r\n        const rotateDelta = new Vector2();\r\n\r\n        const panStart = new Vector2();\r\n        const panEnd = new Vector2();\r\n        const panDelta = new Vector2();\r\n\r\n        const dollyStart = new Vector2();\r\n        const dollyEnd = new Vector2();\r\n        const dollyDelta = new Vector2();\r\n\r\n        const dollyDirection = new Vector3();\r\n        const mouse = new Vector2();\r\n        let performCursorZoom = false;\r\n\r\n        const pointers = [];\r\n        const pointerPositions = {};\r\n\r\n        function getAutoRotationAngle() {\r\n\r\n            return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\r\n\r\n        }\r\n\r\n        function getZoomScale() {\r\n\r\n            return Math.pow( 0.95, scope.zoomSpeed );\r\n\r\n        }\r\n\r\n        function rotateLeft( angle ) {\r\n\r\n            sphericalDelta.theta -= angle;\r\n\r\n        }\r\n\r\n        function rotateUp( angle ) {\r\n\r\n            sphericalDelta.phi -= angle;\r\n\r\n        }\r\n\r\n        const panLeft = function() {\r\n\r\n            const v = new Vector3();\r\n\r\n            return function panLeft( distance, objectMatrix ) {\r\n\r\n                v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\r\n                v.multiplyScalar( - distance );\r\n\r\n                panOffset.add( v );\r\n\r\n            };\r\n\r\n        }();\r\n\r\n        const panUp = function() {\r\n\r\n            const v = new Vector3();\r\n\r\n            return function panUp( distance, objectMatrix ) {\r\n\r\n                if ( scope.screenSpacePanning === true ) {\r\n\r\n                    v.setFromMatrixColumn( objectMatrix, 1 );\r\n\r\n                } else {\r\n\r\n                    v.setFromMatrixColumn( objectMatrix, 0 );\r\n                    v.crossVectors( scope.object.up, v );\r\n\r\n                }\r\n\r\n                v.multiplyScalar( distance );\r\n\r\n                panOffset.add( v );\r\n\r\n            };\r\n\r\n        }();\r\n\r\n        // deltaX and deltaY are in pixels; right and down are positive\r\n        const pan = function() {\r\n\r\n            const offset = new Vector3();\r\n\r\n            return function pan( deltaX, deltaY ) {\r\n\r\n                const element = scope.domElement;\r\n\r\n                if ( scope.object.isPerspectiveCamera ) {\r\n\r\n                    // perspective\r\n                    const position = scope.object.position;\r\n                    offset.copy( position ).sub( scope.target );\r\n                    let targetDistance = offset.length();\r\n\r\n                    // half of the fov is center to top of screen\r\n                    targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\r\n\r\n                    // we use only clientHeight here so aspect ratio does not distort speed\r\n                    panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\r\n                    panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\r\n\r\n                } else if ( scope.object.isOrthographicCamera ) {\r\n\r\n                    // orthographic\r\n                    panLeft( deltaX * ( scope.object.right - scope.object.left ) /\r\n                                        scope.object.zoom / element.clientWidth, scope.object.matrix );\r\n                    panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom /\r\n                                      element.clientHeight, scope.object.matrix );\r\n\r\n                } else {\r\n\r\n                    // camera neither orthographic nor perspective\r\n                    console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\r\n                    scope.enablePan = false;\r\n\r\n                }\r\n\r\n            };\r\n\r\n        }();\r\n\r\n        function dollyOut( dollyScale ) {\r\n\r\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\r\n\r\n                scale /= dollyScale;\r\n\r\n            } else {\r\n\r\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\r\n                scope.enableZoom = false;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function dollyIn( dollyScale ) {\r\n\r\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\r\n\r\n                scale *= dollyScale;\r\n\r\n            } else {\r\n\r\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\r\n                scope.enableZoom = false;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function updateMouseParameters( event ) {\r\n\r\n            if ( ! scope.zoomToCursor ) {\r\n\r\n                return;\r\n\r\n            }\r\n\r\n            performCursorZoom = true;\r\n\r\n            const rect = scope.domElement.getBoundingClientRect();\r\n            const x = event.clientX - rect.left;\r\n            const y = event.clientY - rect.top;\r\n            const w = rect.width;\r\n            const h = rect.height;\r\n\r\n            mouse.x = ( x / w ) * 2 - 1;\r\n            mouse.y = - ( y / h ) * 2 + 1;\r\n\r\n            dollyDirection.set( mouse.x, mouse.y, 1 ).unproject( object ).sub( object.position ).normalize();\r\n\r\n        }\r\n\r\n        function clampDistance( dist ) {\r\n\r\n            return Math.max( scope.minDistance, Math.min( scope.maxDistance, dist ) );\r\n\r\n        }\r\n\r\n        //\r\n        // event callbacks - update the object state\r\n        //\r\n\r\n        function handleMouseDownRotate( event ) {\r\n\r\n            rotateStart.set( event.clientX, event.clientY );\r\n\r\n        }\r\n\r\n        function handleMouseDownDolly( event ) {\r\n\r\n            updateMouseParameters( event );\r\n            dollyStart.set( event.clientX, event.clientY );\r\n\r\n        }\r\n\r\n        function handleMouseDownPan( event ) {\r\n\r\n            panStart.set( event.clientX, event.clientY );\r\n\r\n        }\r\n\r\n        function handleMouseMoveRotate( event ) {\r\n\r\n            rotateEnd.set( event.clientX, event.clientY );\r\n\r\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\r\n\r\n            const element = scope.domElement;\r\n\r\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\r\n\r\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\r\n\r\n            rotateStart.copy( rotateEnd );\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n        function handleMouseMoveDolly( event ) {\r\n\r\n            dollyEnd.set( event.clientX, event.clientY );\r\n\r\n            dollyDelta.subVectors( dollyEnd, dollyStart );\r\n\r\n            if ( dollyDelta.y > 0 ) {\r\n\r\n                dollyOut( getZoomScale() );\r\n\r\n            } else if ( dollyDelta.y < 0 ) {\r\n\r\n                dollyIn( getZoomScale() );\r\n\r\n            }\r\n\r\n            dollyStart.copy( dollyEnd );\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n        function handleMouseMovePan( event ) {\r\n\r\n            panEnd.set( event.clientX, event.clientY );\r\n\r\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\r\n\r\n            pan( panDelta.x, panDelta.y );\r\n\r\n            panStart.copy( panEnd );\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n        function handleMouseWheel( event ) {\r\n\r\n            updateMouseParameters( event );\r\n\r\n            if ( event.deltaY < 0 ) {\r\n\r\n                dollyIn( getZoomScale() );\r\n\r\n            } else if ( event.deltaY > 0 ) {\r\n\r\n                dollyOut( getZoomScale() );\r\n\r\n            }\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n        function handleKeyDown( event ) {\r\n\r\n            let needsUpdate = false;\r\n\r\n            switch ( event.code ) {\r\n\r\n                case scope.keys.UP:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        rotateUp( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\r\n\r\n                    } else {\r\n\r\n                        pan( 0, scope.keyPanSpeed );\r\n\r\n                    }\r\n\r\n                    needsUpdate = true;\r\n                    break;\r\n\r\n                case scope.keys.BOTTOM:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        rotateUp( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\r\n\r\n                    } else {\r\n\r\n                        pan( 0, - scope.keyPanSpeed );\r\n\r\n                    }\r\n\r\n                    needsUpdate = true;\r\n                    break;\r\n\r\n                case scope.keys.LEFT:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        rotateLeft( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\r\n\r\n                    } else {\r\n\r\n                        pan( scope.keyPanSpeed, 0 );\r\n\r\n                    }\r\n\r\n                    needsUpdate = true;\r\n                    break;\r\n\r\n                case scope.keys.RIGHT:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        rotateLeft( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\r\n\r\n                    } else {\r\n\r\n                        pan( - scope.keyPanSpeed, 0 );\r\n\r\n                    }\r\n\r\n                    needsUpdate = true;\r\n                    break;\r\n\r\n            }\r\n\r\n            if ( needsUpdate ) {\r\n\r\n                // prevent the browser from scrolling on cursor keys\r\n                event.preventDefault();\r\n\r\n                scope.update();\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n        function handleTouchStartRotate() {\r\n\r\n            if ( pointers.length === 1 ) {\r\n\r\n                rotateStart.set( pointers[0].pageX, pointers[0].pageY );\r\n\r\n            } else {\r\n\r\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\r\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\r\n\r\n                rotateStart.set( x, y );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function handleTouchStartPan() {\r\n\r\n            if ( pointers.length === 1 ) {\r\n\r\n                panStart.set( pointers[0].pageX, pointers[0].pageY );\r\n\r\n            } else {\r\n\r\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\r\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\r\n\r\n                panStart.set( x, y );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function handleTouchStartDolly() {\r\n\r\n            const dx = pointers[0].pageX - pointers[1].pageX;\r\n            const dy = pointers[0].pageY - pointers[1].pageY;\r\n\r\n            const distance = Math.sqrt( dx * dx + dy * dy );\r\n\r\n            dollyStart.set( 0, distance );\r\n\r\n        }\r\n\r\n        function handleTouchStartDollyPan() {\r\n\r\n            if ( scope.enableZoom ) handleTouchStartDolly();\r\n\r\n            if ( scope.enablePan ) handleTouchStartPan();\r\n\r\n        }\r\n\r\n        function handleTouchStartDollyRotate() {\r\n\r\n            if ( scope.enableZoom ) handleTouchStartDolly();\r\n\r\n            if ( scope.enableRotate ) handleTouchStartRotate();\r\n\r\n        }\r\n\r\n        function handleTouchMoveRotate( event ) {\r\n\r\n            if ( pointers.length == 1 ) {\r\n\r\n                rotateEnd.set( event.pageX, event.pageY );\r\n\r\n            } else {\r\n\r\n                const position = getSecondPointerPosition( event );\r\n\r\n                const x = 0.5 * ( event.pageX + position.x );\r\n                const y = 0.5 * ( event.pageY + position.y );\r\n\r\n                rotateEnd.set( x, y );\r\n\r\n            }\r\n\r\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\r\n\r\n            const element = scope.domElement;\r\n\r\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\r\n\r\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\r\n\r\n            rotateStart.copy( rotateEnd );\r\n\r\n        }\r\n\r\n        function handleTouchMovePan( event ) {\r\n\r\n            if ( pointers.length === 1 ) {\r\n\r\n                panEnd.set( event.pageX, event.pageY );\r\n\r\n            } else {\r\n\r\n                const position = getSecondPointerPosition( event );\r\n\r\n                const x = 0.5 * ( event.pageX + position.x );\r\n                const y = 0.5 * ( event.pageY + position.y );\r\n\r\n                panEnd.set( x, y );\r\n\r\n            }\r\n\r\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\r\n\r\n            pan( panDelta.x, panDelta.y );\r\n\r\n            panStart.copy( panEnd );\r\n\r\n        }\r\n\r\n        function handleTouchMoveDolly( event ) {\r\n\r\n            const position = getSecondPointerPosition( event );\r\n\r\n            const dx = event.pageX - position.x;\r\n            const dy = event.pageY - position.y;\r\n\r\n            const distance = Math.sqrt( dx * dx + dy * dy );\r\n\r\n            dollyEnd.set( 0, distance );\r\n\r\n            dollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\r\n\r\n            dollyOut( dollyDelta.y );\r\n\r\n            dollyStart.copy( dollyEnd );\r\n\r\n        }\r\n\r\n        function handleTouchMoveDollyPan( event ) {\r\n\r\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\r\n\r\n            if ( scope.enablePan ) handleTouchMovePan( event );\r\n\r\n        }\r\n\r\n        function handleTouchMoveDollyRotate( event ) {\r\n\r\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\r\n\r\n            if ( scope.enableRotate ) handleTouchMoveRotate( event );\r\n\r\n        }\r\n\r\n        //\r\n        // event handlers - FSM: listen for events and reset state\r\n        //\r\n\r\n        function onPointerDown( event ) {\r\n\r\n            if ( scope.enabled === false ) return;\r\n\r\n            if ( pointers.length === 0 ) {\r\n\r\n                scope.domElement.setPointerCapture( event.pointerId );\r\n\r\n                scope.domElement.addEventListener( 'pointermove', onPointerMove );\r\n                scope.domElement.addEventListener( 'pointerup', onPointerUp );\r\n\r\n            }\r\n\r\n            //\r\n\r\n            addPointer( event );\r\n\r\n            if ( event.pointerType === 'touch' ) {\r\n\r\n                onTouchStart( event );\r\n\r\n            } else {\r\n\r\n                onMouseDown( event );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onPointerMove( event ) {\r\n\r\n            if ( scope.enabled === false ) return;\r\n\r\n            if ( event.pointerType === 'touch' ) {\r\n\r\n                onTouchMove( event );\r\n\r\n            } else {\r\n\r\n                onMouseMove( event );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onPointerUp( event ) {\r\n\r\n            removePointer( event );\r\n\r\n            if ( pointers.length === 0 ) {\r\n\r\n                scope.domElement.releasePointerCapture( event.pointerId );\r\n\r\n                scope.domElement.removeEventListener( 'pointermove', onPointerMove );\r\n                scope.domElement.removeEventListener( 'pointerup', onPointerUp );\r\n\r\n            }\r\n\r\n            scope.dispatchEvent( _endEvent );\r\n\r\n            state = STATE.NONE;\r\n\r\n        }\r\n\r\n        function onMouseDown( event ) {\r\n\r\n            let mouseAction;\r\n\r\n            switch ( event.button ) {\r\n\r\n                case 0:\r\n\r\n                    mouseAction = scope.mouseButtons.LEFT;\r\n                    break;\r\n\r\n                case 1:\r\n\r\n                    mouseAction = scope.mouseButtons.MIDDLE;\r\n                    break;\r\n\r\n                case 2:\r\n\r\n                    mouseAction = scope.mouseButtons.RIGHT;\r\n                    break;\r\n\r\n                default:\r\n\r\n                    mouseAction = - 1;\r\n\r\n            }\r\n\r\n            switch ( mouseAction ) {\r\n\r\n                case MOUSE.DOLLY:\r\n\r\n                    if ( scope.enableZoom === false ) return;\r\n\r\n                    handleMouseDownDolly( event );\r\n\r\n                    state = STATE.DOLLY;\r\n\r\n                    break;\r\n\r\n                case MOUSE.ROTATE:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        if ( scope.enablePan === false ) return;\r\n\r\n                        handleMouseDownPan( event );\r\n\r\n                        state = STATE.PAN;\r\n\r\n                    } else {\r\n\r\n                        if ( scope.enableRotate === false ) return;\r\n\r\n                        handleMouseDownRotate( event );\r\n\r\n                        state = STATE.ROTATE;\r\n\r\n                    }\r\n\r\n                    break;\r\n\r\n                case MOUSE.PAN:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        if ( scope.enableRotate === false ) return;\r\n\r\n                        handleMouseDownRotate( event );\r\n\r\n                        state = STATE.ROTATE;\r\n\r\n                    } else {\r\n\r\n                        if ( scope.enablePan === false ) return;\r\n\r\n                        handleMouseDownPan( event );\r\n\r\n                        state = STATE.PAN;\r\n\r\n                    }\r\n\r\n                    break;\r\n\r\n                default:\r\n\r\n                    state = STATE.NONE;\r\n\r\n            }\r\n\r\n            if ( state !== STATE.NONE ) {\r\n\r\n                scope.dispatchEvent( _startEvent );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onMouseMove( event ) {\r\n\r\n            switch ( state ) {\r\n\r\n                case STATE.ROTATE:\r\n\r\n                    if ( scope.enableRotate === false ) return;\r\n\r\n                    handleMouseMoveRotate( event );\r\n\r\n                    break;\r\n\r\n                case STATE.DOLLY:\r\n\r\n                    if ( scope.enableZoom === false ) return;\r\n\r\n                    handleMouseMoveDolly( event );\r\n\r\n                    break;\r\n\r\n                case STATE.PAN:\r\n\r\n                    if ( scope.enablePan === false ) return;\r\n\r\n                    handleMouseMovePan( event );\r\n\r\n                    break;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onMouseWheel( event ) {\r\n\r\n            if ( scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE ) return;\r\n\r\n            event.preventDefault();\r\n\r\n            scope.dispatchEvent( _startEvent );\r\n\r\n            handleMouseWheel( event );\r\n\r\n            scope.dispatchEvent( _endEvent );\r\n\r\n        }\r\n\r\n        function onKeyDown( event ) {\r\n\r\n            if ( scope.enabled === false || scope.enablePan === false ) return;\r\n\r\n            handleKeyDown( event );\r\n\r\n        }\r\n\r\n        function onTouchStart( event ) {\r\n\r\n            trackPointer( event );\r\n\r\n            switch ( pointers.length ) {\r\n\r\n                case 1:\r\n\r\n                    switch ( scope.touches.ONE ) {\r\n\r\n                        case TOUCH.ROTATE:\r\n\r\n                            if ( scope.enableRotate === false ) return;\r\n\r\n                            handleTouchStartRotate();\r\n\r\n                            state = STATE.TOUCH_ROTATE;\r\n\r\n                            break;\r\n\r\n                        case TOUCH.PAN:\r\n\r\n                            if ( scope.enablePan === false ) return;\r\n\r\n                            handleTouchStartPan();\r\n\r\n                            state = STATE.TOUCH_PAN;\r\n\r\n                            break;\r\n\r\n                        default:\r\n\r\n                            state = STATE.NONE;\r\n\r\n                    }\r\n\r\n                    break;\r\n\r\n                case 2:\r\n\r\n                    switch ( scope.touches.TWO ) {\r\n\r\n                        case TOUCH.DOLLY_PAN:\r\n\r\n                            if ( scope.enableZoom === false && scope.enablePan === false ) return;\r\n\r\n                            handleTouchStartDollyPan();\r\n\r\n                            state = STATE.TOUCH_DOLLY_PAN;\r\n\r\n                            break;\r\n\r\n                        case TOUCH.DOLLY_ROTATE:\r\n\r\n                            if ( scope.enableZoom === false && scope.enableRotate === false ) return;\r\n\r\n                            handleTouchStartDollyRotate();\r\n\r\n                            state = STATE.TOUCH_DOLLY_ROTATE;\r\n\r\n                            break;\r\n\r\n                        default:\r\n\r\n                            state = STATE.NONE;\r\n\r\n                    }\r\n\r\n                    break;\r\n\r\n                default:\r\n\r\n                    state = STATE.NONE;\r\n\r\n            }\r\n\r\n            if ( state !== STATE.NONE ) {\r\n\r\n                scope.dispatchEvent( _startEvent );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onTouchMove( event ) {\r\n\r\n            trackPointer( event );\r\n\r\n            switch ( state ) {\r\n\r\n                case STATE.TOUCH_ROTATE:\r\n\r\n                    if ( scope.enableRotate === false ) return;\r\n\r\n                    handleTouchMoveRotate( event );\r\n\r\n                    scope.update();\r\n\r\n                    break;\r\n\r\n                case STATE.TOUCH_PAN:\r\n\r\n                    if ( scope.enablePan === false ) return;\r\n\r\n                    handleTouchMovePan( event );\r\n\r\n                    scope.update();\r\n\r\n                    break;\r\n\r\n                case STATE.TOUCH_DOLLY_PAN:\r\n\r\n                    if ( scope.enableZoom === false && scope.enablePan === false ) return;\r\n\r\n                    handleTouchMoveDollyPan( event );\r\n\r\n                    scope.update();\r\n\r\n                    break;\r\n\r\n                case STATE.TOUCH_DOLLY_ROTATE:\r\n\r\n                    if ( scope.enableZoom === false && scope.enableRotate === false ) return;\r\n\r\n                    handleTouchMoveDollyRotate( event );\r\n\r\n                    scope.update();\r\n\r\n                    break;\r\n\r\n                default:\r\n\r\n                    state = STATE.NONE;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onContextMenu( event ) {\r\n\r\n            if ( scope.enabled === false ) return;\r\n\r\n            event.preventDefault();\r\n\r\n        }\r\n\r\n        function addPointer( event ) {\r\n\r\n            pointers.push( event );\r\n\r\n        }\r\n\r\n        function removePointer( event ) {\r\n\r\n            delete pointerPositions[event.pointerId];\r\n\r\n            for ( let i = 0; i < pointers.length; i ++ ) {\r\n\r\n                if ( pointers[i].pointerId == event.pointerId ) {\r\n\r\n                    pointers.splice( i, 1 );\r\n                    return;\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function trackPointer( event ) {\r\n\r\n            let position = pointerPositions[event.pointerId];\r\n\r\n            if ( position === undefined ) {\r\n\r\n                position = new Vector2();\r\n                pointerPositions[event.pointerId] = position;\r\n\r\n            }\r\n\r\n            position.set( event.pageX, event.pageY );\r\n\r\n        }\r\n\r\n        function getSecondPointerPosition( event ) {\r\n\r\n            const pointer = ( event.pointerId === pointers[0].pointerId ) ? pointers[1] : pointers[0];\r\n\r\n            return pointerPositions[pointer.pointerId];\r\n\r\n        }\r\n\r\n        //\r\n\r\n        scope.domElement.addEventListener( 'contextmenu', onContextMenu );\r\n\r\n        scope.domElement.addEventListener( 'pointerdown', onPointerDown );\r\n        scope.domElement.addEventListener( 'pointercancel', onPointerUp );\r\n        scope.domElement.addEventListener( 'wheel', onMouseWheel, { passive: false } );\r\n\r\n        // force an update at start\r\n\r\n        this.update();\r\n\r\n    }\r\n\r\n}\r\n\r\nexport { OrbitControls };\r\n","import { fadeElement } from './Util.js';\r\n\r\nconst STANDARD_FADE_DURATION = 500;\r\n\r\nexport class LoadingSpinner {\r\n\r\n    static elementIDGen = 0;\r\n\r\n    constructor(message, container) {\r\n\r\n        this.taskIDGen = 0;\r\n        this.elementID = LoadingSpinner.elementIDGen++;\r\n\r\n        this.tasks = [];\r\n\r\n        this.message = message || 'Loading...';\r\n        this.container = container || document.body;\r\n\r\n        this.spinnerContainerOuter = document.createElement('div');\r\n        this.spinnerContainerOuter.className = `spinnerOuterContainer${this.elementID}`;\r\n        this.spinnerContainerOuter.style.display = 'none';\r\n\r\n        this.spinnerContainerPrimary = document.createElement('div');\r\n        this.spinnerContainerPrimary.className = `spinnerContainerPrimary${this.elementID}`;\r\n        this.spinnerPrimary = document.createElement('div');\r\n        this.spinnerPrimary.classList.add(`spinner${this.elementID}`, `spinnerPrimary${this.elementID}`);\r\n        this.messageContainerPrimary = document.createElement('div');\r\n        this.messageContainerPrimary.classList.add(`messageContainer${this.elementID}`, `messageContainerPrimary${this.elementID}`);\r\n        this.messageContainerPrimary.innerHTML = this.message;\r\n\r\n        this.spinnerContainerMin = document.createElement('div');\r\n        this.spinnerContainerMin.className = `spinnerContainerMin${this.elementID}`;\r\n        this.spinnerMin = document.createElement('div');\r\n        this.spinnerMin.classList.add(`spinner${this.elementID}`, `spinnerMin${this.elementID}`);\r\n        this.messageContainerMin = document.createElement('div');\r\n        this.messageContainerMin.classList.add(`messageContainer${this.elementID}`, `messageContainerMin${this.elementID}`);\r\n        this.messageContainerMin.innerHTML = this.message;\r\n\r\n        this.spinnerContainerPrimary.appendChild(this.spinnerPrimary);\r\n        this.spinnerContainerPrimary.appendChild(this.messageContainerPrimary);\r\n        this.spinnerContainerOuter.appendChild(this.spinnerContainerPrimary);\r\n\r\n        this.spinnerContainerMin.appendChild(this.spinnerMin);\r\n        this.spinnerContainerMin.appendChild(this.messageContainerMin);\r\n        this.spinnerContainerOuter.appendChild(this.spinnerContainerMin);\r\n\r\n        const style = document.createElement('style');\r\n        style.innerHTML = `\r\n\r\n            .spinnerOuterContainer${this.elementID} {\r\n                width: 100%;\r\n                height: 100%;\r\n                margin: 0;\r\n                top: 0;\r\n                left: 0;\r\n                position: absolute;\r\n                pointer-events: none;\r\n            }\r\n\r\n            .messageContainer${this.elementID} {\r\n                height: 20px;\r\n                font-family: arial;\r\n                font-size: 12pt;\r\n                color: #ffffff;\r\n                text-align: center;\r\n                vertical-align: middle;\r\n            }\r\n\r\n            .spinner${this.elementID} {\r\n                padding: 15px;\r\n                background: #07e8d6;\r\n                z-index:99999;\r\n            \r\n                aspect-ratio: 1;\r\n                border-radius: 50%;\r\n                --_m: \r\n                    conic-gradient(#0000,#000),\r\n                    linear-gradient(#000 0 0) content-box;\r\n                -webkit-mask: var(--_m);\r\n                    mask: var(--_m);\r\n                -webkit-mask-composite: source-out;\r\n                    mask-composite: subtract;\r\n                box-sizing: border-box;\r\n                animation: load 1s linear infinite;\r\n            }\r\n\r\n            .spinnerContainerPrimary${this.elementID} {\r\n                z-index:99999;\r\n                background-color: rgba(128, 128, 128, 0.75);\r\n                border: #666666 1px solid;\r\n                border-radius: 5px;\r\n                padding-top: 20px;\r\n                padding-bottom: 10px;\r\n                margin: 0;\r\n                position: absolute;\r\n                top: 50%;\r\n                left: 50%;\r\n                transform: translate(-80px, -80px);\r\n                width: 180px;\r\n                pointer-events: auto;\r\n            }\r\n\r\n            .spinnerPrimary${this.elementID} {\r\n                width: 120px;\r\n                margin-left: 30px;\r\n            }\r\n\r\n            .messageContainerPrimary${this.elementID} {\r\n                padding-top: 15px;\r\n            }\r\n\r\n            .spinnerContainerMin${this.elementID} {\r\n                z-index:99999;\r\n                background-color: rgba(128, 128, 128, 0.75);\r\n                border: #666666 1px solid;\r\n                border-radius: 5px;\r\n                padding-top: 20px;\r\n                padding-bottom: 15px;\r\n                margin: 0;\r\n                position: absolute;\r\n                bottom: 50px;\r\n                left: 50%;\r\n                transform: translate(-50%, 0);\r\n                display: flex;\r\n                flex-direction: left;\r\n                pointer-events: auto;\r\n                min-width: 250px;\r\n            }\r\n\r\n            .messageContainerMin${this.elementID} {\r\n                margin-right: 15px;\r\n            }\r\n\r\n            .spinnerMin${this.elementID} {\r\n                width: 50px;\r\n                height: 50px;\r\n                margin-left: 15px;\r\n                margin-right: 25px;\r\n            }\r\n\r\n            .messageContainerMin${this.elementID} {\r\n                padding-top: 15px;\r\n            }\r\n            \r\n            @keyframes load {\r\n                to{transform: rotate(1turn)}\r\n            }\r\n\r\n        `;\r\n        this.spinnerContainerOuter.appendChild(style);\r\n        this.container.appendChild(this.spinnerContainerOuter);\r\n\r\n        this.setMinimized(false, true);\r\n\r\n        this.fadeTransitions = [];\r\n    }\r\n\r\n    addTask(message) {\r\n        const newTask = {\r\n            'message': message,\r\n            'id': this.taskIDGen++\r\n        };\r\n        this.tasks.push(newTask);\r\n        this.update();\r\n        return newTask.id;\r\n    }\r\n\r\n    removeTask(id) {\r\n        let index = 0;\r\n        for (let task of this.tasks) {\r\n            if (task.id === id) {\r\n                this.tasks.splice(index, 1);\r\n                break;\r\n            }\r\n            index++;\r\n        }\r\n        this.update();\r\n    }\r\n\r\n    removeAllTasks() {\r\n        this.tasks = [];\r\n        this.update();\r\n    }\r\n\r\n    setMessageForTask(id, message) {\r\n        for (let task of this.tasks) {\r\n            if (task.id === id) {\r\n                task.message = message;\r\n                break;\r\n            }\r\n        }\r\n        this.update();\r\n    }\r\n\r\n    update() {\r\n        if (this.tasks.length > 0) {\r\n            this.show();\r\n            this.setMessage(this.tasks[this.tasks.length - 1].message);\r\n        } else {\r\n            this.hide();\r\n        }\r\n    }\r\n\r\n    show() {\r\n        this.spinnerContainerOuter.style.display = 'block';\r\n        this.visible = true;\r\n    }\r\n\r\n    hide() {\r\n        this.spinnerContainerOuter.style.display = 'none';\r\n        this.visible = false;\r\n    }\r\n\r\n    setContainer(container) {\r\n        if (this.container) {\r\n            this.container.removeChild(this.spinnerContainerOuter);\r\n        }\r\n        if (container) {\r\n            this.container = container;\r\n            this.container.appendChild(this.spinnerContainerOuter);\r\n            this.spinnerContainerOuter.style.zIndex = this.container.style.zIndex + 1;\r\n        }\r\n    }\r\n\r\n    setMinimized(minimized, instant) {\r\n        const showHideSpinner = (element, show, instant, displayStyle, fadeTransitionsIndex) => {\r\n            if (instant) {\r\n                element.style.display = show ? displayStyle : 'none';\r\n            } else {\r\n                this.fadeTransitions[fadeTransitionsIndex] = fadeElement(element, !show, displayStyle, STANDARD_FADE_DURATION, () => {\r\n                    this.fadeTransitions[fadeTransitionsIndex] = null;\r\n                });\r\n            }\r\n        };\r\n        showHideSpinner(this.spinnerContainerPrimary, !minimized, instant, 'block', 0);\r\n        showHideSpinner(this.spinnerContainerMin, minimized, instant, 'flex', 1);\r\n        this.minimized = minimized;\r\n    }\r\n\r\n    setMessage(msg) {\r\n        this.messageContainerPrimary.innerHTML = msg;\r\n        this.messageContainerMin.innerHTML = msg;\r\n    }\r\n}\r\n","export const fadeElement = (element, out, displayStyle, duration, onComplete) => {\r\n    const startTime = performance.now();\r\n\r\n    let startOpacity = element.style.display === 'none' ? 0 : parseFloat(element.style.opacity);\r\n    if (isNaN(startOpacity)) startOpacity = 1;\r\n\r\n    const interval = window.setInterval(() => {\r\n        const currentTime = performance.now();\r\n        const elapsed = currentTime - startTime;\r\n\r\n        let t = Math.min(elapsed / duration, 1.0);\r\n        if (t > 0.999) t = 1;\r\n\r\n        let opacity;\r\n        if (out) {\r\n            opacity = (1.0 - t) * startOpacity;\r\n            if (opacity < 0.0001) opacity = 0;\r\n        } else {\r\n            opacity = (1.0 - startOpacity) * t + startOpacity;\r\n        }\r\n\r\n        if (opacity > 0) {\r\n            element.style.display = displayStyle;\r\n            element.style.opacity = opacity;\r\n        } else {\r\n            element.style.display = 'none';\r\n        }\r\n\r\n        if (t >= 1) {\r\n            if (onComplete) onComplete();\r\n            window.clearInterval(interval);\r\n        }\r\n    }, 16);\r\n    return interval;\r\n};\r\n\r\nexport const cancelFade = (interval) => {\r\n    window.clearInterval(interval);\r\n};\r\n","export class LoadingProgressBar {\r\n\r\n    constructor(container) {\r\n\r\n        this.idGen = 0;\r\n\r\n        this.tasks = [];\r\n\r\n        this.container = container || document.body;\r\n\r\n        this.progressBarContainerOuter = document.createElement('div');\r\n        this.progressBarContainerOuter.className = 'progressBarOuterContainer';\r\n        this.progressBarContainerOuter.style.display = 'none';\r\n\r\n        this.progressBarBox = document.createElement('div');\r\n        this.progressBarBox.className = 'progressBarBox';\r\n\r\n        this.progressBarBackground = document.createElement('div');\r\n        this.progressBarBackground.className = 'progressBarBackground';\r\n\r\n        this.progressBar = document.createElement('div');\r\n        this.progressBar.className = 'progressBar';\r\n\r\n        this.progressBarBackground.appendChild(this.progressBar);\r\n        this.progressBarBox.appendChild(this.progressBarBackground);\r\n        this.progressBarContainerOuter.appendChild(this.progressBarBox);\r\n\r\n        const style = document.createElement('style');\r\n        style.innerHTML = `\r\n\r\n            .progressBarOuterContainer {\r\n                width: 100%;\r\n                height: 100%;\r\n                margin: 0;\r\n                top: 0;\r\n                left: 0;\r\n                position: absolute;\r\n                pointer-events: none;\r\n            }\r\n\r\n            .progressBarBox {\r\n                z-index:99999;\r\n                padding: 7px 9px 5px 7px;\r\n                background-color: rgba(190, 190, 190, 0.75);\r\n                border: #555555 1px solid;\r\n                border-radius: 15px;\r\n                margin: 0;\r\n                position: absolute;\r\n                bottom: 50px;\r\n                left: 50%;\r\n                transform: translate(-50%, 0);\r\n                width: 180px;\r\n                height: 30px;\r\n                pointer-events: auto;\r\n            }\r\n\r\n            .progressBarBackground {\r\n                width: 100%;\r\n                height: 25px;\r\n                border-radius:10px;\r\n                background-color: rgba(128, 128, 128, 0.75);\r\n                border: #444444 1px solid;\r\n                box-shadow: inset 0 0 10px #333333;\r\n            }\r\n\r\n            .progressBar {\r\n                height: 25px;\r\n                width: 0px;\r\n                border-radius:10px;\r\n                background-color: rgba(0, 200, 0, 0.75);\r\n                box-shadow: inset 0 0 10px #003300;\r\n            }\r\n\r\n        `;\r\n        this.progressBarContainerOuter.appendChild(style);\r\n        this.container.appendChild(this.progressBarContainerOuter);\r\n    }\r\n\r\n    show() {\r\n        this.progressBarContainerOuter.style.display = 'block';\r\n    }\r\n\r\n    hide() {\r\n        this.progressBarContainerOuter.style.display = 'none';\r\n    }\r\n\r\n    setProgress(progress) {\r\n        this.progressBar.style.width = progress + '%';\r\n    }\r\n\r\n    setContainer(container) {\r\n        if (this.container) {\r\n            this.container.removeChild(this.progressBarContainerOuter);\r\n        }\r\n        if (container) {\r\n            this.container = container;\r\n            this.container.appendChild(this.progressBarContainerOuter);\r\n            this.progressBarContainerOuter.style.zIndex = this.container.style.zIndex + 1;\r\n        }\r\n    }\r\n\r\n}\r\n","export class InfoPanel {\r\n\r\n    constructor(container) {\r\n\r\n        this.container = container || document.body;\r\n\r\n        this.infoCells = {};\r\n\r\n        const layout = [\r\n            ['Camera position', 'cameraPosition'],\r\n            ['Camera look-at', 'cameraLookAt'],\r\n            ['Camera up', 'cameraUp'],\r\n            ['Camera mode', 'orthographicCamera'],\r\n            ['Cursor position', 'cursorPosition'],\r\n            ['FPS', 'fps'],\r\n            ['Rendering:', 'renderSplatCount'],\r\n            ['Sort time', 'sortTime'],\r\n            ['Render window', 'renderWindow'],\r\n            ['Focal adjustment', 'focalAdjustment'],\r\n            ['Splat scale', 'splatScale'],\r\n            ['Point cloud mode', 'pointCloudMode']\r\n        ];\r\n\r\n        this.infoPanelContainer = document.createElement('div');\r\n        const style = document.createElement('style');\r\n        style.innerHTML = `\r\n\r\n            .infoPanel {\r\n                width: 430px;\r\n                padding: 10px;\r\n                background-color: rgba(50, 50, 50, 0.85);\r\n                border: #555555 2px solid;\r\n                color: #dddddd;\r\n                border-radius: 10px;\r\n                z-index: 9999;\r\n                font-family: arial;\r\n                font-size: 11pt;\r\n                text-align: left;\r\n                margin: 0;\r\n                top: 10px;\r\n                left:10px;\r\n                position: absolute;\r\n                pointer-events: auto;\r\n            }\r\n\r\n            .info-panel-cell {\r\n                margin-bottom: 5px;\r\n                padding-bottom: 2px;\r\n            }\r\n\r\n            .label-cell {\r\n                font-weight: bold;\r\n                font-size: 12pt;\r\n                width: 140px;\r\n            }\r\n\r\n        `;\r\n        this.infoPanelContainer.append(style);\r\n\r\n        this.infoPanel = document.createElement('div');\r\n        this.infoPanel.className = 'infoPanel';\r\n\r\n        const infoTable = document.createElement('div');\r\n        infoTable.style.display = 'table';\r\n\r\n        for (let layoutEntry of layout) {\r\n            const row = document.createElement('div');\r\n            row.style.display = 'table-row';\r\n            row.className = 'info-panel-row';\r\n\r\n            const labelCell = document.createElement('div');\r\n            labelCell.style.display = 'table-cell';\r\n            labelCell.innerHTML = `${layoutEntry[0]}: `;\r\n            labelCell.classList.add('info-panel-cell', 'label-cell');\r\n\r\n            const spacerCell = document.createElement('div');\r\n            spacerCell.style.display = 'table-cell';\r\n            spacerCell.style.width = '10px';\r\n            spacerCell.innerHTML = ' ';\r\n            spacerCell.className = 'info-panel-cell';\r\n\r\n            const infoCell = document.createElement('div');\r\n            infoCell.style.display = 'table-cell';\r\n            infoCell.innerHTML = '';\r\n            infoCell.className = 'info-panel-cell';\r\n\r\n            this.infoCells[layoutEntry[1]] = infoCell;\r\n\r\n            row.appendChild(labelCell);\r\n            row.appendChild(spacerCell);\r\n            row.appendChild(infoCell);\r\n\r\n            infoTable.appendChild(row);\r\n        }\r\n\r\n        this.infoPanel.appendChild(infoTable);\r\n        this.infoPanelContainer.append(this.infoPanel);\r\n        this.infoPanelContainer.style.display = 'none';\r\n        this.container.appendChild(this.infoPanelContainer);\r\n\r\n        this.visible = false;\r\n    }\r\n\r\n    update = function(renderDimensions, cameraPosition, cameraLookAtPosition, cameraUp, orthographicCamera,\r\n                      meshCursorPosition, currentFPS, splatCount, splatRenderCount,\r\n                      splatRenderCountPct, lastSortTime, focalAdjustment, splatScale, pointCloudMode) {\r\n\r\n        const cameraPosString = `${cameraPosition.x.toFixed(5)}, ${cameraPosition.y.toFixed(5)}, ${cameraPosition.z.toFixed(5)}`;\r\n        if (this.infoCells.cameraPosition.innerHTML !== cameraPosString) {\r\n            this.infoCells.cameraPosition.innerHTML = cameraPosString;\r\n        }\r\n\r\n        if (cameraLookAtPosition) {\r\n            const cla = cameraLookAtPosition;\r\n            const cameraLookAtString = `${cla.x.toFixed(5)}, ${cla.y.toFixed(5)}, ${cla.z.toFixed(5)}`;\r\n            if (this.infoCells.cameraLookAt.innerHTML !== cameraLookAtString) {\r\n                this.infoCells.cameraLookAt.innerHTML = cameraLookAtString;\r\n            }\r\n        }\r\n\r\n        const cameraUpString = `${cameraUp.x.toFixed(5)}, ${cameraUp.y.toFixed(5)}, ${cameraUp.z.toFixed(5)}`;\r\n        if (this.infoCells.cameraUp.innerHTML !== cameraUpString) {\r\n            this.infoCells.cameraUp.innerHTML = cameraUpString;\r\n        }\r\n\r\n        this.infoCells.orthographicCamera.innerHTML = orthographicCamera ? 'Orthographic' : 'Perspective';\r\n\r\n        if (meshCursorPosition) {\r\n            const cursPos = meshCursorPosition;\r\n            const cursorPosString = `${cursPos.x.toFixed(5)}, ${cursPos.y.toFixed(5)}, ${cursPos.z.toFixed(5)}`;\r\n            this.infoCells.cursorPosition.innerHTML = cursorPosString;\r\n        } else {\r\n            this.infoCells.cursorPosition.innerHTML = 'N/A';\r\n        }\r\n\r\n        this.infoCells.fps.innerHTML = currentFPS;\r\n        this.infoCells.renderWindow.innerHTML = `${renderDimensions.x} x ${renderDimensions.y}`;\r\n\r\n        this.infoCells.renderSplatCount.innerHTML =\r\n            `${splatRenderCount} splats out of ${splatCount} (${splatRenderCountPct.toFixed(2)}%)`;\r\n\r\n        this.infoCells.sortTime.innerHTML = `${lastSortTime.toFixed(3)} ms`;\r\n        this.infoCells.focalAdjustment.innerHTML = `${focalAdjustment.toFixed(3)}`;\r\n        this.infoCells.splatScale.innerHTML = `${splatScale.toFixed(3)}`;\r\n        this.infoCells.pointCloudMode.innerHTML = `${pointCloudMode}`;\r\n    };\r\n\r\n    setContainer(container) {\r\n        if (this.container) {\r\n            this.container.removeChild(this.infoPanelContainer);\r\n        }\r\n        if (container) {\r\n            this.container = container;\r\n            this.container.appendChild(this.infoPanelContainer);\r\n            this.infoPanelContainer.style.zIndex = this.container.style.zIndex + 1;\r\n        }\r\n    }\r\n\r\n    show() {\r\n        this.infoPanelContainer.style.display = 'block';\r\n        this.visible = true;\r\n    }\r\n\r\n    hide() {\r\n        this.infoPanelContainer.style.display = 'none';\r\n        this.visible = false;\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\n\r\nexport class ArrowHelper extends THREE.Object3D {\r\n\r\n    constructor(dir = new THREE.Vector3(0, 0, 1), origin = new THREE.Vector3(0, 0, 0), length = 1,\r\n                radius = 0.1, color = 0xffff00, headLength = length * 0.2, headRadius = headLength * 0.2) {\r\n        super();\r\n\r\n        this.type = 'ArrowHelper';\r\n\r\n        const lineGeometry = new THREE.CylinderGeometry(radius, radius, length, 32);\r\n        lineGeometry.translate(0, length / 2.0, 0);\r\n        const coneGeometry = new THREE.CylinderGeometry( 0, headRadius, headLength, 32);\r\n        coneGeometry.translate(0, length, 0);\r\n\r\n        this.position.copy( origin );\r\n\r\n        this.line = new THREE.Mesh(lineGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\r\n        this.line.matrixAutoUpdate = false;\r\n        this.add(this.line);\r\n\r\n        this.cone = new THREE.Mesh(coneGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\r\n        this.cone.matrixAutoUpdate = false;\r\n        this.add(this.cone);\r\n\r\n        this.setDirection(dir);\r\n    }\r\n\r\n    setDirection( dir ) {\r\n        if (dir.y > 0.99999) {\r\n            this.quaternion.set(0, 0, 0, 1);\r\n        } else if (dir.y < - 0.99999) {\r\n            this.quaternion.set(1, 0, 0, 0);\r\n        } else {\r\n            _axis.set(dir.z, 0, -dir.x).normalize();\r\n            const radians = Math.acos(dir.y);\r\n            this.quaternion.setFromAxisAngle(_axis, radians);\r\n        }\r\n    }\r\n\r\n    setColor( color ) {\r\n        this.line.material.color.set(color);\r\n        this.cone.material.color.set(color);\r\n    }\r\n\r\n    copy(source) {\r\n        super.copy(source, false);\r\n        this.line.copy(source.line);\r\n        this.cone.copy(source.cone);\r\n        return this;\r\n    }\r\n\r\n    dispose() {\r\n        this.line.geometry.dispose();\r\n        this.line.material.dispose();\r\n        this.cone.geometry.dispose();\r\n        this.cone.material.dispose();\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { ArrowHelper } from './ArrowHelper.js';\r\nimport { disposeAllMeshes } from './Util.js';\r\n\r\nexport class SceneHelper {\r\n\r\n    constructor(threeScene) {\r\n        this.threeScene = threeScene;\r\n        this.splatRenderTarget = null;\r\n        this.renderTargetCopyQuad = null;\r\n        this.renderTargetCopyCamera = null;\r\n        this.meshCursor = null;\r\n        this.focusMarker = null;\r\n        this.controlPlane = null;\r\n        this.debugRoot = null;\r\n        this.secondaryDebugRoot = null;\r\n    }\r\n\r\n    updateSplatRenderTargetForRenderDimensions(width, height) {\r\n        this.destroySplatRendertarget();\r\n        this.splatRenderTarget = new THREE.WebGLRenderTarget(width, height, {\r\n            format: THREE.RGBAFormat,\r\n            stencilBuffer: false,\r\n            depthBuffer: true,\r\n\r\n        });\r\n        this.splatRenderTarget.depthTexture = new THREE.DepthTexture(width, height);\r\n        this.splatRenderTarget.depthTexture.format = THREE.DepthFormat;\r\n        this.splatRenderTarget.depthTexture.type = THREE.UnsignedIntType;\r\n    }\r\n\r\n    destroySplatRendertarget() {\r\n        if (this.splatRenderTarget) {\r\n            this.splatRenderTarget = null;\r\n        }\r\n    }\r\n\r\n    setupRenderTargetCopyObjects() {\r\n        const uniforms = {\r\n            'sourceColorTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'sourceDepthTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n        };\r\n        const renderTargetCopyMaterial = new THREE.ShaderMaterial({\r\n            vertexShader: `\r\n                varying vec2 vUv;\r\n                void main() {\r\n                    vUv = uv;\r\n                    gl_Position = vec4( position.xy, 0.0, 1.0 );    \r\n                }\r\n            `,\r\n            fragmentShader: `\r\n                #include <common>\r\n                #include <packing>\r\n                varying vec2 vUv;\r\n                uniform sampler2D sourceColorTexture;\r\n                uniform sampler2D sourceDepthTexture;\r\n                void main() {\r\n                    vec4 color = texture2D(sourceColorTexture, vUv);\r\n                    float fragDepth = texture2D(sourceDepthTexture, vUv).x;\r\n                    gl_FragDepth = fragDepth;\r\n                    gl_FragColor = vec4(color.rgb, color.a * 2.0);\r\n              }\r\n            `,\r\n            uniforms: uniforms,\r\n            depthWrite: false,\r\n            depthTest: false,\r\n            transparent: true,\r\n            blending: THREE.CustomBlending,\r\n            blendSrc: THREE.SrcAlphaFactor,\r\n            blendSrcAlpha: THREE.SrcAlphaFactor,\r\n            blendDst: THREE.OneMinusSrcAlphaFactor,\r\n            blendDstAlpha: THREE.OneMinusSrcAlphaFactor\r\n        });\r\n        renderTargetCopyMaterial.extensions.fragDepth = true;\r\n        this.renderTargetCopyQuad = new THREE.Mesh(new THREE.PlaneGeometry(2, 2), renderTargetCopyMaterial);\r\n        this.renderTargetCopyCamera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\r\n    }\r\n\r\n    destroyRenderTargetCopyObjects() {\r\n        if (this.renderTargetCopyQuad) {\r\n            disposeAllMeshes(this.renderTargetCopyQuad);\r\n            this.renderTargetCopyQuad = null;\r\n        }\r\n    }\r\n\r\n    setupMeshCursor() {\r\n        if (!this.meshCursor) {\r\n            const coneGeometry = new THREE.ConeGeometry(0.5, 1.5, 32);\r\n            const coneMaterial = new THREE.MeshBasicMaterial({color: 0xFFFFFF});\r\n\r\n            const downArrow = new THREE.Mesh(coneGeometry, coneMaterial);\r\n            downArrow.rotation.set(0, 0, Math.PI);\r\n            downArrow.position.set(0, 1, 0);\r\n            const upArrow = new THREE.Mesh(coneGeometry, coneMaterial);\r\n            upArrow.position.set(0, -1, 0);\r\n            const leftArrow = new THREE.Mesh(coneGeometry, coneMaterial);\r\n            leftArrow.rotation.set(0, 0, Math.PI / 2.0);\r\n            leftArrow.position.set(1, 0, 0);\r\n            const rightArrow = new THREE.Mesh(coneGeometry, coneMaterial);\r\n            rightArrow.rotation.set(0, 0, -Math.PI / 2.0);\r\n            rightArrow.position.set(-1, 0, 0);\r\n\r\n            this.meshCursor = new THREE.Object3D();\r\n            this.meshCursor.add(downArrow);\r\n            this.meshCursor.add(upArrow);\r\n            this.meshCursor.add(leftArrow);\r\n            this.meshCursor.add(rightArrow);\r\n            this.meshCursor.scale.set(0.1, 0.1, 0.1);\r\n            this.threeScene.add(this.meshCursor);\r\n            this.meshCursor.visible = false;\r\n        }\r\n    }\r\n\r\n    destroyMeshCursor() {\r\n        if (this.meshCursor) {\r\n            disposeAllMeshes(this.meshCursor);\r\n            this.threeScene.remove(this.meshCursor);\r\n            this.meshCursor = null;\r\n        }\r\n    }\r\n\r\n    setMeshCursorVisibility(visible) {\r\n        this.meshCursor.visible = visible;\r\n    }\r\n\r\n    getMeschCursorVisibility() {\r\n        return this.meshCursor.visible;\r\n    }\r\n\r\n    setMeshCursorPosition(position) {\r\n        this.meshCursor.position.copy(position);\r\n    }\r\n\r\n    positionAndOrientMeshCursor(position, camera) {\r\n        this.meshCursor.position.copy(position);\r\n        this.meshCursor.up.copy(camera.up);\r\n        this.meshCursor.lookAt(camera.position);\r\n    }\r\n\r\n    setupFocusMarker() {\r\n        if (!this.focusMarker) {\r\n            const sphereGeometry = new THREE.SphereGeometry(.5, 32, 32);\r\n            const focusMarkerMaterial = SceneHelper.buildFocusMarkerMaterial();\r\n            focusMarkerMaterial.depthTest = false;\r\n            focusMarkerMaterial.depthWrite = false;\r\n            focusMarkerMaterial.transparent = true;\r\n            this.focusMarker = new THREE.Mesh(sphereGeometry, focusMarkerMaterial);\r\n        }\r\n    }\r\n\r\n    destroyFocusMarker() {\r\n        if (this.focusMarker) {\r\n            disposeAllMeshes(this.focusMarker);\r\n            this.focusMarker = null;\r\n        }\r\n    }\r\n\r\n    updateFocusMarker = function() {\r\n\r\n        const tempPosition = new THREE.Vector3();\r\n        const tempMatrix = new THREE.Matrix4();\r\n        const toCamera = new THREE.Vector3();\r\n\r\n        return function(position, camera, viewport) {\r\n            tempMatrix.copy(camera.matrixWorld).invert();\r\n            tempPosition.copy(position).applyMatrix4(tempMatrix);\r\n            tempPosition.normalize().multiplyScalar(10);\r\n            tempPosition.applyMatrix4(camera.matrixWorld);\r\n            toCamera.copy(camera.position).sub(position);\r\n            const toCameraDistance = toCamera.length();\r\n            this.focusMarker.position.copy(position);\r\n            this.focusMarker.scale.set(toCameraDistance, toCameraDistance, toCameraDistance);\r\n            this.focusMarker.material.uniforms.realFocusPosition.value.copy(position);\r\n            this.focusMarker.material.uniforms.viewport.value.copy(viewport);\r\n            this.focusMarker.material.uniformsNeedUpdate = true;\r\n        };\r\n\r\n    }();\r\n\r\n    setFocusMarkerVisibility(visible) {\r\n        this.focusMarker.visible = visible;\r\n    }\r\n\r\n    setFocusMarkerOpacity(opacity) {\r\n        this.focusMarker.material.uniforms.opacity.value = opacity;\r\n        this.focusMarker.material.uniformsNeedUpdate = true;\r\n    }\r\n\r\n    getFocusMarkerOpacity() {\r\n        return this.focusMarker.material.uniforms.opacity.value;\r\n    }\r\n\r\n    setupControlPlane() {\r\n        if (!this.controlPlane) {\r\n            const planeGeometry = new THREE.PlaneGeometry(1, 1);\r\n            planeGeometry.rotateX(-Math.PI / 2);\r\n            const planeMaterial = new THREE.MeshBasicMaterial({color: 0xffffff});\r\n            planeMaterial.transparent = true;\r\n            planeMaterial.opacity = 0.6;\r\n            planeMaterial.depthTest = false;\r\n            planeMaterial.depthWrite = false;\r\n            planeMaterial.side = THREE.DoubleSide;\r\n            const planeMesh = new THREE.Mesh(planeGeometry, planeMaterial);\r\n\r\n            const arrowDir = new THREE.Vector3(0, 1, 0);\r\n            arrowDir.normalize();\r\n            const arrowOrigin = new THREE.Vector3(0, 0, 0);\r\n            const arrowLength = 0.5;\r\n            const arrowRadius = 0.01;\r\n            const arrowColor = 0x00dd00;\r\n            const arrowHelper = new ArrowHelper(arrowDir, arrowOrigin, arrowLength, arrowRadius, arrowColor, 0.1, 0.03);\r\n\r\n            this.controlPlane = new THREE.Object3D();\r\n            this.controlPlane.add(planeMesh);\r\n            this.controlPlane.add(arrowHelper);\r\n        }\r\n    }\r\n\r\n    destroyControlPlane() {\r\n        if (this.controlPlane) {\r\n            disposeAllMeshes(this.controlPlane);\r\n            this.controlPlane = null;\r\n        }\r\n    }\r\n\r\n    setControlPlaneVisibility(visible) {\r\n        this.controlPlane.visible = visible;\r\n    }\r\n\r\n    positionAndOrientControlPlane = function() {\r\n\r\n        const tempQuaternion = new THREE.Quaternion();\r\n        const defaultUp = new THREE.Vector3(0, 1, 0);\r\n\r\n        return function(position, up) {\r\n            tempQuaternion.setFromUnitVectors(defaultUp, up);\r\n            this.controlPlane.position.copy(position);\r\n            this.controlPlane.quaternion.copy(tempQuaternion);\r\n        };\r\n\r\n    }();\r\n\r\n    addDebugMeshes() {\r\n        this.debugRoot = this.createDebugMeshes();\r\n        this.secondaryDebugRoot = this.createSecondaryDebugMeshes();\r\n        this.threeScene.add(this.debugRoot);\r\n        this.threeScene.add(this.secondaryDebugRoot);\r\n    }\r\n\r\n    destroyDebugMeshes() {\r\n        for (let debugRoot of [this.debugRoot, this.secondaryDebugRoot]) {\r\n            if (debugRoot) {\r\n                disposeAllMeshes(debugRoot);\r\n                this.threeScene.remove(debugRoot);\r\n            }\r\n        }\r\n        this.debugRoot = null;\r\n        this.secondaryDebugRoot = null;\r\n    }\r\n\r\n    createDebugMeshes(renderOrder) {\r\n        const sphereGeometry = new THREE.SphereGeometry(1, 32, 32);\r\n        const debugMeshRoot = new THREE.Object3D();\r\n\r\n        const createMesh = (color, position) => {\r\n            let sphereMesh = new THREE.Mesh(sphereGeometry, SceneHelper.buildDebugMaterial(color));\r\n            sphereMesh.renderOrder = renderOrder;\r\n            debugMeshRoot.add(sphereMesh);\r\n            sphereMesh.position.fromArray(position);\r\n        };\r\n\r\n        createMesh(0xff0000, [-50, 0, 0]);\r\n        createMesh(0xff0000, [50, 0, 0]);\r\n        createMesh(0x00ff00, [0, 0, -50]);\r\n        createMesh(0x00ff00, [0, 0, 50]);\r\n        createMesh(0xffaa00, [5, 0, 5]);\r\n\r\n        return debugMeshRoot;\r\n    }\r\n\r\n    createSecondaryDebugMeshes(renderOrder) {\r\n        const boxGeometry = new THREE.BoxGeometry(3, 3, 3);\r\n        const debugMeshRoot = new THREE.Object3D();\r\n\r\n        let boxColor = 0xBBBBBB;\r\n        const createMesh = (position) => {\r\n            let boxMesh = new THREE.Mesh(boxGeometry, SceneHelper.buildDebugMaterial(boxColor));\r\n            boxMesh.renderOrder = renderOrder;\r\n            debugMeshRoot.add(boxMesh);\r\n            boxMesh.position.fromArray(position);\r\n        };\r\n\r\n        let separation = 10;\r\n        createMesh([-separation, 0, -separation]);\r\n        createMesh([-separation, 0, separation]);\r\n        createMesh([separation, 0, -separation]);\r\n        createMesh([separation, 0, separation]);\r\n\r\n        return debugMeshRoot;\r\n    }\r\n\r\n    static buildDebugMaterial(color) {\r\n        const vertexShaderSource = `\r\n            #include <common>\r\n            varying float ndcDepth;\r\n\r\n            void main() {\r\n                gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position.xyz, 1.0);\r\n                ndcDepth = gl_Position.z / gl_Position.w;\r\n                gl_Position.x = gl_Position.x / gl_Position.w;\r\n                gl_Position.y = gl_Position.y / gl_Position.w;\r\n                gl_Position.z = 0.0;\r\n                gl_Position.w = 1.0;\r\n    \r\n            }\r\n        `;\r\n\r\n        const fragmentShaderSource = `\r\n            #include <common>\r\n            uniform vec3 color;\r\n            varying float ndcDepth;\r\n            void main() {\r\n                gl_FragDepth = (ndcDepth + 1.0) / 2.0;\r\n                gl_FragColor = vec4(color.rgb, 0.0);\r\n            }\r\n        `;\r\n\r\n        const uniforms = {\r\n            'color': {\r\n                'type': 'v3',\r\n                'value': new THREE.Color(color)\r\n            },\r\n        };\r\n\r\n        const material = new THREE.ShaderMaterial({\r\n            uniforms: uniforms,\r\n            vertexShader: vertexShaderSource,\r\n            fragmentShader: fragmentShaderSource,\r\n            transparent: false,\r\n            depthTest: true,\r\n            depthWrite: true,\r\n            side: THREE.FrontSide\r\n        });\r\n        material.extensions.fragDepth = true;\r\n\r\n        return material;\r\n    }\r\n\r\n    static buildFocusMarkerMaterial(color) {\r\n        const vertexShaderSource = `\r\n            #include <common>\r\n\r\n            uniform vec2 viewport;\r\n            uniform vec3 realFocusPosition;\r\n\r\n            varying vec4 ndcPosition;\r\n            varying vec4 ndcCenter;\r\n            varying vec4 ndcFocusPosition;\r\n\r\n            void main() {\r\n                float radius = 0.01;\r\n\r\n                vec4 viewPosition = modelViewMatrix * vec4(position.xyz, 1.0);\r\n                vec4 viewCenter = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);\r\n\r\n                vec4 viewFocusPosition = modelViewMatrix * vec4(realFocusPosition, 1.0);\r\n\r\n                ndcPosition = projectionMatrix * viewPosition;\r\n                ndcPosition = ndcPosition * vec4(1.0 / ndcPosition.w);\r\n                ndcCenter = projectionMatrix * viewCenter;\r\n                ndcCenter = ndcCenter * vec4(1.0 / ndcCenter.w);\r\n\r\n                ndcFocusPosition = projectionMatrix * viewFocusPosition;\r\n                ndcFocusPosition = ndcFocusPosition * vec4(1.0 / ndcFocusPosition.w);\r\n\r\n                gl_Position = projectionMatrix * viewPosition;\r\n\r\n            }\r\n        `;\r\n\r\n        const fragmentShaderSource = `\r\n            #include <common>\r\n            uniform vec3 color;\r\n            uniform vec2 viewport;\r\n            uniform float opacity;\r\n\r\n            varying vec4 ndcPosition;\r\n            varying vec4 ndcCenter;\r\n            varying vec4 ndcFocusPosition;\r\n\r\n            void main() {\r\n                vec2 screenPosition = vec2(ndcPosition) * viewport;\r\n                vec2 screenCenter = vec2(ndcCenter) * viewport;\r\n\r\n                vec2 screenVec = screenPosition - screenCenter;\r\n\r\n                float projectedRadius = length(screenVec);\r\n\r\n                float lineWidth = 0.0005 * viewport.y;\r\n                float aaRange = 0.0025 * viewport.y;\r\n                float radius = 0.06 * viewport.y;\r\n                float radDiff = abs(projectedRadius - radius) - lineWidth;\r\n                float alpha = 1.0 - clamp(radDiff / 5.0, 0.0, 1.0); \r\n\r\n                gl_FragColor = vec4(color.rgb, alpha * opacity);\r\n            }\r\n        `;\r\n\r\n        const uniforms = {\r\n            'color': {\r\n                'type': 'v3',\r\n                'value': new THREE.Color(color)\r\n            },\r\n            'realFocusPosition': {\r\n                'type': 'v3',\r\n                'value': new THREE.Vector3()\r\n            },\r\n            'viewport': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2()\r\n            },\r\n            'opacity': {\r\n                'value': 0.0\r\n            }\r\n        };\r\n\r\n        const material = new THREE.ShaderMaterial({\r\n            uniforms: uniforms,\r\n            vertexShader: vertexShaderSource,\r\n            fragmentShader: fragmentShaderSource,\r\n            transparent: true,\r\n            depthTest: false,\r\n            depthWrite: false,\r\n            side: THREE.FrontSide\r\n        });\r\n\r\n        return material;\r\n    }\r\n\r\n    dispose() {\r\n        this.destroyMeshCursor();\r\n        this.destroyFocusMarker();\r\n        this.destroyDebugMeshes();\r\n        this.destroyControlPlane();\r\n        this.destroyRenderTargetCopyObjects();\r\n        this.destroySplatRendertarget();\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\n\r\nconst VectorRight = new THREE.Vector3(1, 0, 0);\r\nconst VectorUp = new THREE.Vector3(0, 1, 0);\r\nconst VectorBackward = new THREE.Vector3(0, 0, 1);\r\n\r\nexport class Ray {\r\n\r\n    constructor(origin = new THREE.Vector3(), direction = new THREE.Vector3()) {\r\n        this.origin = new THREE.Vector3();\r\n        this.direction = new THREE.Vector3();\r\n        this.setParameters(origin, direction);\r\n    }\r\n\r\n    setParameters(origin, direction) {\r\n        this.origin.copy(origin);\r\n        this.direction.copy(direction).normalize();\r\n    }\r\n\r\n    boxContainsPoint(box, point, epsilon) {\r\n        return point.x < box.min.x - epsilon || point.x > box.max.x + epsilon ||\r\n               point.y < box.min.y - epsilon || point.y > box.max.y + epsilon ||\r\n               point.z < box.min.z - epsilon || point.z > box.max.z + epsilon ? false : true;\r\n    }\r\n\r\n    intersectBox = function() {\r\n\r\n        const planeIntersectionPoint = new THREE.Vector3();\r\n        const planeIntersectionPointArray = [];\r\n        const originArray = [];\r\n        const directionArray = [];\r\n\r\n        return function(box, outHit) {\r\n\r\n            originArray[0] = this.origin.x;\r\n            originArray[1] = this.origin.y;\r\n            originArray[2] = this.origin.z;\r\n            directionArray[0] = this.direction.x;\r\n            directionArray[1] = this.direction.y;\r\n            directionArray[2] = this.direction.z;\r\n\r\n            if (this.boxContainsPoint(box, this.origin, 0.0001)) {\r\n                if (outHit) {\r\n                    outHit.origin.copy(this.origin);\r\n                    outHit.normal.set(0, 0, 0);\r\n                    outHit.distance = -1;\r\n                }\r\n                return true;\r\n            }\r\n\r\n            for (let i = 0; i < 3; i++) {\r\n                if (directionArray[i] == 0.0) continue;\r\n\r\n                const hitNormal = i == 0 ? VectorRight : i == 1 ? VectorUp : VectorBackward;\r\n                const extremeVec = directionArray[i] < 0 ? box.max : box.min;\r\n                let multiplier = -Math.sign(directionArray[i]);\r\n                planeIntersectionPointArray[0] = i == 0 ? extremeVec.x : i == 1 ? extremeVec.y : extremeVec.z;\r\n                let toSide = planeIntersectionPointArray[0] - originArray[i];\r\n\r\n                if (toSide * multiplier < 0) {\r\n                    const idx1 = (i + 1) % 3;\r\n                    const idx2 = (i + 2) % 3;\r\n                    planeIntersectionPointArray[2] = directionArray[idx1] / directionArray[i] * toSide + originArray[idx1];\r\n                    planeIntersectionPointArray[1] = directionArray[idx2] / directionArray[i] * toSide + originArray[idx2];\r\n                    planeIntersectionPoint.set(planeIntersectionPointArray[i],\r\n                                               planeIntersectionPointArray[idx2],\r\n                                               planeIntersectionPointArray[idx1]);\r\n                    if (this.boxContainsPoint(box, planeIntersectionPoint, 0.0001)) {\r\n                        if (outHit) {\r\n                            outHit.origin.copy(planeIntersectionPoint);\r\n                            outHit.normal.copy(hitNormal).multiplyScalar(multiplier);\r\n                            outHit.distance = planeIntersectionPoint.sub(this.origin).length();\r\n                        }\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n    }();\r\n\r\n    intersectSphere = function() {\r\n\r\n        const toSphereCenterVec = new THREE.Vector3();\r\n\r\n        return function(center, radius, outHit) {\r\n            toSphereCenterVec.copy(center).sub(this.origin);\r\n            const toClosestApproach = toSphereCenterVec.dot(this.direction);\r\n            const toClosestApproachSq = toClosestApproach * toClosestApproach;\r\n            const toSphereCenterSq = toSphereCenterVec.dot(toSphereCenterVec);\r\n            const diffSq = toSphereCenterSq - toClosestApproachSq;\r\n            const radiusSq = radius * radius;\r\n\r\n            if (diffSq > radiusSq) return false;\r\n\r\n            const thc = Math.sqrt(radiusSq - diffSq);\r\n            const t0 = toClosestApproach - thc;\r\n            const t1 = toClosestApproach + thc;\r\n\r\n            if (t1 < 0) return false;\r\n            let t = t0 < 0 ? t1 : t0;\r\n\r\n            if (outHit) {\r\n                outHit.origin.copy(this.origin).addScaledVector(this.direction, t);\r\n                outHit.normal.copy(outHit.origin).sub(center).normalize();\r\n                outHit.distance = t;\r\n            }\r\n            return true;\r\n        };\r\n\r\n    }();\r\n}\r\n","import * as THREE from 'three';\r\n\r\nexport class Hit {\r\n\r\n    constructor() {\r\n        this.origin = new THREE.Vector3();\r\n        this.normal = new THREE.Vector3();\r\n        this.distance = 0;\r\n        this.splatIndex = 0;\r\n    }\r\n\r\n    set(origin, normal, distance, splatIndex) {\r\n        this.origin.copy(origin);\r\n        this.normal.copy(normal);\r\n        this.distance = distance;\r\n        this.splatIndex = splatIndex;\r\n    }\r\n\r\n    clone() {\r\n        const hitClone = new Hit();\r\n        hitClone.origin.copy(this.origin);\r\n        hitClone.normal.copy(this.normal);\r\n        hitClone.distance = this.distance;\r\n        hitClone.splatIndex = this.splatIndex;\r\n        return hitClone;\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { Ray } from './Ray.js';\r\nimport { Hit } from './Hit.js';\r\n\r\nexport class Raycaster {\r\n\r\n    constructor(origin, direction, raycastAgainstTrueSplatEllipsoid = false) {\r\n        this.ray = new Ray(origin, direction);\r\n        this.raycastAgainstTrueSplatEllipsoid = raycastAgainstTrueSplatEllipsoid;\r\n    }\r\n\r\n    setFromCameraAndScreenPosition = function() {\r\n\r\n        const ndcCoords = new THREE.Vector2();\r\n\r\n        return function(camera, screenPosition, screenDimensions) {\r\n            ndcCoords.x = screenPosition.x / screenDimensions.x * 2.0 - 1.0;\r\n            ndcCoords.y = (screenDimensions.y - screenPosition.y) / screenDimensions.y * 2.0 - 1.0;\r\n            if (camera.isPerspectiveCamera) {\r\n                this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\r\n                this.ray.direction.set(ndcCoords.x, ndcCoords.y, 0.5 ).unproject(camera).sub(this.ray.origin).normalize();\r\n                this.camera = camera;\r\n            } else if (camera.isOrthographicCamera) {\r\n                this.ray.origin.set(ndcCoords.x, ndcCoords.y,\r\n                                   (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera);\r\n                this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\r\n                this.camera = camera;\r\n            } else {\r\n                throw new Error('Raycaster::setFromCameraAndScreenPosition() -> Unsupported camera type');\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    intersectSplatMesh = function() {\r\n\r\n        const toLocal = new THREE.Matrix4();\r\n        const fromLocal = new THREE.Matrix4();\r\n        const sceneTransform = new THREE.Matrix4();\r\n        const localRay = new Ray();\r\n        const tempPoint = new THREE.Vector3();\r\n\r\n        return function(splatMesh, outHits = []) {\r\n            const splatTree = splatMesh.getSplatTree();\r\n\r\n            if (!splatTree) return;\r\n\r\n            for (let s = 0; s < splatTree.subTrees.length; s++) {\r\n                const subTree = splatTree.subTrees[s];\r\n\r\n                fromLocal.copy(splatMesh.matrixWorld);\r\n                if (splatMesh.dynamicMode) {\r\n                    splatMesh.getSceneTransform(s, sceneTransform);\r\n                    fromLocal.multiply(sceneTransform);\r\n                }\r\n                toLocal.copy(fromLocal).invert();\r\n\r\n                localRay.origin.copy(this.ray.origin).applyMatrix4(toLocal);\r\n                localRay.direction.copy(this.ray.origin).add(this.ray.direction);\r\n                localRay.direction.applyMatrix4(toLocal).sub(localRay.origin).normalize();\r\n\r\n                const outHitsForSubTree = [];\r\n                if (subTree.rootNode) {\r\n                    this.castRayAtSplatTreeNode(localRay, splatTree, subTree.rootNode, outHitsForSubTree);\r\n                }\r\n\r\n                outHitsForSubTree.forEach((hit) => {\r\n                    hit.origin.applyMatrix4(fromLocal);\r\n                    hit.normal.applyMatrix4(fromLocal).normalize();\r\n                    hit.distance = tempPoint.copy(hit.origin).sub(this.ray.origin).length();\r\n                });\r\n\r\n                outHits.push(...outHitsForSubTree);\r\n            }\r\n\r\n            outHits.sort((a, b) => {\r\n                if (a.distance > b.distance) return 1;\r\n                else return -1;\r\n            });\r\n\r\n            return outHits;\r\n        };\r\n\r\n    }();\r\n\r\n    castRayAtSplatTreeNode = function() {\r\n\r\n        const tempColor = new THREE.Vector4();\r\n        const tempCenter = new THREE.Vector3();\r\n        const tempScale = new THREE.Vector3();\r\n        const tempRotation = new THREE.Quaternion();\r\n        const tempHit = new Hit();\r\n        const scaleEpsilon = 0.0000001;\r\n\r\n        const origin = new THREE.Vector3(0, 0, 0);\r\n        const uniformScaleMatrix = new THREE.Matrix4();\r\n        const scaleMatrix = new THREE.Matrix4();\r\n        const rotationMatrix = new THREE.Matrix4();\r\n        const toSphereSpace = new THREE.Matrix4();\r\n        const fromSphereSpace = new THREE.Matrix4();\r\n        const tempRay = new Ray();\r\n\r\n        return function(ray, splatTree, node, outHits = []) {\r\n            if (!ray.intersectBox(node.boundingBox)) {\r\n                return;\r\n            }\r\n            if (node.data && node.data.indexes && node.data.indexes.length > 0) {\r\n                for (let i = 0; i < node.data.indexes.length; i++) {\r\n\r\n                    const splatGlobalIndex = node.data.indexes[i];\r\n                    const splatSceneIndex = splatTree.splatMesh.getSceneIndexForSplat(splatGlobalIndex);\r\n                    const splatScene = splatTree.splatMesh.getScene(splatSceneIndex);\r\n                    if (!splatScene.visible) continue;\r\n\r\n                    splatTree.splatMesh.getSplatColor(splatGlobalIndex, tempColor);\r\n                    splatTree.splatMesh.getSplatCenter(splatGlobalIndex, tempCenter);\r\n                    splatTree.splatMesh.getSplatScaleAndRotation(splatGlobalIndex, tempScale, tempRotation);\r\n\r\n                    if (tempScale.x <= scaleEpsilon || tempScale.y <= scaleEpsilon || tempScale.z <= scaleEpsilon) {\r\n                        continue;\r\n                    }\r\n\r\n                    if (!this.raycastAgainstTrueSplatEllipsoid) {\r\n                        const radius = (tempScale.x + tempScale.y + tempScale.z) / 3;\r\n                        if (ray.intersectSphere(tempCenter, radius, tempHit)) {\r\n                            const hitClone = tempHit.clone();\r\n                            hitClone.splatIndex = splatGlobalIndex;\r\n                            outHits.push(hitClone);\r\n                        }\r\n                    } else {\r\n                        scaleMatrix.makeScale(tempScale.x, tempScale.y, tempScale.z);\r\n                        rotationMatrix.makeRotationFromQuaternion(tempRotation);\r\n                        const uniformScale = Math.log10(tempColor.w) * 2.0;\r\n                        uniformScaleMatrix.makeScale(uniformScale, uniformScale, uniformScale);\r\n                        fromSphereSpace.copy(uniformScaleMatrix).multiply(rotationMatrix).multiply(scaleMatrix);\r\n                        toSphereSpace.copy(fromSphereSpace).invert();\r\n                        tempRay.origin.copy(ray.origin).sub(tempCenter).applyMatrix4(toSphereSpace);\r\n                        tempRay.direction.copy(ray.origin).add(ray.direction).sub(tempCenter);\r\n                        tempRay.direction.applyMatrix4(toSphereSpace).sub(tempRay.origin).normalize();\r\n                        if (tempRay.intersectSphere(origin, 1.0, tempHit)) {\r\n                            const hitClone = tempHit.clone();\r\n                            hitClone.splatIndex = splatGlobalIndex;\r\n                            hitClone.origin.applyMatrix4(fromSphereSpace).add(tempCenter);\r\n                            outHits.push(hitClone);\r\n                        }\r\n                    }\r\n                }\r\n             }\r\n            if (node.children && node.children.length > 0) {\r\n                for (let child of node.children) {\r\n                    this.castRayAtSplatTreeNode(ray, splatTree, child, outHits);\r\n                }\r\n            }\r\n            return outHits;\r\n        };\r\n\r\n    }();\r\n}\r\n","import * as THREE from 'three';\r\nimport { Constants } from '../Constants.js';\r\n\r\nexport class SplatMaterial {\r\n\r\n    /**\r\n     * Build the Three.js material that is used to render the splats.\r\n     * @param {number} dynamicMode If true, it means the scene geometry represented by this splat mesh is not stationary or\r\n     *                             that the splat count might change\r\n     * @param {boolean} enableOptionalEffects When true, allows for usage of extra properties and attributes in the shader for effects\r\n     *                                        such as opacity adjustment. Default is false for performance reasons.\r\n     * @param {boolean} antialiased If true, calculate compensation factor to deal with gaussians being rendered at a significantly\r\n     *                              different resolution than that of their training\r\n     * @param {number} maxScreenSpaceSplatSize The maximum clip space splat size\r\n     * @param {number} splatScale Value by which all splats are scaled in screen-space (default is 1.0)\r\n     * @param {number} pointCloudModeEnabled Render all splats as screen-space circles\r\n     * @param {number} maxSphericalHarmonicsDegree Degree of spherical harmonics to utilize in rendering splats\r\n     * @return {THREE.ShaderMaterial}\r\n     */\r\n    static build(dynamicMode = false, enableOptionalEffects = false, antialiased = false, maxScreenSpaceSplatSize = 2048,\r\n                 splatScale = 1.0, pointCloudModeEnabled = false, maxSphericalHarmonicsDegree = 0) {\r\n        // Contains the code to project 3D covariance to 2D and from there calculate the quad (using the eigen vectors of the\r\n        // 2D covariance) that is ultimately rasterized\r\n        let vertexShaderSource = `\r\n            precision highp float;\r\n            #include <common>\r\n\r\n            attribute uint splatIndex;\r\n\r\n            uniform highp sampler2D covariancesTexture;\r\n            uniform highp usampler2D centersColorsTexture;\r\n            uniform highp sampler2D sphericalHarmonicsTexture;\r\n            uniform highp sampler2D sphericalHarmonicsTextureR;\r\n            uniform highp sampler2D sphericalHarmonicsTextureG;\r\n            uniform highp sampler2D sphericalHarmonicsTextureB;`;\r\n\r\n        if (enableOptionalEffects || dynamicMode) {\r\n            vertexShaderSource += `\r\n                uniform highp usampler2D sceneIndexesTexture;\r\n                uniform vec2 sceneIndexesTextureSize;\r\n            `;\r\n        }\r\n\r\n        if (enableOptionalEffects) {\r\n            vertexShaderSource += `\r\n                uniform float sceneOpacity[${Constants.MaxScenes}];\r\n                uniform int sceneVisibility[${Constants.MaxScenes}];\r\n            `;\r\n        }\r\n\r\n        if (dynamicMode) {\r\n            vertexShaderSource += `\r\n                uniform highp mat4 transforms[${Constants.MaxScenes}];\r\n            `;\r\n        }\r\n\r\n        vertexShaderSource += `\r\n            uniform vec2 focal;\r\n            uniform float orthoZoom;\r\n            uniform int orthographicMode;\r\n            uniform int pointCloudModeEnabled;\r\n            uniform float inverseFocalAdjustment;\r\n            uniform vec2 viewport;\r\n            uniform vec2 basisViewport;\r\n            uniform vec2 covariancesTextureSize;\r\n            uniform vec2 centersColorsTextureSize;\r\n            uniform int sphericalHarmonicsDegree;\r\n            uniform vec2 sphericalHarmonicsTextureSize;\r\n            uniform int sphericalHarmonics8BitMode;\r\n            uniform int sphericalHarmonicsMultiTextureMode;\r\n            uniform float visibleRegionRadius;\r\n            uniform float visibleRegionFadeStartRadius;\r\n            uniform float firstRenderTime;\r\n            uniform float currentTime;\r\n            uniform int fadeInComplete;\r\n            uniform vec3 sceneCenter;\r\n            uniform float splatScale;\r\n\r\n            varying vec4 vColor;\r\n            varying vec2 vUv;\r\n\r\n            varying vec2 vPosition;\r\n\r\n            const float sqrt8 = sqrt(8.0);\r\n            const float minAlpha = 1.0 / 255.0;\r\n\r\n            const vec4 encodeNorm4 = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\r\n            const uvec4 mask4 = uvec4(uint(0x000000FF), uint(0x0000FF00), uint(0x00FF0000), uint(0xFF000000));\r\n            const uvec4 shift4 = uvec4(0, 8, 16, 24);\r\n            vec4 uintToRGBAVec (uint u) {\r\n               uvec4 urgba = mask4 & u;\r\n               urgba = urgba >> shift4;\r\n               vec4 rgba = vec4(urgba) * encodeNorm4;\r\n               return rgba;\r\n            }\r\n\r\n            vec2 getDataUV(in int stride, in int offset, in vec2 dimensions) {\r\n                vec2 samplerUV = vec2(0.0, 0.0);\r\n                float d = float(splatIndex * uint(stride) + uint(offset)) / dimensions.x;\r\n                samplerUV.y = float(floor(d)) / dimensions.y;\r\n                samplerUV.x = fract(d);\r\n                return samplerUV;\r\n            }\r\n\r\n            vec2 getDataUVF(in uint sIndex, in float stride, in uint offset, in vec2 dimensions) {\r\n                vec2 samplerUV = vec2(0.0, 0.0);\r\n                float d = float(uint(float(sIndex) * stride) + offset) / dimensions.x;\r\n                samplerUV.y = float(floor(d)) / dimensions.y;\r\n                samplerUV.x = fract(d);\r\n                return samplerUV;\r\n            }\r\n\r\n            const float SH_C1 = 0.4886025119029199f;\r\n            const float[5] SH_C2 = float[](1.0925484, -1.0925484, 0.3153916, -1.0925484, 0.5462742);\r\n\r\n            const float SphericalHarmonics8BitCompressionRange = ${Constants.SphericalHarmonics8BitCompressionRange.toFixed(1)};\r\n            const float SphericalHarmonics8BitCompressionHalfRange = SphericalHarmonics8BitCompressionRange / 2.0;\r\n            const vec3 vec8BitSHShift = vec3(SphericalHarmonics8BitCompressionHalfRange);\r\n\r\n            void main () {\r\n\r\n                uint oddOffset = splatIndex & uint(0x00000001);\r\n                uint doubleOddOffset = oddOffset * uint(2);\r\n                bool isEven = oddOffset == uint(0);\r\n                uint nearestEvenIndex = splatIndex - oddOffset;\r\n                float fOddOffset = float(oddOffset);\r\n\r\n                uvec4 sampledCenterColor = texture(centersColorsTexture, getDataUV(1, 0, centersColorsTextureSize));\r\n                vec3 splatCenter = uintBitsToFloat(uvec3(sampledCenterColor.gba));`;\r\n\r\n            if (dynamicMode || enableOptionalEffects) {\r\n                vertexShaderSource += `\r\n                    uint sceneIndex = texture(sceneIndexesTexture, getDataUV(1, 0, sceneIndexesTextureSize)).r;\r\n                `;\r\n            }\r\n\r\n            if (enableOptionalEffects) {\r\n                vertexShaderSource += `\r\n                    float splatOpacityFromScene = sceneOpacity[sceneIndex];\r\n                    int sceneVisible = sceneVisibility[sceneIndex];\r\n                    if (splatOpacityFromScene <= 0.01 || sceneVisible == 0) {\r\n                        gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\r\n                        return;\r\n                    }\r\n                `;\r\n            }\r\n\r\n            if (dynamicMode) {\r\n                vertexShaderSource += `\r\n                    mat4 transform = transforms[sceneIndex];\r\n                    mat4 transformModelViewMatrix = modelViewMatrix * transform;\r\n                `;\r\n            } else {\r\n                vertexShaderSource += `mat4 transformModelViewMatrix = modelViewMatrix;`;\r\n            }\r\n\r\n            vertexShaderSource += `\r\n                vec4 viewCenter = transformModelViewMatrix * vec4(splatCenter, 1.0);\r\n\r\n                vec4 clipCenter = projectionMatrix * viewCenter;\r\n\r\n                float clip = 1.2 * clipCenter.w;\r\n                if (clipCenter.z < -clip || clipCenter.x < -clip || clipCenter.x > clip || clipCenter.y < -clip || clipCenter.y > clip) {\r\n                    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\r\n                    return;\r\n                }\r\n\r\n                vPosition = position.xy;\r\n                vColor = uintToRGBAVec(sampledCenterColor.r);\r\n            `;\r\n\r\n            if (maxSphericalHarmonicsDegree >= 1) {\r\n\r\n                vertexShaderSource += `   \r\n                if (sphericalHarmonicsDegree >= 1) {\r\n                `;\r\n\r\n                if (dynamicMode) {\r\n                    vertexShaderSource += `\r\n                        mat4 mTransform = modelMatrix * transform;\r\n                        vec3 worldViewDir = normalize(splatCenter - vec3(inverse(mTransform) * vec4(cameraPosition, 1.0)));\r\n                    `;\r\n                } else {\r\n                    vertexShaderSource += `\r\n                        vec3 worldViewDir = normalize(splatCenter - cameraPosition);\r\n                    `;\r\n                }\r\n\r\n                vertexShaderSource += `\r\n                    vec3 sh1;\r\n                    vec3 sh2;\r\n                    vec3 sh3;\r\n                `;\r\n\r\n                if (maxSphericalHarmonicsDegree >= 2) {\r\n                    vertexShaderSource += `\r\n                        vec4 sampledSH0123;\r\n                        vec4 sampledSH4567;\r\n                        vec4 sampledSH891011;\r\n\r\n                        vec4 sampledSH0123R;\r\n                        vec4 sampledSH0123G;\r\n                        vec4 sampledSH0123B;\r\n                        \r\n                        if (sphericalHarmonicsMultiTextureMode == 0) {\r\n                            sampledSH0123 = texture(sphericalHarmonicsTexture, getDataUV(6, 0, sphericalHarmonicsTextureSize));\r\n                            sampledSH4567 = texture(sphericalHarmonicsTexture, getDataUV(6, 1, sphericalHarmonicsTextureSize));\r\n                            sampledSH891011 = texture(sphericalHarmonicsTexture, getDataUV(6, 2, sphericalHarmonicsTextureSize));\r\n                            sh1 = sampledSH0123.rgb;\r\n                            sh2 = vec3(sampledSH0123.a, sampledSH4567.rg);\r\n                            sh3 = vec3(sampledSH4567.ba, sampledSH891011.r);\r\n                        } else {\r\n                            sampledSH0123R = texture(sphericalHarmonicsTextureR, getDataUV(2, 0, sphericalHarmonicsTextureSize));\r\n                            sampledSH0123G = texture(sphericalHarmonicsTextureG, getDataUV(2, 0, sphericalHarmonicsTextureSize));\r\n                            sampledSH0123B = texture(sphericalHarmonicsTextureB, getDataUV(2, 0, sphericalHarmonicsTextureSize));\r\n                            sh1 = vec3(sampledSH0123R.rgb);\r\n                            sh2 = vec3(sampledSH0123G.rgb);\r\n                            sh3 = vec3(sampledSH0123B.rgb);\r\n                        }\r\n                    `;\r\n                } else {\r\n                    vertexShaderSource += `\r\n                        if (sphericalHarmonicsMultiTextureMode == 0) {\r\n                            vec2 shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset, sphericalHarmonicsTextureSize);\r\n                            vec4 sampledSH0123 = texture(sphericalHarmonicsTexture, shUV);\r\n                            shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset + uint(1), sphericalHarmonicsTextureSize);\r\n                            vec4 sampledSH4567 = texture(sphericalHarmonicsTexture, shUV);\r\n                            shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset + uint(2), sphericalHarmonicsTextureSize);\r\n                            vec4 sampledSH891011 = texture(sphericalHarmonicsTexture, shUV);\r\n                            sh1 = vec3(sampledSH0123.rgb) * (1.0 - fOddOffset) + vec3(sampledSH0123.ba, sampledSH4567.r) * fOddOffset;\r\n                            sh2 = vec3(sampledSH0123.a, sampledSH4567.rg) * (1.0 - fOddOffset) + vec3(sampledSH4567.gba) * fOddOffset;\r\n                            sh3 = vec3(sampledSH4567.ba, sampledSH891011.r) * (1.0 - fOddOffset) + vec3(sampledSH891011.rgb) * fOddOffset;\r\n                        } else {\r\n                            vec2 sampledSH01R = texture(sphericalHarmonicsTextureR, getDataUV(2, 0, sphericalHarmonicsTextureSize)).rg;\r\n                            vec2 sampledSH23R = texture(sphericalHarmonicsTextureR, getDataUV(2, 1, sphericalHarmonicsTextureSize)).rg;\r\n                            vec2 sampledSH01G = texture(sphericalHarmonicsTextureG, getDataUV(2, 0, sphericalHarmonicsTextureSize)).rg;\r\n                            vec2 sampledSH23G = texture(sphericalHarmonicsTextureG, getDataUV(2, 1, sphericalHarmonicsTextureSize)).rg;\r\n                            vec2 sampledSH01B = texture(sphericalHarmonicsTextureB, getDataUV(2, 0, sphericalHarmonicsTextureSize)).rg;\r\n                            vec2 sampledSH23B = texture(sphericalHarmonicsTextureB, getDataUV(2, 1, sphericalHarmonicsTextureSize)).rg;\r\n                            sh1 = vec3(sampledSH01R.rg, sampledSH23R.r);\r\n                            sh2 = vec3(sampledSH01G.rg, sampledSH23G.r);\r\n                            sh3 = vec3(sampledSH01B.rg, sampledSH23B.r);\r\n                        }\r\n                    `;\r\n                }\r\n\r\n                vertexShaderSource += `\r\n                        if (sphericalHarmonics8BitMode == 1) {\r\n                            sh1 = sh1 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\r\n                            sh2 = sh2 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\r\n                            sh3 = sh3 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\r\n                        }\r\n                        float x = worldViewDir.x;\r\n                        float y = worldViewDir.y;\r\n                        float z = worldViewDir.z;\r\n                        vColor.rgb += SH_C1 * (-sh1 * y + sh2 * z - sh3 * x);\r\n                `;\r\n\r\n                if (maxSphericalHarmonicsDegree >= 2) {\r\n\r\n                    vertexShaderSource += `\r\n                        if (sphericalHarmonicsDegree >= 2) {\r\n                            float xx = x * x;\r\n                            float yy = y * y;\r\n                            float zz = z * z;\r\n                            float xy = x * y;\r\n                            float yz = y * z;\r\n                            float xz = x * z;\r\n\r\n                            vec3 sh4;\r\n                            vec3 sh5;\r\n                            vec3 sh6;\r\n                            vec3 sh7;\r\n                            vec3 sh8;\r\n\r\n                            if (sphericalHarmonicsMultiTextureMode == 0) {\r\n                                vec4 sampledSH12131415 = texture(sphericalHarmonicsTexture, getDataUV(6, 3, sphericalHarmonicsTextureSize));\r\n                                vec4 sampledSH16171819 = texture(sphericalHarmonicsTexture, getDataUV(6, 4, sphericalHarmonicsTextureSize));\r\n                                vec4 sampledSH20212223 = texture(sphericalHarmonicsTexture, getDataUV(6, 5, sphericalHarmonicsTextureSize));\r\n                                sh4 = sampledSH891011.gba;\r\n                                sh5 = sampledSH12131415.rgb;\r\n                                sh6 = vec3(sampledSH12131415.a, sampledSH16171819.rg);\r\n                                sh7 = vec3(sampledSH16171819.ba, sampledSH20212223.r);\r\n                                sh8 = sampledSH20212223.gba;\r\n                            } else {\r\n                                vec4 sampledSH4567R = texture(sphericalHarmonicsTextureR, getDataUV(2, 1, sphericalHarmonicsTextureSize));\r\n                                vec4 sampledSH4567G = texture(sphericalHarmonicsTextureG, getDataUV(2, 1, sphericalHarmonicsTextureSize));\r\n                                vec4 sampledSH4567B = texture(sphericalHarmonicsTextureB, getDataUV(2, 1, sphericalHarmonicsTextureSize));\r\n                                sh4 = vec3(sampledSH0123R.a, sampledSH4567R.rg);\r\n                                sh5 = vec3(sampledSH4567R.ba, sampledSH0123G.a);\r\n                                sh6 = vec3(sampledSH4567G.rgb);\r\n                                sh7 = vec3(sampledSH4567G.a, sampledSH0123B.a, sampledSH4567B.r);\r\n                                sh8 = vec3(sampledSH4567B.gba);\r\n                            }\r\n\r\n                            if (sphericalHarmonics8BitMode == 1) {\r\n                                sh4 = sh4 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\r\n                                sh5 = sh5 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\r\n                                sh6 = sh6 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\r\n                                sh7 = sh7 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\r\n                                sh8 = sh8 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\r\n                            }\r\n\r\n                            vColor.rgb +=\r\n                                (SH_C2[0] * xy) * sh4 +\r\n                                (SH_C2[1] * yz) * sh5 +\r\n                                (SH_C2[2] * (2.0 * zz - xx - yy)) * sh6 +\r\n                                (SH_C2[3] * xz) * sh7 +\r\n                                (SH_C2[4] * (xx - yy)) * sh8;\r\n                        }\r\n                    `;\r\n                }\r\n\r\n                vertexShaderSource += `\r\n               \r\n                    vColor.rgb = clamp(vColor.rgb, vec3(0.), vec3(1.));\r\n\r\n                }\r\n\r\n                `;\r\n            }\r\n\r\n            vertexShaderSource += `\r\n\r\n                vec4 sampledCovarianceA = texture(covariancesTexture,\r\n                                                  getDataUVF(nearestEvenIndex, 1.5, oddOffset, covariancesTextureSize));\r\n                vec4 sampledCovarianceB = texture(covariancesTexture,\r\n                                                  getDataUVF(nearestEvenIndex, 1.5, oddOffset + uint(1), covariancesTextureSize));\r\n\r\n                vec3 cov3D_M11_M12_M13 = vec3(sampledCovarianceA.rgb) * (1.0 - fOddOffset) +\r\n                                         vec3(sampledCovarianceA.ba, sampledCovarianceB.r) * fOddOffset;\r\n                vec3 cov3D_M22_M23_M33 = vec3(sampledCovarianceA.a, sampledCovarianceB.rg) * (1.0 - fOddOffset) +\r\n                                         vec3(sampledCovarianceB.gba) * fOddOffset;\r\n\r\n                // Construct the 3D covariance matrix\r\n                mat3 Vrk = mat3(\r\n                    cov3D_M11_M12_M13.x, cov3D_M11_M12_M13.y, cov3D_M11_M12_M13.z,\r\n                    cov3D_M11_M12_M13.y, cov3D_M22_M23_M33.x, cov3D_M22_M23_M33.y,\r\n                    cov3D_M11_M12_M13.z, cov3D_M22_M23_M33.y, cov3D_M22_M23_M33.z\r\n                );\r\n\r\n                mat3 J;\r\n                if (orthographicMode == 1) {\r\n                    // Since the projection is linear, we don't need an approximation\r\n                    J = transpose(mat3(orthoZoom, 0.0, 0.0,\r\n                                       0.0, orthoZoom, 0.0,\r\n                                       0.0, 0.0, 0.0));\r\n                } else {\r\n                    // Construct the Jacobian of the affine approximation of the projection matrix. It will be used to transform the\r\n                    // 3D covariance matrix instead of using the actual projection matrix because that transformation would\r\n                    // require a non-linear component (perspective division) which would yield a non-gaussian result.\r\n                    float s = 1.0 / (viewCenter.z * viewCenter.z);\r\n                    J = mat3(\r\n                        focal.x / viewCenter.z, 0., -(focal.x * viewCenter.x) * s,\r\n                        0., focal.y / viewCenter.z, -(focal.y * viewCenter.y) * s,\r\n                        0., 0., 0.\r\n                    );\r\n                }\r\n\r\n                // Concatenate the projection approximation with the model-view transformation\r\n                mat3 W = transpose(mat3(transformModelViewMatrix));\r\n                mat3 T = W * J;\r\n\r\n                // Transform the 3D covariance matrix (Vrk) to compute the 2D covariance matrix\r\n                mat3 cov2Dm = transpose(T) * Vrk * T;\r\n                `;\r\n\r\n            if (antialiased) {\r\n                vertexShaderSource += `\r\n                    float detOrig = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\r\n                    cov2Dm[0][0] += 0.3;\r\n                    cov2Dm[1][1] += 0.3;\r\n                    float detBlur = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\r\n                    vColor.a *= sqrt(max(detOrig / detBlur, 0.0));\r\n                    if (vColor.a < minAlpha) return;\r\n                `;\r\n            } else {\r\n                vertexShaderSource += `\r\n                    cov2Dm[0][0] += 0.3;\r\n                    cov2Dm[1][1] += 0.3;\r\n                `;\r\n            }\r\n\r\n            vertexShaderSource += `\r\n\r\n                // We are interested in the upper-left 2x2 portion of the projected 3D covariance matrix because\r\n                // we only care about the X and Y values. We want the X-diagonal, cov2Dm[0][0],\r\n                // the Y-diagonal, cov2Dm[1][1], and the correlation between the two cov2Dm[0][1]. We don't\r\n                // need cov2Dm[1][0] because it is a symetric matrix.\r\n                vec3 cov2Dv = vec3(cov2Dm[0][0], cov2Dm[0][1], cov2Dm[1][1]);\r\n\r\n                vec3 ndcCenter = clipCenter.xyz / clipCenter.w;\r\n\r\n                // We now need to solve for the eigen-values and eigen vectors of the 2D covariance matrix\r\n                // so that we can determine the 2D basis for the splat. This is done using the method described\r\n                // here: https://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\r\n                // After calculating the eigen-values and eigen-vectors, we calculate the basis for rendering the splat\r\n                // by normalizing the eigen-vectors and then multiplying them by (sqrt(8) * sqrt(eigen-value)), which is\r\n                // equal to scaling them by sqrt(8) standard deviations.\r\n                //\r\n                // This is a different approach than in the original work at INRIA. In that work they compute the\r\n                // max extents of the projected splat in screen space to form a screen-space aligned bounding rectangle\r\n                // which forms the geometry that is actually rasterized. The dimensions of that bounding box are 3.0\r\n                // times the square root of the maximum eigen-value, or 3 standard deviations. They then use the inverse\r\n                // 2D covariance matrix (called 'conic') in the CUDA rendering thread to determine fragment opacity by\r\n                // calculating the full gaussian: exp(-0.5 * (X - mean) * conic * (X - mean)) * splat opacity\r\n                float a = cov2Dv.x;\r\n                float d = cov2Dv.z;\r\n                float b = cov2Dv.y;\r\n                float D = a * d - b * b;\r\n                float trace = a + d;\r\n                float traceOver2 = 0.5 * trace;\r\n                float term2 = sqrt(max(0.1f, traceOver2 * traceOver2 - D));\r\n                float eigenValue1 = traceOver2 + term2;\r\n                float eigenValue2 = traceOver2 - term2;\r\n\r\n                if (pointCloudModeEnabled == 1) {\r\n                    eigenValue1 = eigenValue2 = 0.2;\r\n                }\r\n\r\n                if (eigenValue2 <= 0.0) return;\r\n\r\n                vec2 eigenVector1 = normalize(vec2(b, eigenValue1 - a));\r\n                // since the eigen vectors are orthogonal, we derive the second one from the first\r\n                vec2 eigenVector2 = vec2(eigenVector1.y, -eigenVector1.x);\r\n\r\n                // We use sqrt(8) standard deviations instead of 3 to eliminate more of the splat with a very low opacity.\r\n                vec2 basisVector1 = eigenVector1 * splatScale * min(sqrt8 * sqrt(eigenValue1), ${parseInt(maxScreenSpaceSplatSize)}.0);\r\n                vec2 basisVector2 = eigenVector2 * splatScale * min(sqrt8 * sqrt(eigenValue2), ${parseInt(maxScreenSpaceSplatSize)}.0);\r\n\r\n                if (fadeInComplete == 0) {\r\n                    float opacityAdjust = 1.0;\r\n                    float centerDist = length(splatCenter - sceneCenter);\r\n                    float renderTime = max(currentTime - firstRenderTime, 0.0);\r\n\r\n                    float fadeDistance = 0.75;\r\n                    float distanceLoadFadeInFactor = step(visibleRegionFadeStartRadius, centerDist);\r\n                    distanceLoadFadeInFactor = (1.0 - distanceLoadFadeInFactor) +\r\n                                               (1.0 - clamp((centerDist - visibleRegionFadeStartRadius) / fadeDistance, 0.0, 1.0)) *\r\n                                               distanceLoadFadeInFactor;\r\n                    opacityAdjust *= distanceLoadFadeInFactor;\r\n                    vColor.a *= opacityAdjust;\r\n                }\r\n                `;\r\n\r\n            if (enableOptionalEffects) {\r\n                vertexShaderSource += `\r\n                     vColor.a *= splatOpacityFromScene;\r\n                `;\r\n            }\r\n\r\n            vertexShaderSource += `\r\n                vec2 ndcOffset = vec2(vPosition.x * basisVector1 + vPosition.y * basisVector2) *\r\n                                 basisViewport * 2.0 * inverseFocalAdjustment;\r\n\r\n                vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\r\n                gl_Position = quadPos;\r\n\r\n                // Scale the position data we send to the fragment shader\r\n                vPosition *= sqrt8;\r\n            }`;\r\n\r\n        const fragmentShaderSource = `\r\n            precision highp float;\r\n            #include <common>\r\n \r\n            uniform vec3 debugColor;\r\n\r\n            varying vec4 vColor;\r\n            varying vec2 vUv;\r\n\r\n            varying vec2 vPosition;\r\n\r\n            void main () {\r\n                // Compute the positional squared distance from the center of the splat to the current fragment.\r\n                float A = dot(vPosition, vPosition);\r\n                // Since the positional data in vPosition has been scaled by sqrt(8), the squared result will be\r\n                // scaled by a factor of 8. If the squared result is larger than 8, it means it is outside the ellipse\r\n                // defined by the rectangle formed by vPosition. It also means it's farther\r\n                // away than sqrt(8) standard deviations from the mean.\r\n                if (A > 8.0) discard;\r\n                vec3 color = vColor.rgb;\r\n\r\n                // Since the rendered splat is scaled by sqrt(8), the inverse covariance matrix that is part of\r\n                // the gaussian formula becomes the identity matrix. We're then left with (X - mean) * (X - mean),\r\n                // and since 'mean' is zero, we have X * X, which is the same as A:\r\n                float opacity = exp(-0.5 * A) * vColor.a;\r\n\r\n                gl_FragColor = vec4(color.rgb, opacity);\r\n            }`;\r\n\r\n        const uniforms = {\r\n            'sceneCenter': {\r\n                'type': 'v3',\r\n                'value': new THREE.Vector3()\r\n            },\r\n            'fadeInComplete': {\r\n                'type': 'i',\r\n                'value': 0\r\n            },\r\n            'orthographicMode': {\r\n                'type': 'i',\r\n                'value': 0\r\n            },\r\n            'visibleRegionFadeStartRadius': {\r\n                'type': 'f',\r\n                'value': 0.0\r\n            },\r\n            'visibleRegionRadius': {\r\n                'type': 'f',\r\n                'value': 0.0\r\n            },\r\n            'currentTime': {\r\n                'type': 'f',\r\n                'value': 0.0\r\n            },\r\n            'firstRenderTime': {\r\n                'type': 'f',\r\n                'value': 0.0\r\n            },\r\n            'covariancesTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'centersColorsTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'sphericalHarmonicsTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'sphericalHarmonicsTextureR': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'sphericalHarmonicsTextureG': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'sphericalHarmonicsTextureB': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'focal': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2()\r\n            },\r\n            'orthoZoom': {\r\n                'type': 'f',\r\n                'value': 1.0\r\n            },\r\n            'inverseFocalAdjustment': {\r\n                'type': 'f',\r\n                'value': 1.0\r\n            },\r\n            'viewport': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2()\r\n            },\r\n            'basisViewport': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2()\r\n            },\r\n            'debugColor': {\r\n                'type': 'v3',\r\n                'value': new THREE.Color()\r\n            },\r\n            'covariancesTextureSize': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2(1024, 1024)\r\n            },\r\n            'centersColorsTextureSize': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2(1024, 1024)\r\n            },\r\n            'sphericalHarmonicsDegree': {\r\n                'type': 'i',\r\n                'value': maxSphericalHarmonicsDegree\r\n            },\r\n            'sphericalHarmonicsTextureSize': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2(1024, 1024)\r\n            },\r\n            'sphericalHarmonics8BitMode': {\r\n                'type': 'i',\r\n                'value': 0\r\n            },\r\n            'sphericalHarmonicsMultiTextureMode': {\r\n                'type': 'i',\r\n                'value': 0\r\n            },\r\n            'splatScale': {\r\n                'type': 'f',\r\n                'value': splatScale\r\n            },\r\n            'pointCloudModeEnabled': {\r\n                'type': 'i',\r\n                'value': pointCloudModeEnabled ? 1 : 0\r\n            }\r\n        };\r\n\r\n        if (dynamicMode || enableOptionalEffects) {\r\n            uniforms['sceneIndexesTexture'] = {\r\n                'type': 't',\r\n                'value': null\r\n            };\r\n            uniforms['sceneIndexesTextureSize'] = {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2(1024, 1024)\r\n            };\r\n        }\r\n\r\n        if (enableOptionalEffects) {\r\n            const sceneOpacity = [];\r\n            for (let i = 0; i < Constants.MaxScenes; i++) {\r\n                sceneOpacity.push(1.0);\r\n            }\r\n            uniforms['sceneOpacity'] ={\r\n                'type': 'f',\r\n                'value': sceneOpacity\r\n            };\r\n\r\n            const sceneVisibility = [];\r\n            for (let i = 0; i < Constants.MaxScenes; i++) {\r\n                sceneVisibility.push(1);\r\n            }\r\n            uniforms['sceneVisibility'] ={\r\n                'type': 'i',\r\n                'value': sceneVisibility\r\n            };\r\n        }\r\n\r\n        if (dynamicMode) {\r\n            const transformMatrices = [];\r\n            for (let i = 0; i < Constants.MaxScenes; i++) {\r\n                transformMatrices.push(new THREE.Matrix4());\r\n            }\r\n            uniforms['transforms'] = {\r\n                'type': 'mat4',\r\n                'value': transformMatrices\r\n            };\r\n        }\r\n\r\n        const material = new THREE.ShaderMaterial({\r\n            uniforms: uniforms,\r\n            vertexShader: vertexShaderSource,\r\n            fragmentShader: fragmentShaderSource,\r\n            transparent: true,\r\n            alphaTest: 1.0,\r\n            blending: THREE.NormalBlending,\r\n            depthTest: true,\r\n            depthWrite: false,\r\n            side: THREE.DoubleSide\r\n        });\r\n\r\n        return material;\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\n\r\nexport class SplatGeometry {\r\n\r\n    /**\r\n     * Build the Three.js geometry that will be used to render the splats. The geometry is instanced and is made up of\r\n     * vertices for a single quad as well as an attribute buffer for the splat indexes.\r\n     * @param {number} maxSplatCount The maximum number of splats that the geometry will need to accomodate\r\n     * @return {THREE.InstancedBufferGeometry}\r\n     */\r\n    static build(maxSplatCount) {\r\n\r\n        const baseGeometry = new THREE.BufferGeometry();\r\n        baseGeometry.setIndex([0, 1, 2, 0, 2, 3]);\r\n\r\n        // Vertices for the instanced quad\r\n        const positionsArray = new Float32Array(4 * 3);\r\n        const positions = new THREE.BufferAttribute(positionsArray, 3);\r\n        baseGeometry.setAttribute('position', positions);\r\n        positions.setXYZ(0, -1.0, -1.0, 0.0);\r\n        positions.setXYZ(1, -1.0, 1.0, 0.0);\r\n        positions.setXYZ(2, 1.0, 1.0, 0.0);\r\n        positions.setXYZ(3, 1.0, -1.0, 0.0);\r\n        positions.needsUpdate = true;\r\n\r\n        const geometry = new THREE.InstancedBufferGeometry().copy(baseGeometry);\r\n\r\n        // Splat index buffer\r\n        const splatIndexArray = new Uint32Array(maxSplatCount);\r\n        const splatIndexes = new THREE.InstancedBufferAttribute(splatIndexArray, 1, false);\r\n        splatIndexes.setUsage(THREE.DynamicDrawUsage);\r\n        geometry.setAttribute('splatIndex', splatIndexes);\r\n\r\n        geometry.instanceCount = 0;\r\n\r\n        return geometry;\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\n\r\n/**\r\n * SplatScene: Descriptor for a single splat scene managed by an instance of SplatMesh.\r\n */\r\nexport class SplatScene {\r\n\r\n    constructor(splatBuffer, position = new THREE.Vector3(), quaternion = new THREE.Quaternion(),\r\n                scale = new THREE.Vector3(1, 1, 1), minimumAlpha = 1, opacity = 1.0, visible = true) {\r\n        this.splatBuffer = splatBuffer;\r\n        this.position = position.clone();\r\n        this.quaternion = quaternion.clone();\r\n        this.scale = scale.clone();\r\n        this.transform = new THREE.Matrix4();\r\n        this.minimumAlpha = minimumAlpha;\r\n        this.opacity = opacity;\r\n        this.visible = visible;\r\n        this.updateTransform();\r\n    }\r\n\r\n    copyTransformData(otherScene) {\r\n        this.position.copy(otherScene.position);\r\n        this.quaternion.copy(otherScene.quaternion);\r\n        this.scale.copy(otherScene.scale);\r\n        this.transform.copy(otherScene.transform);\r\n    }\r\n\r\n    updateTransform() {\r\n        this.transform.compose(this.position, this.quaternion, this.scale);\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { delayedExecute } from '../Util.js';\r\n\r\nclass SplatTreeNode {\r\n\r\n    static idGen = 0;\r\n\r\n    constructor(min, max, depth, id) {\r\n        this.min = new THREE.Vector3().copy(min);\r\n        this.max = new THREE.Vector3().copy(max);\r\n        this.boundingBox = new THREE.Box3(this.min, this.max);\r\n        this.center = new THREE.Vector3().copy(this.max).sub(this.min).multiplyScalar(0.5).add(this.min);\r\n        this.depth = depth;\r\n        this.children = [];\r\n        this.data = null;\r\n        this.id = id || SplatTreeNode.idGen++;\r\n    }\r\n\r\n}\r\n\r\nclass SplatSubTree {\r\n\r\n    constructor(maxDepth, maxCentersPerNode) {\r\n        this.maxDepth = maxDepth;\r\n        this.maxCentersPerNode = maxCentersPerNode;\r\n        this.sceneDimensions = new THREE.Vector3();\r\n        this.sceneMin = new THREE.Vector3();\r\n        this.sceneMax = new THREE.Vector3();\r\n        this.rootNode = null;\r\n        this.nodesWithIndexes = [];\r\n        this.splatMesh = null;\r\n    }\r\n\r\n    static convertWorkerSubTreeNode(workerSubTreeNode) {\r\n        const minVector = new THREE.Vector3().fromArray(workerSubTreeNode.min);\r\n        const maxVector = new THREE.Vector3().fromArray(workerSubTreeNode.max);\r\n        const convertedNode = new SplatTreeNode(minVector, maxVector, workerSubTreeNode.depth, workerSubTreeNode.id);\r\n        if (workerSubTreeNode.data.indexes) {\r\n            convertedNode.data = {\r\n                'indexes': []\r\n            };\r\n            for (let index of workerSubTreeNode.data.indexes) {\r\n                convertedNode.data.indexes.push(index);\r\n            }\r\n        }\r\n        if (workerSubTreeNode.children) {\r\n            for (let child of workerSubTreeNode.children) {\r\n                convertedNode.children.push(SplatSubTree.convertWorkerSubTreeNode(child));\r\n            }\r\n        }\r\n        return convertedNode;\r\n    }\r\n\r\n    static convertWorkerSubTree(workerSubTree, splatMesh) {\r\n        const convertedSubTree = new SplatSubTree(workerSubTree.maxDepth, workerSubTree.maxCentersPerNode);\r\n        convertedSubTree.sceneMin = new THREE.Vector3().fromArray(workerSubTree.sceneMin);\r\n        convertedSubTree.sceneMax = new THREE.Vector3().fromArray(workerSubTree.sceneMax);\r\n\r\n        convertedSubTree.splatMesh = splatMesh;\r\n        convertedSubTree.rootNode = SplatSubTree.convertWorkerSubTreeNode(workerSubTree.rootNode);\r\n\r\n\r\n        const visitLeavesFromNode = (node, visitFunc) => {\r\n            if (node.children.length === 0) visitFunc(node);\r\n            for (let child of node.children) {\r\n                visitLeavesFromNode(child, visitFunc);\r\n            }\r\n        };\r\n\r\n        convertedSubTree.nodesWithIndexes = [];\r\n        visitLeavesFromNode(convertedSubTree.rootNode, (node) => {\r\n            if (node.data && node.data.indexes && node.data.indexes.length > 0) {\r\n                convertedSubTree.nodesWithIndexes.push(node);\r\n            }\r\n        });\r\n\r\n        return convertedSubTree;\r\n    }\r\n}\r\n\r\nfunction createSplatTreeWorker(self) {\r\n\r\n    let WorkerSplatTreeNodeIDGen = 0;\r\n\r\n    class WorkerBox3 {\r\n\r\n        constructor(min, max) {\r\n            this.min = [min[0], min[1], min[2]];\r\n            this.max = [max[0], max[1], max[2]];\r\n        }\r\n\r\n        containsPoint(point) {\r\n            return point[0] >= this.min[0] && point[0] <= this.max[0] &&\r\n                   point[1] >= this.min[1] && point[1] <= this.max[1] &&\r\n                   point[2] >= this.min[2] && point[2] <= this.max[2];\r\n        }\r\n    }\r\n\r\n    class WorkerSplatSubTree {\r\n\r\n        constructor(maxDepth, maxCentersPerNode) {\r\n            this.maxDepth = maxDepth;\r\n            this.maxCentersPerNode = maxCentersPerNode;\r\n            this.sceneDimensions = [];\r\n            this.sceneMin = [];\r\n            this.sceneMax = [];\r\n            this.rootNode = null;\r\n            this.addedIndexes = {};\r\n            this.nodesWithIndexes = [];\r\n            this.splatMesh = null;\r\n            this.disposed = false;\r\n        }\r\n\r\n    }\r\n\r\n    class WorkerSplatTreeNode {\r\n\r\n        constructor(min, max, depth, id) {\r\n            this.min = [min[0], min[1], min[2]];\r\n            this.max = [max[0], max[1], max[2]];\r\n            this.center = [(max[0] - min[0]) * 0.5 + min[0],\r\n                           (max[1] - min[1]) * 0.5 + min[1],\r\n                           (max[2] - min[2]) * 0.5 + min[2]];\r\n            this.depth = depth;\r\n            this.children = [];\r\n            this.data = null;\r\n            this.id = id || WorkerSplatTreeNodeIDGen++;\r\n        }\r\n\r\n    }\r\n\r\n    processSplatTreeNode = function(tree, node, indexToCenter, sceneCenters) {\r\n        const splatCount = node.data.indexes.length;\r\n\r\n        if (splatCount < tree.maxCentersPerNode || node.depth > tree.maxDepth) {\r\n            const newIndexes = [];\r\n            for (let i = 0; i < node.data.indexes.length; i++) {\r\n                if (!tree.addedIndexes[node.data.indexes[i]]) {\r\n                    newIndexes.push(node.data.indexes[i]);\r\n                    tree.addedIndexes[node.data.indexes[i]] = true;\r\n                }\r\n            }\r\n            node.data.indexes = newIndexes;\r\n            node.data.indexes.sort((a, b) => {\r\n                if (a > b) return 1;\r\n                else return -1;\r\n            });\r\n            tree.nodesWithIndexes.push(node);\r\n            return;\r\n        }\r\n\r\n        const nodeDimensions = [node.max[0] - node.min[0],\r\n                                node.max[1] - node.min[1],\r\n                                node.max[2] - node.min[2]];\r\n        const halfDimensions = [nodeDimensions[0] * 0.5,\r\n                                nodeDimensions[1] * 0.5,\r\n                                nodeDimensions[2] * 0.5];\r\n        const nodeCenter = [node.min[0] + halfDimensions[0],\r\n                            node.min[1] + halfDimensions[1],\r\n                            node.min[2] + halfDimensions[2]];\r\n\r\n        const childrenBounds = [\r\n            // top section, clockwise from upper-left (looking from above, +Y)\r\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1], nodeCenter[2] - halfDimensions[2]],\r\n                           [nodeCenter[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2]]),\r\n            new WorkerBox3([nodeCenter[0], nodeCenter[1], nodeCenter[2] - halfDimensions[2]],\r\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2]]),\r\n            new WorkerBox3([nodeCenter[0], nodeCenter[1], nodeCenter[2]],\r\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2] + halfDimensions[2]]),\r\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1], nodeCenter[2]],\r\n                           [nodeCenter[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2] + halfDimensions[2]]),\r\n\r\n            // bottom section, clockwise from lower-left (looking from above, +Y)\r\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2] - halfDimensions[2]],\r\n                           [nodeCenter[0], nodeCenter[1], nodeCenter[2]]),\r\n            new WorkerBox3([nodeCenter[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2] - halfDimensions[2]],\r\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1], nodeCenter[2]]),\r\n            new WorkerBox3([nodeCenter[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2]],\r\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1], nodeCenter[2] + halfDimensions[2]]),\r\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2]],\r\n                           [nodeCenter[0], nodeCenter[1], nodeCenter[2] + halfDimensions[2]]),\r\n        ];\r\n\r\n        const splatCounts = [];\r\n        const baseIndexes = [];\r\n        for (let i = 0; i < childrenBounds.length; i++) {\r\n            splatCounts[i] = 0;\r\n            baseIndexes[i] = [];\r\n        }\r\n\r\n        const center = [0, 0, 0];\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const splatGlobalIndex = node.data.indexes[i];\r\n            const centerBase = indexToCenter[splatGlobalIndex];\r\n            center[0] = sceneCenters[centerBase];\r\n            center[1] = sceneCenters[centerBase + 1];\r\n            center[2] = sceneCenters[centerBase + 2];\r\n            for (let j = 0; j < childrenBounds.length; j++) {\r\n                if (childrenBounds[j].containsPoint(center)) {\r\n                    splatCounts[j]++;\r\n                    baseIndexes[j].push(splatGlobalIndex);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < childrenBounds.length; i++) {\r\n            const childNode = new WorkerSplatTreeNode(childrenBounds[i].min, childrenBounds[i].max, node.depth + 1);\r\n            childNode.data = {\r\n                'indexes': baseIndexes[i]\r\n            };\r\n            node.children.push(childNode);\r\n        }\r\n\r\n        node.data = {};\r\n        for (let child of node.children) {\r\n            processSplatTreeNode(tree, child, indexToCenter, sceneCenters);\r\n        }\r\n        return;\r\n    };\r\n\r\n    const buildSubTree = (sceneCenters, maxDepth, maxCentersPerNode) => {\r\n\r\n        const sceneMin = [0, 0, 0];\r\n        const sceneMax = [0, 0, 0];\r\n        const indexes = [];\r\n        const centerCount = Math.floor(sceneCenters.length / 4);\r\n        for ( let i = 0; i < centerCount; i ++) {\r\n            const base = i * 4;\r\n            const x = sceneCenters[base];\r\n            const y = sceneCenters[base + 1];\r\n            const z = sceneCenters[base + 2];\r\n            const index = Math.round(sceneCenters[base + 3]);\r\n            if (i === 0 || x < sceneMin[0]) sceneMin[0] = x;\r\n            if (i === 0 || x > sceneMax[0]) sceneMax[0] = x;\r\n            if (i === 0 || y < sceneMin[1]) sceneMin[1] = y;\r\n            if (i === 0 || y > sceneMax[1]) sceneMax[1] = y;\r\n            if (i === 0 || z < sceneMin[2]) sceneMin[2] = z;\r\n            if (i === 0 || z > sceneMax[2]) sceneMax[2] = z;\r\n            indexes.push(index);\r\n        }\r\n        const subTree = new WorkerSplatSubTree(maxDepth, maxCentersPerNode);\r\n        subTree.sceneMin = sceneMin;\r\n        subTree.sceneMax = sceneMax;\r\n        subTree.rootNode = new WorkerSplatTreeNode(subTree.sceneMin, subTree.sceneMax, 0);\r\n        subTree.rootNode.data = {\r\n            'indexes': indexes\r\n        };\r\n\r\n        return subTree;\r\n    };\r\n\r\n    function createSplatTree(allCenters, maxDepth, maxCentersPerNode) {\r\n        const indexToCenter = [];\r\n        for (let sceneCenters of allCenters) {\r\n            const centerCount = Math.floor(sceneCenters.length / 4);\r\n            for ( let i = 0; i < centerCount; i ++) {\r\n                const base = i * 4;\r\n                const index = Math.round(sceneCenters[base + 3]);\r\n                indexToCenter[index] = base;\r\n            }\r\n        }\r\n        const subTrees = [];\r\n        for (let sceneCenters of allCenters) {\r\n            const subTree = buildSubTree(sceneCenters, maxDepth, maxCentersPerNode);\r\n            subTrees.push(subTree);\r\n            processSplatTreeNode(subTree, subTree.rootNode, indexToCenter, sceneCenters);\r\n        }\r\n        self.postMessage({\r\n            'subTrees': subTrees\r\n        });\r\n    }\r\n\r\n    self.onmessage = (e) => {\r\n        if (e.data.process) {\r\n            createSplatTree(e.data.process.centers, e.data.process.maxDepth, e.data.process.maxCentersPerNode);\r\n        }\r\n    };\r\n}\r\n\r\nfunction workerProcessCenters(splatTreeWorker, centers, transferBuffers, maxDepth, maxCentersPerNode) {\r\n    splatTreeWorker.postMessage({\r\n        'process': {\r\n            'centers': centers,\r\n            'maxDepth': maxDepth,\r\n            'maxCentersPerNode': maxCentersPerNode\r\n        }\r\n    }, transferBuffers);\r\n}\r\n\r\nfunction checkAndCreateWorker() {\r\n    const splatTreeWorker = new Worker(\r\n        URL.createObjectURL(\r\n            new Blob(['(', createSplatTreeWorker.toString(), ')(self)'], {\r\n                type: 'application/javascript',\r\n            }),\r\n        ),\r\n    );\r\n    return splatTreeWorker;\r\n}\r\n\r\n/**\r\n * SplatTree: Octree tailored to splat data from a SplatMesh instance\r\n */\r\nexport class SplatTree {\r\n\r\n    constructor(maxDepth, maxCentersPerNode) {\r\n        this.maxDepth = maxDepth;\r\n        this.maxCentersPerNode = maxCentersPerNode;\r\n        this.subTrees = [];\r\n        this.splatMesh = null;\r\n    }\r\n\r\n\r\n    dispose() {\r\n        this.diposeSplatTreeWorker();\r\n        this.disposed = true;\r\n    }\r\n\r\n    diposeSplatTreeWorker() {\r\n        if (this.splatTreeWorker) this.splatTreeWorker.terminate();\r\n        this.splatTreeWorker = null;\r\n    };\r\n\r\n    /**\r\n     * Construct this instance of SplatTree from an instance of SplatMesh.\r\n     *\r\n     * @param {SplatMesh} splatMesh The instance of SplatMesh from which to construct this splat tree.\r\n     * @param {function} filterFunc Optional function to filter out unwanted splats.\r\n     * @param {function} onIndexesUpload Function to be called when the upload of splat centers to the splat tree\r\n     *                                   builder worker starts and finishes.\r\n     * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\r\n     *                                           the format produced by the splat tree builder worker starts and ends.\r\n     * @return {undefined}\r\n     */\r\n    processSplatMesh = function(splatMesh, filterFunc = () => true, onIndexesUpload, onSplatTreeConstruction) {\r\n        if (!this.splatTreeWorker) this.splatTreeWorker = checkAndCreateWorker();\r\n\r\n        this.splatMesh = splatMesh;\r\n        this.subTrees = [];\r\n        const center = new THREE.Vector3();\r\n\r\n        const addCentersForScene = (splatOffset, splatCount) => {\r\n            const sceneCenters = new Float32Array(splatCount * 4);\r\n            let addedCount = 0;\r\n            for (let i = 0; i < splatCount; i++) {\r\n                const globalSplatIndex = i + splatOffset;\r\n                if (filterFunc(globalSplatIndex)) {\r\n                    splatMesh.getSplatCenter(globalSplatIndex, center);\r\n                    const addBase = addedCount * 4;\r\n                    sceneCenters[addBase] = center.x;\r\n                    sceneCenters[addBase + 1] = center.y;\r\n                    sceneCenters[addBase + 2] = center.z;\r\n                    sceneCenters[addBase + 3] = globalSplatIndex;\r\n                    addedCount++;\r\n                }\r\n            }\r\n            return sceneCenters;\r\n        };\r\n\r\n        return new Promise((resolve) => {\r\n\r\n            const checkForEarlyExit = () => {\r\n                if (this.disposed) {\r\n                    this.diposeSplatTreeWorker();\r\n                    resolve();\r\n                    return true;\r\n                }\r\n                return false;\r\n            };\r\n\r\n            if (onIndexesUpload) onIndexesUpload(false);\r\n\r\n            delayedExecute(() => {\r\n\r\n                if (checkForEarlyExit()) return;\r\n\r\n                const allCenters = [];\r\n                if (splatMesh.dynamicMode) {\r\n                    let splatOffset = 0;\r\n                    for (let s = 0; s < splatMesh.scenes.length; s++) {\r\n                        const scene = splatMesh.getScene(s);\r\n                        const splatCount = scene.splatBuffer.getSplatCount();\r\n                        const sceneCenters = addCentersForScene(splatOffset, splatCount);\r\n                        allCenters.push(sceneCenters);\r\n                        splatOffset += splatCount;\r\n                    }\r\n                } else {\r\n                    const sceneCenters = addCentersForScene(0, splatMesh.getSplatCount());\r\n                    allCenters.push(sceneCenters);\r\n                }\r\n\r\n                this.splatTreeWorker.onmessage = (e) => {\r\n\r\n                    if (checkForEarlyExit()) return;\r\n\r\n                    if (e.data.subTrees) {\r\n\r\n                        if (onSplatTreeConstruction) onSplatTreeConstruction(false);\r\n\r\n                        delayedExecute(() => {\r\n\r\n                            if (checkForEarlyExit()) return;\r\n\r\n                            for (let workerSubTree of e.data.subTrees) {\r\n                                const convertedSubTree = SplatSubTree.convertWorkerSubTree(workerSubTree, splatMesh);\r\n                                this.subTrees.push(convertedSubTree);\r\n                            }\r\n                            this.diposeSplatTreeWorker();\r\n\r\n                            if (onSplatTreeConstruction) onSplatTreeConstruction(true);\r\n\r\n                            delayedExecute(() => {\r\n                                resolve();\r\n                            });\r\n\r\n                        });\r\n                    }\r\n                };\r\n\r\n                delayedExecute(() => {\r\n                    if (checkForEarlyExit()) return;\r\n                    if (onIndexesUpload) onIndexesUpload(true);\r\n                    const transferBuffers = allCenters.map((array) => array.buffer);\r\n                    workerProcessCenters(this.splatTreeWorker, allCenters, transferBuffers, this.maxDepth, this.maxCentersPerNode);\r\n                });\r\n\r\n            });\r\n\r\n        });\r\n\r\n    };\r\n\r\n    countLeaves() {\r\n\r\n        let leafCount = 0;\r\n        this.visitLeaves(() => {\r\n            leafCount++;\r\n        });\r\n\r\n        return leafCount;\r\n    }\r\n\r\n    visitLeaves(visitFunc) {\r\n\r\n        const visitLeavesFromNode = (node, visitFunc) => {\r\n            if (node.children.length === 0) visitFunc(node);\r\n            for (let child of node.children) {\r\n                visitLeavesFromNode(child, visitFunc);\r\n            }\r\n        };\r\n\r\n        for (let subTree of this.subTrees) {\r\n            visitLeavesFromNode(subTree.rootNode, visitFunc);\r\n        }\r\n    }\r\n\r\n}\r\n","function WebGLExtensions( gl ) {\r\n\r\n    const extensions = {};\r\n\r\n    function getExtension( name ) {\r\n\r\n        if ( extensions[name] !== undefined ) {\r\n\r\n            return extensions[name];\r\n\r\n        }\r\n\r\n        let extension;\r\n\r\n        switch ( name ) {\r\n\r\n            case 'WEBGL_depth_texture':\r\n                extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) ||\r\n                            gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\r\n                break;\r\n\r\n            case 'EXT_texture_filter_anisotropic':\r\n                extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) ||\r\n                            gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) ||\r\n                            gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\r\n                break;\r\n\r\n            case 'WEBGL_compressed_texture_s3tc':\r\n                extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) ||\r\n                            gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) ||\r\n                            gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\r\n                break;\r\n\r\n            case 'WEBGL_compressed_texture_pvrtc':\r\n                extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) ||\r\n                           gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\r\n                break;\r\n\r\n            default:\r\n                extension = gl.getExtension( name );\r\n\r\n        }\r\n\r\n        extensions[name] = extension;\r\n\r\n        return extension;\r\n\r\n    }\r\n\r\n    return {\r\n\r\n        has: function( name ) {\r\n\r\n            return getExtension( name ) !== null;\r\n\r\n        },\r\n\r\n        init: function( capabilities ) {\r\n\r\n            if ( capabilities.isWebGL2 ) {\r\n\r\n                getExtension( 'EXT_color_buffer_float' );\r\n                getExtension( 'WEBGL_clip_cull_distance' );\r\n\r\n            } else {\r\n\r\n                getExtension( 'WEBGL_depth_texture' );\r\n                getExtension( 'OES_texture_float' );\r\n                getExtension( 'OES_texture_half_float' );\r\n                getExtension( 'OES_texture_half_float_linear' );\r\n                getExtension( 'OES_standard_derivatives' );\r\n                getExtension( 'OES_element_index_uint' );\r\n                getExtension( 'OES_vertex_array_object' );\r\n                getExtension( 'ANGLE_instanced_arrays' );\r\n\r\n            }\r\n\r\n            getExtension( 'OES_texture_float_linear' );\r\n            getExtension( 'EXT_color_buffer_half_float' );\r\n            getExtension( 'WEBGL_multisampled_render_to_texture' );\r\n\r\n        },\r\n\r\n        get: function( name ) {\r\n\r\n            const extension = getExtension( name );\r\n\r\n            if ( extension === null ) {\r\n\r\n                console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\r\n\r\n            }\r\n\r\n            return extension;\r\n\r\n        }\r\n\r\n    };\r\n\r\n}\r\n\r\nexport { WebGLExtensions };\r\n","function WebGLCapabilities( gl, extensions, parameters ) {\r\n\r\n    let maxAnisotropy;\r\n\r\n    function getMaxAnisotropy() {\r\n\r\n        if ( maxAnisotropy !== undefined ) return maxAnisotropy;\r\n\r\n        if ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\r\n\r\n            const extension = extensions.get( 'EXT_texture_filter_anisotropic' );\r\n\r\n            maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\r\n\r\n        } else {\r\n\r\n            maxAnisotropy = 0;\r\n\r\n        }\r\n\r\n        return maxAnisotropy;\r\n\r\n    }\r\n\r\n    function getMaxPrecision( precision ) {\r\n\r\n        if ( precision === 'highp' ) {\r\n\r\n            if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\r\n                gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\r\n\r\n                return 'highp';\r\n\r\n            }\r\n\r\n            precision = 'mediump';\r\n\r\n        }\r\n\r\n        if ( precision === 'mediump' ) {\r\n\r\n            if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\r\n                gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\r\n\r\n                return 'mediump';\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return 'lowp';\r\n\r\n    }\r\n\r\n    const isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl.constructor.name === 'WebGL2RenderingContext';\r\n\r\n    let precision = parameters.precision !== undefined ? parameters.precision : 'highp';\r\n    const maxPrecision = getMaxPrecision( precision );\r\n\r\n    if ( maxPrecision !== precision ) {\r\n\r\n        console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\r\n        precision = maxPrecision;\r\n\r\n    }\r\n\r\n    const drawBuffers = isWebGL2 || extensions.has( 'WEBGL_draw_buffers' );\r\n\r\n    const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\r\n\r\n    const maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\r\n    const maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\r\n    const maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\r\n    const maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\r\n\r\n    const maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\r\n    const maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\r\n    const maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\r\n    const maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\r\n\r\n    const vertexTextures = maxVertexTextures > 0;\r\n    const floatFragmentTextures = isWebGL2 || extensions.has( 'OES_texture_float' );\r\n    const floatVertexTextures = vertexTextures && floatFragmentTextures;\r\n\r\n    const maxSamples = isWebGL2 ? gl.getParameter( gl.MAX_SAMPLES ) : 0;\r\n\r\n    return {\r\n\r\n        isWebGL2: isWebGL2,\r\n\r\n        drawBuffers: drawBuffers,\r\n\r\n        getMaxAnisotropy: getMaxAnisotropy,\r\n        getMaxPrecision: getMaxPrecision,\r\n\r\n        precision: precision,\r\n        logarithmicDepthBuffer: logarithmicDepthBuffer,\r\n\r\n        maxTextures: maxTextures,\r\n        maxVertexTextures: maxVertexTextures,\r\n        maxTextureSize: maxTextureSize,\r\n        maxCubemapSize: maxCubemapSize,\r\n\r\n        maxAttributes: maxAttributes,\r\n        maxVertexUniforms: maxVertexUniforms,\r\n        maxVaryings: maxVaryings,\r\n        maxFragmentUniforms: maxFragmentUniforms,\r\n\r\n        vertexTextures: vertexTextures,\r\n        floatFragmentTextures: floatFragmentTextures,\r\n        floatVertexTextures: floatVertexTextures,\r\n\r\n        maxSamples: maxSamples\r\n\r\n    };\r\n\r\n}\r\n\r\n\r\nexport { WebGLCapabilities };\r\n","export const SceneRevealMode = {\r\n    Default: 0,\r\n    Gradual: 1,\r\n    Instant: 2\r\n};\r\n","export const LogLevel = {\r\n    None: 0,\r\n    Error: 1,\r\n    Warning: 2,\r\n    Info: 3,\r\n    Debug: 4\r\n};\r\n","import * as THREE from 'three';\r\nimport { SplatMaterial } from './SplatMaterial.js';\r\nimport { SplatGeometry } from './SplatGeometry.js';\r\nimport { SplatScene } from './SplatScene.js';\r\nimport { SplatTree } from '../splattree/SplatTree.js';\r\nimport { WebGLExtensions } from '../three-shim/WebGLExtensions.js';\r\nimport { WebGLCapabilities } from '../three-shim/WebGLCapabilities.js';\r\nimport { uintEncodedFloat, rgbaArrayToInteger } from '../Util.js';\r\nimport { Constants } from '../Constants.js';\r\nimport { SceneRevealMode } from '../SceneRevealMode.js';\r\nimport { LogLevel } from '../LogLevel.js';\r\nimport { clamp, getSphericalHarmonicsComponentCountForDegree } from '../Util.js';\r\n\r\nconst dummyGeometry = new THREE.BufferGeometry();\r\nconst dummyMaterial = new THREE.MeshBasicMaterial();\r\n\r\nconst COVARIANCES_ELEMENTS_PER_SPLAT = 6;\r\nconst CENTER_COLORS_ELEMENTS_PER_SPLAT = 4;\r\n\r\nconst COVARIANCES_ELEMENTS_PER_TEXEL = 4;\r\nconst CENTER_COLORS_ELEMENTS_PER_TEXEL = 4;\r\nconst SCENE_INDEXES_ELEMENTS_PER_TEXEL = 1;\r\n\r\nconst SCENE_FADEIN_RATE_FAST = 0.012;\r\nconst SCENE_FADEIN_RATE_GRADUAL = 0.003;\r\n\r\nconst VISIBLE_REGION_EXPANSION_DELTA = 1;\r\n\r\n/**\r\n * SplatMesh: Container for one or more splat scenes, abstracting them into a single unified container for\r\n * splat data. Additionally contains data structures and code to make the splat data renderable as a Three.js mesh.\r\n */\r\nexport class SplatMesh extends THREE.Mesh {\r\n\r\n    constructor(dynamicMode = true, enableOptionalEffects = false, halfPrecisionCovariancesOnGPU = false, devicePixelRatio = 1,\r\n                enableDistancesComputationOnGPU = true, integerBasedDistancesComputation = false,\r\n                antialiased = false, maxScreenSpaceSplatSize = 1024, logLevel = LogLevel.None, sphericalHarmonicsDegree = 0) {\r\n        super(dummyGeometry, dummyMaterial);\r\n\r\n        // Reference to a Three.js renderer\r\n        this.renderer = undefined;\r\n\r\n        // Use 16-bit floating point values when storing splat covariance data in textures, instead of 32-bit\r\n        this.halfPrecisionCovariancesOnGPU = halfPrecisionCovariancesOnGPU;\r\n\r\n        // When 'dynamicMode' is true, scenes are assumed to be non-static. Dynamic scenes are handled differently\r\n        // and certain optimizations cannot be made for them. Additionally, by default, all splat data retrieved from\r\n        // this splat mesh will not have their scene transform applied to them if the splat mesh is dynamic. That\r\n        // can be overriden via parameters to the individual functions that are used to retrieve splat data.\r\n        this.dynamicMode = dynamicMode;\r\n\r\n        // Ratio of the resolution in physical pixels to the resolution in CSS pixels for the current display device\r\n        this.devicePixelRatio = devicePixelRatio;\r\n\r\n        // Use a transform feedback to calculate splat distances from the camera\r\n        this.enableDistancesComputationOnGPU = enableDistancesComputationOnGPU;\r\n\r\n        // Use a faster integer-based approach for calculating splat distances from the camera\r\n        this.integerBasedDistancesComputation = integerBasedDistancesComputation;\r\n\r\n        // When true, will perform additional steps during rendering to address artifacts caused by the rendering of gaussians at a\r\n        // substantially different resolution than that at which they were rendered during training. This will only work correctly\r\n        // for models that were trained using a process that utilizes this compensation calculation. For more details:\r\n        // https://github.com/nerfstudio-project/gsplat/pull/117\r\n        // https://github.com/graphdeco-inria/gaussian-splatting/issues/294#issuecomment-1772688093\r\n        this.antialiased = antialiased;\r\n\r\n        // Specify the maximum clip space splat size, can help deal with large splats that get too unwieldy\r\n        this.maxScreenSpaceSplatSize = maxScreenSpaceSplatSize;\r\n\r\n        // The verbosity of console logging\r\n        this.logLevel = logLevel;\r\n\r\n        // Degree 0 means no spherical harmonics\r\n        this.sphericalHarmonicsDegree = sphericalHarmonicsDegree;\r\n        this.minSphericalHarmonicsDegree = 0;\r\n\r\n        // When true, allows for usage of extra properties and attributes during rendering for effects such as opacity adjustment.\r\n        // Default is false for performance reasons. These properties are separate from transform properties (scale, rotation, position)\r\n        // that are enabled by the 'dynamicScene' parameter.\r\n        this.enableOptionalEffects = enableOptionalEffects;\r\n\r\n        // The individual splat scenes stored in this splat mesh, each containing their own transform\r\n        this.scenes = [];\r\n\r\n        // Special octree tailored to SplatMesh instances\r\n        this.splatTree = null;\r\n        this.baseSplatTree = null;\r\n\r\n        // Cache textures and the intermediate data used to populate them\r\n        this.splatDataTextures = {};\r\n\r\n        this.distancesTransformFeedback = {\r\n            'id': null,\r\n            'vertexShader': null,\r\n            'fragmentShader': null,\r\n            'program': null,\r\n            'centersBuffer': null,\r\n            'sceneIndexesBuffer': null,\r\n            'outDistancesBuffer': null,\r\n            'centersLoc': -1,\r\n            'modelViewProjLoc': -1,\r\n            'sceneIndexesLoc': -1,\r\n            'transformsLocs': []\r\n        };\r\n\r\n        this.globalSplatIndexToLocalSplatIndexMap = [];\r\n        this.globalSplatIndexToSceneIndexMap = [];\r\n\r\n        this.lastBuildSplatCount = 0;\r\n        this.lastBuildScenes = [];\r\n        this.lastBuildMaxSplatCount = 0;\r\n        this.lastBuildSceneCount = 0;\r\n        this.firstRenderTime = -1;\r\n        this.finalBuild = false;\r\n\r\n        this.webGLUtils = null;\r\n\r\n        this.boundingBox = new THREE.Box3();\r\n        this.calculatedSceneCenter = new THREE.Vector3();\r\n        this.maxSplatDistanceFromSceneCenter = 0;\r\n        this.visibleRegionBufferRadius = 0;\r\n        this.visibleRegionRadius = 0;\r\n        this.visibleRegionFadeStartRadius = 0;\r\n        this.visibleRegionChanging = false;\r\n\r\n        this.splatScale = 1.0;\r\n        this.pointCloudModeEnabled = false;\r\n\r\n        this.disposed = false;\r\n        this.lastRenderer = null;\r\n        this.visible = false;\r\n    }\r\n\r\n    /**\r\n     * Build a container for each scene managed by this splat mesh based on an instance of SplatBuffer, along with optional\r\n     * transform data (position, scale, rotation) passed to the splat mesh during the build process.\r\n     * @param {Array<THREE.Matrix4>} splatBuffers SplatBuffer instances containing splats for each scene\r\n     * @param {Array<object>} sceneOptions Array of options objects: {\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     * }\r\n     * @return {Array<THREE.Matrix4>}\r\n     */\r\n    static buildScenes(splatBuffers, sceneOptions) {\r\n        const scenes = [];\r\n        scenes.length = splatBuffers.length;\r\n        for (let i = 0; i < splatBuffers.length; i++) {\r\n            const splatBuffer = splatBuffers[i];\r\n            const options = sceneOptions[i] || {};\r\n            let positionArray = options['position'] || [0, 0, 0];\r\n            let rotationArray = options['rotation'] || [0, 0, 0, 1];\r\n            let scaleArray = options['scale'] || [1, 1, 1];\r\n            const position = new THREE.Vector3().fromArray(positionArray);\r\n            const rotation = new THREE.Quaternion().fromArray(rotationArray);\r\n            const scale = new THREE.Vector3().fromArray(scaleArray);\r\n            scenes[i] = SplatMesh.createScene(splatBuffer, position, rotation, scale, options.splatAlphaRemovalThreshold || 1);\r\n        }\r\n        return scenes;\r\n    }\r\n\r\n    static createScene(splatBuffer, position, rotation, scale, minimumAlpha) {\r\n        return new SplatScene(splatBuffer, position, rotation, scale, minimumAlpha);\r\n    }\r\n\r\n    /**\r\n     * Build data structures that map global splat indexes (based on a unified index across all splat buffers) to\r\n     * local data within a single scene.\r\n     * @param {Array<SplatBuffer>} splatBuffers Instances of SplatBuffer off which to build the maps\r\n     * @return {object}\r\n     */\r\n    static buildSplatIndexMaps(splatBuffers) {\r\n        const localSplatIndexMap = [];\r\n        const sceneIndexMap = [];\r\n        let totalSplatCount = 0;\r\n        for (let s = 0; s < splatBuffers.length; s++) {\r\n            const splatBuffer = splatBuffers[s];\r\n            const maxSplatCount = splatBuffer.getMaxSplatCount();\r\n            for (let i = 0; i < maxSplatCount; i++) {\r\n                localSplatIndexMap[totalSplatCount] = i;\r\n                sceneIndexMap[totalSplatCount] = s;\r\n                totalSplatCount++;\r\n            }\r\n        }\r\n        return {\r\n            localSplatIndexMap,\r\n            sceneIndexMap\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Build an instance of SplatTree (a specialized octree) for the given splat mesh.\r\n     * @param {Array<number>} minAlphas Array of minimum splat slphas for each scene\r\n     * @param {function} onSplatTreeIndexesUpload Function to be called when the upload of splat centers to the splat tree\r\n     *                                            builder worker starts and finishes.\r\n     * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\r\n     *                                           the format produced by the splat tree builder worker starts and ends.\r\n     * @return {SplatTree}\r\n     */\r\n     buildSplatTree = function(minAlphas = [], onSplatTreeIndexesUpload, onSplatTreeConstruction) {\r\n        return new Promise((resolve) => {\r\n            this.disposeSplatTree();\r\n            // TODO: expose SplatTree constructor parameters (maximumDepth and maxCentersPerNode) so that they can\r\n            // be configured on a per-scene basis\r\n            this.baseSplatTree = new SplatTree(8, 1000);\r\n            const buildStartTime = performance.now();\r\n            const splatColor = new THREE.Vector4();\r\n            this.baseSplatTree.processSplatMesh(this, (splatIndex) => {\r\n                this.getSplatColor(splatIndex, splatColor);\r\n                const sceneIndex = this.getSceneIndexForSplat(splatIndex);\r\n                const minAlpha = minAlphas[sceneIndex] || 1;\r\n                return splatColor.w >= minAlpha;\r\n            }, onSplatTreeIndexesUpload, onSplatTreeConstruction)\r\n            .then(() => {\r\n                const buildTime = performance.now() - buildStartTime;\r\n                if (this.logLevel >= LogLevel.Info) console.log('SplatTree build: ' + buildTime + ' ms');\r\n                if (this.disposed) {\r\n                    resolve();\r\n                } else {\r\n\r\n                    this.splatTree = this.baseSplatTree;\r\n                    this.baseSplatTree = null;\r\n\r\n                    let leavesWithVertices = 0;\r\n                    let avgSplatCount = 0;\r\n                    let maxSplatCount = 0;\r\n                    let nodeCount = 0;\r\n\r\n                    this.splatTree.visitLeaves((node) => {\r\n                        const nodeSplatCount = node.data.indexes.length;\r\n                        if (nodeSplatCount > 0) {\r\n                            avgSplatCount += nodeSplatCount;\r\n                            maxSplatCount = Math.max(maxSplatCount, nodeSplatCount);\r\n                            nodeCount++;\r\n                            leavesWithVertices++;\r\n                        }\r\n                    });\r\n                    if (this.logLevel >= LogLevel.Info) {\r\n                        console.log(`SplatTree leaves: ${this.splatTree.countLeaves()}`);\r\n                        console.log(`SplatTree leaves with splats:${leavesWithVertices}`);\r\n                        avgSplatCount = avgSplatCount / nodeCount;\r\n                        console.log(`Avg splat count per node: ${avgSplatCount}`);\r\n                        console.log(`Total splat count: ${this.getSplatCount()}`);\r\n                    }\r\n                    resolve();\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Construct this instance of SplatMesh.\r\n     * @param {Array<SplatBuffer>} splatBuffers The base splat data, instances of SplatBuffer\r\n     * @param {Array<object>} sceneOptions Dynamic options for each scene {\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     *\r\n     * }\r\n     * @param {boolean} keepSceneTransforms For a scene that already exists and is being overwritten, this flag\r\n     *                                      says to keep the transform from the existing scene.\r\n     * @param {boolean} finalBuild Will the splat mesh be in its final state after this build?\r\n     * @param {function} onSplatTreeIndexesUpload Function to be called when the upload of splat centers to the splat tree\r\n     *                                            builder worker starts and finishes.\r\n     * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\r\n     *                                           the format produced by the splat tree builder worker starts and ends.\r\n     * @return {object} Object containing info about the splats that are updated\r\n     */\r\n    build(splatBuffers, sceneOptions, keepSceneTransforms = true, finalBuild = false,\r\n          onSplatTreeIndexesUpload, onSplatTreeConstruction, preserveVisibleRegion = true) {\r\n\r\n        this.sceneOptions = sceneOptions;\r\n        this.finalBuild = finalBuild;\r\n\r\n        const maxSplatCount = SplatMesh.getTotalMaxSplatCountForSplatBuffers(splatBuffers);\r\n\r\n        const newScenes = SplatMesh.buildScenes(splatBuffers, sceneOptions);\r\n        if (keepSceneTransforms) {\r\n            for (let i = 0; i < this.scenes.length && i < newScenes.length; i++) {\r\n                const newScene = newScenes[i];\r\n                const existingScene = this.getScene(i);\r\n                newScene.copyTransformData(existingScene);\r\n            }\r\n        }\r\n        this.scenes = newScenes;\r\n\r\n        let minSphericalHarmonicsDegree = 3;\r\n        for (let splatBuffer of splatBuffers) {\r\n            const splatBufferSphericalHarmonicsDegree = splatBuffer.getMinSphericalHarmonicsDegree();\r\n            if (splatBufferSphericalHarmonicsDegree < minSphericalHarmonicsDegree) {\r\n                minSphericalHarmonicsDegree = splatBufferSphericalHarmonicsDegree;\r\n            }\r\n        }\r\n        this.minSphericalHarmonicsDegree = Math.min(minSphericalHarmonicsDegree, this.sphericalHarmonicsDegree);\r\n\r\n        let splatBuffersChanged = false;\r\n        if (splatBuffers.length !== this.lastBuildScenes.length) {\r\n            splatBuffersChanged = true;\r\n        } else {\r\n            for (let i = 0; i < splatBuffers.length; i++) {\r\n                const splatBuffer = splatBuffers[i];\r\n                if (splatBuffer !== this.lastBuildScenes[i].splatBuffer) {\r\n                    splatBuffersChanged = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        let isUpdateBuild = true;\r\n        if (this.scenes.length !== 1 ||\r\n            this.lastBuildSceneCount !== this.scenes.length ||\r\n            this.lastBuildMaxSplatCount !== maxSplatCount ||\r\n            splatBuffersChanged) {\r\n                isUpdateBuild = false;\r\n       }\r\n\r\n       if (!isUpdateBuild) {\r\n            this.boundingBox = new THREE.Box3();\r\n            if (!preserveVisibleRegion) {\r\n                this.maxSplatDistanceFromSceneCenter = 0;\r\n                this.visibleRegionBufferRadius = 0;\r\n                this.visibleRegionRadius = 0;\r\n                this.visibleRegionFadeStartRadius = 0;\r\n                this.firstRenderTime = -1;\r\n            }\r\n            this.lastBuildScenes = [];\r\n            this.lastBuildSplatCount = 0;\r\n            this.lastBuildMaxSplatCount = 0;\r\n            this.disposeMeshData();\r\n            this.geometry = SplatGeometry.build(maxSplatCount);\r\n            this.material = SplatMaterial.build(this.dynamicMode, this.enableOptionalEffects, this.antialiased,\r\n                                                this.maxScreenSpaceSplatSize, this.splatScale, this.pointCloudModeEnabled,\r\n                                                this.minSphericalHarmonicsDegree);\r\n            const indexMaps = SplatMesh.buildSplatIndexMaps(splatBuffers);\r\n            this.globalSplatIndexToLocalSplatIndexMap = indexMaps.localSplatIndexMap;\r\n            this.globalSplatIndexToSceneIndexMap = indexMaps.sceneIndexMap;\r\n        }\r\n\r\n        const splatCount = this.getSplatCount();\r\n        if (this.enableDistancesComputationOnGPU) this.setupDistancesComputationTransformFeedback();\r\n        const dataUpdateResults = this.refreshGPUDataFromSplatBuffers(isUpdateBuild);\r\n\r\n        for (let i = 0; i < this.scenes.length; i++) {\r\n            this.lastBuildScenes[i] = this.scenes[i];\r\n        }\r\n        this.lastBuildSplatCount = splatCount;\r\n        this.lastBuildMaxSplatCount = this.getMaxSplatCount();\r\n        this.lastBuildSceneCount = this.scenes.length;\r\n\r\n        if (finalBuild && this.scenes.length > 0) {\r\n            this.buildSplatTree(sceneOptions.map(options => options.splatAlphaRemovalThreshold || 1),\r\n                                onSplatTreeIndexesUpload, onSplatTreeConstruction)\r\n            .then(() => {\r\n                if (this.onSplatTreeReadyCallback) this.onSplatTreeReadyCallback(this.splatTree);\r\n            });\r\n        }\r\n\r\n        this.visible = (this.scenes.length > 0);\r\n\r\n        return dataUpdateResults;\r\n    }\r\n\r\n    freeIntermediateSplatData() {\r\n\r\n        const deleteTextureData = (texture) => {\r\n            delete texture.source.data;\r\n            delete texture.image;\r\n            texture.onUpdate = null;\r\n        };\r\n\r\n        delete this.splatDataTextures.baseData.covariances;\r\n        delete this.splatDataTextures.baseData.centers;\r\n        delete this.splatDataTextures.baseData.colors;\r\n        delete this.splatDataTextures.baseData.sphericalHarmonics;\r\n\r\n        delete this.splatDataTextures.centerColors.data;\r\n        delete this.splatDataTextures.covariances.data;\r\n        if (this.splatDataTextures.sphericalHarmonics) {\r\n            delete this.splatDataTextures.sphericalHarmonics.data;\r\n        }\r\n        if (this.splatDataTextures.sceneIndexes) {\r\n            delete this.splatDataTextures.sceneIndexes.data;\r\n        }\r\n\r\n        this.splatDataTextures.centerColors.texture.needsUpdate = true;\r\n        this.splatDataTextures.centerColors.texture.onUpdate = () => {\r\n            deleteTextureData(this.splatDataTextures.centerColors.texture);\r\n        };\r\n\r\n        this.splatDataTextures.covariances.texture.needsUpdate = true;\r\n        this.splatDataTextures.covariances.texture.onUpdate = () => {\r\n            deleteTextureData(this.splatDataTextures.covariances.texture);\r\n        };\r\n\r\n        if (this.splatDataTextures.sphericalHarmonics) {\r\n            if (this.splatDataTextures.sphericalHarmonics.texture) {\r\n                this.splatDataTextures.sphericalHarmonics.texture.needsUpdate = true;\r\n                this.splatDataTextures.sphericalHarmonics.texture.onUpdate = () => {\r\n                    deleteTextureData(this.splatDataTextures.sphericalHarmonics.texture);\r\n                };\r\n            } else {\r\n                this.splatDataTextures.sphericalHarmonics.textures.forEach((texture) => {\r\n                    texture.needsUpdate = true;\r\n                    texture.onUpdate = () => {\r\n                        deleteTextureData(texture);\r\n                    };\r\n                });\r\n            }\r\n        }\r\n        if (this.splatDataTextures.sceneIndexes) {\r\n            this.splatDataTextures.sceneIndexes.texture.needsUpdate = true;\r\n            this.splatDataTextures.sceneIndexes.texture.onUpdate = () => {\r\n                deleteTextureData(this.splatDataTextures.sceneIndexes.texture);\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * Dispose all resources held by the splat mesh\r\n     */\r\n    dispose() {\r\n        this.disposeMeshData();\r\n        this.disposeTextures();\r\n        this.disposeSplatTree();\r\n        if (this.enableDistancesComputationOnGPU) {\r\n            if (this.computeDistancesOnGPUSyncTimeout) {\r\n                clearTimeout(this.computeDistancesOnGPUSyncTimeout);\r\n                this.computeDistancesOnGPUSyncTimeout = null;\r\n            }\r\n            this.disposeDistancesComputationGPUResources();\r\n        }\r\n        this.scenes = [];\r\n        this.distancesTransformFeedback = {\r\n            'id': null,\r\n            'vertexShader': null,\r\n            'fragmentShader': null,\r\n            'program': null,\r\n            'centersBuffer': null,\r\n            'sceneIndexesBuffer': null,\r\n            'outDistancesBuffer': null,\r\n            'centersLoc': -1,\r\n            'modelViewProjLoc': -1,\r\n            'sceneIndexesLoc': -1,\r\n            'transformsLocs': []\r\n        };\r\n        this.renderer = null;\r\n\r\n        this.globalSplatIndexToLocalSplatIndexMap = [];\r\n        this.globalSplatIndexToSceneIndexMap = [];\r\n\r\n        this.lastBuildSplatCount = 0;\r\n        this.lastBuildScenes = [];\r\n        this.lastBuildMaxSplatCount = 0;\r\n        this.lastBuildSceneCount = 0;\r\n        this.firstRenderTime = -1;\r\n        this.finalBuild = false;\r\n\r\n        this.webGLUtils = null;\r\n\r\n        this.boundingBox = new THREE.Box3();\r\n        this.calculatedSceneCenter = new THREE.Vector3();\r\n        this.maxSplatDistanceFromSceneCenter = 0;\r\n        this.visibleRegionBufferRadius = 0;\r\n        this.visibleRegionRadius = 0;\r\n        this.visibleRegionFadeStartRadius = 0;\r\n        this.visibleRegionChanging = false;\r\n\r\n        this.splatScale = 1.0;\r\n        this.pointCloudModeEnabled = false;\r\n\r\n        this.disposed = true;\r\n        this.lastRenderer = null;\r\n        this.visible = false;\r\n    }\r\n\r\n    /**\r\n     * Dispose of only the Three.js mesh resources (geometry, material, and texture)\r\n     */\r\n    disposeMeshData() {\r\n        if (this.geometry && this.geometry !== dummyGeometry) {\r\n            this.geometry.dispose();\r\n            this.geometry = null;\r\n        }\r\n        if (this.material) {\r\n            this.material.dispose();\r\n            this.material = null;\r\n        }\r\n    }\r\n\r\n    disposeTextures() {\r\n        for (let textureKey in this.splatDataTextures) {\r\n            if (this.splatDataTextures.hasOwnProperty(textureKey)) {\r\n                const textureContainer = this.splatDataTextures[textureKey];\r\n                if (textureContainer.texture) {\r\n                    textureContainer.texture.dispose();\r\n                    textureContainer.texture = null;\r\n                }\r\n            }\r\n        }\r\n        this.splatDataTextures = null;\r\n    }\r\n\r\n    disposeSplatTree() {\r\n        if (this.splatTree) {\r\n            this.splatTree.dispose();\r\n            this.splatTree = null;\r\n        } else if (this.baseSplatTree) {\r\n            this.baseSplatTree.dispose();\r\n            this.baseSplatTree = null;\r\n        }\r\n    }\r\n\r\n    getSplatTree() {\r\n        return this.splatTree;\r\n    }\r\n\r\n    onSplatTreeReady(callback) {\r\n        this.onSplatTreeReadyCallback = callback;\r\n    }\r\n\r\n    /**\r\n     * Get copies of data that are necessary for splat distance computation: splat center positions and splat\r\n     * scene indexes (necessary for applying dynamic scene transformations during distance computation)\r\n     * @param {*} start The index at which to start copying data\r\n     * @param {*} end  The index at which to stop copying data\r\n     * @return {object}\r\n     */\r\n    getDataForDistancesComputation(start, end) {\r\n        const centers = this.integerBasedDistancesComputation ?\r\n                        this.getIntegerCenters(start, end, true) :\r\n                        this.getFloatCenters(start, end, true);\r\n        const sceneIndexes = this.getSceneIndexes(start, end);\r\n        return {\r\n            centers,\r\n            sceneIndexes\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Refresh data textures and GPU buffers with splat data from the splat buffers belonging to this mesh.\r\n     * @param {boolean} sinceLastBuildOnly Specify whether or not to only update for splats that have been added since the last build.\r\n     * @return {object}\r\n     */\r\n    refreshGPUDataFromSplatBuffers(sinceLastBuildOnly) {\r\n        const splatCount = this.getSplatCount();\r\n        this.refreshDataTexturesFromSplatBuffers(sinceLastBuildOnly);\r\n        const updateStart = sinceLastBuildOnly ? this.lastBuildSplatCount : 0;\r\n        const { centers, sceneIndexes } = this.getDataForDistancesComputation(updateStart, splatCount - 1);\r\n        if (this.enableDistancesComputationOnGPU) {\r\n            this.refreshGPUBuffersForDistancesComputation(centers, sceneIndexes, sinceLastBuildOnly);\r\n        }\r\n        return {\r\n            'from': updateStart,\r\n            'to': splatCount - 1,\r\n            'count': splatCount - updateStart,\r\n            'centers': centers,\r\n            'sceneIndexes': sceneIndexes\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Update the GPU buffers that are used for computing splat distances on the GPU.\r\n     * @param {Array<number>} centers Splat center positions\r\n     * @param {Array<number>} sceneIndexes Indexes of the scene to which each splat belongs\r\n     * @param {boolean} sinceLastBuildOnly Specify whether or not to only update for splats that have been added since the last build.\r\n     */\r\n    refreshGPUBuffersForDistancesComputation(centers, sceneIndexes, sinceLastBuildOnly = false) {\r\n        const offset = sinceLastBuildOnly ? this.lastBuildSplatCount : 0;\r\n        this.updateGPUCentersBufferForDistancesComputation(sinceLastBuildOnly, centers, offset);\r\n        this.updateGPUTransformIndexesBufferForDistancesComputation(sinceLastBuildOnly, sceneIndexes, offset);\r\n    }\r\n\r\n    /**\r\n     * Refresh data textures with data from the splat buffers for this mesh.\r\n     * @param {boolean} sinceLastBuildOnly Specify whether or not to only update for splats that have been added since the last build.\r\n     */\r\n    refreshDataTexturesFromSplatBuffers(sinceLastBuildOnly) {\r\n        if (!sinceLastBuildOnly) {\r\n            this.setupDataTextures();\r\n        } else {\r\n            const splatCount = this.getSplatCount();\r\n            const fromSplat = this.lastBuildSplatCount;\r\n            const toSplat = splatCount - 1;\r\n            this.updateBaseDataFromSplatBuffers(fromSplat, toSplat);\r\n            this.updateDataTexturesFromBaseData(fromSplat, toSplat);\r\n        }\r\n        this.updateVisibleRegion(sinceLastBuildOnly);\r\n    }\r\n\r\n    setupDataTextures() {\r\n        const maxSplatCount = this.getMaxSplatCount();\r\n        const splatCount = this.getSplatCount();\r\n\r\n        this.disposeTextures();\r\n\r\n        const computeDataTextureSize = (elementsPerTexel, elementsPerSplat) => {\r\n            const texSize = new THREE.Vector2(4096, 1024);\r\n            while (texSize.x * texSize.y * elementsPerTexel < maxSplatCount * elementsPerSplat) texSize.y *= 2;\r\n            return texSize;\r\n        };\r\n\r\n        const covarianceCompressionLevel = this.getTargetCovarianceCompressionLevel();\r\n        const shCompressionLevel = this.getTargetSphericalHarmonicsCompressionLevel();\r\n\r\n        const covariances = new Float32Array(maxSplatCount * COVARIANCES_ELEMENTS_PER_SPLAT);\r\n        const centers = new Float32Array(maxSplatCount * 3);\r\n        const colors = new Uint8Array(maxSplatCount * 4);\r\n\r\n        let SphericalHarmonicsArrayType = Float32Array;\r\n        if (shCompressionLevel === 1) SphericalHarmonicsArrayType = Uint16Array;\r\n        else if (shCompressionLevel === 2) SphericalHarmonicsArrayType = Uint8Array;\r\n        const shComponentCount = getSphericalHarmonicsComponentCountForDegree(this.minSphericalHarmonicsDegree);\r\n        const shData = this.minSphericalHarmonicsDegree ? new SphericalHarmonicsArrayType(maxSplatCount * shComponentCount) : undefined;\r\n\r\n        this.fillSplatDataArrays(covariances, centers, colors, shData, undefined,\r\n                                 covarianceCompressionLevel, shCompressionLevel);\r\n\r\n        // set up covariances data texture\r\n        const covTexSize = computeDataTextureSize(COVARIANCES_ELEMENTS_PER_TEXEL, 6);\r\n        let CovariancesDataType = covarianceCompressionLevel >= 1 ? Uint16Array : Float32Array;\r\n        let covariancesTextureType = covarianceCompressionLevel >= 1 ? THREE.HalfFloatType : THREE.FloatType;\r\n        const paddedCovariances = new CovariancesDataType(covTexSize.x * covTexSize.y * COVARIANCES_ELEMENTS_PER_TEXEL);\r\n        paddedCovariances.set(covariances);\r\n\r\n        const covTex = new THREE.DataTexture(paddedCovariances, covTexSize.x, covTexSize.y, THREE.RGBAFormat, covariancesTextureType);\r\n        covTex.needsUpdate = true;\r\n        this.material.uniforms.covariancesTexture.value = covTex;\r\n        this.material.uniforms.covariancesTextureSize.value.copy(covTexSize);\r\n\r\n        // set up centers/colors data texture\r\n        const centersColsTexSize = computeDataTextureSize(CENTER_COLORS_ELEMENTS_PER_TEXEL, 4);\r\n        const paddedCentersCols = new Uint32Array(centersColsTexSize.x * centersColsTexSize.y * CENTER_COLORS_ELEMENTS_PER_TEXEL);\r\n        SplatMesh.updateCenterColorsPaddedData(0, splatCount - 1, centers, colors, paddedCentersCols);\r\n\r\n        const centersColsTex = new THREE.DataTexture(paddedCentersCols, centersColsTexSize.x, centersColsTexSize.y,\r\n                                                     THREE.RGBAIntegerFormat, THREE.UnsignedIntType);\r\n        centersColsTex.internalFormat = 'RGBA32UI';\r\n        centersColsTex.needsUpdate = true;\r\n        this.material.uniforms.centersColorsTexture.value = centersColsTex;\r\n        this.material.uniforms.centersColorsTextureSize.value.copy(centersColsTexSize);\r\n        this.material.uniformsNeedUpdate = true;\r\n\r\n        this.splatDataTextures = {\r\n            'baseData': {\r\n                'covariances': covariances,\r\n                'centers': centers,\r\n                'colors': colors,\r\n                'sphericalHarmonics': shData\r\n            },\r\n            'covariances': {\r\n                'data': paddedCovariances,\r\n                'texture': covTex,\r\n                'size': covTexSize,\r\n                'compressionLevel': covarianceCompressionLevel\r\n            },\r\n            'centerColors': {\r\n                'data': paddedCentersCols,\r\n                'texture': centersColsTex,\r\n                'size': centersColsTexSize\r\n            }\r\n        };\r\n\r\n        if (shData) {\r\n            const shTextureType = shCompressionLevel === 2 ? THREE.UnsignedByteType : THREE.HalfFloatType;\r\n\r\n            let paddedSHComponentCount = shComponentCount;\r\n            if (paddedSHComponentCount % 2 !== 0) paddedSHComponentCount++;\r\n            const shElementsPerTexel = this.minSphericalHarmonicsDegree === 2 ? 4 : 2;\r\n            const texelFormat = shElementsPerTexel === 4 ? THREE.RGBAFormat : THREE.RGFormat;\r\n            let shTexSize = computeDataTextureSize(shElementsPerTexel, paddedSHComponentCount);\r\n\r\n            // Based on my own observations across multiple devices, OSes and browsers, using textures that have one dimension\r\n            // greater than 4096 while the other is greater than or equal to 4096 causes issues (Essentially any texture larger\r\n            // than 4096 x 4096 (16777216) texels). Specifically it seems all texture data beyond the 4096 x 4096 texel boundary\r\n            // is corrupted, while data below that boundary is usable. In these cases the texture has been valid in the eyes of\r\n            // both Three.js and WebGL, and the texel format (RG, RGBA, etc.) has not mattered. More investigation will be needed,\r\n            // but for now the work-around is to split the spherical harmonics into three textures (one for each color channel).\r\n\r\n            // Use one texture for all spherical harmonics data\r\n            if (shTexSize.x * shTexSize.y <= 16777216) {\r\n                const paddedSHArraySize = shTexSize.x * shTexSize.y * shElementsPerTexel;\r\n                const paddedSHArray = new SphericalHarmonicsArrayType(paddedSHArraySize);\r\n                for (let c = 0; c < splatCount; c++) {\r\n                    const srcBase = shComponentCount * c;\r\n                    const destBase = paddedSHComponentCount * c;\r\n                    for (let i = 0; i < shComponentCount; i++) {\r\n                        paddedSHArray[destBase + i] = shData[srcBase + i];\r\n                    }\r\n                }\r\n\r\n                const shTexture = new THREE.DataTexture(paddedSHArray, shTexSize.x, shTexSize.y, texelFormat, shTextureType);\r\n                shTexture.needsUpdate = true;\r\n                this.material.uniforms.sphericalHarmonicsTexture.value = shTexture;\r\n                this.splatDataTextures['sphericalHarmonics'] = {\r\n                    'componentCount': shComponentCount,\r\n                    'paddedComponentCount': paddedSHComponentCount,\r\n                    'data': paddedSHArray,\r\n                    'textureCount': 1,\r\n                    'texture': shTexture,\r\n                    'size': shTexSize,\r\n                    'compressionLevel': shCompressionLevel,\r\n                    'elementsPerTexel': shElementsPerTexel\r\n                };\r\n            // Use three textures for spherical harmonics data, one per color channel\r\n            } else {\r\n                const shComponentCountPerChannel = shComponentCount / 3;\r\n                paddedSHComponentCount = shComponentCountPerChannel;\r\n                if (paddedSHComponentCount % 2 !== 0) paddedSHComponentCount++;\r\n                shTexSize = computeDataTextureSize(shElementsPerTexel, paddedSHComponentCount);\r\n\r\n                const paddedSHArraySize = shTexSize.x * shTexSize.y * shElementsPerTexel;\r\n                const textureUniforms = [this.material.uniforms.sphericalHarmonicsTextureR,\r\n                                         this.material.uniforms.sphericalHarmonicsTextureG,\r\n                                         this.material.uniforms.sphericalHarmonicsTextureB];\r\n                const paddedSHArrays = [];\r\n                const shTextures = [];\r\n                for (let t = 0; t < 3; t++) {\r\n                    const paddedSHArray = new SphericalHarmonicsArrayType(paddedSHArraySize);\r\n                    paddedSHArrays.push(paddedSHArray);\r\n                    for (let c = 0; c < splatCount; c++) {\r\n                        const srcBase = shComponentCount * c;\r\n                        const destBase = paddedSHComponentCount * c;\r\n                        if (shComponentCountPerChannel >= 3) {\r\n                            for (let i = 0; i < 3; i++) paddedSHArray[destBase + i] = shData[srcBase + t * 3 + i];\r\n                            if (shComponentCountPerChannel >= 8) {\r\n                                for (let i = 0; i < 5; i++) paddedSHArray[destBase + 3 + i] = shData[srcBase + 9 + t * 5 + i];\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    const shTexture = new THREE.DataTexture(paddedSHArray, shTexSize.x, shTexSize.y, texelFormat, shTextureType);\r\n                    shTextures.push(shTexture);\r\n                    shTexture.needsUpdate = true;\r\n                    textureUniforms[t].value = shTexture;\r\n                }\r\n\r\n                this.material.uniforms.sphericalHarmonicsMultiTextureMode.value = 1;\r\n                this.splatDataTextures['sphericalHarmonics'] = {\r\n                    'componentCount': shComponentCount,\r\n                    'componentCountPerChannel': shComponentCountPerChannel,\r\n                    'paddedComponentCount': paddedSHComponentCount,\r\n                    'data': paddedSHArrays,\r\n                    'textureCount': 3,\r\n                    'textures': shTextures,\r\n                    'size': shTexSize,\r\n                    'compressionLevel': shCompressionLevel,\r\n                    'elementsPerTexel': shElementsPerTexel\r\n                };\r\n            }\r\n\r\n            this.material.uniforms.sphericalHarmonicsTextureSize.value.copy(shTexSize);\r\n            this.material.uniforms.sphericalHarmonics8BitMode.value = shCompressionLevel === 2 ? 1 : 0;\r\n            this.material.uniformsNeedUpdate = true;\r\n        }\r\n\r\n        if (this.dynamicMode || this.enableOptionalEffects) {\r\n            const sceneIndexesTexSize = computeDataTextureSize(SCENE_INDEXES_ELEMENTS_PER_TEXEL, 4);\r\n            const paddedTransformIndexes = new Uint32Array(sceneIndexesTexSize.x *\r\n                                                           sceneIndexesTexSize.y * SCENE_INDEXES_ELEMENTS_PER_TEXEL);\r\n            for (let c = 0; c < splatCount; c++) paddedTransformIndexes[c] = this.globalSplatIndexToSceneIndexMap[c];\r\n            const sceneIndexesTexture = new THREE.DataTexture(paddedTransformIndexes, sceneIndexesTexSize.x, sceneIndexesTexSize.y,\r\n                                                              THREE.RedIntegerFormat, THREE.UnsignedIntType);\r\n            sceneIndexesTexture.internalFormat = 'R32UI';\r\n            sceneIndexesTexture.needsUpdate = true;\r\n            this.material.uniforms.sceneIndexesTexture.value = sceneIndexesTexture;\r\n            this.material.uniforms.sceneIndexesTextureSize.value.copy(sceneIndexesTexSize);\r\n            this.material.uniformsNeedUpdate = true;\r\n            this.splatDataTextures['sceneIndexes'] = {\r\n                'data': paddedTransformIndexes,\r\n                'texture': sceneIndexesTexture,\r\n                'size': sceneIndexesTexSize\r\n            };\r\n        }\r\n    }\r\n\r\n    updateBaseDataFromSplatBuffers(fromSplat, toSplat) {\r\n        const covarianceCompressionLevel = this.splatDataTextures['covariances'].compressionLevel;\r\n        const shTextureDesc = this.splatDataTextures['sphericalHarmonics'];\r\n        const shCompressionLevel = shTextureDesc ? shTextureDesc.compressionLevel : 0;\r\n\r\n        this.fillSplatDataArrays(this.splatDataTextures.baseData.covariances,\r\n                                 this.splatDataTextures.baseData.centers, this.splatDataTextures.baseData.colors,\r\n                                 this.splatDataTextures.baseData.sphericalHarmonics, undefined, covarianceCompressionLevel,\r\n                                 shCompressionLevel, fromSplat, toSplat, fromSplat);\r\n    }\r\n\r\n    updateDataTexturesFromBaseData(fromSplat, toSplat) {\r\n        const covarianceCompressionLevel = this.splatDataTextures['covariances'].compressionLevel;\r\n        const shTextureDesc = this.splatDataTextures['sphericalHarmonics'];\r\n        const shCompressionLevel = shTextureDesc ? shTextureDesc.compressionLevel : 0;\r\n\r\n        const covariancesTextureDescriptor = this.splatDataTextures['covariances'];\r\n        const paddedCovariances = covariancesTextureDescriptor.data;\r\n        const covariancesTexture = covariancesTextureDescriptor.texture;\r\n        const covarancesStartSplat = fromSplat * COVARIANCES_ELEMENTS_PER_SPLAT;\r\n        const covariancesEndSplat = toSplat * COVARIANCES_ELEMENTS_PER_SPLAT;\r\n        for (let i = covarancesStartSplat; i <= covariancesEndSplat; i++) {\r\n            const covariance = this.splatDataTextures.baseData.covariances[i];\r\n            paddedCovariances[i] = covariance;\r\n        }\r\n        const covariancesTextureProps = this.renderer ? this.renderer.properties.get(covariancesTexture) : null;\r\n        if (!covariancesTextureProps || !covariancesTextureProps.__webglTexture) {\r\n            covariancesTexture.needsUpdate = true;\r\n        } else {\r\n            const covaranceBytesPerElement = covarianceCompressionLevel ? 2 : 4;\r\n            this.updateDataTexture(paddedCovariances, covariancesTextureDescriptor.texture, covariancesTextureDescriptor.size,\r\n                                   covariancesTextureProps, COVARIANCES_ELEMENTS_PER_TEXEL, COVARIANCES_ELEMENTS_PER_SPLAT,\r\n                                   covaranceBytesPerElement, fromSplat, toSplat);\r\n        }\r\n\r\n        const centerColorsTextureDescriptor = this.splatDataTextures['centerColors'];\r\n        const paddedCenterColors = centerColorsTextureDescriptor.data;\r\n        const centerColorsTexture = centerColorsTextureDescriptor.texture;\r\n        SplatMesh.updateCenterColorsPaddedData(fromSplat, toSplat, this.splatDataTextures.baseData.centers,\r\n                                               this.splatDataTextures.baseData.colors, paddedCenterColors);\r\n        const centerColorsTextureProps = this.renderer ? this.renderer.properties.get(centerColorsTexture) : null;\r\n        if (!centerColorsTextureProps || !centerColorsTextureProps.__webglTexture) {\r\n            centerColorsTexture.needsUpdate = true;\r\n        } else {\r\n            this.updateDataTexture(paddedCenterColors, centerColorsTextureDescriptor.texture, centerColorsTextureDescriptor.size,\r\n                                   centerColorsTextureProps, CENTER_COLORS_ELEMENTS_PER_TEXEL, CENTER_COLORS_ELEMENTS_PER_SPLAT, 4,\r\n                                   fromSplat, toSplat);\r\n        }\r\n\r\n        const shData = this.splatDataTextures.baseData.sphericalHarmonics;\r\n        if (shData) {\r\n            let shBytesPerElement = 4;\r\n            if (shCompressionLevel === 1) shBytesPerElement = 2;\r\n            else if (shCompressionLevel === 2) shBytesPerElement = 1;\r\n\r\n            const updateTexture = (shTexture, shTextureSize, elementsPerTexel, paddedSHArray, paddedSHComponentCount) => {\r\n                const shTextureProps = this.renderer ? this.renderer.properties.get(shTexture) : null;\r\n                if (!shTextureProps || !shTextureProps.__webglTexture) {\r\n                    shTexture.needsUpdate = true;\r\n                } else {\r\n                    this.updateDataTexture(paddedSHArray, shTexture, shTextureSize, shTextureProps, elementsPerTexel,\r\n                                           paddedSHComponentCount, shBytesPerElement, fromSplat, toSplat);\r\n                }\r\n            };\r\n\r\n            const shComponentCount = shTextureDesc.componentCount;\r\n            const paddedSHComponentCount = shTextureDesc.paddedComponentCount;\r\n\r\n            // Update for the case of a single texture for all spherical harmonics data\r\n            if (shTextureDesc.textureCount === 1) {\r\n                const paddedSHArray = shTextureDesc.data;\r\n                for (let c = fromSplat; c <= toSplat; c++) {\r\n                    const srcBase = shComponentCount * c;\r\n                    const destBase = paddedSHComponentCount * c;\r\n                    for (let i = 0; i < shComponentCount; i++) {\r\n                        paddedSHArray[destBase + i] = shData[srcBase + i];\r\n                    }\r\n                }\r\n                updateTexture(shTextureDesc.texture, shTextureDesc.size,\r\n                              shTextureDesc.elementsPerTexel, paddedSHArray, paddedSHComponentCount);\r\n            // Update for the case of spherical harmonics data split among three textures, one for each color channel\r\n            } else {\r\n                const shComponentCountPerChannel = shTextureDesc.componentCountPerChannel;\r\n                for (let t = 0; t < 3; t++) {\r\n                    const paddedSHArray = shTextureDesc.data[t];\r\n                    for (let c = fromSplat; c <= toSplat; c++) {\r\n                        const srcBase = shComponentCount * c;\r\n                        const destBase = paddedSHComponentCount * c;\r\n                        if (shComponentCountPerChannel >= 3) {\r\n                            for (let i = 0; i < 3; i++) paddedSHArray[destBase + i] = shData[srcBase + t * 3 + i];\r\n                            if (shComponentCountPerChannel >= 8) {\r\n                                for (let i = 0; i < 5; i++) paddedSHArray[destBase + 3 + i] = shData[srcBase + 9 + t * 5 + i];\r\n                            }\r\n                        }\r\n                    }\r\n                    updateTexture(shTextureDesc.textures[t], shTextureDesc.size,\r\n                                  shTextureDesc.elementsPerTexel, paddedSHArray, paddedSHComponentCount);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.dynamicMode) {\r\n            const sceneIndexesTexDesc = this.splatDataTextures['sceneIndexes'];\r\n            const paddedTransformIndexes = sceneIndexesTexDesc.data;\r\n            for (let c = this.lastBuildSplatCount; c <= toSplat; c++) {\r\n                paddedTransformIndexes[c] = this.globalSplatIndexToSceneIndexMap[c];\r\n            }\r\n\r\n            const sceneIndexesTexture = sceneIndexesTexDesc.texture;\r\n            const sceneIndexesTextureProps = this.renderer ? this.renderer.properties.get(sceneIndexesTexture) : null;\r\n            if (!sceneIndexesTextureProps || !sceneIndexesTextureProps.__webglTexture) {\r\n                sceneIndexesTexture.needsUpdate = true;\r\n            } else {\r\n                this.updateDataTexture(paddedTransformIndexes, sceneIndexesTexDesc.texture, sceneIndexesTexDesc.size,\r\n                                       sceneIndexesTextureProps, 1, 1, 1, this.lastBuildSplatCount, toSplat);\r\n            }\r\n        }\r\n    }\r\n\r\n    getTargetCovarianceCompressionLevel() {\r\n        return this.halfPrecisionCovariancesOnGPU ? 1 : 0;\r\n    }\r\n\r\n    getTargetSphericalHarmonicsCompressionLevel() {\r\n        return Math.max(1, this.getMaximumSplatBufferCompressionLevel());\r\n    }\r\n\r\n    getMaximumSplatBufferCompressionLevel() {\r\n        let maxCompressionLevel;\r\n        for (let i = 0; i < this.scenes.length; i++) {\r\n            const scene = this.getScene(i);\r\n            const splatBuffer = scene.splatBuffer;\r\n            if (i === 0 || splatBuffer.compressionLevel > maxCompressionLevel) {\r\n                maxCompressionLevel = splatBuffer.compressionLevel;\r\n            }\r\n        }\r\n        return maxCompressionLevel;\r\n    }\r\n\r\n    getMinimumSplatBufferCompressionLevel() {\r\n        let minCompressionLevel;\r\n        for (let i = 0; i < this.scenes.length; i++) {\r\n            const scene = this.getScene(i);\r\n            const splatBuffer = scene.splatBuffer;\r\n            if (i === 0 || splatBuffer.compressionLevel < minCompressionLevel) {\r\n                minCompressionLevel = splatBuffer.compressionLevel;\r\n            }\r\n        }\r\n        return minCompressionLevel;\r\n    }\r\n\r\n    static computeTextureUpdateRegion(startSplat, endSplat, textureWidth, elementsPerTexel, elementsPerSplat) {\r\n        const texelsPerSplat = elementsPerSplat / elementsPerTexel;\r\n\r\n        const startSplatTexels = startSplat * texelsPerSplat;\r\n        const startRow = Math.floor(startSplatTexels / textureWidth);\r\n        const startRowElement = startRow * textureWidth * elementsPerTexel;\r\n\r\n        const endSplatTexels = endSplat * texelsPerSplat;\r\n        const endRow = Math.floor(endSplatTexels / textureWidth);\r\n        const endRowEndElement = endRow * textureWidth * elementsPerTexel + (textureWidth * elementsPerTexel);\r\n\r\n        return {\r\n            'dataStart': startRowElement,\r\n            'dataEnd': endRowEndElement,\r\n            'startRow': startRow,\r\n            'endRow': endRow\r\n        };\r\n    }\r\n\r\n    updateDataTexture(paddedData, texture, textureSize, textureProps, elementsPerTexel, elementsPerSplat, bytesPerSplat, from, to) {\r\n        const gl = this.renderer.getContext();\r\n        const updateRegion = SplatMesh.computeTextureUpdateRegion(from, to, textureSize.x, elementsPerTexel, elementsPerSplat);\r\n        const updateElementCount = updateRegion.dataEnd - updateRegion.dataStart;\r\n        const updateDataView = new paddedData.constructor(paddedData.buffer,\r\n                                                          updateRegion.dataStart * bytesPerSplat, updateElementCount);\r\n        const updateHeight = updateRegion.endRow - updateRegion.startRow + 1;\r\n        const glType = this.webGLUtils.convert(texture.type);\r\n        const glFormat = this.webGLUtils.convert(texture.format, texture.colorSpace);\r\n        const currentTexture = gl.getParameter(gl.TEXTURE_BINDING_2D);\r\n        gl.bindTexture(gl.TEXTURE_2D, textureProps.__webglTexture);\r\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, updateRegion.startRow,\r\n                         textureSize.x, updateHeight, glFormat, glType, updateDataView);\r\n        gl.bindTexture(gl.TEXTURE_2D, currentTexture);\r\n    }\r\n\r\n\r\n    static updateCenterColorsPaddedData(from, to, centers, colors, paddedCenterColors) {\r\n        for (let c = from; c <= to; c++) {\r\n            const colorsBase = c * 4;\r\n            const centersBase = c * 3;\r\n            const centerColorsBase = c * 4;\r\n            paddedCenterColors[centerColorsBase] = rgbaArrayToInteger(colors, colorsBase);\r\n            paddedCenterColors[centerColorsBase + 1] = uintEncodedFloat(centers[centersBase]);\r\n            paddedCenterColors[centerColorsBase + 2] = uintEncodedFloat(centers[centersBase + 1]);\r\n            paddedCenterColors[centerColorsBase + 3] = uintEncodedFloat(centers[centersBase + 2]);\r\n        }\r\n    }\r\n\r\n    updateVisibleRegion(sinceLastBuildOnly) {\r\n        const splatCount = this.getSplatCount();\r\n        const tempCenter = new THREE.Vector3();\r\n        if (!sinceLastBuildOnly) {\r\n            const avgCenter = new THREE.Vector3();\r\n            this.scenes.forEach((scene) => {\r\n                avgCenter.add(scene.splatBuffer.sceneCenter);\r\n            });\r\n            avgCenter.multiplyScalar(1.0 / this.scenes.length);\r\n            this.calculatedSceneCenter.copy(avgCenter);\r\n            this.material.uniforms.sceneCenter.value.copy(this.calculatedSceneCenter);\r\n            this.material.uniformsNeedUpdate = true;\r\n        }\r\n\r\n        const startSplatFormMaxDistanceCalc = sinceLastBuildOnly ? this.lastBuildSplatCount : 0;\r\n        for (let i = startSplatFormMaxDistanceCalc; i < splatCount; i++) {\r\n            this.getSplatCenter(i, tempCenter, false);\r\n            const distFromCSceneCenter = tempCenter.sub(this.calculatedSceneCenter).length();\r\n            if (distFromCSceneCenter > this.maxSplatDistanceFromSceneCenter) this.maxSplatDistanceFromSceneCenter = distFromCSceneCenter;\r\n        }\r\n\r\n        if (this.maxSplatDistanceFromSceneCenter - this.visibleRegionBufferRadius > VISIBLE_REGION_EXPANSION_DELTA) {\r\n            this.visibleRegionBufferRadius = this.maxSplatDistanceFromSceneCenter;\r\n            this.visibleRegionRadius = Math.max(this.visibleRegionBufferRadius - VISIBLE_REGION_EXPANSION_DELTA, 0.0);\r\n        }\r\n        if (this.finalBuild) this.visibleRegionRadius = this.visibleRegionBufferRadius = this.maxSplatDistanceFromSceneCenter;\r\n        this.updateVisibleRegionFadeDistance();\r\n    }\r\n\r\n    updateVisibleRegionFadeDistance(sceneRevealMode = SceneRevealMode.Default) {\r\n        const fastFadeRate = SCENE_FADEIN_RATE_FAST;\r\n        const gradualFadeRate = SCENE_FADEIN_RATE_GRADUAL;\r\n        const defaultFadeInRate = this.finalBuild ? fastFadeRate : gradualFadeRate;\r\n        const fadeInRate = sceneRevealMode === SceneRevealMode.Default ? defaultFadeInRate : gradualFadeRate;\r\n        this.visibleRegionFadeStartRadius = (this.visibleRegionRadius - this.visibleRegionFadeStartRadius) *\r\n                                             fadeInRate + this.visibleRegionFadeStartRadius;\r\n        const fadeInPercentage = (this.visibleRegionBufferRadius > 0) ?\r\n                                 (this.visibleRegionFadeStartRadius / this.visibleRegionBufferRadius) : 0;\r\n        const fadeInComplete = fadeInPercentage > 0.99;\r\n        const shaderFadeInComplete = (fadeInComplete || sceneRevealMode === SceneRevealMode.Instant) ? 1 : 0;\r\n\r\n        this.material.uniforms.visibleRegionFadeStartRadius.value = this.visibleRegionFadeStartRadius;\r\n        this.material.uniforms.visibleRegionRadius.value = this.visibleRegionRadius;\r\n        this.material.uniforms.firstRenderTime.value = this.firstRenderTime;\r\n        this.material.uniforms.currentTime.value = performance.now();\r\n        this.material.uniforms.fadeInComplete.value = shaderFadeInComplete;\r\n        this.material.uniformsNeedUpdate = true;\r\n        this.visibleRegionChanging = !fadeInComplete;\r\n    }\r\n\r\n    /**\r\n     * Set the indexes of splats that should be rendered; should be sorted in desired render order.\r\n     * @param {Uint32Array} globalIndexes Sorted index list of splats to be rendered\r\n     * @param {number} renderSplatCount Total number of splats to be rendered. Necessary because we may not want to render\r\n     *                                  every splat.\r\n     */\r\n    updateRenderIndexes(globalIndexes, renderSplatCount) {\r\n        const geometry = this.geometry;\r\n        geometry.attributes.splatIndex.set(globalIndexes);\r\n        geometry.attributes.splatIndex.needsUpdate = true;\r\n        if (renderSplatCount > 0 && this.firstRenderTime === -1) this.firstRenderTime = performance.now();\r\n        geometry.instanceCount = renderSplatCount;\r\n    }\r\n\r\n    /**\r\n     * Update the transforms for each scene in this splat mesh from their individual components (position,\r\n     * quaternion, and scale)\r\n     */\r\n    updateTransforms() {\r\n        for (let i = 0; i < this.scenes.length; i++) {\r\n            const scene = this.getScene(i);\r\n            scene.updateTransform();\r\n        }\r\n    }\r\n\r\n    updateUniforms = function() {\r\n\r\n        const viewport = new THREE.Vector2();\r\n\r\n        return function(renderDimensions, cameraFocalLengthX, cameraFocalLengthY,\r\n                        orthographicMode, orthographicZoom, inverseFocalAdjustment) {\r\n            const splatCount = this.getSplatCount();\r\n            if (splatCount > 0) {\r\n                viewport.set(renderDimensions.x * this.devicePixelRatio,\r\n                             renderDimensions.y * this.devicePixelRatio);\r\n                this.material.uniforms.viewport.value.copy(viewport);\r\n                this.material.uniforms.basisViewport.value.set(1.0 / viewport.x, 1.0 / viewport.y);\r\n                this.material.uniforms.focal.value.set(cameraFocalLengthX, cameraFocalLengthY);\r\n                this.material.uniforms.orthographicMode.value = orthographicMode ? 1 : 0;\r\n                this.material.uniforms.orthoZoom.value = orthographicZoom;\r\n                this.material.uniforms.inverseFocalAdjustment.value = inverseFocalAdjustment;\r\n                if (this.dynamicMode) {\r\n                    for (let i = 0; i < this.scenes.length; i++) {\r\n                        this.material.uniforms.transforms.value[i].copy(this.getScene(i).transform);\r\n                    }\r\n                }\r\n                if (this.enableOptionalEffects) {\r\n                    for (let i = 0; i < this.scenes.length; i++) {\r\n                        this.material.uniforms.sceneOpacity.value[i] = clamp(this.getScene(i).opacity, 0.0, 1.0);\r\n                        this.material.uniforms.sceneVisibility.value[i] = this.getScene(i).visible ? 1 : 0;\r\n                        this.material.uniformsNeedUpdate = true;\r\n                    }\r\n                }\r\n                this.material.uniformsNeedUpdate = true;\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    setSplatScale(splatScale = 1) {\r\n        this.splatScale = splatScale;\r\n        this.material.uniforms.splatScale.value = splatScale;\r\n        this.material.uniformsNeedUpdate = true;\r\n    }\r\n\r\n    getSplatScale() {\r\n        return this.splatScale;\r\n    }\r\n\r\n    setPointCloudModeEnabled(enabled) {\r\n        this.pointCloudModeEnabled = enabled;\r\n        this.material.uniforms.pointCloudModeEnabled.value = enabled ? 1 : 0;\r\n        this.material.uniformsNeedUpdate = true;\r\n    }\r\n\r\n    getPointCloudModeEnabled() {\r\n        return this.pointCloudModeEnabled;\r\n    }\r\n\r\n    getSplatDataTextures() {\r\n        return this.splatDataTextures;\r\n    }\r\n\r\n    getSplatCount() {\r\n        return SplatMesh.getTotalSplatCountForScenes(this.scenes);\r\n    }\r\n\r\n    static getTotalSplatCountForScenes(scenes) {\r\n        let totalSplatCount = 0;\r\n        for (let scene of scenes) {\r\n            if (scene && scene.splatBuffer) totalSplatCount += scene.splatBuffer.getSplatCount();\r\n        }\r\n        return totalSplatCount;\r\n    }\r\n\r\n    static getTotalSplatCountForSplatBuffers(splatBuffers) {\r\n        let totalSplatCount = 0;\r\n        for (let splatBuffer of splatBuffers) totalSplatCount += splatBuffer.getSplatCount();\r\n        return totalSplatCount;\r\n    }\r\n\r\n    getMaxSplatCount() {\r\n        return SplatMesh.getTotalMaxSplatCountForScenes(this.scenes);\r\n    }\r\n\r\n    static getTotalMaxSplatCountForScenes(scenes) {\r\n        let totalSplatCount = 0;\r\n        for (let scene of scenes) {\r\n            if (scene && scene.splatBuffer) totalSplatCount += scene.splatBuffer.getMaxSplatCount();\r\n        }\r\n        return totalSplatCount;\r\n    }\r\n\r\n    static getTotalMaxSplatCountForSplatBuffers(splatBuffers) {\r\n        let totalSplatCount = 0;\r\n        for (let splatBuffer of splatBuffers) totalSplatCount += splatBuffer.getMaxSplatCount();\r\n        return totalSplatCount;\r\n    }\r\n\r\n    disposeDistancesComputationGPUResources() {\r\n\r\n        if (!this.renderer) return;\r\n\r\n        const gl = this.renderer.getContext();\r\n\r\n        if (this.distancesTransformFeedback.vao) {\r\n            gl.deleteVertexArray(this.distancesTransformFeedback.vao);\r\n            this.distancesTransformFeedback.vao = null;\r\n        }\r\n        if (this.distancesTransformFeedback.program) {\r\n            gl.deleteProgram(this.distancesTransformFeedback.program);\r\n            gl.deleteShader(this.distancesTransformFeedback.vertexShader);\r\n            gl.deleteShader(this.distancesTransformFeedback.fragmentShader);\r\n            this.distancesTransformFeedback.program = null;\r\n            this.distancesTransformFeedback.vertexShader = null;\r\n            this.distancesTransformFeedback.fragmentShader = null;\r\n        }\r\n        this.disposeDistancesComputationGPUBufferResources();\r\n        if (this.distancesTransformFeedback.id) {\r\n            gl.deleteTransformFeedback(this.distancesTransformFeedback.id);\r\n            this.distancesTransformFeedback.id = null;\r\n        }\r\n    }\r\n\r\n    disposeDistancesComputationGPUBufferResources() {\r\n\r\n        if (!this.renderer) return;\r\n\r\n        const gl = this.renderer.getContext();\r\n\r\n        if (this.distancesTransformFeedback.centersBuffer) {\r\n            this.distancesTransformFeedback.centersBuffer = null;\r\n            gl.deleteBuffer(this.distancesTransformFeedback.centersBuffer);\r\n        }\r\n        if (this.distancesTransformFeedback.outDistancesBuffer) {\r\n            gl.deleteBuffer(this.distancesTransformFeedback.outDistancesBuffer);\r\n            this.distancesTransformFeedback.outDistancesBuffer = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the Three.js renderer used by this splat mesh\r\n     * @param {THREE.WebGLRenderer} renderer Instance of THREE.WebGLRenderer\r\n     */\r\n    setRenderer(renderer) {\r\n        if (renderer !== this.renderer) {\r\n            this.renderer = renderer;\r\n            const gl = this.renderer.getContext();\r\n            const extensions = new WebGLExtensions(gl);\r\n            const capabilities = new WebGLCapabilities(gl, extensions, {});\r\n            extensions.init(capabilities);\r\n            this.webGLUtils = new THREE.WebGLUtils(gl, extensions, capabilities);\r\n            if (this.enableDistancesComputationOnGPU && this.getSplatCount() > 0) {\r\n                this.setupDistancesComputationTransformFeedback();\r\n                const { centers, sceneIndexes } = this.getDataForDistancesComputation(0, this.getSplatCount() - 1);\r\n                this.refreshGPUBuffersForDistancesComputation(centers, sceneIndexes);\r\n            }\r\n        }\r\n    }\r\n\r\n    setupDistancesComputationTransformFeedback = function() {\r\n\r\n        let currentMaxSplatCount;\r\n\r\n        return function() {\r\n            const maxSplatCount = this.getMaxSplatCount();\r\n\r\n            if (!this.renderer) return;\r\n\r\n            const rebuildGPUObjects = (this.lastRenderer !== this.renderer);\r\n            const rebuildBuffers = currentMaxSplatCount !== maxSplatCount;\r\n\r\n            if (!rebuildGPUObjects && !rebuildBuffers) return;\r\n\r\n            if (rebuildGPUObjects) {\r\n                this.disposeDistancesComputationGPUResources();\r\n            } else if (rebuildBuffers) {\r\n                this.disposeDistancesComputationGPUBufferResources();\r\n            }\r\n\r\n            const gl = this.renderer.getContext();\r\n\r\n            const createShader = (gl, type, source) => {\r\n                const shader = gl.createShader(type);\r\n                if (!shader) {\r\n                    console.error('Fatal error: gl could not create a shader object.');\r\n                    return null;\r\n                }\r\n\r\n                gl.shaderSource(shader, source);\r\n                gl.compileShader(shader);\r\n\r\n                const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n                if (!compiled) {\r\n                    let typeName = 'unknown';\r\n                    if (type === gl.VERTEX_SHADER) typeName = 'vertex shader';\r\n                    else if (type === gl.FRAGMENT_SHADER) typeName = 'fragement shader';\r\n                    const errors = gl.getShaderInfoLog(shader);\r\n                    console.error('Failed to compile ' + typeName + ' with these errors:' + errors);\r\n                    gl.deleteShader(shader);\r\n                    return null;\r\n                }\r\n\r\n                return shader;\r\n            };\r\n\r\n            let vsSource;\r\n            if (this.integerBasedDistancesComputation) {\r\n                vsSource =\r\n                `#version 300 es\r\n                in ivec4 center;\r\n                flat out int distance;`;\r\n                if (this.dynamicMode) {\r\n                    vsSource += `\r\n                        in uint sceneIndex;\r\n                        uniform ivec4 transforms[${Constants.MaxScenes}];\r\n                        void main(void) {\r\n                            ivec4 transform = transforms[sceneIndex];\r\n                            distance = center.x * transform.x + center.y * transform.y + center.z * transform.z + transform.w * center.w;\r\n                        }\r\n                    `;\r\n                } else {\r\n                    vsSource += `\r\n                        uniform ivec3 modelViewProj;\r\n                        void main(void) {\r\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\r\n                        }\r\n                    `;\r\n                }\r\n            } else {\r\n                vsSource =\r\n                `#version 300 es\r\n                in vec4 center;\r\n                flat out float distance;`;\r\n                if (this.dynamicMode) {\r\n                    vsSource += `\r\n                        in uint sceneIndex;\r\n                        uniform mat4 transforms[${Constants.MaxScenes}];\r\n                        void main(void) {\r\n                            vec4 transformedCenter = transforms[sceneIndex] * vec4(center.xyz, 1.0);\r\n                            distance = transformedCenter.z;\r\n                        }\r\n                    `;\r\n                } else {\r\n                    vsSource += `\r\n                        uniform vec3 modelViewProj;\r\n                        void main(void) {\r\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\r\n                        }\r\n                    `;\r\n                }\r\n            }\r\n\r\n            const fsSource =\r\n            `#version 300 es\r\n                precision lowp float;\r\n                out vec4 fragColor;\r\n                void main(){}\r\n            `;\r\n\r\n            const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\r\n            const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\r\n            const currentProgramDeleted = currentProgram ? gl.getProgramParameter(currentProgram, gl.DELETE_STATUS) : false;\r\n\r\n            if (rebuildGPUObjects) {\r\n                this.distancesTransformFeedback.vao = gl.createVertexArray();\r\n            }\r\n\r\n            gl.bindVertexArray(this.distancesTransformFeedback.vao);\r\n\r\n            if (rebuildGPUObjects) {\r\n                const program = gl.createProgram();\r\n                const vertexShader = createShader(gl, gl.VERTEX_SHADER, vsSource);\r\n                const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fsSource);\r\n                if (!vertexShader || !fragmentShader) {\r\n                    throw new Error('Could not compile shaders for distances computation on GPU.');\r\n                }\r\n                gl.attachShader(program, vertexShader);\r\n                gl.attachShader(program, fragmentShader);\r\n                gl.transformFeedbackVaryings(program, ['distance'], gl.SEPARATE_ATTRIBS);\r\n                gl.linkProgram(program);\r\n\r\n                const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n                if (!linked) {\r\n                    const error = gl.getProgramInfoLog(program);\r\n                    console.error('Fatal error: Failed to link program: ' + error);\r\n                    gl.deleteProgram(program);\r\n                    gl.deleteShader(fragmentShader);\r\n                    gl.deleteShader(vertexShader);\r\n                    throw new Error('Could not link shaders for distances computation on GPU.');\r\n                }\r\n\r\n                this.distancesTransformFeedback.program = program;\r\n                this.distancesTransformFeedback.vertexShader = vertexShader;\r\n                this.distancesTransformFeedback.vertexShader = fragmentShader;\r\n            }\r\n\r\n            gl.useProgram(this.distancesTransformFeedback.program);\r\n\r\n            this.distancesTransformFeedback.centersLoc =\r\n                gl.getAttribLocation(this.distancesTransformFeedback.program, 'center');\r\n            if (this.dynamicMode) {\r\n                this.distancesTransformFeedback.sceneIndexesLoc =\r\n                    gl.getAttribLocation(this.distancesTransformFeedback.program, 'sceneIndex');\r\n                for (let i = 0; i < this.scenes.length; i++) {\r\n                    this.distancesTransformFeedback.transformsLocs[i] =\r\n                        gl.getUniformLocation(this.distancesTransformFeedback.program, `transforms[${i}]`);\r\n                }\r\n            } else {\r\n                this.distancesTransformFeedback.modelViewProjLoc =\r\n                    gl.getUniformLocation(this.distancesTransformFeedback.program, 'modelViewProj');\r\n            }\r\n\r\n            if (rebuildGPUObjects || rebuildBuffers) {\r\n                this.distancesTransformFeedback.centersBuffer = gl.createBuffer();\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\r\n                gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\r\n                if (this.integerBasedDistancesComputation) {\r\n                    gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 4, gl.INT, 0, 0);\r\n                } else {\r\n                    gl.vertexAttribPointer(this.distancesTransformFeedback.centersLoc, 4, gl.FLOAT, false, 0, 0);\r\n                }\r\n\r\n                if (this.dynamicMode) {\r\n                    this.distancesTransformFeedback.sceneIndexesBuffer = gl.createBuffer();\r\n                    gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.sceneIndexesBuffer);\r\n                    gl.enableVertexAttribArray(this.distancesTransformFeedback.sceneIndexesLoc);\r\n                    gl.vertexAttribIPointer(this.distancesTransformFeedback.sceneIndexesLoc, 1, gl.UNSIGNED_INT, 0, 0);\r\n                }\r\n            }\r\n\r\n            if (rebuildGPUObjects || rebuildBuffers) {\r\n                this.distancesTransformFeedback.outDistancesBuffer = gl.createBuffer();\r\n            }\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\r\n            gl.bufferData(gl.ARRAY_BUFFER, maxSplatCount * 4, gl.STATIC_READ);\r\n\r\n            if (rebuildGPUObjects) {\r\n                this.distancesTransformFeedback.id = gl.createTransformFeedback();\r\n            }\r\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\r\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\r\n\r\n            if (currentProgram && currentProgramDeleted !== true) gl.useProgram(currentProgram);\r\n            if (currentVao) gl.bindVertexArray(currentVao);\r\n\r\n            this.lastRenderer = this.renderer;\r\n            currentMaxSplatCount = maxSplatCount;\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Refresh GPU buffers used for computing splat distances with centers data from the scenes for this mesh.\r\n     * @param {boolean} isUpdate Specify whether or not to update the GPU buffer or to initialize & fill\r\n     * @param {Array<number>} centers The splat centers data\r\n     * @param {number} offsetSplats Offset in the GPU buffer at which to start updating data, specified in splats\r\n     */\r\n    updateGPUCentersBufferForDistancesComputation(isUpdate, centers, offsetSplats) {\r\n\r\n        if (!this.renderer) return;\r\n\r\n        const gl = this.renderer.getContext();\r\n\r\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\r\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\r\n\r\n        const ArrayType = this.integerBasedDistancesComputation ? Uint32Array : Float32Array;\r\n        const attributeBytesPerCenter = 16;\r\n        const subBufferOffset = offsetSplats * attributeBytesPerCenter;\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\r\n\r\n        if (isUpdate) {\r\n            gl.bufferSubData(gl.ARRAY_BUFFER, subBufferOffset, centers);\r\n        } else {\r\n            const maxArray = new ArrayType(this.getMaxSplatCount() * attributeBytesPerCenter);\r\n            maxArray.set(centers);\r\n            gl.bufferData(gl.ARRAY_BUFFER, maxArray, gl.STATIC_DRAW);\r\n        }\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n        if (currentVao) gl.bindVertexArray(currentVao);\r\n    }\r\n\r\n    /**\r\n     * Refresh GPU buffers used for pre-computing splat distances with centers data from the scenes for this mesh.\r\n     * @param {boolean} isUpdate Specify whether or not to update the GPU buffer or to initialize & fill\r\n     * @param {Array<number>} sceneIndexes The splat scene indexes\r\n     * @param {number} offsetSplats Offset in the GPU buffer at which to start updating data, specified in splats\r\n     */\r\n    updateGPUTransformIndexesBufferForDistancesComputation(isUpdate, sceneIndexes, offsetSplats) {\r\n\r\n        if (!this.renderer || !this.dynamicMode) return;\r\n\r\n        const gl = this.renderer.getContext();\r\n\r\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\r\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\r\n\r\n        const subBufferOffset = offsetSplats * 4;\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.sceneIndexesBuffer);\r\n\r\n        if (isUpdate) {\r\n            gl.bufferSubData(gl.ARRAY_BUFFER, subBufferOffset, sceneIndexes);\r\n        } else {\r\n            const maxArray = new Uint32Array(this.getMaxSplatCount() * 4);\r\n            maxArray.set(sceneIndexes);\r\n            gl.bufferData(gl.ARRAY_BUFFER, maxArray, gl.STATIC_DRAW);\r\n        }\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n        if (currentVao) gl.bindVertexArray(currentVao);\r\n    }\r\n\r\n    /**\r\n     * Get a typed array containing a mapping from global splat indexes to their scene index.\r\n     * @param {number} start Starting splat index to store\r\n     * @param {number} end Ending splat index to store\r\n     * @return {Uint32Array}\r\n     */\r\n    getSceneIndexes(start, end) {\r\n\r\n        let sceneIndexes;\r\n        const fillCount = end - start + 1;\r\n        sceneIndexes = new Uint32Array(fillCount);\r\n        for (let i = start; i <= end; i++) {\r\n            sceneIndexes[i] = this.globalSplatIndexToSceneIndexMap[i];\r\n        }\r\n\r\n        return sceneIndexes;\r\n    }\r\n\r\n    /**\r\n     * Fill 'array' with the transforms for each scene in this splat mesh.\r\n     * @param {Array} array Empty array to be filled with scene transforms. If not empty, contents will be overwritten.\r\n     */\r\n    fillTransformsArray = function() {\r\n\r\n        const tempArray = [];\r\n\r\n        return function(array) {\r\n            if (tempArray.length !== array.length) tempArray.length = array.length;\r\n            for (let i = 0; i < this.scenes.length; i++) {\r\n                const sceneTransform = this.getScene(i).transform;\r\n                const sceneTransformElements = sceneTransform.elements;\r\n                for (let j = 0; j < 16; j++) {\r\n                    tempArray[i * 16 + j] = sceneTransformElements[j];\r\n                }\r\n            }\r\n            array.set(tempArray);\r\n        };\r\n\r\n    }();\r\n\r\n    computeDistancesOnGPU = function() {\r\n\r\n        const tempMatrix = new THREE.Matrix4();\r\n\r\n        return function(modelViewProjMatrix, outComputedDistances) {\r\n            if (!this.renderer) return;\r\n\r\n            // console.time(\"gpu_compute_distances\");\r\n            const gl = this.renderer.getContext();\r\n\r\n            const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\r\n            const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\r\n            const currentProgramDeleted = currentProgram ? gl.getProgramParameter(currentProgram, gl.DELETE_STATUS) : false;\r\n\r\n            gl.bindVertexArray(this.distancesTransformFeedback.vao);\r\n            gl.useProgram(this.distancesTransformFeedback.program);\r\n\r\n            gl.enable(gl.RASTERIZER_DISCARD);\r\n\r\n            if (this.dynamicMode) {\r\n                for (let i = 0; i < this.scenes.length; i++) {\r\n                    tempMatrix.copy(this.getScene(i).transform);\r\n                    tempMatrix.premultiply(modelViewProjMatrix);\r\n\r\n                    if (this.integerBasedDistancesComputation) {\r\n                        const iTempMatrix = SplatMesh.getIntegerMatrixArray(tempMatrix);\r\n                        const iTransform = [iTempMatrix[2], iTempMatrix[6], iTempMatrix[10], iTempMatrix[14]];\r\n                        gl.uniform4i(this.distancesTransformFeedback.transformsLocs[i], iTransform[0], iTransform[1],\r\n                                                                                        iTransform[2], iTransform[3]);\r\n                    } else {\r\n                        gl.uniformMatrix4fv(this.distancesTransformFeedback.transformsLocs[i], false, tempMatrix.elements);\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.integerBasedDistancesComputation) {\r\n                    const iViewProjMatrix = SplatMesh.getIntegerMatrixArray(modelViewProjMatrix);\r\n                    const iViewProj = [iViewProjMatrix[2], iViewProjMatrix[6], iViewProjMatrix[10]];\r\n                    gl.uniform3i(this.distancesTransformFeedback.modelViewProjLoc, iViewProj[0], iViewProj[1], iViewProj[2]);\r\n                } else {\r\n                    const viewProj = [modelViewProjMatrix.elements[2], modelViewProjMatrix.elements[6], modelViewProjMatrix.elements[10]];\r\n                    gl.uniform3f(this.distancesTransformFeedback.modelViewProjLoc, viewProj[0], viewProj[1], viewProj[2]);\r\n                }\r\n            }\r\n\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\r\n            gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\r\n            if (this.integerBasedDistancesComputation) {\r\n                gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 4, gl.INT, 0, 0);\r\n            } else {\r\n                gl.vertexAttribPointer(this.distancesTransformFeedback.centersLoc, 4, gl.FLOAT, false, 0, 0);\r\n            }\r\n\r\n            if (this.dynamicMode) {\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.sceneIndexesBuffer);\r\n                gl.enableVertexAttribArray(this.distancesTransformFeedback.sceneIndexesLoc);\r\n                gl.vertexAttribIPointer(this.distancesTransformFeedback.sceneIndexesLoc, 1, gl.UNSIGNED_INT, 0, 0);\r\n            }\r\n\r\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\r\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\r\n\r\n            gl.beginTransformFeedback(gl.POINTS);\r\n            gl.drawArrays(gl.POINTS, 0, this.getSplatCount());\r\n            gl.endTransformFeedback();\r\n\r\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, null);\r\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\r\n\r\n            gl.disable(gl.RASTERIZER_DISCARD);\r\n\r\n            const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);\r\n            gl.flush();\r\n\r\n            const promise = new Promise((resolve) => {\r\n                const checkSync = () => {\r\n                    if (this.disposed) {\r\n                        resolve();\r\n                    } else {\r\n                        const timeout = 0;\r\n                        const bitflags = 0;\r\n                        const status = gl.clientWaitSync(sync, bitflags, timeout);\r\n                        switch (status) {\r\n                            case gl.TIMEOUT_EXPIRED:\r\n                                this.computeDistancesOnGPUSyncTimeout = setTimeout(checkSync);\r\n                                return this.computeDistancesOnGPUSyncTimeout;\r\n                            case gl.WAIT_FAILED:\r\n                                throw new Error('should never get here');\r\n                            default:\r\n                                this.computeDistancesOnGPUSyncTimeout = null;\r\n                                gl.deleteSync(sync);\r\n                                const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\r\n                                gl.bindVertexArray(this.distancesTransformFeedback.vao);\r\n                                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\r\n                                gl.getBufferSubData(gl.ARRAY_BUFFER, 0, outComputedDistances);\r\n                                gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n                                if (currentVao) gl.bindVertexArray(currentVao);\r\n\r\n                                // console.timeEnd(\"gpu_compute_distances\");\r\n\r\n                                resolve();\r\n                        }\r\n                    }\r\n                };\r\n                this.computeDistancesOnGPUSyncTimeout = setTimeout(checkSync);\r\n            });\r\n\r\n            if (currentProgram && currentProgramDeleted !== true) gl.useProgram(currentProgram);\r\n            if (currentVao) gl.bindVertexArray(currentVao);\r\n\r\n            return promise;\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Given a global splat index, return corresponding local data (splat buffer, index of splat in that splat\r\n     * buffer, and the corresponding transform)\r\n     * @param {number} globalIndex Global splat index\r\n     * @param {object} paramsObj Object in which to store local data\r\n     * @param {boolean} returnSceneTransform By default, the transform of the scene to which the splat at 'globalIndex' belongs will be\r\n     *                                       returned via the 'sceneTransform' property of 'paramsObj' only if the splat mesh is static.\r\n     *                                       If 'returnSceneTransform' is true, the 'sceneTransform' property will always contain the scene\r\n     *                                       transform, and if 'returnSceneTransform' is false, the 'sceneTransform' property will always\r\n     *                                       be null.\r\n     */\r\n    getLocalSplatParameters(globalIndex, paramsObj, returnSceneTransform) {\r\n        if (returnSceneTransform === undefined || returnSceneTransform === null) {\r\n            returnSceneTransform = this.dynamicMode ? false : true;\r\n        }\r\n        paramsObj.splatBuffer = this.getSplatBufferForSplat(globalIndex);\r\n        paramsObj.localIndex = this.getSplatLocalIndex(globalIndex);\r\n        paramsObj.sceneTransform = returnSceneTransform ? this.getSceneTransformForSplat(globalIndex) : null;\r\n    }\r\n\r\n    /**\r\n     * Fill arrays with splat data and apply transforms if appropriate. Each array is optional.\r\n     * @param {Float32Array} covariances Target storage for splat covariances\r\n     * @param {Float32Array} centers Target storage for splat centers\r\n     * @param {Uint8Array} colors Target storage for splat colors\r\n     * @param {Float32Array} sphericalHarmonics Target storage for spherical harmonics\r\n     * @param {boolean} applySceneTransform By default, scene transforms are applied to relevant splat data only if the splat mesh is\r\n     *                                      static. If 'applySceneTransform' is true, scene transforms will always be applied and if\r\n     *                                      it is false, they will never be applied. If undefined, the default behavior will apply.\r\n     * @param {number} covarianceCompressionLevel The compression level for covariances in the destination array\r\n     * @param {number} sphericalHarmonicsCompressionLevel The compression level for spherical harmonics in the destination array\r\n     * @param {number} srcStart The start location from which to pull source data\r\n     * @param {number} srcEnd The end location from which to pull source data\r\n     * @param {number} destStart The start location from which to write data\r\n     */\r\n    fillSplatDataArrays(covariances, centers, colors, sphericalHarmonics, applySceneTransform,\r\n                        covarianceCompressionLevel = 0, sphericalHarmonicsCompressionLevel = 1, srcStart, srcEnd, destStart = 0) {\r\n\r\n        for (let i = 0; i < this.scenes.length; i++) {\r\n            if (applySceneTransform === undefined || applySceneTransform === null) {\r\n                applySceneTransform = this.dynamicMode ? false : true;\r\n            }\r\n\r\n            const scene = this.getScene(i);\r\n            const splatBuffer = scene.splatBuffer;\r\n            const sceneTransform = applySceneTransform ? scene.transform : null;\r\n            if (covariances) {\r\n                splatBuffer.fillSplatCovarianceArray(covariances, sceneTransform,\r\n                                                     srcStart, srcEnd, destStart, covarianceCompressionLevel);\r\n            }\r\n            if (centers) splatBuffer.fillSplatCenterArray(centers, sceneTransform, srcStart, srcEnd, destStart);\r\n            if (colors) splatBuffer.fillSplatColorArray(colors, scene.minimumAlpha, srcStart, srcEnd, destStart);\r\n            if (sphericalHarmonics) {\r\n                splatBuffer.fillSphericalHarmonicsArray(sphericalHarmonics, this.minSphericalHarmonicsDegree,\r\n                                                        sceneTransform, srcStart, srcEnd, destStart, sphericalHarmonicsCompressionLevel);\r\n            }\r\n            destStart += splatBuffer.getSplatCount();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert splat centers, which are floating point values, to an array of integers and multiply\r\n     * each by 1000. Centers will get transformed as appropriate before conversion to integer.\r\n     * @param {number} start The index at which to start retrieving data\r\n     * @param {number} end The index at which to stop retrieving data\r\n     * @param {boolean} padFour Enforce alignment of 4 by inserting a 1 after every 3 values\r\n     * @return {Int32Array}\r\n     */\r\n    getIntegerCenters(start, end, padFour = false) {\r\n        const splatCount = end - start + 1;\r\n        const floatCenters = new Float32Array(splatCount * 3);\r\n        this.fillSplatDataArrays(null, floatCenters, null, null, undefined, undefined, undefined, start);\r\n        let intCenters;\r\n        let componentCount = padFour ? 4 : 3;\r\n        intCenters = new Int32Array(splatCount * componentCount);\r\n        for (let i = 0; i < splatCount; i++) {\r\n            for (let t = 0; t < 3; t++) {\r\n                intCenters[i * componentCount + t] = Math.round(floatCenters[i * 3 + t] * 1000.0);\r\n            }\r\n            if (padFour) intCenters[i * componentCount + 3] = 1000;\r\n        }\r\n        return intCenters;\r\n    }\r\n\r\n    /**\r\n     * Returns an array of splat centers, transformed as appropriate, optionally padded.\r\n     * @param {number} start The index at which to start retrieving data\r\n     * @param {number} end The index at which to stop retrieving data\r\n     * @param {boolean} padFour Enforce alignment of 4 by inserting a 1 after every 3 values\r\n     * @return {Float32Array}\r\n     */\r\n    getFloatCenters(start, end, padFour = false) {\r\n        const splatCount = end - start + 1;\r\n        const floatCenters = new Float32Array(splatCount * 3);\r\n        this.fillSplatDataArrays(null, floatCenters, null, null, undefined, undefined, undefined, start);\r\n        if (!padFour) return floatCenters;\r\n        let paddedFloatCenters = new Float32Array(splatCount * 4);\r\n        for (let i = 0; i < splatCount; i++) {\r\n            for (let t = 0; t < 3; t++) {\r\n                paddedFloatCenters[i * 4 + t] = floatCenters[i * 3 + t];\r\n            }\r\n            paddedFloatCenters[i * 4 + 3] = 1.0;\r\n        }\r\n        return paddedFloatCenters;\r\n    }\r\n\r\n    /**\r\n     * Get the center for a splat, transformed as appropriate.\r\n     * @param {number} globalIndex Global index of splat\r\n     * @param {THREE.Vector3} outCenter THREE.Vector3 instance in which to store splat center\r\n     * @param {boolean} applySceneTransform By default, if the splat mesh is static, the transform of the scene to which the splat at\r\n     *                                      'globalIndex' belongs will be applied to the splat center. If 'applySceneTransform' is true,\r\n     *                                      the scene transform will always be applied and if 'applySceneTransform' is false, the\r\n     *                                      scene transform will never be applied. If undefined, the default behavior will apply.\r\n     */\r\n    getSplatCenter = function() {\r\n\r\n        const paramsObj = {};\r\n\r\n        return function(globalIndex, outCenter, applySceneTransform) {\r\n            this.getLocalSplatParameters(globalIndex, paramsObj, applySceneTransform);\r\n            paramsObj.splatBuffer.getSplatCenter(paramsObj.localIndex, outCenter, paramsObj.sceneTransform);\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Get the scale and rotation for a splat, transformed as appropriate.\r\n     * @param {number} globalIndex Global index of splat\r\n     * @param {THREE.Vector3} outScale THREE.Vector3 instance in which to store splat scale\r\n     * @param {THREE.Quaternion} outRotation THREE.Quaternion instance in which to store splat rotation\r\n     * @param {boolean} applySceneTransform By default, if the splat mesh is static, the transform of the scene to which the splat at\r\n     *                                      'globalIndex' belongs will be applied to the splat scale and rotation. If\r\n     *                                      'applySceneTransform' is true, the scene transform will always be applied and if\r\n     *                                      'applySceneTransform' is false, the scene transform will never be applied. If undefined,\r\n     *                                      the default behavior will apply.\r\n     */\r\n    getSplatScaleAndRotation = function() {\r\n\r\n        const paramsObj = {};\r\n\r\n        return function(globalIndex, outScale, outRotation, applySceneTransform) {\r\n            this.getLocalSplatParameters(globalIndex, paramsObj, applySceneTransform);\r\n            paramsObj.splatBuffer.getSplatScaleAndRotation(paramsObj.localIndex, outScale, outRotation, paramsObj.sceneTransform);\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Get the color for a splat.\r\n     * @param {number} globalIndex Global index of splat\r\n     * @param {THREE.Vector4} outColor THREE.Vector4 instance in which to store splat color\r\n     */\r\n    getSplatColor = function() {\r\n\r\n        const paramsObj = {};\r\n\r\n        return function(globalIndex, outColor) {\r\n            this.getLocalSplatParameters(globalIndex, paramsObj);\r\n            paramsObj.splatBuffer.getSplatColor(paramsObj.localIndex, outColor);\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Store the transform of the scene at 'sceneIndex' in 'outTransform'.\r\n     * @param {number} sceneIndex Index of the desired scene\r\n     * @param {THREE.Matrix4} outTransform Instance of THREE.Matrix4 in which to store the scene's transform\r\n     */\r\n    getSceneTransform(sceneIndex, outTransform) {\r\n        const scene = this.getScene(sceneIndex);\r\n        scene.updateTransform();\r\n        outTransform.copy(scene.transform);\r\n    }\r\n\r\n    /**\r\n     * Get the scene at 'sceneIndex'.\r\n     * @param {number} sceneIndex Index of the desired scene\r\n     * @return {SplatScene}\r\n     */\r\n    getScene(sceneIndex) {\r\n        if (sceneIndex < 0 || sceneIndex >= this.scenes.length) {\r\n            throw new Error('SplatMesh::getScene() -> Invalid scene index.');\r\n        }\r\n        return this.scenes[sceneIndex];\r\n    }\r\n\r\n    getSplatBufferForSplat(globalIndex) {\r\n        return this.getScene(this.globalSplatIndexToSceneIndexMap[globalIndex]).splatBuffer;\r\n    }\r\n\r\n    getSceneIndexForSplat(globalIndex) {\r\n        return this.globalSplatIndexToSceneIndexMap[globalIndex];\r\n    }\r\n\r\n    getSceneTransformForSplat(globalIndex) {\r\n        return this.getScene(this.globalSplatIndexToSceneIndexMap[globalIndex]).transform;\r\n    }\r\n\r\n    getSplatLocalIndex(globalIndex) {\r\n        return this.globalSplatIndexToLocalSplatIndexMap[globalIndex];\r\n    }\r\n\r\n    static getIntegerMatrixArray(matrix) {\r\n        const matrixElements = matrix.elements;\r\n        const intMatrixArray = [];\r\n        for (let i = 0; i < 16; i++) {\r\n            intMatrixArray[i] = Math.round(matrixElements[i] * 1000.0);\r\n        }\r\n        return intMatrixArray;\r\n    }\r\n}\r\n","\u0000asm\u0001\u0000\u0000\u0000\u0000\u000f\bdylink.0\u0001\u0004\u0000\u0000\u0000\u0000\u0001\u001b\u0003`\u0000\u0000`\u0010\u0000`\u0000\u0001\u0002\u0012\u0001\u0003env\u0006memory\u0002\u0003\u0000��\u0004\u0003\u0004\u0003\u0000\u0001\u0002\u0007T\u0004\u0011__wasm_call_ctors\u0000\u0000\u0018__wasm_apply_data_relocs\u0000\u0000\u000bsortIndexes\u0000\u0001\u0013emscripten_tls_init\u0000\u0002\n�\u0010\u0003\u0003\u0000\u0001\u000b�\u0010\u0004\u0001|\u0003{\u0003\u0003} \u000b \nk!\f\u0002@\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0003 \f!\u0001\u0003@ \u0003 \u0001A\u0002t\"\u0005j \u0002 \u0000 \u0005j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00056\u0002\u0000 \u0005 \n \u0005 \nH\u001b!\n \u0005 \r \u0005 \rJ\u001b!\r \u0001A\u0001j\"\u0001 \u000bG\r\u0000\u000b\f\u0003\u000b \u000f\u0004@ \u000b \fM\r\u0002A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0015j(\u0002\u0000\"\u0016A\u0002tj(\u0002\u0000\"\u0014G\u0004@\u0002 \u0005�\t\u00028 \b \u0014A\u0006tj\"\u000e�\t\u0002\f \u000e*\u0002\u001c� \u0001 \u000e*\u0002,� \u0002 \u000e*\u0002<� \u0003��\u0001 \u0005�\t\u0002( \u000e�\t\u0002\b \u000e*\u0002\u0018� \u0001 \u000e*\u0002(� \u0002 \u000e*\u00028� \u0003��\u0001 \u0005�\t\u0002\b \u000e�\t\u0002\u0000 \u000e*\u0002\u0010� \u0001 \u000e*\u0002 � \u0002 \u000e*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000e�\t\u0002\u0004 \u000e*\u0002\u0014� \u0001 \u000e*\u0002$� \u0002 \u000e*\u00024� \u0003��\u0001��\u0001��\u0001��\u0001\"\u0011�_�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@\"\u0012��\u0001\"\u0013�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e\u0002 \u0013�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u0011 \u000e�\u001c\u0001\u0002 \u0011 \u0011�\r\b\t\n\u000b\f\r\u000e\u000f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�_ \u0012��\u0001\"\u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u001c\u0002\u0002 \u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u001c\u0003!\u0012 \u0014!\u000f\u000b \u0003 \u0015j \u0001 \u0016A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j \u0011�\u001b\u0003j\"\u000e6\u0002\u0000 \u000e \n \n \u000eJ\u001b!\n \u000e \r \r \u000eH\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0003\u000b\u0002 \u0005*\u0002\b��\u0014 \u0005*\u0002\u0018��\"\u0001�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@��\u0001\"\u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e\u0002 \u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0002\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0005A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \u0002�\u0011 \u000e�\u001c\u0001 \u0005�\u001c\u0002!\u0012 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0002j \u0001 \u0000 \u0002j(\u0002\u0000A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j\"\u00026\u0002\u0000 \u0002 \n \u0002 \nH\u001b!\n \u0002 \r \u0002 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \f!\u0001\u0003@ \u0003 \u0001A\u0002t\"\u0005j\u0002 \u0002 \u0000 \u0005j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0001A\u0001j\"\u0001 \u000bG\r\u0000\u000b\f\u0002\u000b \u000fE\u0004@ \u000b \fM\r\u0001 \u0005*\u0002(!\u0017 \u0005*\u0002\u0018!\u0018 \u0005*\u0002\b!\u0019A����\u0007!\nA����x!\r \f!\u0005\u0003@\u0002 \u0017 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\b� \u0019 \u0002*\u0002\u0000� \u0018 \u0002*\u0002\u0004����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e \u0003 \u0007j \u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000b \fM\r\u0000A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0014j(\u0002\u0000A\u0002t\"\u0015j(\u0002\u0000\"\u000eG\u0004@ \u0005�\t\u00028 \b \u000eA\u0006tj\"\u000f�\t\u0002\f \u000f*\u0002\u001c� \u0001 \u000f*\u0002,� \u0002 \u000f*\u0002<� \u0003��\u0001 \u0005�\t\u0002( \u000f�\t\u0002\b \u000f*\u0002\u0018� \u0001 \u000f*\u0002(� \u0002 \u000f*\u00028� \u0003��\u0001 \u0005�\t\u0002\b \u000f�\t\u0002\u0000 \u000f*\u0002\u0010� \u0001 \u000f*\u0002 � \u0002 \u000f*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000f�\t\u0002\u0004 \u000f*\u0002\u0014� \u0001 \u000f*\u0002$� \u0002 \u000f*\u00024� \u0003��\u0001��\u0001��\u0001��\u0001!\u0011 \u000e!\u000f\u000b \u0003 \u0014j\u0002 \u0011�\u001f\u0003 \u0001 \u0015A\u0002t\"\u000eA\frj*\u0002\u0000� \u0011�\u001f\u0002 \u0001 \u000eA\brj*\u0002\u0000� \u0011�\u001f\u0000 \u0001 \u000ej*\u0002\u0000� \u0011�\u001f\u0001 \u0001 \u000eA\u0004rj*\u0002\u0000�����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000bA����x!\rA����\u0007!\n\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \n���!\u0017 \f!\r\u0003@\u0002 \u0017 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \nk��\"\u0018�C\u0000\u0000\u0000O]\u0004@ \u0018�\f\u0001\u000bA����x\u000b!\u000e \u0001 \u000e6\u0002\u0000 \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\n\u0003@ \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \nA\u0001j\"\n \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\n\u0003@ \u0006 \nA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \nA\u0001K!\u0002 \u0001!\n \u0002\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\n\u0003@ \u0006 \u000b \u0004 \u0003 \nA\u0001k\"\nA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \n \fJ\r\u0000\u000b\u000b\u000b\u0004\u0000A\u0000\u000b","\u0000asm\u0001\u0000\u0000\u0000\u0000\u000f\bdylink.0\u0001\u0004\u0000\u0000\u0000\u0000\u0001\u0017\u0002`\u0000\u0000`\u0010\u0000\u0002\u0012\u0001\u0003env\u0006memory\u0002\u0003\u0000��\u0004\u0003\u0003\u0002\u0000\u0001\u0007>\u0003\u0011__wasm_call_ctors\u0000\u0000\u0018__wasm_apply_data_relocs\u0000\u0000\u000bsortIndexes\u0000\u0001\n�\u000f\u0002\u0002\u0000\u000b�\u000f\u0003\u0001|\u0007}\u0006 \u000b \nk!\f\u0002@\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0003 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00016\u0002\u0000 \u0001 \n \u0001 \nH\u001b!\n \u0001 \r \u0001 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0003\u000b \u000f\u0004@ \u000b \fM\r\u0002A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u001aj(\u0002\u0000A\u0002t\"\u001bj(\u0002\u0000\"\u000eG\u0004@\u0002 \u0005*\u00028\"\u0011 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0012 \u000f*\u00028� \u0005*\u0002\b\"\u0013 \u000f*\u00020� \u0005*\u0002\u0018\"\u0014 \u000f*\u00024�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0018\u0002 \u0011 \u000f*\u0002,� \u0012 \u000f*\u0002(� \u0013 \u000f*\u0002 � \u0014 \u000f*\u0002$�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0019\u0002 \u0011 \u000f*\u0002\u001c� \u0012 \u000f*\u0002\u0018� \u0013 \u000f*\u0002\u0010� \u0014 \u000f*\u0002\u0014�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u001c\u0002 \u0011 \u000f*\u0002\f� \u0012 \u000f*\u0002\b� \u0013 \u000f*\u0002\u0000� \u0014 \u000f*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u001d \u000e!\u000f\u000b \u0003 \u001aj \u0001 \u001bA\u0002tj\"\u000e(\u0002\u0004 \u001cl \u000e(\u0002\u0000 \u001dlj \u000e(\u0002\b \u0019lj \u000e(\u0002\f \u0018lj\"\u000e6\u0002\u0000 \u000e \n \n \u000eJ\u001b!\n \u000e \r \r \u000eH\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0003\u000b\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0002\u0002 \u0005*\u0002\u0018�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0007 \u000b \fM\u0002 \u0005*\u0002\b�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000fA����\u0007!\nA����x!\r\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\bj \u0001 \u0000 \bj(\u0002\u0000A\u0004tj\"\b(\u0002\u0004 \u0007l \b(\u0002\u0000 \u000flj \b(\u0002\b \u0002lj\"\b6\u0002\u0000 \b \n \b \nH\u001b!\n \b \r \b \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j\u0002 \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000fE\u0004@ \u000b \fM\r\u0001 \u0005*\u0002(!\u0011 \u0005*\u0002\u0018!\u0012 \u0005*\u0002\b!\u0013A����\u0007!\nA����x!\r \f!\u0005\u0003@\u0002 \u0011 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\b� \u0013 \u0002*\u0002\u0000� \u0012 \u0002*\u0002\u0004����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e \u0003 \u0007j \u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000b \fM\r\u0000A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0018j(\u0002\u0000A\u0002t\"\u0019j(\u0002\u0000\"\u000eG\u0004@ \u0005*\u00028\"\u0011 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0012 \u000f*\u00028� \u0005*\u0002\b\"\u0013 \u000f*\u00020� \u0005*\u0002\u0018\"\u0014 \u000f*\u00024����!\u0015 \u0011 \u000f*\u0002,� \u0012 \u000f*\u0002(� \u0013 \u000f*\u0002 � \u0014 \u000f*\u0002$����!\u0016 \u0011 \u000f*\u0002\u001c� \u0012 \u000f*\u0002\u0018� \u0013 \u000f*\u0002\u0010� \u0014 \u000f*\u0002\u0014����!\u0017 \u0011 \u000f*\u0002\f� \u0012 \u000f*\u0002\b� \u0013 \u000f*\u0002\u0000� \u0014 \u000f*\u0002\u0004����!\u0011 \u000e!\u000f\u000b \u0003 \u0018j\u0002 \u0015 \u0001 \u0019A\u0002tj\"\u000e*\u0002\f� \u0016 \u000e*\u0002\b� \u0011 \u000e*\u0002\u0000� \u0017 \u000e*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000bA����x!\rA����\u0007!\n\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \n���!\u0011 \f!\r\u0003@\u0002 \u0011 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \nk��\"\u0012�C\u0000\u0000\u0000O]\u0004@ \u0012�\f\u0001\u000bA����x\u000b!\u000e \u0001 \u000e6\u0002\u0000 \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\n\u0003@ \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \nA\u0001j\"\n \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\n\u0003@ \u0006 \nA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \nA\u0001K \u0001!\n\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\n\u0003@ \u0006 \u000b \u0004 \u0003 \nA\u0001k\"\nA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \n \fJ\r\u0000\u000b\u000b\u000b","import SorterWasm from './sorter.wasm';\r\nimport SorterWasmNoSIMD from './sorter_no_simd.wasm';\r\nimport SorterWasmNonShared from './sorter_non_shared.wasm';\r\nimport SorterWasmNoSIMDNonShared from './sorter_no_simd_non_shared.wasm';\r\nimport { isIOS, getIOSSemever } from '../Util.js';\r\nimport { Constants } from '../Constants.js';\r\n\r\nfunction sortWorker(self) {\r\n\r\n    let wasmInstance;\r\n    let wasmMemory;\r\n    let useSharedMemory;\r\n    let integerBasedSort;\r\n    let dynamicMode;\r\n    let splatCount;\r\n    let indexesToSortOffset;\r\n    let sortedIndexesOffset;\r\n    let sceneIndexesOffset;\r\n    let transformsOffset;\r\n    let precomputedDistancesOffset;\r\n    let mappedDistancesOffset;\r\n    let frequenciesOffset;\r\n    let centersOffset;\r\n    let modelViewProjOffset;\r\n    let countsZero;\r\n    let sortedIndexesOut;\r\n\r\n    let Constants;\r\n\r\n    function sort(splatSortCount, splatRenderCount, modelViewProj,\r\n                  usePrecomputedDistances, copyIndexesToSort, copyPrecomputedDistances, copyTransforms) {\r\n        const sortStartTime = performance.now();\r\n\r\n        if (!useSharedMemory) {\r\n            const indexesToSort = new Uint32Array(wasmMemory, indexesToSortOffset, copyIndexesToSort.byteLength / Constants.BytesPerInt);\r\n            indexesToSort.set(copyIndexesToSort);\r\n            const transforms = new Float32Array(wasmMemory, transformsOffset, copyTransforms.byteLength / Constants.BytesPerFloat);\r\n            transforms.set(copyTransforms);\r\n            if (usePrecomputedDistances) {\r\n                let precomputedDistances;\r\n                if (integerBasedSort) {\r\n                    precomputedDistances = new Int32Array(wasmMemory, precomputedDistancesOffset,\r\n                                                          copyPrecomputedDistances.byteLength / Constants.BytesPerInt);\r\n                } else {\r\n                    precomputedDistances = new Float32Array(wasmMemory, precomputedDistancesOffset,\r\n                                                            copyPrecomputedDistances.byteLength / Constants.BytesPerFloat);\r\n                }\r\n                precomputedDistances.set(copyPrecomputedDistances);\r\n            }\r\n        }\r\n\r\n        if (!countsZero) countsZero = new Uint32Array(Constants.DepthMapRange);\r\n        new Float32Array(wasmMemory, modelViewProjOffset, 16).set(modelViewProj);\r\n        new Uint32Array(wasmMemory, frequenciesOffset, Constants.DepthMapRange).set(countsZero);\r\n        wasmInstance.exports.sortIndexes(indexesToSortOffset, centersOffset, precomputedDistancesOffset,\r\n                                         mappedDistancesOffset, frequenciesOffset, modelViewProjOffset,\r\n                                         sortedIndexesOffset, sceneIndexesOffset, transformsOffset, Constants.DepthMapRange,\r\n                                         splatSortCount, splatRenderCount, splatCount, usePrecomputedDistances, integerBasedSort,\r\n                                         dynamicMode);\r\n\r\n        const sortMessage = {\r\n            'sortDone': true,\r\n            'splatSortCount': splatSortCount,\r\n            'splatRenderCount': splatRenderCount,\r\n            'sortTime': 0\r\n        };\r\n        if (!useSharedMemory) {\r\n            const sortedIndexes = new Uint32Array(wasmMemory, sortedIndexesOffset, splatRenderCount);\r\n            if (!sortedIndexesOut || sortedIndexesOut.length < splatRenderCount) {\r\n                sortedIndexesOut = new Uint32Array(splatRenderCount);\r\n            }\r\n            sortedIndexesOut.set(sortedIndexes);\r\n            sortMessage.sortedIndexes = sortedIndexesOut;\r\n        }\r\n        const sortEndTime = performance.now();\r\n\r\n        sortMessage.sortTime = sortEndTime - sortStartTime;\r\n\r\n        self.postMessage(sortMessage);\r\n    }\r\n\r\n    self.onmessage = (e) => {\r\n        if (e.data.centers) {\r\n            centers = e.data.centers;\r\n            sceneIndexes = e.data.sceneIndexes;\r\n            if (integerBasedSort) {\r\n                new Int32Array(wasmMemory, centersOffset + e.data.range.from * Constants.BytesPerInt * 4,\r\n                               e.data.range.count * 4).set(new Int32Array(centers));\r\n            } else {\r\n                new Float32Array(wasmMemory, centersOffset + e.data.range.from * Constants.BytesPerFloat * 4,\r\n                                 e.data.range.count * 4).set(new Float32Array(centers));\r\n            }\r\n            if (dynamicMode) {\r\n                new Uint32Array(wasmMemory, sceneIndexesOffset + e.data.range.from * 4,\r\n                                e.data.range.count).set(new Uint32Array(sceneIndexes));\r\n            }\r\n            self.postMessage({\r\n                'centerDataSet': true,\r\n            });\r\n        } else if (e.data.sort) {\r\n            const renderCount = e.data.sort.splatRenderCount || 0;\r\n            const sortCount = e.data.sort.splatSortCount || 0;\r\n            const usePrecomputedDistances = e.data.sort.usePrecomputedDistances;\r\n\r\n            let copyIndexesToSort;\r\n            let copyPrecomputedDistances;\r\n            let copyTransforms;\r\n            if (!useSharedMemory) {\r\n                copyIndexesToSort = e.data.sort.indexesToSort;\r\n                copyTransforms = e.data.sort.transforms;\r\n                if (usePrecomputedDistances) copyPrecomputedDistances = e.data.sort.precomputedDistances;\r\n            }\r\n            sort(sortCount, renderCount, e.data.sort.modelViewProj, usePrecomputedDistances,\r\n                 copyIndexesToSort, copyPrecomputedDistances, copyTransforms);\r\n        } else if (e.data.init) {\r\n            // Yep, this is super hacky and gross :(\r\n            Constants = e.data.init.Constants;\r\n\r\n            splatCount = e.data.init.splatCount;\r\n            useSharedMemory = e.data.init.useSharedMemory;\r\n            integerBasedSort = e.data.init.integerBasedSort;\r\n            dynamicMode = e.data.init.dynamicMode;\r\n\r\n            const CENTERS_BYTES_PER_ENTRY = integerBasedSort ? (Constants.BytesPerInt * 4) : (Constants.BytesPerFloat * 4);\r\n\r\n            const sorterWasmBytes = new Uint8Array(e.data.init.sorterWasmBytes);\r\n\r\n            const matrixSize = 16 * Constants.BytesPerFloat;\r\n            const memoryRequiredForIndexesToSort = splatCount * Constants.BytesPerInt;\r\n            const memoryRequiredForCenters = splatCount * CENTERS_BYTES_PER_ENTRY;\r\n            const memoryRequiredForModelViewProjectionMatrix = matrixSize;\r\n            const memoryRequiredForPrecomputedDistances = integerBasedSort ?\r\n                                                          (splatCount * Constants.BytesPerInt) : (splatCount * Constants.BytesPerFloat);\r\n            const memoryRequiredForMappedDistances = splatCount * Constants.BytesPerInt;\r\n            const memoryRequiredForSortedIndexes = splatCount * Constants.BytesPerInt;\r\n            const memoryRequiredForIntermediateSortBuffers = Constants.DepthMapRange * Constants.BytesPerInt * 2;\r\n            const memoryRequiredforTransformIndexes = dynamicMode ? (splatCount * Constants.BytesPerInt) : 0;\r\n            const memoryRequiredforTransforms = dynamicMode ? (Constants.MaxScenes * matrixSize) : 0;\r\n            const extraMemory = Constants.MemoryPageSize * 32;\r\n\r\n            const totalRequiredMemory = memoryRequiredForIndexesToSort +\r\n                                        memoryRequiredForCenters +\r\n                                        memoryRequiredForModelViewProjectionMatrix +\r\n                                        memoryRequiredForPrecomputedDistances +\r\n                                        memoryRequiredForMappedDistances +\r\n                                        memoryRequiredForIntermediateSortBuffers +\r\n                                        memoryRequiredForSortedIndexes +\r\n                                        memoryRequiredforTransformIndexes +\r\n                                        memoryRequiredforTransforms +\r\n                                        extraMemory;\r\n            const totalPagesRequired = Math.floor(totalRequiredMemory / Constants.MemoryPageSize ) + 1;\r\n            const sorterWasmImport = {\r\n                module: {},\r\n                env: {\r\n                    memory: new WebAssembly.Memory({\r\n                        initial: totalPagesRequired,\r\n                        maximum: totalPagesRequired,\r\n                        shared: true,\r\n                    }),\r\n                }\r\n            };\r\n            WebAssembly.compile(sorterWasmBytes)\r\n            .then((wasmModule) => {\r\n                return WebAssembly.instantiate(wasmModule, sorterWasmImport);\r\n            })\r\n            .then((instance) => {\r\n                wasmInstance = instance;\r\n                indexesToSortOffset = 0;\r\n                centersOffset = indexesToSortOffset + memoryRequiredForIndexesToSort;\r\n                modelViewProjOffset = centersOffset + memoryRequiredForCenters;\r\n                precomputedDistancesOffset = modelViewProjOffset + memoryRequiredForModelViewProjectionMatrix;\r\n                mappedDistancesOffset = precomputedDistancesOffset + memoryRequiredForPrecomputedDistances;\r\n                frequenciesOffset = mappedDistancesOffset + memoryRequiredForMappedDistances;\r\n                sortedIndexesOffset = frequenciesOffset + memoryRequiredForIntermediateSortBuffers;\r\n                sceneIndexesOffset = sortedIndexesOffset + memoryRequiredForSortedIndexes;\r\n                transformsOffset = sceneIndexesOffset + memoryRequiredforTransformIndexes;\r\n                wasmMemory = sorterWasmImport.env.memory.buffer;\r\n                if (useSharedMemory) {\r\n                    self.postMessage({\r\n                        'sortSetupPhase1Complete': true,\r\n                        'indexesToSortBuffer': wasmMemory,\r\n                        'indexesToSortOffset': indexesToSortOffset,\r\n                        'sortedIndexesBuffer': wasmMemory,\r\n                        'sortedIndexesOffset': sortedIndexesOffset,\r\n                        'precomputedDistancesBuffer': wasmMemory,\r\n                        'precomputedDistancesOffset': precomputedDistancesOffset,\r\n                        'transformsBuffer': wasmMemory,\r\n                        'transformsOffset': transformsOffset\r\n                    });\r\n                } else {\r\n                    self.postMessage({\r\n                        'sortSetupPhase1Complete': true\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    };\r\n}\r\n\r\nexport function createSortWorker(splatCount, useSharedMemory, enableSIMDInSort, integerBasedSort, dynamicMode) {\r\n    const worker = new Worker(\r\n        URL.createObjectURL(\r\n            new Blob(['(', sortWorker.toString(), ')(self)'], {\r\n                type: 'application/javascript',\r\n            }),\r\n        ),\r\n    );\r\n\r\n    let sourceWasm = SorterWasm;\r\n\r\n    // iOS makes choosing the right WebAssembly configuration tricky :(\r\n    let iOSSemVer = isIOS() ? getIOSSemever() : null;\r\n    if (!enableSIMDInSort && !useSharedMemory) {\r\n        sourceWasm = SorterWasmNoSIMD;\r\n        if (iOSSemVer && iOSSemVer.major < 16) {\r\n            sourceWasm = SorterWasmNoSIMDNonShared;\r\n        }\r\n    } else if (!enableSIMDInSort) {\r\n        sourceWasm = SorterWasmNoSIMD;\r\n    } else if (!useSharedMemory) {\r\n        if (iOSSemVer && iOSSemVer.major < 16) {\r\n            sourceWasm = SorterWasmNonShared;\r\n        }\r\n    }\r\n\r\n    const sorterWasmBinaryString = atob(sourceWasm);\r\n    const sorterWasmBytes = new Uint8Array(sorterWasmBinaryString.length);\r\n    for (let i = 0; i < sorterWasmBinaryString.length; i++) {\r\n        sorterWasmBytes[i] = sorterWasmBinaryString.charCodeAt(i);\r\n    }\r\n\r\n    worker.postMessage({\r\n        'init': {\r\n            'sorterWasmBytes': sorterWasmBytes.buffer,\r\n            'splatCount': splatCount,\r\n            'useSharedMemory': useSharedMemory,\r\n            'integerBasedSort': integerBasedSort,\r\n            'dynamicMode': dynamicMode,\r\n            // Super hacky\r\n            'Constants': {\r\n                'BytesPerFloat': Constants.BytesPerFloat,\r\n                'BytesPerInt': Constants.BytesPerInt,\r\n                'DepthMapRange': Constants.DepthMapRange,\r\n                'MemoryPageSize': Constants.MemoryPageSize,\r\n                'MaxScenes': Constants.MaxScenes\r\n            }\r\n        }\r\n    });\r\n    return worker;\r\n}\r\n","export const WebXRMode = {\r\n    None: 0,\r\n    VR: 1,\r\n    AR: 2\r\n};\r\n","/*\r\nCopyright © 2010-2024 three.js authors & Mark Kellogg\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n*/\r\n\r\nexport class VRButton {\r\n\r\n    static createButton( renderer ) {\r\n\r\n        const button = document.createElement( 'button' );\r\n\r\n        function showEnterVR( /* device */ ) {\r\n\r\n            let currentSession = null;\r\n\r\n            async function onSessionStarted( session ) {\r\n\r\n                session.addEventListener( 'end', onSessionEnded );\r\n\r\n                await renderer.xr.setSession( session );\r\n                button.textContent = 'EXIT VR';\r\n\r\n                currentSession = session;\r\n\r\n            }\r\n\r\n            function onSessionEnded( /* event */ ) {\r\n\r\n                currentSession.removeEventListener( 'end', onSessionEnded );\r\n\r\n                button.textContent = 'ENTER VR';\r\n\r\n                currentSession = null;\r\n\r\n            }\r\n\r\n            //\r\n\r\n            button.style.display = '';\r\n\r\n            button.style.cursor = 'pointer';\r\n            button.style.left = 'calc(50% - 50px)';\r\n            button.style.width = '100px';\r\n\r\n            button.textContent = 'ENTER VR';\r\n\r\n            // WebXR's requestReferenceSpace only works if the corresponding feature\r\n            // was requested at session creation time. For simplicity, just ask for\r\n            // the interesting ones as optional features, but be aware that the\r\n            // requestReferenceSpace call will fail if it turns out to be unavailable.\r\n            // ('local' is always available for immersive sessions and doesn't need to\r\n            // be requested separately.)\r\n\r\n            const sessionInit = { optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking', 'layers'] };\r\n\r\n            button.onmouseenter = function() {\r\n\r\n                button.style.opacity = '1.0';\r\n\r\n            };\r\n\r\n            button.onmouseleave = function() {\r\n\r\n                button.style.opacity = '0.5';\r\n\r\n            };\r\n\r\n            button.onclick = function() {\r\n\r\n                if ( currentSession === null ) {\r\n\r\n                    navigator.xr.requestSession( 'immersive-vr', sessionInit ).then( onSessionStarted );\r\n\r\n                } else {\r\n\r\n                    currentSession.end();\r\n\r\n                    if ( navigator.xr.offerSession !== undefined ) {\r\n\r\n                        navigator.xr.offerSession( 'immersive-vr', sessionInit )\r\n                            .then( onSessionStarted )\r\n                            .catch( ( err ) => {\r\n\r\n                                console.warn( err );\r\n\r\n                            } );\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            };\r\n\r\n            if ( navigator.xr.offerSession !== undefined ) {\r\n\r\n                navigator.xr.offerSession( 'immersive-vr', sessionInit )\r\n                    .then( onSessionStarted )\r\n                    .catch( ( err ) => {\r\n\r\n                        console.warn( err );\r\n\r\n                    } );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function disableButton() {\r\n\r\n            button.style.display = '';\r\n\r\n            button.style.cursor = 'auto';\r\n            button.style.left = 'calc(50% - 75px)';\r\n            button.style.width = '150px';\r\n\r\n            button.onmouseenter = null;\r\n            button.onmouseleave = null;\r\n\r\n            button.onclick = null;\r\n\r\n        }\r\n\r\n        function showWebXRNotFound() {\r\n\r\n            disableButton();\r\n\r\n            button.textContent = 'VR NOT SUPPORTED';\r\n\r\n        }\r\n\r\n        function showVRNotAllowed( exception ) {\r\n\r\n            disableButton();\r\n\r\n            console.warn( 'Exception when trying to call xr.isSessionSupported', exception );\r\n\r\n            button.textContent = 'VR NOT ALLOWED';\r\n\r\n        }\r\n\r\n        function stylizeElement( element ) {\r\n\r\n            element.style.position = 'absolute';\r\n            element.style.bottom = '20px';\r\n            element.style.padding = '12px 6px';\r\n            element.style.border = '1px solid #fff';\r\n            element.style.borderRadius = '4px';\r\n            element.style.background = 'rgba(0,0,0,0.1)';\r\n            element.style.color = '#fff';\r\n            element.style.font = 'normal 13px sans-serif';\r\n            element.style.textAlign = 'center';\r\n            element.style.opacity = '0.5';\r\n            element.style.outline = 'none';\r\n            element.style.zIndex = '999';\r\n\r\n        }\r\n\r\n        if ( 'xr' in navigator ) {\r\n\r\n            button.id = 'VRButton';\r\n            button.style.display = 'none';\r\n\r\n            stylizeElement( button );\r\n\r\n            navigator.xr.isSessionSupported( 'immersive-vr' ).then( function( supported ) {\r\n\r\n                supported ? showEnterVR() : showWebXRNotFound();\r\n\r\n                if ( supported && VRButton.xrSessionIsGranted ) {\r\n\r\n                    button.click();\r\n\r\n                }\r\n\r\n            } ).catch( showVRNotAllowed );\r\n\r\n            return button;\r\n\r\n        } else {\r\n\r\n            const message = document.createElement( 'a' );\r\n\r\n            if ( window.isSecureContext === false ) {\r\n\r\n                message.href = document.location.href.replace( /^http:/, 'https:' );\r\n                message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\r\n\r\n            } else {\r\n\r\n                message.href = 'https://immersiveweb.dev/';\r\n                message.innerHTML = 'WEBXR NOT AVAILABLE';\r\n\r\n            }\r\n\r\n            message.style.left = 'calc(50% - 90px)';\r\n            message.style.width = '180px';\r\n            message.style.textDecoration = 'none';\r\n\r\n            stylizeElement( message );\r\n\r\n            return message;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    static registerSessionGrantedListener() {\r\n\r\n        if ( typeof navigator !== 'undefined' && 'xr' in navigator ) {\r\n\r\n            // WebXRViewer (based on Firefox) has a bug where addEventListener\r\n            // throws a silent exception and aborts execution entirely.\r\n            if ( /WebXRViewer\\//i.test( navigator.userAgent ) ) return;\r\n\r\n            navigator.xr.addEventListener( 'sessiongranted', () => {\r\n\r\n                VRButton.xrSessionIsGranted = true;\r\n\r\n            } );\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nVRButton.xrSessionIsGranted = false;\r\nVRButton.registerSessionGrantedListener();\r\n","/*\r\nCopyright © 2010-2024 three.js authors & Mark Kellogg\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n*/\r\n\r\nexport class ARButton {\r\n\r\n    static createButton( renderer, sessionInit = {} ) {\r\n\r\n        const button = document.createElement( 'button' );\r\n\r\n        function showStartAR( /* device */ ) {\r\n\r\n            if ( sessionInit.domOverlay === undefined ) {\r\n\r\n                const overlay = document.createElement( 'div' );\r\n                overlay.style.display = 'none';\r\n                document.body.appendChild( overlay );\r\n\r\n                const svg = document.createElementNS( 'http://www.w3.org/2000/svg', 'svg' );\r\n                svg.setAttribute( 'width', 38 );\r\n                svg.setAttribute( 'height', 38 );\r\n                svg.style.position = 'absolute';\r\n                svg.style.right = '20px';\r\n                svg.style.top = '20px';\r\n                svg.addEventListener( 'click', function() {\r\n\r\n                    currentSession.end();\r\n\r\n                } );\r\n                overlay.appendChild( svg );\r\n\r\n                const path = document.createElementNS( 'http://www.w3.org/2000/svg', 'path' );\r\n                path.setAttribute( 'd', 'M 12,12 L 28,28 M 28,12 12,28' );\r\n                path.setAttribute( 'stroke', '#fff' );\r\n                path.setAttribute( 'stroke-width', 2 );\r\n                svg.appendChild( path );\r\n\r\n                if ( sessionInit.optionalFeatures === undefined ) {\r\n\r\n                    sessionInit.optionalFeatures = [];\r\n\r\n                }\r\n\r\n                sessionInit.optionalFeatures.push( 'dom-overlay' );\r\n                sessionInit.domOverlay = { root: overlay };\r\n\r\n            }\r\n\r\n            //\r\n\r\n            let currentSession = null;\r\n\r\n            async function onSessionStarted( session ) {\r\n\r\n                session.addEventListener( 'end', onSessionEnded );\r\n\r\n                renderer.xr.setReferenceSpaceType( 'local' );\r\n\r\n                await renderer.xr.setSession( session );\r\n\r\n                button.textContent = 'STOP AR';\r\n                sessionInit.domOverlay.root.style.display = '';\r\n\r\n                currentSession = session;\r\n\r\n            }\r\n\r\n            function onSessionEnded( /* event */ ) {\r\n\r\n                currentSession.removeEventListener( 'end', onSessionEnded );\r\n\r\n                button.textContent = 'START AR';\r\n                sessionInit.domOverlay.root.style.display = 'none';\r\n\r\n                currentSession = null;\r\n\r\n            }\r\n\r\n            //\r\n\r\n            button.style.display = '';\r\n\r\n            button.style.cursor = 'pointer';\r\n            button.style.left = 'calc(50% - 50px)';\r\n            button.style.width = '100px';\r\n\r\n            button.textContent = 'START AR';\r\n\r\n            button.onmouseenter = function() {\r\n\r\n                button.style.opacity = '1.0';\r\n\r\n            };\r\n\r\n            button.onmouseleave = function() {\r\n\r\n                button.style.opacity = '0.5';\r\n\r\n            };\r\n\r\n            button.onclick = function() {\r\n\r\n                if ( currentSession === null ) {\r\n\r\n                    navigator.xr.requestSession( 'immersive-ar', sessionInit ).then( onSessionStarted );\r\n\r\n                } else {\r\n\r\n                    currentSession.end();\r\n\r\n                    if ( navigator.xr.offerSession !== undefined ) {\r\n\r\n                        navigator.xr.offerSession( 'immersive-ar', sessionInit )\r\n                            .then( onSessionStarted )\r\n                            .catch( ( err ) => {\r\n\r\n                                console.warn( err );\r\n\r\n                            } );\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            };\r\n\r\n            if ( navigator.xr.offerSession !== undefined ) {\r\n\r\n                navigator.xr.offerSession( 'immersive-ar', sessionInit )\r\n                    .then( onSessionStarted )\r\n                    .catch( ( err ) => {\r\n\r\n                        console.warn( err );\r\n\r\n                    } );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function disableButton() {\r\n\r\n            button.style.display = '';\r\n\r\n            button.style.cursor = 'auto';\r\n            button.style.left = 'calc(50% - 75px)';\r\n            button.style.width = '150px';\r\n\r\n            button.onmouseenter = null;\r\n            button.onmouseleave = null;\r\n\r\n            button.onclick = null;\r\n\r\n        }\r\n\r\n        function showARNotSupported() {\r\n\r\n            disableButton();\r\n\r\n            button.textContent = 'AR NOT SUPPORTED';\r\n\r\n        }\r\n\r\n        function showARNotAllowed( exception ) {\r\n\r\n            disableButton();\r\n\r\n            console.warn( 'Exception when trying to call xr.isSessionSupported', exception );\r\n\r\n            button.textContent = 'AR NOT ALLOWED';\r\n\r\n        }\r\n\r\n        function stylizeElement( element ) {\r\n\r\n            element.style.position = 'absolute';\r\n            element.style.bottom = '20px';\r\n            element.style.padding = '12px 6px';\r\n            element.style.border = '1px solid #fff';\r\n            element.style.borderRadius = '4px';\r\n            element.style.background = 'rgba(0,0,0,0.1)';\r\n            element.style.color = '#fff';\r\n            element.style.font = 'normal 13px sans-serif';\r\n            element.style.textAlign = 'center';\r\n            element.style.opacity = '0.5';\r\n            element.style.outline = 'none';\r\n            element.style.zIndex = '999';\r\n\r\n        }\r\n\r\n        if ( 'xr' in navigator ) {\r\n\r\n            button.id = 'ARButton';\r\n            button.style.display = 'none';\r\n\r\n            stylizeElement( button );\r\n\r\n            navigator.xr.isSessionSupported( 'immersive-ar' ).then( function( supported ) {\r\n\r\n                supported ? showStartAR() : showARNotSupported();\r\n\r\n            } ).catch( showARNotAllowed );\r\n\r\n            return button;\r\n\r\n        } else {\r\n\r\n            const message = document.createElement( 'a' );\r\n\r\n            if ( window.isSecureContext === false ) {\r\n\r\n                message.href = document.location.href.replace( /^http:/, 'https:' );\r\n                message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\r\n\r\n            } else {\r\n\r\n                message.href = 'https://immersiveweb.dev/';\r\n                message.innerHTML = 'WEBXR NOT AVAILABLE';\r\n\r\n            }\r\n\r\n            message.style.left = 'calc(50% - 90px)';\r\n            message.style.width = '180px';\r\n            message.style.textDecoration = 'none';\r\n\r\n            stylizeElement( message );\r\n\r\n            return message;\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n","export const RenderMode = {\r\n    Always: 0,\r\n    OnChange: 1,\r\n    Never: 2\r\n};\r\n","import * as THREE from 'three';\r\nimport { OrbitControls } from './OrbitControls.js';\r\nimport { PlyLoader } from './loaders/ply/PlyLoader.js';\r\nimport { SplatLoader } from './loaders/splat/SplatLoader.js';\r\nimport { KSplatLoader } from './loaders/ksplat/KSplatLoader.js';\r\nimport { sceneFormatFromPath } from './loaders/Utils.js';\r\nimport { LoadingSpinner } from './ui/LoadingSpinner.js';\r\nimport { LoadingProgressBar } from './ui/LoadingProgressBar.js';\r\nimport { InfoPanel } from './ui/InfoPanel.js';\r\nimport { SceneHelper } from './SceneHelper.js';\r\nimport { Raycaster } from './raycaster/Raycaster.js';\r\nimport { SplatMesh } from './splatmesh/SplatMesh.js';\r\nimport { createSortWorker } from './worker/SortWorker.js';\r\nimport { Constants } from './Constants.js';\r\nimport { getCurrentTime, isIOS, getIOSSemever } from './Util.js';\r\nimport { AbortablePromise, AbortedPromiseError } from './AbortablePromise.js';\r\nimport { SceneFormat } from './loaders/SceneFormat.js';\r\nimport { WebXRMode } from './webxr/WebXRMode.js';\r\nimport { VRButton } from './webxr/VRButton.js';\r\nimport { ARButton } from './webxr/ARButton.js';\r\nimport { delayedExecute, nativePromiseWithExtractedComponents, abortablePromiseWithExtractedComponents } from './Util.js';\r\nimport { LoaderStatus } from './loaders/LoaderStatus.js';\r\nimport { RenderMode } from './RenderMode.js';\r\nimport { LogLevel } from './LogLevel.js';\r\nimport { SceneRevealMode } from './SceneRevealMode.js';\r\n\r\nconst THREE_CAMERA_FOV = 50;\r\nconst MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT = .75;\r\nconst MIN_SPLAT_COUNT_TO_SHOW_SPLAT_TREE_LOADING_SPINNER = 1500000;\r\nconst FOCUS_MARKER_FADE_IN_SPEED = 10.0;\r\nconst FOCUS_MARKER_FADE_OUT_SPEED = 2.5;\r\nconst CONSECUTIVE_RENDERED_FRAMES_FOR_FPS_CALCULATION = 60;\r\n\r\n/**\r\n * Viewer: Manages the rendering of splat scenes. Manages an instance of SplatMesh as well as a web worker\r\n * that performs the sort for its splats.\r\n */\r\nexport class Viewer {\r\n\r\n    constructor(options = {}) {\r\n\r\n        // The natural 'up' vector for viewing the scene (only has an effect when used with orbit controls and\r\n        // when the viewer uses its own camera).\r\n        if (!options.cameraUp) options.cameraUp = [0, 1, 0];\r\n        this.cameraUp = new THREE.Vector3().fromArray(options.cameraUp);\r\n\r\n        // The camera's initial position (only used when the viewer uses its own camera).\r\n        if (!options.initialCameraPosition) options.initialCameraPosition = [0, 10, 15];\r\n        this.initialCameraPosition = new THREE.Vector3().fromArray(options.initialCameraPosition);\r\n\r\n        // The initial focal point of the camera and center of the camera's orbit (only used when the viewer uses its own camera).\r\n        if (!options.initialCameraLookAt) options.initialCameraLookAt = [0, 0, 0];\r\n        this.initialCameraLookAt = new THREE.Vector3().fromArray(options.initialCameraLookAt);\r\n\r\n        // 'dropInMode' is a flag that is used internally to support the usage of the viewer as a Three.js scene object\r\n        this.dropInMode = options.dropInMode || false;\r\n\r\n        // If 'selfDrivenMode' is true, the viewer manages its own update/animation loop via requestAnimationFrame()\r\n        if (options.selfDrivenMode === undefined || options.selfDrivenMode === null) options.selfDrivenMode = true;\r\n        this.selfDrivenMode = options.selfDrivenMode && !this.dropInMode;\r\n        this.selfDrivenUpdateFunc = this.selfDrivenUpdate.bind(this);\r\n\r\n        // If 'useBuiltInControls' is true, the viewer will create its own instance of OrbitControls and attach to the camera\r\n        if (options.useBuiltInControls === undefined) options.useBuiltInControls = true;\r\n        this.useBuiltInControls = options.useBuiltInControls;\r\n\r\n        // parent element of the Three.js renderer canvas\r\n        this.rootElement = options.rootElement;\r\n\r\n        // Tells the viewer to pretend the device pixel ratio is 1, which can boost performance on devices where it is larger,\r\n        // at a small cost to visual quality\r\n        this.ignoreDevicePixelRatio = options.ignoreDevicePixelRatio || false;\r\n        this.devicePixelRatio = this.ignoreDevicePixelRatio ? 1 : window.devicePixelRatio;\r\n\r\n        // Tells the viewer to use 16-bit floating point values when storing splat covariance data in textures, instead of 32-bit\r\n        this.halfPrecisionCovariancesOnGPU = options.halfPrecisionCovariancesOnGPU || false;\r\n\r\n        // If 'threeScene' is valid, it will be rendered by the viewer along with the splat mesh\r\n        this.threeScene = options.threeScene;\r\n        // Allows for usage of an external Three.js renderer\r\n        this.renderer = options.renderer;\r\n        // Allows for usage of an external Three.js camera\r\n        this.camera = options.camera;\r\n\r\n        // If 'gpuAcceleratedSort' is true, a partially GPU-accelerated approach to sorting splats will be used.\r\n        // Currently this means pre-computing splat distances from the camera on the GPU\r\n        this.gpuAcceleratedSort = options.gpuAcceleratedSort || false;\r\n\r\n        // if 'integerBasedSort' is true, the integer version of splat centers as well as other values used to calculate\r\n        // splat distances are used instead of the float version. This speeds up computation, but introduces the possibility of\r\n        // overflow in larger scenes.\r\n        if (options.integerBasedSort === undefined || options.integerBasedSort === null) {\r\n            options.integerBasedSort = true;\r\n        }\r\n        this.integerBasedSort = options.integerBasedSort;\r\n\r\n        // If 'sharedMemoryForWorkers' is true, a SharedArrayBuffer will be used to communicate with web workers. This method\r\n        // is faster than copying memory to or from web workers, but comes with security implications as outlined here:\r\n        // https://web.dev/articles/cross-origin-isolation-guide\r\n        // If enabled, it requires specific CORS headers to be present in the response from the server that is sent when\r\n        // loading the application. More information is available in the README.\r\n        if (options.sharedMemoryForWorkers === undefined || options.sharedMemoryForWorkers === null) options.sharedMemoryForWorkers = true;\r\n        this.sharedMemoryForWorkers = options.sharedMemoryForWorkers;\r\n\r\n        // if 'dynamicScene' is true, it tells the viewer to assume scene elements are not stationary or that the number of splats in the\r\n        // scene may change. This prevents optimizations that depend on a static scene from being made. Additionally, if 'dynamicScene' is\r\n        // true it tells the splat mesh to not apply scene tranforms to splat data that is returned by functions like\r\n        // SplatMesh.getSplatCenter() by default.\r\n        this.dynamicScene = !!options.dynamicScene;\r\n\r\n        // When true, will perform additional steps during rendering to address artifacts caused by the rendering of gaussians at a\r\n        // substantially different resolution than that at which they were rendered during training. This will only work correctly\r\n        // for models that were trained using a process that utilizes this compensation calculation. For more details:\r\n        // https://github.com/nerfstudio-project/gsplat/pull/117\r\n        // https://github.com/graphdeco-inria/gaussian-splatting/issues/294#issuecomment-1772688093\r\n        this.antialiased = options.antialiased || false;\r\n\r\n        this.webXRMode = options.webXRMode || WebXRMode.None;\r\n        if (this.webXRMode !== WebXRMode.None) {\r\n            this.gpuAcceleratedSort = false;\r\n        }\r\n        this.webXRActive = false;\r\n\r\n        // if 'renderMode' is RenderMode.Always, then the viewer will rrender the scene on every update. If it is RenderMode.OnChange,\r\n        // it will only render when something in the scene has changed.\r\n        this.renderMode = options.renderMode || RenderMode.Always;\r\n\r\n        // SceneRevealMode.Default results in a nice, slow fade-in effect for progressively loaded scenes,\r\n        // and a fast fade-in for non progressively loaded scenes.\r\n        // SceneRevealMode.Gradual will force a slow fade-in for all scenes.\r\n        // SceneRevealMode.Instant will force all loaded scene data to be immediately visible.\r\n        this.sceneRevealMode = options.sceneRevealMode || SceneRevealMode.Default;\r\n\r\n        // Hacky, experimental, non-scientific parameter for tweaking focal length related calculations. For scenes with very\r\n        // small gaussians, small details, and small dimensions -- increasing this value can help improve visual quality.\r\n        this.focalAdjustment = options.focalAdjustment || 1.0;\r\n\r\n        // Specify the maximum screen-space splat size, can help deal with large splats that get too unwieldy\r\n        this.maxScreenSpaceSplatSize = options.maxScreenSpaceSplatSize || 1024;\r\n\r\n        // The verbosity of console logging\r\n        this.logLevel = options.logLevel || LogLevel.None;\r\n\r\n        // Degree of spherical harmonics to utilize in rendering splats (assuming the data is present in the splat scene).\r\n        // Valid values are 0 - 3. Default value is 0.\r\n        this.sphericalHarmonicsDegree = options.sphericalHarmonicsDegree || 0;\r\n\r\n        // When true, allows for usage of extra properties and attributes during rendering for effects such as opacity adjustment.\r\n        // Default is false for performance reasons. These properties are separate from transform properties (scale, rotation, position)\r\n        // that are enabled by the 'dynamicScene' parameter.\r\n        this.enableOptionalEffects = options.enableOptionalEffects || false;\r\n\r\n        // Enable the usage of SIMD WebAssembly instructions for the splat sort\r\n        if (options.enableSIMDInSort === undefined || options.enableSIMDInSort === null) options.enableSIMDInSort = true;\r\n        this.enableSIMDInSort = options.enableSIMDInSort;\r\n\r\n        // Level to compress PLY files when loading them for direct rendering (not exporting to .ksplat)\r\n        if (options.plyInMemoryCompressionLevel === undefined || options.plyInMemoryCompressionLevel === null) {\r\n            options.plyInMemoryCompressionLevel = 2;\r\n        }\r\n        this.plyInMemoryCompressionLevel = options.plyInMemoryCompressionLevel;\r\n\r\n        // When true, the intermediate splat data that is the result of decompressing splat bufffer(s) and is used to\r\n        // populate the data textures will be freed. This will reduces memory usage, but if that data needs to be modified\r\n        // it will need to be re-populated from the splat buffer(s). Default is false.\r\n        if (options.freeIntermediateSplatData === undefined || options.freeIntermediateSplatData === null) {\r\n            options.freeIntermediateSplatData = false;\r\n        }\r\n        this.freeIntermediateSplatData = options.freeIntermediateSplatData;\r\n\r\n        // It appears that for certain iOS versions, special actions need to be taken with the\r\n        // usage of SIMD instructions and shared memory\r\n        if (isIOS()) {\r\n            const semver = getIOSSemever();\r\n            if (semver.major < 17) {\r\n                this.enableSIMDInSort = false;\r\n            }\r\n            if (semver.major < 16) {\r\n                this.sharedMemoryForWorkers = false;\r\n            }\r\n        }\r\n\r\n        this.createSplatMesh();\r\n\r\n        this.controls = null;\r\n        this.perspectiveControls = null;\r\n        this.orthographicControls = null;\r\n\r\n        this.orthographicCamera = null;\r\n        this.perspectiveCamera = null;\r\n\r\n        this.showMeshCursor = false;\r\n        this.showControlPlane = false;\r\n        this.showInfo = false;\r\n\r\n        this.sceneHelper = null;\r\n\r\n        this.sortWorker = null;\r\n        this.sortRunning = false;\r\n        this.splatRenderCount = 0;\r\n        this.sortWorkerIndexesToSort = null;\r\n        this.sortWorkerSortedIndexes = null;\r\n        this.sortWorkerPrecomputedDistances = null;\r\n        this.sortWorkerTransforms = null;\r\n        this.runAfterNextSort = [];\r\n\r\n        this.selfDrivenModeRunning = false;\r\n        this.splatRenderReady = false;\r\n\r\n        this.raycaster = new Raycaster();\r\n\r\n        this.infoPanel = null;\r\n\r\n        this.startInOrthographicMode = false;\r\n\r\n        this.currentFPS = 0;\r\n        this.lastSortTime = 0;\r\n        this.consecutiveRenderFrames = 0;\r\n\r\n        this.previousCameraTarget = new THREE.Vector3();\r\n        this.nextCameraTarget = new THREE.Vector3();\r\n\r\n        this.mousePosition = new THREE.Vector2();\r\n        this.mouseDownPosition = new THREE.Vector2();\r\n        this.mouseDownTime = null;\r\n\r\n        this.resizeObserver = null;\r\n        this.mouseMoveListener = null;\r\n        this.mouseDownListener = null;\r\n        this.mouseUpListener = null;\r\n        this.keyDownListener = null;\r\n\r\n        this.sortPromise = null;\r\n        this.sortPromiseResolver = null;\r\n        this.splatSceneDownloadPromises = {};\r\n        this.splatSceneDownloadAndBuildPromise = null;\r\n        this.splatSceneRemovalPromise = null;\r\n\r\n        this.loadingSpinner = new LoadingSpinner(null, this.rootElement || document.body);\r\n        this.loadingSpinner.hide();\r\n        this.loadingProgressBar = new LoadingProgressBar(this.rootElement || document.body);\r\n        this.loadingProgressBar.hide();\r\n        this.infoPanel = new InfoPanel(this.rootElement || document.body);\r\n        this.infoPanel.hide();\r\n\r\n        this.usingExternalCamera = (this.dropInMode || this.camera) ? true : false;\r\n        this.usingExternalRenderer = (this.dropInMode || this.renderer) ? true : false;\r\n\r\n        this.initialized = false;\r\n        this.disposing = false;\r\n        this.disposed = false;\r\n        if (!this.dropInMode) this.init();\r\n    }\r\n\r\n    createSplatMesh() {\r\n        this.splatMesh = new SplatMesh(this.dynamicScene, this.enableOptionalEffects, this.halfPrecisionCovariancesOnGPU,\r\n                                       this.devicePixelRatio, this.gpuAcceleratedSort, this.integerBasedSort, this.antialiased,\r\n                                       this.maxScreenSpaceSplatSize, this.logLevel, this.sphericalHarmonicsDegree);\r\n        this.splatMesh.frustumCulled = false;\r\n    }\r\n\r\n    init() {\r\n\r\n        if (this.initialized) return;\r\n\r\n        if (!this.rootElement) {\r\n            if (!this.usingExternalRenderer) {\r\n                this.rootElement = document.createElement('div');\r\n                this.rootElement.style.width = '100%';\r\n                this.rootElement.style.height = '100%';\r\n                this.rootElement.style.position = 'absolute';\r\n                document.body.appendChild(this.rootElement);\r\n            } else {\r\n                this.rootElement = this.renderer.domElement.parentElement || document.body;\r\n            }\r\n        }\r\n\r\n        this.setupCamera();\r\n        this.setupRenderer();\r\n        this.setupWebXR();\r\n        this.setupControls();\r\n        this.setupEventHandlers();\r\n\r\n        this.threeScene = this.threeScene || new THREE.Scene();\r\n        this.sceneHelper = new SceneHelper(this.threeScene);\r\n        this.sceneHelper.setupMeshCursor();\r\n        this.sceneHelper.setupFocusMarker();\r\n        this.sceneHelper.setupControlPlane();\r\n\r\n        this.loadingProgressBar.setContainer(this.rootElement);\r\n        this.loadingSpinner.setContainer(this.rootElement);\r\n        this.infoPanel.setContainer(this.rootElement);\r\n\r\n        this.initialized = true;\r\n    }\r\n\r\n    setupCamera() {\r\n        if (!this.usingExternalCamera) {\r\n            const renderDimensions = new THREE.Vector2();\r\n            this.getRenderDimensions(renderDimensions);\r\n\r\n            this.perspectiveCamera = new THREE.PerspectiveCamera(THREE_CAMERA_FOV, renderDimensions.x / renderDimensions.y, 0.1, 1000);\r\n            this.orthographicCamera = new THREE.OrthographicCamera(renderDimensions.x / -2, renderDimensions.x / 2,\r\n                                                                   renderDimensions.y / 2, renderDimensions.y / -2, 0.1, 1000 );\r\n            this.camera = this.startInOrthographicMode ? this.orthographicCamera : this.perspectiveCamera;\r\n            this.camera.position.copy(this.initialCameraPosition);\r\n            this.camera.up.copy(this.cameraUp).normalize();\r\n            this.camera.lookAt(this.initialCameraLookAt);\r\n        }\r\n    }\r\n\r\n    setupRenderer() {\r\n        if (!this.usingExternalRenderer) {\r\n            const renderDimensions = new THREE.Vector2();\r\n            this.getRenderDimensions(renderDimensions);\r\n\r\n            this.renderer = new THREE.WebGLRenderer({\r\n                antialias: false,\r\n                precision: 'highp'\r\n            });\r\n            this.renderer.setPixelRatio(this.devicePixelRatio);\r\n            this.renderer.autoClear = true;\r\n            this.renderer.setClearColor(new THREE.Color( 0x000000 ), 0.0);\r\n            this.renderer.setSize(renderDimensions.x, renderDimensions.y);\r\n\r\n            this.resizeObserver = new ResizeObserver(() => {\r\n                this.getRenderDimensions(renderDimensions);\r\n                this.renderer.setSize(renderDimensions.x, renderDimensions.y);\r\n                this.forceRenderNextFrame();\r\n            });\r\n            this.resizeObserver.observe(this.rootElement);\r\n            this.rootElement.appendChild(this.renderer.domElement);\r\n        }\r\n\r\n    }\r\n\r\n    setupWebXR() {\r\n        if (this.webXRMode) {\r\n            if (this.webXRMode === WebXRMode.VR) {\r\n                this.rootElement.appendChild(VRButton.createButton(this.renderer));\r\n            } else if (this.webXRMode === WebXRMode.AR) {\r\n                this.rootElement.appendChild(ARButton.createButton(this.renderer));\r\n            }\r\n            this.renderer.xr.addEventListener('sessionstart', (e) => {\r\n                this.webXRActive = true;\r\n            });\r\n            this.renderer.xr.addEventListener('sessionend', (e) => {\r\n                this.webXRActive = false;\r\n            });\r\n            this.renderer.xr.enabled = true;\r\n            this.camera.position.copy(this.initialCameraPosition);\r\n            this.camera.up.copy(this.cameraUp).normalize();\r\n            this.camera.lookAt(this.initialCameraLookAt);\r\n        }\r\n    }\r\n\r\n    setupControls() {\r\n        if (this.useBuiltInControls && this.webXRMode === WebXRMode.None) {\r\n            if (!this.usingExternalCamera) {\r\n                this.perspectiveControls = new OrbitControls(this.perspectiveCamera, this.renderer.domElement);\r\n                this.orthographicControls = new OrbitControls(this.orthographicCamera, this.renderer.domElement);\r\n            } else {\r\n                if (this.camera.isOrthographicCamera) {\r\n                    this.orthographicControls = new OrbitControls(this.camera, this.renderer.domElement);\r\n                } else {\r\n                    this.perspectiveControls = new OrbitControls(this.camera, this.renderer.domElement);\r\n                }\r\n            }\r\n            for (let controls of [this.perspectiveControls, this.orthographicControls]) {\r\n                if (controls) {\r\n                    controls.listenToKeyEvents(window);\r\n                    controls.rotateSpeed = 0.5;\r\n                    controls.maxPolarAngle = Math.PI * .75;\r\n                    controls.minPolarAngle = 0.1;\r\n                    controls.enableDamping = true;\r\n                    controls.dampingFactor = 0.05;\r\n                    controls.target.copy(this.initialCameraLookAt);\r\n                }\r\n            }\r\n            this.controls = this.camera.isOrthographicCamera ? this.orthographicControls : this.perspectiveControls;\r\n        }\r\n    }\r\n\r\n    setupEventHandlers() {\r\n        if (this.useBuiltInControls && this.webXRMode === WebXRMode.None) {\r\n            this.mouseMoveListener = this.onMouseMove.bind(this);\r\n            this.renderer.domElement.addEventListener('pointermove', this.mouseMoveListener, false);\r\n            this.mouseDownListener = this.onMouseDown.bind(this);\r\n            this.renderer.domElement.addEventListener('pointerdown', this.mouseDownListener, false);\r\n            this.mouseUpListener = this.onMouseUp.bind(this);\r\n            this.renderer.domElement.addEventListener('pointerup', this.mouseUpListener, false);\r\n            this.keyDownListener = this.onKeyDown.bind(this);\r\n            window.addEventListener('keydown', this.keyDownListener, false);\r\n        }\r\n    }\r\n\r\n    removeEventHandlers() {\r\n        if (this.useBuiltInControls) {\r\n            this.renderer.domElement.removeEventListener('pointermove', this.mouseMoveListener);\r\n            this.mouseMoveListener = null;\r\n            this.renderer.domElement.removeEventListener('pointerdown', this.mouseDownListener);\r\n            this.mouseDownListener = null;\r\n            this.renderer.domElement.removeEventListener('pointerup', this.mouseUpListener);\r\n            this.mouseUpListener = null;\r\n            window.removeEventListener('keydown', this.keyDownListener);\r\n            this.keyDownListener = null;\r\n        }\r\n    }\r\n\r\n    setRenderMode(renderMode) {\r\n        this.renderMode = renderMode;\r\n    }\r\n\r\n    onKeyDown = function() {\r\n\r\n        const forward = new THREE.Vector3();\r\n        const tempMatrixLeft = new THREE.Matrix4();\r\n        const tempMatrixRight = new THREE.Matrix4();\r\n\r\n        return function(e) {\r\n            forward.set(0, 0, -1);\r\n            forward.transformDirection(this.camera.matrixWorld);\r\n            tempMatrixLeft.makeRotationAxis(forward, Math.PI / 128);\r\n            tempMatrixRight.makeRotationAxis(forward, -Math.PI / 128);\r\n            switch (e.code) {\r\n                case 'KeyG':\r\n                    this.focalAdjustment += 0.02;\r\n                    this.forceRenderNextFrame();\r\n                break;\r\n                case 'KeyF':\r\n                    this.focalAdjustment -= 0.02;\r\n                    this.forceRenderNextFrame();\r\n                break;\r\n                case 'ArrowLeft':\r\n                    this.camera.up.transformDirection(tempMatrixLeft);\r\n                break;\r\n                case 'ArrowRight':\r\n                    this.camera.up.transformDirection(tempMatrixRight);\r\n                break;\r\n                case 'KeyC':\r\n                    this.showMeshCursor = !this.showMeshCursor;\r\n                break;\r\n                case 'KeyU':\r\n                    this.showControlPlane = !this.showControlPlane;\r\n                break;\r\n                case 'KeyI':\r\n                    this.showInfo = !this.showInfo;\r\n                    if (this.showInfo) {\r\n                        this.infoPanel.show();\r\n                    } else {\r\n                        this.infoPanel.hide();\r\n                    }\r\n                break;\r\n                case 'KeyO':\r\n                    if (!this.usingExternalCamera) {\r\n                        this.setOrthographicMode(!this.camera.isOrthographicCamera);\r\n                    }\r\n                break;\r\n                case 'KeyP':\r\n                    if (!this.usingExternalCamera) {\r\n                        this.splatMesh.setPointCloudModeEnabled(!this.splatMesh.getPointCloudModeEnabled());\r\n                    }\r\n                break;\r\n                case 'Equal':\r\n                    if (!this.usingExternalCamera) {\r\n                        this.splatMesh.setSplatScale(this.splatMesh.getSplatScale() + 0.05);\r\n                    }\r\n                break;\r\n                case 'Minus':\r\n                    if (!this.usingExternalCamera) {\r\n                        this.splatMesh.setSplatScale(Math.max(this.splatMesh.getSplatScale() - 0.05, 0.0));\r\n                    }\r\n                break;\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    onMouseMove(mouse) {\r\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\r\n    }\r\n\r\n    onMouseDown() {\r\n        this.mouseDownPosition.copy(this.mousePosition);\r\n        this.mouseDownTime = getCurrentTime();\r\n    }\r\n\r\n    onMouseUp = function() {\r\n\r\n        const clickOffset = new THREE.Vector2();\r\n\r\n        return function(mouse) {\r\n            clickOffset.copy(this.mousePosition).sub(this.mouseDownPosition);\r\n            const mouseUpTime = getCurrentTime();\r\n            const wasClick = mouseUpTime - this.mouseDownTime < 0.5 && clickOffset.length() < 2;\r\n            if (wasClick) {\r\n                this.onMouseClick(mouse);\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    onMouseClick(mouse) {\r\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\r\n        this.checkForFocalPointChange();\r\n    }\r\n\r\n    checkForFocalPointChange = function() {\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n        const toNewFocalPoint = new THREE.Vector3();\r\n        const outHits = [];\r\n\r\n        return function() {\r\n            if (!this.transitioningCameraTarget) {\r\n                this.getRenderDimensions(renderDimensions);\r\n                outHits.length = 0;\r\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\r\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\r\n                if (outHits.length > 0) {\r\n                    const hit = outHits[0];\r\n                    const intersectionPoint = hit.origin;\r\n                    toNewFocalPoint.copy(intersectionPoint).sub(this.camera.position);\r\n                    if (toNewFocalPoint.length() > MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT) {\r\n                        this.previousCameraTarget.copy(this.controls.target);\r\n                        this.nextCameraTarget.copy(intersectionPoint);\r\n                        this.transitioningCameraTarget = true;\r\n                        this.transitioningCameraTargetStartTime = getCurrentTime();\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    getRenderDimensions(outDimensions) {\r\n        if (this.rootElement) {\r\n            outDimensions.x = this.rootElement.offsetWidth;\r\n            outDimensions.y = this.rootElement.offsetHeight;\r\n        } else {\r\n            this.renderer.getSize(outDimensions);\r\n        }\r\n    }\r\n\r\n    setOrthographicMode(orthographicMode) {\r\n        if (orthographicMode === this.camera.isOrthographicCamera) return;\r\n        const fromCamera = this.camera;\r\n        const toCamera = orthographicMode ? this.orthographicCamera : this.perspectiveCamera;\r\n        toCamera.position.copy(fromCamera.position);\r\n        toCamera.up.copy(fromCamera.up);\r\n        toCamera.rotation.copy(fromCamera.rotation);\r\n        toCamera.quaternion.copy(fromCamera.quaternion);\r\n        toCamera.matrix.copy(fromCamera.matrix);\r\n        this.camera = toCamera;\r\n\r\n        if (this.controls) {\r\n\r\n            const resetControls = (controls) => {\r\n                controls.saveState();\r\n                controls.reset();\r\n            };\r\n\r\n            const fromControls = this.controls;\r\n            const toControls = orthographicMode ? this.orthographicControls : this.perspectiveControls;\r\n\r\n            resetControls(toControls);\r\n            resetControls(fromControls);\r\n\r\n            toControls.target.copy(fromControls.target);\r\n            if (orthographicMode) {\r\n                Viewer.setCameraZoomFromPosition(toCamera, fromCamera, fromControls);\r\n            } else {\r\n                Viewer.setCameraPositionFromZoom(toCamera, fromCamera, toControls);\r\n            }\r\n            this.controls = toControls;\r\n            this.camera.lookAt(this.controls.target);\r\n        }\r\n    }\r\n\r\n    static setCameraPositionFromZoom = function() {\r\n\r\n        const tempVector = new THREE.Vector3();\r\n\r\n        return function(positionCamera, zoomedCamera, controls) {\r\n            const toLookAtDistance = 1 / (zoomedCamera.zoom * 0.001);\r\n            tempVector.copy(controls.target).sub(positionCamera.position).normalize().multiplyScalar(toLookAtDistance).negate();\r\n            positionCamera.position.copy(controls.target).add(tempVector);\r\n        };\r\n\r\n    }();\r\n\r\n\r\n    static setCameraZoomFromPosition = function() {\r\n\r\n        const tempVector = new THREE.Vector3();\r\n\r\n        return function(zoomCamera, positionZamera, controls) {\r\n            const toLookAtDistance = tempVector.copy(controls.target).sub(positionZamera.position).length();\r\n            zoomCamera.zoom = 1 / (toLookAtDistance * .001);\r\n        };\r\n\r\n    }();\r\n\r\n    updateSplatMesh = function() {\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n\r\n        return function() {\r\n            if (!this.splatMesh) return;\r\n            const splatCount = this.splatMesh.getSplatCount();\r\n            if (splatCount > 0) {\r\n                this.splatMesh.updateTransforms();\r\n                this.getRenderDimensions(renderDimensions);\r\n                const focalLengthX = this.camera.projectionMatrix.elements[0] * 0.5 *\r\n                                     this.devicePixelRatio * renderDimensions.x;\r\n                const focalLengthY = this.camera.projectionMatrix.elements[5] * 0.5 *\r\n                                     this.devicePixelRatio * renderDimensions.y;\r\n\r\n                const focalMultiplier = this.camera.isOrthographicCamera ? (1.0 / this.devicePixelRatio) : 1.0;\r\n                const focalAdjustment = this.focalAdjustment * focalMultiplier;\r\n                const inverseFocalAdjustment = 1.0 / focalAdjustment;\r\n\r\n                this.adjustForWebXRStereo(renderDimensions);\r\n                this.splatMesh.updateUniforms(renderDimensions, focalLengthX * focalAdjustment, focalLengthY * focalAdjustment,\r\n                                              this.camera.isOrthographicCamera, this.camera.zoom || 1.0, inverseFocalAdjustment);\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    adjustForWebXRStereo(renderDimensions) {\r\n        // TODO: Figure out a less hacky way to determine if stereo rendering is active\r\n        if (this.camera && this.webXRActive) {\r\n            const xrCamera = this.renderer.xr.getCamera();\r\n            const xrCameraProj00 = xrCamera.projectionMatrix.elements[0];\r\n            const cameraProj00 = this.camera.projectionMatrix.elements[0];\r\n            renderDimensions.x *= (cameraProj00 / xrCameraProj00);\r\n        }\r\n    }\r\n\r\n    isLoadingOrUnloading() {\r\n        return Object.keys(this.splatSceneDownloadPromises).length > 0 || this.splatSceneDownloadAndBuildPromise !== null ||\r\n                           this.splatSceneRemovalPromise !== null;\r\n    }\r\n\r\n    isDisposingOrDisposed() {\r\n        return this.disposing || this.disposed;\r\n    }\r\n\r\n    addSplatSceneDownloadPromise(promise) {\r\n        this.splatSceneDownloadPromises[promise.id] = promise;\r\n    }\r\n\r\n    removeSplatSceneDownloadPromise(promise) {\r\n        delete this.splatSceneDownloadPromises[promise.id];\r\n    }\r\n\r\n    setSplatSceneDownloadAndBuildPromise(promise) {\r\n        this.splatSceneDownloadAndBuildPromise = promise;\r\n    }\r\n\r\n    clearSplatSceneDownloadAndBuildPromise() {\r\n        this.splatSceneDownloadAndBuildPromise = null;\r\n    }\r\n\r\n    /**\r\n     * Add a splat scene to the viewer and display any loading UI if appropriate.\r\n     * @param {string} path Path to splat scene to be loaded\r\n     * @param {object} options {\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     *         showLoadingUI:         Display a loading spinner while the scene is loading, defaults to true\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     *\r\n     *         onProgress:                 Function to be called as file data are received, or other processing occurs\r\n     *\r\n     * }\r\n     * @return {AbortablePromise}\r\n     */\r\n    addSplatScene(path, options = {}) {\r\n\r\n        if (this.isLoadingOrUnloading()) {\r\n            throw new Error('Cannot add splat scene while another load or unload is already in progress.');\r\n        }\r\n\r\n        if (this.isDisposingOrDisposed()) {\r\n            throw new Error('Cannot add splat scene after dispose() is called.');\r\n        }\r\n\r\n        if (options.progressiveLoad && this.splatMesh.scenes && this.splatMesh.scenes.length > 0) {\r\n            console.log('addSplatScene(): \"progressiveLoad\" option ignore because there are multiple splat scenes');\r\n            options.progressiveLoad = false;\r\n        }\r\n\r\n        const format = (options.format !== undefined && options.format !== null) ? options.format : sceneFormatFromPath(path);\r\n        const progressiveLoad = Viewer.isProgressivelyLoadable(format) && options.progressiveLoad;\r\n        const showLoadingUI = (options.showLoadingUI !== undefined && options.showLoadingUI !== null) ? options.showLoadingUI : true;\r\n\r\n        let loadingUITaskId = null;\r\n        if (showLoadingUI) {\r\n            this.loadingSpinner.removeAllTasks();\r\n            loadingUITaskId = this.loadingSpinner.addTask('Downloading...');\r\n        }\r\n        const hideLoadingUI = () => {\r\n            this.loadingProgressBar.hide();\r\n            this.loadingSpinner.removeAllTasks();\r\n        };\r\n\r\n        const onProgressUIUpdate = (percentComplete, percentCompleteLabel, loaderStatus) => {\r\n            if (showLoadingUI) {\r\n                if (loaderStatus === LoaderStatus.Downloading) {\r\n                    if (percentComplete == 100) {\r\n                        this.loadingSpinner.setMessageForTask(loadingUITaskId, 'Download complete!');\r\n                    } else {\r\n                        if (progressiveLoad) {\r\n                            this.loadingSpinner.setMessageForTask(loadingUITaskId, 'Downloading splats...');\r\n                        } else {\r\n                            const suffix = percentCompleteLabel ? `: ${percentCompleteLabel}` : `...`;\r\n                            this.loadingSpinner.setMessageForTask(loadingUITaskId, `Downloading${suffix}`);\r\n                        }\r\n                    }\r\n                } else if (loaderStatus === LoaderStatus.Processing) {\r\n                    this.loadingSpinner.setMessageForTask(loadingUITaskId, 'Processing splats...');\r\n                }\r\n            }\r\n        };\r\n\r\n        let downloadDone = false;\r\n        let downloadedPercentage = 0;\r\n        const splatBuffersAddedUIUpdate = (firstBuild, finalBuild) => {\r\n            if (showLoadingUI) {\r\n                if (firstBuild && progressiveLoad || finalBuild && !progressiveLoad) {\r\n                    this.loadingSpinner.removeTask(loadingUITaskId);\r\n                    if (!finalBuild && !downloadDone) this.loadingProgressBar.show();\r\n                }\r\n                if (progressiveLoad) {\r\n                    if (finalBuild) {\r\n                        downloadDone = true;\r\n                        this.loadingProgressBar.hide();\r\n                    } else {\r\n                        this.loadingProgressBar.setProgress(downloadedPercentage);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        const onProgress = (percentComplete, percentCompleteLabel, loaderStatus) => {\r\n            downloadedPercentage = percentComplete;\r\n            onProgressUIUpdate(percentComplete, percentCompleteLabel, loaderStatus);\r\n            if (options.onProgress) options.onProgress(percentComplete, percentCompleteLabel, loaderStatus);\r\n        };\r\n\r\n        const buildSection = (splatBuffer, firstBuild, finalBuild) => {\r\n            if (!progressiveLoad && options.onProgress) options.onProgress(0, '0%', LoaderStatus.Processing);\r\n            const addSplatBufferOptions = {\r\n                'rotation': options.rotation || options.orientation,\r\n                'position': options.position,\r\n                'scale': options.scale,\r\n                'splatAlphaRemovalThreshold': options.splatAlphaRemovalThreshold,\r\n            };\r\n            return this.addSplatBuffers([splatBuffer], [addSplatBufferOptions],\r\n                                         finalBuild, firstBuild && showLoadingUI, showLoadingUI,\r\n                                         progressiveLoad, progressiveLoad).then(() => {\r\n                if (!progressiveLoad && options.onProgress) options.onProgress(100, '100%', LoaderStatus.Processing);\r\n                splatBuffersAddedUIUpdate(firstBuild, finalBuild);\r\n            });\r\n        };\r\n\r\n        const loadFunc = progressiveLoad ? this.downloadAndBuildSingleSplatSceneProgressiveLoad.bind(this) :\r\n                                           this.downloadAndBuildSingleSplatSceneStandardLoad.bind(this);\r\n        return loadFunc(path, format, options.splatAlphaRemovalThreshold, buildSection.bind(this), onProgress, hideLoadingUI.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Download a single splat scene, convert to splat buffer and then rebuild the viewer's splat mesh\r\n     * by calling 'buildFunc' -- all before displaying the scene. Also sets/clears relevant instance synchronization objects,\r\n     * and calls appropriate functions on success or failure.\r\n     * @param {string} path Path to splat scene to be loaded\r\n     * @param {SceneFormat} format Format of the splat scene file\r\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified value (valid range: 0 - 255)\r\n     * @param {function} buildFunc Function to build the viewer's splat mesh with the downloaded splat buffer\r\n     * @param {function} onProgress Function to be called as file data are received, or other processing occurs\r\n     * @param {function} onException Function to be called when exception occurs\r\n     * @return {AbortablePromise}\r\n     */\r\n    downloadAndBuildSingleSplatSceneStandardLoad(path, format, splatAlphaRemovalThreshold, buildFunc, onProgress, onException) {\r\n\r\n        const downloadAndBuildPromise = nativePromiseWithExtractedComponents();\r\n\r\n        const downloadPromise = this.downloadSplatSceneToSplatBuffer(path, splatAlphaRemovalThreshold, onProgress, false, undefined, format)\r\n        .then((splatBuffer) => {\r\n            this.removeSplatSceneDownloadPromise(downloadPromise);\r\n            return buildFunc(splatBuffer, true, true).then(() => {\r\n                downloadAndBuildPromise.resolve();\r\n                this.clearSplatSceneDownloadAndBuildPromise();\r\n            });\r\n        })\r\n        .catch((e) => {\r\n            if (onException) onException();\r\n            downloadAndBuildPromise.reject();\r\n            this.clearSplatSceneDownloadAndBuildPromise();\r\n            this.removeSplatSceneDownloadPromise(downloadPromise);\r\n            if (!(e instanceof AbortedPromiseError)) {\r\n                throw (new Error(`Viewer::addSplatScene -> Could not load file ${path}`));\r\n            }\r\n        });\r\n\r\n        this.addSplatSceneDownloadPromise(downloadPromise);\r\n        this.setSplatSceneDownloadAndBuildPromise(downloadAndBuildPromise.promise);\r\n\r\n        return downloadAndBuildPromise.promise;\r\n    }\r\n\r\n    /**\r\n     * Download a single splat scene and convert to splat buffer in a progressive manner, allowing rendering as the file downloads.\r\n     * As each section is downloaded, the viewer's splat mesh is rebuilt by calling 'buildFunc'\r\n     * Also sets/clears relevant instance synchronization objects, and calls appropriate functions on success or failure.\r\n     * @param {string} path Path to splat scene to be loaded\r\n     * @param {SceneFormat} format Format of the splat scene file\r\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified value (valid range: 0 - 255)\r\n     * @param {function} buildFunc Function to rebuild the viewer's splat mesh after a new splat buffer section is downloaded\r\n     * @param {function} onDownloadProgress Function to be called as file data are received\r\n     * @param {function} onDownloadException Function to be called when exception occurs at any point during the full download\r\n     * @return {AbortablePromise}\r\n     */\r\n    downloadAndBuildSingleSplatSceneProgressiveLoad(path, format, splatAlphaRemovalThreshold, buildFunc,\r\n                                                    onDownloadProgress, onDownloadException) {\r\n        let progressiveLoadedSectionBuildCount = 0;\r\n        let progressiveLoadedSectionBuilding = false;\r\n        const queuedProgressiveLoadSectionBuilds = [];\r\n\r\n        const checkAndBuildProgressiveLoadSections = () => {\r\n            if (queuedProgressiveLoadSectionBuilds.length > 0 &&\r\n                !progressiveLoadedSectionBuilding &&\r\n                !this.isDisposingOrDisposed()) {\r\n                progressiveLoadedSectionBuilding = true;\r\n                const queuedBuild = queuedProgressiveLoadSectionBuilds.shift();\r\n                buildFunc(queuedBuild.splatBuffer, queuedBuild.firstBuild, queuedBuild.finalBuild)\r\n                .then(() => {\r\n                    progressiveLoadedSectionBuilding = false;\r\n                    if (queuedBuild.firstBuild) {\r\n                        progressiveLoadFirstSectionBuildPromise.reject = null;\r\n                        progressiveLoadFirstSectionBuildPromise.resolve();\r\n                    } else if (queuedBuild.finalBuild) {\r\n                        splatSceneDownloadAndBuildPromise.resolve();\r\n                        this.clearSplatSceneDownloadAndBuildPromise();\r\n                    }\r\n                    if (queuedProgressiveLoadSectionBuilds.length > 0) {\r\n                        delayedExecute(() => checkAndBuildProgressiveLoadSections());\r\n                    }\r\n                });\r\n            }\r\n        };\r\n\r\n        const onProgressiveLoadSectionProgress = (splatBuffer, finalBuild) => {\r\n            if (!this.isDisposingOrDisposed()) {\r\n                if (finalBuild || queuedProgressiveLoadSectionBuilds.length === 0 ||\r\n                    splatBuffer.getSplatCount() > queuedProgressiveLoadSectionBuilds[0].splatBuffer.getSplatCount()) {\r\n                    queuedProgressiveLoadSectionBuilds.push({\r\n                        splatBuffer,\r\n                        firstBuild: progressiveLoadedSectionBuildCount === 0,\r\n                        finalBuild\r\n                    });\r\n                    progressiveLoadedSectionBuildCount++;\r\n                    checkAndBuildProgressiveLoadSections();\r\n                }\r\n            }\r\n        };\r\n\r\n        let splatSceneDownloadPromise = this.downloadSplatSceneToSplatBuffer(path, splatAlphaRemovalThreshold, onDownloadProgress, true,\r\n                                                                             onProgressiveLoadSectionProgress, format);\r\n\r\n        const progressiveLoadFirstSectionBuildPromise = abortablePromiseWithExtractedComponents(splatSceneDownloadPromise.abortHandler);\r\n        const splatSceneDownloadAndBuildPromise = abortablePromiseWithExtractedComponents();\r\n\r\n        this.addSplatSceneDownloadPromise(splatSceneDownloadPromise);\r\n        this.setSplatSceneDownloadAndBuildPromise(splatSceneDownloadAndBuildPromise.promise);\r\n\r\n        splatSceneDownloadPromise.then(() => {\r\n            this.removeSplatSceneDownloadPromise(splatSceneDownloadPromise);\r\n        })\r\n        .catch((e) => {\r\n            this.clearSplatSceneDownloadAndBuildPromise();\r\n            this.removeSplatSceneDownloadPromise(splatSceneDownloadPromise);\r\n            if (!(e instanceof AbortedPromiseError)) {\r\n                splatSceneDownloadAndBuildPromise.reject(e);\r\n                if (progressiveLoadFirstSectionBuildPromise.reject) progressiveLoadFirstSectionBuildPromise.reject(e);\r\n                if (onDownloadException) onDownloadException(e);\r\n            }\r\n        });\r\n\r\n        return progressiveLoadFirstSectionBuildPromise.promise;\r\n    }\r\n\r\n    /**\r\n     * Add multiple splat scenes to the viewer and display any loading UI if appropriate.\r\n     * @param {Array<object>} sceneOptions Array of per-scene options: {\r\n     *\r\n     *         path: Path to splat scene to be loaded\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     * }\r\n     * @param {boolean} showLoadingUI Display a loading spinner while the scene is loading, defaults to true\r\n     * @param {function} onProgress Function to be called as file data are received\r\n     * @return {AbortablePromise}\r\n     */\r\n    addSplatScenes(sceneOptions, showLoadingUI = true, onProgress = undefined) {\r\n\r\n        if (this.isLoadingOrUnloading()) {\r\n            throw new Error('Cannot add splat scene while another load or unload is already in progress.');\r\n        }\r\n\r\n        if (this.isDisposingOrDisposed()) {\r\n            throw new Error('Cannot add splat scene after dispose() is called.');\r\n        }\r\n\r\n        const fileCount = sceneOptions.length;\r\n        const percentComplete = [];\r\n\r\n        let loadingUITaskId;\r\n        if (showLoadingUI) {\r\n            this.loadingSpinner.removeAllTasks();\r\n            loadingUITaskId = this.loadingSpinner.addTask('Downloading...');\r\n        }\r\n\r\n        const onLoadProgress = (fileIndex, percent, percentLabel, loaderStatus) => {\r\n            percentComplete[fileIndex] = percent;\r\n            let totalPercent = 0;\r\n            for (let i = 0; i < fileCount; i++) totalPercent += percentComplete[i] || 0;\r\n            totalPercent = totalPercent / fileCount;\r\n            percentLabel = `${totalPercent.toFixed(2)}%`;\r\n            if (showLoadingUI) {\r\n                if (loaderStatus === LoaderStatus.Downloading) {\r\n                    this.loadingSpinner.setMessageForTask(loadingUITaskId, totalPercent == 100 ?\r\n                                                          `Download complete!` : `Downloading: ${percentLabel}`);\r\n                }\r\n            }\r\n            if (onProgress) onProgress(totalPercent, percentLabel, loaderStatus);\r\n        };\r\n\r\n        const downloadPromises = [];\r\n        const nativeLoadPromises = [];\r\n        const abortHandlers = [];\r\n        for (let i = 0; i < sceneOptions.length; i++) {\r\n            const options = sceneOptions[i];\r\n            const format = (options.format !== undefined && options.format !== null) ? options.format : sceneFormatFromPath(options.path);\r\n            const downloadPromise = this.downloadSplatSceneToSplatBuffer(options.path, options.splatAlphaRemovalThreshold,\r\n                                                                         onLoadProgress.bind(this, i), false, undefined, format);\r\n            abortHandlers.push(downloadPromise.abortHandler);\r\n            downloadPromises.push(downloadPromise);\r\n            nativeLoadPromises.push(downloadPromise.promise);\r\n            this.addSplatSceneDownloadPromise(downloadPromise);\r\n        }\r\n\r\n        const downloadPromise = new AbortablePromise((resolve, reject) => {\r\n            Promise.all(nativeLoadPromises)\r\n            .then((splatBuffers) => {\r\n                if (showLoadingUI) this.loadingSpinner.removeTask(loadingUITaskId);\r\n                if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\r\n                this.addSplatBuffers(splatBuffers, sceneOptions, true, showLoadingUI, showLoadingUI, false, false).then(() => {\r\n                    if (onProgress) onProgress(100, '100%', LoaderStatus.Processing);\r\n                    this.clearSplatSceneDownloadAndBuildPromise();\r\n                    resolve();\r\n                });\r\n            })\r\n            .catch((e) => {\r\n                if (showLoadingUI) this.loadingSpinner.removeTask(loadingUITaskId);\r\n                this.clearSplatSceneDownloadAndBuildPromise();\r\n                if (!(e instanceof AbortedPromiseError)) {\r\n                    reject(new Error(`Viewer::addSplatScenes -> Could not load one or more splat scenes.`));\r\n                } else {\r\n                    resolve();\r\n                }\r\n            })\r\n            .finally(() => {\r\n                for (let downloadPromise of downloadPromises) {\r\n                    this.removeSplatSceneDownloadPromise(downloadPromise);\r\n                }\r\n            });\r\n        }, () => {\r\n            for (let abortHandler of abortHandlers) abortHandler();\r\n        });\r\n        this.setSplatSceneDownloadAndBuildPromise(downloadPromise);\r\n        return downloadPromise;\r\n    }\r\n\r\n    /**\r\n     * Download a splat scene and convert to SplatBuffer instance.\r\n     * @param {string} path Path to splat scene to be loaded\r\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified\r\n     *                                            value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     * @param {function} onProgress Function to be called as file data are received\r\n     * @param {boolean} progressiveBuild Construct file sections into splat buffers as they are downloaded\r\n     * @param {function} onSectionBuilt Function to be called when new section is added to the file\r\n     * @param {string} format File format of the scene\r\n     * @return {AbortablePromise}\r\n     */\r\n    downloadSplatSceneToSplatBuffer(path, splatAlphaRemovalThreshold = 1, onProgress = undefined,\r\n                                    progressiveBuild = false, onSectionBuilt = undefined, format) {\r\n        if (format === SceneFormat.Splat) {\r\n            return SplatLoader.loadFromURL(path, onProgress, progressiveBuild,\r\n                                           onSectionBuilt, splatAlphaRemovalThreshold, 0, false);\r\n        } else if (format === SceneFormat.KSplat) {\r\n            return KSplatLoader.loadFromURL(path, onProgress, progressiveBuild, onSectionBuilt);\r\n        } else if (format === SceneFormat.Ply) {\r\n            return PlyLoader.loadFromURL(path, onProgress, progressiveBuild, onSectionBuilt,\r\n                                         splatAlphaRemovalThreshold, this.plyInMemoryCompressionLevel, this.sphericalHarmonicsDegree);\r\n        }\r\n        return AbortablePromise.reject(new Error(`Viewer::downloadSplatSceneToSplatBuffer -> File format not supported: ${path}`));\r\n    }\r\n\r\n    static isProgressivelyLoadable(format) {\r\n        return format === SceneFormat.Splat || format === SceneFormat.KSplat || format === SceneFormat.Ply;\r\n    }\r\n\r\n    /**\r\n     * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer and set up the sorting web worker.\r\n     * This function will terminate the existing sort worker (if there is one).\r\n     */\r\n    addSplatBuffers = function() {\r\n\r\n        return function(splatBuffers, splatBufferOptions = [], finalBuild = true, showLoadingUI = true,\r\n                        showLoadingUIForSplatTreeBuild = true, replaceExisting = false,\r\n                        enableRenderBeforeFirstSort = false, preserveVisibleRegion = true) {\r\n\r\n            if (this.isDisposingOrDisposed()) return Promise.resolve();\r\n\r\n            this.splatRenderReady = false;\r\n            let splatProcessingTaskId = null;\r\n\r\n            const finish = (buildResults, resolver) => {\r\n                if (this.isDisposingOrDisposed()) return;\r\n\r\n                // If we aren't calculating the splat distances from the center on the GPU, the sorting worker needs splat centers and\r\n                // transform indexes so that it can calculate those distance values.\r\n                if (!this.gpuAcceleratedSort && this.sortWorker) {\r\n                    this.sortWorker.postMessage({\r\n                        'centers': buildResults.centers.buffer,\r\n                        'sceneIndexes': buildResults.sceneIndexes.buffer,\r\n                        'range': {\r\n                            'from': buildResults.from,\r\n                            'to': buildResults.to,\r\n                            'count': buildResults.count\r\n                        }\r\n                    });\r\n                }\r\n\r\n                this.updateSplatSort(true);\r\n\r\n                if (enableRenderBeforeFirstSort) {\r\n                    this.splatRenderReady = true;\r\n                } else {\r\n                    this.runAfterNextSort.push(() => {\r\n                        this.splatRenderReady = true;\r\n                    });\r\n                }\r\n\r\n                this.runAfterNextSort.push(() => {\r\n                    if (splatProcessingTaskId !== null) {\r\n                        this.loadingSpinner.removeTask(splatProcessingTaskId);\r\n                        splatProcessingTaskId = null;\r\n                    }\r\n                    resolver();\r\n                });\r\n            };\r\n\r\n            return new Promise((resolve) => {\r\n                if (showLoadingUI) {\r\n                    splatProcessingTaskId = this.loadingSpinner.addTask('Processing splats...');\r\n                }\r\n                delayedExecute(() => {\r\n                    if (this.isDisposingOrDisposed()) {\r\n                        resolve();\r\n                    } else {\r\n                        const buildResults = this.addSplatBuffersToMesh(splatBuffers, splatBufferOptions, finalBuild,\r\n                                                                        showLoadingUIForSplatTreeBuild, replaceExisting,\r\n                                                                        preserveVisibleRegion);\r\n                        const maxSplatCount = this.splatMesh.getMaxSplatCount();\r\n                        if (this.sortWorker && this.sortWorker.maxSplatCount !== maxSplatCount) this.disposeSortWorker();\r\n                        const sortWorkerSetupPromise = (!this.sortWorker && maxSplatCount > 0) ?\r\n                                                         this.setupSortWorker(this.splatMesh) : Promise.resolve();\r\n                        sortWorkerSetupPromise.then(() => {\r\n                            finish(buildResults, resolve);\r\n                        });\r\n                    }\r\n                }, true);\r\n            });\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer. By default, this function is additive;\r\n     * all splat buffers contained by the viewer's splat mesh before calling this function will be preserved. This behavior can be\r\n     * changed by passing 'true' for 'replaceExisting'.\r\n     * @param {Array<SplatBuffer>} splatBuffers SplatBuffer instances\r\n     * @param {Array<object>} splatBufferOptions Array of options objects: {\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     * }\r\n     * @param {boolean} finalBuild Will the splat mesh be in its final state after this build?\r\n     * @param {boolean} showLoadingUIForSplatTreeBuild Whether or not to show the loading spinner during construction of the splat tree.\r\n     * @return {object} Object containing info about the splats that are updated\r\n     */\r\n    addSplatBuffersToMesh = function() {\r\n\r\n        let splatOptimizingTaskId;\r\n\r\n        return function(splatBuffers, splatBufferOptions, finalBuild = true, showLoadingUIForSplatTreeBuild = false,\r\n                        replaceExisting = false, preserveVisibleRegion = true) {\r\n            if (this.isDisposingOrDisposed()) return;\r\n            let allSplatBuffers = [];\r\n            let allSplatBufferOptions = [];\r\n            if (!replaceExisting) {\r\n                allSplatBuffers = this.splatMesh.scenes.map((scene) => scene.splatBuffer) || [];\r\n                allSplatBufferOptions = this.splatMesh.sceneOptions ? this.splatMesh.sceneOptions.map((sceneOptions) => sceneOptions) : [];\r\n            }\r\n            allSplatBuffers.push(...splatBuffers);\r\n            allSplatBufferOptions.push(...splatBufferOptions);\r\n            if (this.renderer) this.splatMesh.setRenderer(this.renderer);\r\n            const onSplatTreeIndexesUpload = (finished) => {\r\n                if (this.isDisposingOrDisposed()) return;\r\n                const splatCount = this.splatMesh.getSplatCount();\r\n                if (showLoadingUIForSplatTreeBuild && splatCount >= MIN_SPLAT_COUNT_TO_SHOW_SPLAT_TREE_LOADING_SPINNER) {\r\n                    if (!finished && !splatOptimizingTaskId) {\r\n                        this.loadingSpinner.setMinimized(true, true);\r\n                        splatOptimizingTaskId = this.loadingSpinner.addTask('Optimizing splats...');\r\n                    }\r\n                }\r\n            };\r\n            const onSplatTreeReady = (finished) => {\r\n                if (this.isDisposingOrDisposed()) return;\r\n                if (finished && splatOptimizingTaskId) {\r\n                    this.loadingSpinner.removeTask(splatOptimizingTaskId);\r\n                    splatOptimizingTaskId = null;\r\n                }\r\n            };\r\n            const buildResults = this.splatMesh.build(allSplatBuffers, allSplatBufferOptions, true, finalBuild, onSplatTreeIndexesUpload,\r\n                                                      onSplatTreeReady, preserveVisibleRegion);\r\n            if (finalBuild && this.freeIntermediateSplatData) this.splatMesh.freeIntermediateSplatData();\r\n            return buildResults;\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Set up the splat sorting web worker.\r\n     * @param {SplatMesh} splatMesh SplatMesh instance that contains the splats to be sorted\r\n     * @return {Promise}\r\n     */\r\n    setupSortWorker(splatMesh) {\r\n        if (this.isDisposingOrDisposed()) return;\r\n        return new Promise((resolve) => {\r\n            const DistancesArrayType = this.integerBasedSort ? Int32Array : Float32Array;\r\n            const splatCount = splatMesh.getSplatCount();\r\n            const maxSplatCount = splatMesh.getMaxSplatCount();\r\n            this.sortWorker = createSortWorker(maxSplatCount, this.sharedMemoryForWorkers, this.enableSIMDInSort,\r\n                                               this.integerBasedSort, this.splatMesh.dynamicMode);\r\n            this.sortWorker.onmessage = (e) => {\r\n                if (e.data.sortDone) {\r\n                    this.sortRunning = false;\r\n                    if (this.sharedMemoryForWorkers) {\r\n                        this.splatMesh.updateRenderIndexes(this.sortWorkerSortedIndexes, e.data.splatRenderCount);\r\n                    } else {\r\n                        const sortedIndexes = new Uint32Array(e.data.sortedIndexes.buffer, 0, e.data.splatRenderCount);\r\n                        this.splatMesh.updateRenderIndexes(sortedIndexes, e.data.splatRenderCount);\r\n                    }\r\n                    this.lastSortTime = e.data.sortTime;\r\n                    this.sortPromiseResolver();\r\n                    this.sortPromiseResolver = null;\r\n                    this.forceRenderNextFrame();\r\n                    if (this.runAfterNextSort.length > 0) {\r\n                        this.runAfterNextSort.forEach((func) => {\r\n                            func();\r\n                        });\r\n                        this.runAfterNextSort.length = 0;\r\n                    }\r\n                } else if (e.data.sortCanceled) {\r\n                    this.sortRunning = false;\r\n                } else if (e.data.sortSetupPhase1Complete) {\r\n                    if (this.logLevel >= LogLevel.Info) console.log('Sorting web worker WASM setup complete.');\r\n                    if (this.sharedMemoryForWorkers) {\r\n                        this.sortWorkerSortedIndexes = new Uint32Array(e.data.sortedIndexesBuffer,\r\n                                                                       e.data.sortedIndexesOffset, maxSplatCount);\r\n                        this.sortWorkerIndexesToSort = new Uint32Array(e.data.indexesToSortBuffer,\r\n                                                                       e.data.indexesToSortOffset, maxSplatCount);\r\n                        this.sortWorkerPrecomputedDistances = new DistancesArrayType(e.data.precomputedDistancesBuffer,\r\n                                                                                     e.data.precomputedDistancesOffset,\r\n                                                                                     maxSplatCount);\r\n                         this.sortWorkerTransforms = new Float32Array(e.data.transformsBuffer,\r\n                                                                      e.data.transformsOffset, Constants.MaxScenes * 16);\r\n                    } else {\r\n                        this.sortWorkerIndexesToSort = new Uint32Array(maxSplatCount);\r\n                        this.sortWorkerPrecomputedDistances = new DistancesArrayType(maxSplatCount);\r\n                        this.sortWorkerTransforms = new Float32Array(Constants.MaxScenes * 16);\r\n                    }\r\n                    for (let i = 0; i < splatCount; i++) this.sortWorkerIndexesToSort[i] = i;\r\n                    this.sortWorker.maxSplatCount = maxSplatCount;\r\n\r\n                    if (this.logLevel >= LogLevel.Info) {\r\n                        console.log('Sorting web worker ready.');\r\n                        const splatDataTextures = this.splatMesh.getSplatDataTextures();\r\n                        const covariancesTextureSize = splatDataTextures.covariances.size;\r\n                        const centersColorsTextureSize = splatDataTextures.centerColors.size;\r\n                        console.log('Covariances texture size: ' + covariancesTextureSize.x + ' x ' + covariancesTextureSize.y);\r\n                        console.log('Centers/colors texture size: ' + centersColorsTextureSize.x + ' x ' + centersColorsTextureSize.y);\r\n                    }\r\n\r\n                    resolve();\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    disposeSortWorker() {\r\n        if (this.sortWorker) this.sortWorker.terminate();\r\n        this.sortWorker = null;\r\n        this.sortPromise = null;\r\n        if (this.sortPromiseResolver) {\r\n            this.sortPromiseResolver();\r\n            this.sortPromiseResolver = null;\r\n        }\r\n        this.sortRunning = false;\r\n    }\r\n\r\n    removeSplatScene(index, showLoadingUI = true) {\r\n        if (this.isLoadingOrUnloading()) {\r\n            throw new Error('Cannot remove splat scene while another load or unload is already in progress.');\r\n        }\r\n\r\n        if (this.isDisposingOrDisposed()) {\r\n            throw new Error('Cannot remove splat scene after dispose() is called.');\r\n        }\r\n\r\n        let sortPromise;\r\n\r\n        this.splatSceneRemovalPromise = new Promise((resolve, reject) => {\r\n            let revmovalTaskId;\r\n\r\n            if (showLoadingUI) {\r\n                this.loadingSpinner.removeAllTasks();\r\n                this.loadingSpinner.show();\r\n                revmovalTaskId = this.loadingSpinner.addTask('Removing splat scene...');\r\n            }\r\n\r\n            const checkAndHideLoadingUI = () => {\r\n                if (showLoadingUI) {\r\n                    this.loadingSpinner.hide();\r\n                    this.loadingSpinner.removeTask(revmovalTaskId);\r\n                }\r\n            };\r\n\r\n            const onDone = (error) => {\r\n                checkAndHideLoadingUI();\r\n                this.splatSceneRemovalPromise = null;\r\n                if (!error) resolve();\r\n                else reject(error);\r\n            };\r\n\r\n            const checkForEarlyExit = () => {\r\n                if (this.isDisposingOrDisposed()) {\r\n                    onDone();\r\n                    return true;\r\n                }\r\n                return false;\r\n            };\r\n\r\n            sortPromise = this.sortPromise || Promise.resolve();\r\n            sortPromise.then(() => {\r\n                if (checkForEarlyExit()) return;\r\n                const savedSplatBuffers = [];\r\n                const savedSceneOptions = [];\r\n                const savedSceneTransformComponents = [];\r\n                for (let i = 0; i < this.splatMesh.scenes.length; i++) {\r\n                    if (i !== index) {\r\n                        const scene = this.splatMesh.scenes[i];\r\n                        savedSplatBuffers.push(scene.splatBuffer);\r\n                        savedSceneOptions.push(this.splatMesh.sceneOptions[i]);\r\n                        savedSceneTransformComponents.push({\r\n                            'position': scene.position.clone(),\r\n                            'quaternion': scene.quaternion.clone(),\r\n                            'scale': scene.scale.clone()\r\n                        });\r\n                    }\r\n                }\r\n                this.disposeSortWorker();\r\n                this.splatMesh.dispose();\r\n                this.createSplatMesh();\r\n                this.addSplatBuffers(savedSplatBuffers, savedSceneOptions, true, false, true)\r\n                .then(() => {\r\n                    if (checkForEarlyExit()) return;\r\n                    checkAndHideLoadingUI();\r\n                    this.splatMesh.scenes.forEach((scene, index) => {\r\n                        scene.position.copy(savedSceneTransformComponents[index].position);\r\n                        scene.quaternion.copy(savedSceneTransformComponents[index].quaternion);\r\n                        scene.scale.copy(savedSceneTransformComponents[index].scale);\r\n                    });\r\n                    this.splatMesh.updateTransforms();\r\n                    this.splatRenderReady = false;\r\n                    this.updateSplatSort(true)\r\n                    .then(() => {\r\n                        if (checkForEarlyExit()) {\r\n                            this.splatRenderReady = true;\r\n                            return;\r\n                        }\r\n                        sortPromise = this.sortPromise || Promise.resolve();\r\n                        sortPromise.then(() => {\r\n                            this.splatRenderReady = true;\r\n                            onDone();\r\n                        });\r\n                    });\r\n                })\r\n                .catch((e) => {\r\n                    onDone(e);\r\n                });\r\n            });\r\n        });\r\n\r\n        return this.splatSceneRemovalPromise;\r\n    }\r\n\r\n    /**\r\n     * Start self-driven mode\r\n     */\r\n    start() {\r\n        if (this.selfDrivenMode) {\r\n            if (this.webXRMode) {\r\n                this.renderer.setAnimationLoop(this.selfDrivenUpdateFunc);\r\n            } else {\r\n                this.requestFrameId = requestAnimationFrame(this.selfDrivenUpdateFunc);\r\n            }\r\n            this.selfDrivenModeRunning = true;\r\n        } else {\r\n            throw new Error('Cannot start viewer unless it is in self driven mode.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stop self-driven mode\r\n     */\r\n    stop() {\r\n        if (this.selfDrivenMode && this.selfDrivenModeRunning) {\r\n            if (!this.webXRMode) {\r\n                cancelAnimationFrame(this.requestFrameId);\r\n            }\r\n            this.selfDrivenModeRunning = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose of all resources held directly and indirectly by this viewer.\r\n     */\r\n    async dispose() {\r\n        this.disposing = true;\r\n        let waitPromises = [];\r\n        let promisesToAbort = [];\r\n        for (let promiseKey in this.splatSceneDownloadPromises) {\r\n            if (this.splatSceneDownloadPromises.hasOwnProperty(promiseKey)) {\r\n                const downloadPromiseToAbort = this.splatSceneDownloadPromises[promiseKey];\r\n                promisesToAbort.push(downloadPromiseToAbort);\r\n                waitPromises.push(downloadPromiseToAbort.promise);\r\n            }\r\n        }\r\n        if (this.sortPromise) {\r\n            waitPromises.push(this.sortPromise);\r\n        }\r\n        const disposePromise = Promise.all(waitPromises).finally(() => {\r\n            this.stop();\r\n            if (this.controls) {\r\n                this.controls.dispose();\r\n                this.controls = null;\r\n            }\r\n            if (this.splatMesh) {\r\n                this.splatMesh.dispose();\r\n                this.splatMesh = null;\r\n            }\r\n            if (this.sceneHelper) {\r\n                this.sceneHelper.dispose();\r\n                this.sceneHelper = null;\r\n            }\r\n            if (this.resizeObserver) {\r\n                this.resizeObserver.unobserve(this.rootElement);\r\n                this.resizeObserver = null;\r\n            }\r\n            this.disposeSortWorker();\r\n            this.removeEventHandlers();\r\n\r\n            this.loadingSpinner.removeAllTasks();\r\n            this.loadingSpinner.setContainer(null);\r\n            this.loadingProgressBar.hide();\r\n            this.loadingProgressBar.setContainer(null);\r\n            this.infoPanel.setContainer(null);\r\n\r\n            this.camera = null;\r\n            this.threeScene = null;\r\n            this.splatRenderReady = false;\r\n            this.initialized = false;\r\n            if (this.renderer) {\r\n                if (!this.usingExternalRenderer) {\r\n                    this.rootElement.removeChild(this.renderer.domElement);\r\n                    this.renderer.dispose();\r\n                }\r\n                this.renderer = null;\r\n            }\r\n\r\n            if (!this.usingExternalRenderer) {\r\n                document.body.removeChild(this.rootElement);\r\n            }\r\n\r\n            this.sortWorkerSortedIndexes = null;\r\n            this.sortWorkerIndexesToSort = null;\r\n            this.sortWorkerPrecomputedDistances = null;\r\n            this.sortWorkerTransforms = null;\r\n            this.disposed = true;\r\n            this.disposing = false;\r\n        });\r\n        promisesToAbort.forEach((toAbort) => {\r\n            toAbort.abort('Scene disposed');\r\n        });\r\n        return disposePromise;\r\n    }\r\n\r\n    selfDrivenUpdate() {\r\n        if (this.selfDrivenMode && !this.webXRMode) {\r\n            this.requestFrameId = requestAnimationFrame(this.selfDrivenUpdateFunc);\r\n        }\r\n        this.update();\r\n        if (this.shouldRender()) {\r\n            this.render();\r\n            this.consecutiveRenderFrames++;\r\n        } else {\r\n            this.consecutiveRenderFrames = 0;\r\n        }\r\n        this.renderNextFrame = false;\r\n    }\r\n\r\n    forceRenderNextFrame() {\r\n        this.renderNextFrame = true;\r\n    }\r\n\r\n    shouldRender = function() {\r\n\r\n        let renderCount = 0;\r\n        const lastCameraPosition = new THREE.Vector3();\r\n        const lastCameraOrientation = new THREE.Quaternion();\r\n        const changeEpsilon = 0.0001;\r\n\r\n        return function() {\r\n            let shouldRender = false;\r\n            let cameraChanged = false;\r\n            if (this.camera) {\r\n                const cp = this.camera.position;\r\n                const co = this.camera.quaternion;\r\n                cameraChanged = Math.abs(cp.x - lastCameraPosition.x) > changeEpsilon ||\r\n                                Math.abs(cp.y - lastCameraPosition.y) > changeEpsilon ||\r\n                                Math.abs(cp.z - lastCameraPosition.z) > changeEpsilon ||\r\n                                Math.abs(co.x - lastCameraOrientation.x) > changeEpsilon ||\r\n                                Math.abs(co.y - lastCameraOrientation.y) > changeEpsilon ||\r\n                                Math.abs(co.z - lastCameraOrientation.z) > changeEpsilon ||\r\n                                Math.abs(co.w - lastCameraOrientation.w) > changeEpsilon;\r\n            }\r\n\r\n            shouldRender = this.renderMode !== RenderMode.Never && (renderCount === 0 || this.splatMesh.visibleRegionChanging ||\r\n                           cameraChanged || this.renderMode === RenderMode.Always || this.dynamicMode === true || this.renderNextFrame);\r\n\r\n            if (this.camera) {\r\n                lastCameraPosition.copy(this.camera.position);\r\n                lastCameraOrientation.copy(this.camera.quaternion);\r\n            }\r\n\r\n            renderCount++;\r\n            return shouldRender;\r\n        };\r\n\r\n    }();\r\n\r\n    render = function() {\r\n\r\n        return function() {\r\n            if (!this.initialized || !this.splatRenderReady) return;\r\n\r\n            const hasRenderables = (threeScene) => {\r\n                for (let child of threeScene.children) {\r\n                    if (child.visible) return true;\r\n                }\r\n                return false;\r\n            };\r\n\r\n            const savedAuoClear = this.renderer.autoClear;\r\n            if (hasRenderables(this.threeScene)) {\r\n                this.renderer.render(this.threeScene, this.camera);\r\n                this.renderer.autoClear = false;\r\n            }\r\n            this.renderer.render(this.splatMesh, this.camera);\r\n            this.renderer.autoClear = false;\r\n            if (this.sceneHelper.getFocusMarkerOpacity() > 0.0) this.renderer.render(this.sceneHelper.focusMarker, this.camera);\r\n            if (this.showControlPlane) this.renderer.render(this.sceneHelper.controlPlane, this.camera);\r\n            this.renderer.autoClear = savedAuoClear;\r\n        };\r\n\r\n    }();\r\n\r\n    update(renderer, camera) {\r\n        if (this.dropInMode) this.updateForDropInMode(renderer, camera);\r\n        if (!this.initialized || !this.splatRenderReady) return;\r\n        if (this.controls) {\r\n            this.controls.update();\r\n            if (this.camera.isOrthographicCamera && !this.usingExternalCamera) {\r\n                Viewer.setCameraPositionFromZoom(this.camera, this.camera, this.controls);\r\n            }\r\n        }\r\n        this.splatMesh.updateVisibleRegionFadeDistance(this.sceneRevealMode);\r\n        this.updateSplatSort();\r\n        this.updateForRendererSizeChanges();\r\n        this.updateSplatMesh();\r\n        this.updateMeshCursor();\r\n        this.updateFPS();\r\n        this.timingSensitiveUpdates();\r\n        this.updateInfoPanel();\r\n        this.updateControlPlane();\r\n    }\r\n\r\n    updateForDropInMode(renderer, camera) {\r\n        this.renderer = renderer;\r\n        if (this.splatMesh) this.splatMesh.setRenderer(this.renderer);\r\n        this.camera = camera;\r\n        if (this.controls) this.controls.object = camera;\r\n        this.init();\r\n    }\r\n\r\n    updateFPS = function() {\r\n\r\n        let lastCalcTime = getCurrentTime();\r\n        let frameCount = 0;\r\n\r\n        return function() {\r\n            if (this.consecutiveRenderFrames > CONSECUTIVE_RENDERED_FRAMES_FOR_FPS_CALCULATION) {\r\n                const currentTime = getCurrentTime();\r\n                const calcDelta = currentTime - lastCalcTime;\r\n                if (calcDelta >= 1.0) {\r\n                    this.currentFPS = frameCount;\r\n                    frameCount = 0;\r\n                    lastCalcTime = currentTime;\r\n                } else {\r\n                    frameCount++;\r\n                }\r\n            } else {\r\n                this.currentFPS = null;\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    updateForRendererSizeChanges = function() {\r\n\r\n        const lastRendererSize = new THREE.Vector2();\r\n        const currentRendererSize = new THREE.Vector2();\r\n        let lastCameraOrthographic;\r\n\r\n        return function() {\r\n            if (!this.usingExternalCamera) {\r\n                this.renderer.getSize(currentRendererSize);\r\n                if (lastCameraOrthographic === undefined || lastCameraOrthographic !== this.camera.isOrthographicCamera ||\r\n                    currentRendererSize.x !== lastRendererSize.x || currentRendererSize.y !== lastRendererSize.y) {\r\n                    if (this.camera.isOrthographicCamera) {\r\n                        this.camera.left = -currentRendererSize.x / 2.0;\r\n                        this.camera.right = currentRendererSize.x / 2.0;\r\n                        this.camera.top = currentRendererSize.y / 2.0;\r\n                        this.camera.bottom = -currentRendererSize.y / 2.0;\r\n                    } else {\r\n                        this.camera.aspect = currentRendererSize.x / currentRendererSize.y;\r\n                    }\r\n                    this.camera.updateProjectionMatrix();\r\n                    lastRendererSize.copy(currentRendererSize);\r\n                    lastCameraOrthographic = this.camera.isOrthographicCamera;\r\n                }\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    timingSensitiveUpdates = function() {\r\n\r\n        let lastUpdateTime;\r\n\r\n        return function() {\r\n            const currentTime = getCurrentTime();\r\n            if (!lastUpdateTime) lastUpdateTime = currentTime;\r\n            const timeDelta = currentTime - lastUpdateTime;\r\n\r\n            this.updateCameraTransition(currentTime);\r\n            this.updateFocusMarker(timeDelta);\r\n\r\n            lastUpdateTime = currentTime;\r\n        };\r\n\r\n    }();\r\n\r\n    updateCameraTransition = function() {\r\n\r\n        let tempCameraTarget = new THREE.Vector3();\r\n        let toPreviousTarget = new THREE.Vector3();\r\n        let toNextTarget = new THREE.Vector3();\r\n\r\n        return function(currentTime) {\r\n            if (this.transitioningCameraTarget) {\r\n                toPreviousTarget.copy(this.previousCameraTarget).sub(this.camera.position).normalize();\r\n                toNextTarget.copy(this.nextCameraTarget).sub(this.camera.position).normalize();\r\n                const rotationAngle = Math.acos(toPreviousTarget.dot(toNextTarget));\r\n                const rotationSpeed = rotationAngle / (Math.PI / 3) * .65 + .3;\r\n                const t = (rotationSpeed / rotationAngle * (currentTime - this.transitioningCameraTargetStartTime));\r\n                tempCameraTarget.copy(this.previousCameraTarget).lerp(this.nextCameraTarget, t);\r\n                this.camera.lookAt(tempCameraTarget);\r\n                this.controls.target.copy(tempCameraTarget);\r\n                if (t >= 1.0) {\r\n                    this.transitioningCameraTarget = false;\r\n                }\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    updateFocusMarker = function() {\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n        let wasTransitioning = false;\r\n\r\n        return function(timeDelta) {\r\n            this.getRenderDimensions(renderDimensions);\r\n            if (this.transitioningCameraTarget) {\r\n                this.sceneHelper.setFocusMarkerVisibility(true);\r\n                const currentFocusMarkerOpacity = Math.max(this.sceneHelper.getFocusMarkerOpacity(), 0.0);\r\n                let newFocusMarkerOpacity = Math.min(currentFocusMarkerOpacity + FOCUS_MARKER_FADE_IN_SPEED * timeDelta, 1.0);\r\n                this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\r\n                this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\r\n                wasTransitioning = true;\r\n                this.forceRenderNextFrame();\r\n            } else {\r\n                let currentFocusMarkerOpacity;\r\n                if (wasTransitioning) currentFocusMarkerOpacity = 1.0;\r\n                else currentFocusMarkerOpacity = Math.min(this.sceneHelper.getFocusMarkerOpacity(), 1.0);\r\n                if (currentFocusMarkerOpacity > 0) {\r\n                    this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\r\n                    let newFocusMarkerOpacity = Math.max(currentFocusMarkerOpacity - FOCUS_MARKER_FADE_OUT_SPEED * timeDelta, 0.0);\r\n                    this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\r\n                    if (newFocusMarkerOpacity === 0.0) this.sceneHelper.setFocusMarkerVisibility(false);\r\n                }\r\n                if (currentFocusMarkerOpacity > 0.0) this.forceRenderNextFrame();\r\n                wasTransitioning = false;\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    updateMeshCursor = function() {\r\n\r\n        const outHits = [];\r\n        const renderDimensions = new THREE.Vector2();\r\n\r\n        return function() {\r\n            if (this.showMeshCursor) {\r\n                this.forceRenderNextFrame();\r\n                this.getRenderDimensions(renderDimensions);\r\n                outHits.length = 0;\r\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\r\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\r\n                if (outHits.length > 0) {\r\n                    this.sceneHelper.setMeshCursorVisibility(true);\r\n                    this.sceneHelper.positionAndOrientMeshCursor(outHits[0].origin, this.camera);\r\n                } else {\r\n                    this.sceneHelper.setMeshCursorVisibility(false);\r\n                }\r\n            } else {\r\n                if (this.sceneHelper.getMeschCursorVisibility()) this.forceRenderNextFrame();\r\n                this.sceneHelper.setMeshCursorVisibility(false);\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    updateInfoPanel = function() {\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n\r\n        return function() {\r\n            if (!this.showInfo) return;\r\n            const splatCount = this.splatMesh.getSplatCount();\r\n            this.getRenderDimensions(renderDimensions);\r\n            const cameraLookAtPosition = this.controls ? this.controls.target : null;\r\n            const meshCursorPosition = this.showMeshCursor ? this.sceneHelper.meshCursor.position : null;\r\n            const splatRenderCountPct = splatCount > 0 ? this.splatRenderCount / splatCount * 100 : 0;\r\n            this.infoPanel.update(renderDimensions, this.camera.position, cameraLookAtPosition,\r\n                                  this.camera.up, this.camera.isOrthographicCamera, meshCursorPosition,\r\n                                  this.currentFPS || 'N/A', splatCount, this.splatRenderCount, splatRenderCountPct,\r\n                                  this.lastSortTime, this.focalAdjustment, this.splatMesh.getSplatScale(),\r\n                                  this.splatMesh.getPointCloudModeEnabled());\r\n        };\r\n\r\n    }();\r\n\r\n    updateControlPlane() {\r\n        if (this.showControlPlane) {\r\n            this.sceneHelper.setControlPlaneVisibility(true);\r\n            this.sceneHelper.positionAndOrientControlPlane(this.controls.target, this.camera.up);\r\n        } else {\r\n            this.sceneHelper.setControlPlaneVisibility(false);\r\n        }\r\n    }\r\n\r\n    updateSplatSort = function() {\r\n\r\n        const mvpMatrix = new THREE.Matrix4();\r\n        const cameraPositionArray = [];\r\n        const lastSortViewDir = new THREE.Vector3(0, 0, -1);\r\n        const sortViewDir = new THREE.Vector3(0, 0, -1);\r\n        const lastSortViewPos = new THREE.Vector3();\r\n        const sortViewOffset = new THREE.Vector3();\r\n        const queuedSorts = [];\r\n\r\n        const partialSorts = [\r\n            {\r\n                'angleThreshold': 0.55,\r\n                'sortFractions': [0.125, 0.33333, 0.75]\r\n            },\r\n            {\r\n                'angleThreshold': 0.65,\r\n                'sortFractions': [0.33333, 0.66667]\r\n            },\r\n            {\r\n                'angleThreshold': 0.8,\r\n                'sortFractions': [0.5]\r\n            }\r\n        ];\r\n\r\n        return async function(force = false) {\r\n            if (this.sortRunning) return;\r\n            if (this.splatMesh.getSplatCount() <= 0) return;\r\n\r\n            let angleDiff = 0;\r\n            let positionDiff = 0;\r\n            let needsRefreshForRotation = false;\r\n            let needsRefreshForPosition = false;\r\n\r\n            sortViewDir.set(0, 0, -1).applyQuaternion(this.camera.quaternion);\r\n            angleDiff = sortViewDir.dot(lastSortViewDir);\r\n            positionDiff = sortViewOffset.copy(this.camera.position).sub(lastSortViewPos).length();\r\n\r\n            if (!force) {\r\n                if (!this.splatMesh.dynamicMode && queuedSorts.length === 0) {\r\n                    if (angleDiff <= 0.99) needsRefreshForRotation = true;\r\n                    if (positionDiff >= 1.0) needsRefreshForPosition = true;\r\n                    if (!needsRefreshForRotation && !needsRefreshForPosition) return;\r\n                }\r\n            }\r\n\r\n            this.sortRunning = true;\r\n            const { splatRenderCount, shouldSortAll } = this.gatherSceneNodesForSort();\r\n            this.splatRenderCount = splatRenderCount;\r\n\r\n            mvpMatrix.copy(this.camera.matrixWorld).invert();\r\n            const mvpCamera = this.perspectiveCamera || this.camera;\r\n            mvpMatrix.premultiply(mvpCamera.projectionMatrix);\r\n            mvpMatrix.multiply(this.splatMesh.matrixWorld);\r\n\r\n            if (this.gpuAcceleratedSort && (queuedSorts.length <= 1 || queuedSorts.length % 2 === 0)) {\r\n                await this.splatMesh.computeDistancesOnGPU(mvpMatrix, this.sortWorkerPrecomputedDistances);\r\n            }\r\n\r\n            if (this.splatMesh.dynamicMode || shouldSortAll) {\r\n                queuedSorts.push(this.splatRenderCount);\r\n            } else {\r\n                if (queuedSorts.length === 0) {\r\n                    for (let partialSort of partialSorts) {\r\n                        if (angleDiff < partialSort.angleThreshold) {\r\n                            for (let sortFraction of partialSort.sortFractions) {\r\n                                queuedSorts.push(Math.floor(this.splatRenderCount * sortFraction));\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    queuedSorts.push(this.splatRenderCount);\r\n                }\r\n            }\r\n            let sortCount = Math.min(queuedSorts.shift(), this.splatRenderCount);\r\n\r\n            cameraPositionArray[0] = this.camera.position.x;\r\n            cameraPositionArray[1] = this.camera.position.y;\r\n            cameraPositionArray[2] = this.camera.position.z;\r\n\r\n            const sortMessage = {\r\n                'modelViewProj': mvpMatrix.elements,\r\n                'cameraPosition': cameraPositionArray,\r\n                'splatRenderCount': this.splatRenderCount,\r\n                'splatSortCount': sortCount,\r\n                'usePrecomputedDistances': this.gpuAcceleratedSort\r\n            };\r\n            if (this.splatMesh.dynamicMode) {\r\n                this.splatMesh.fillTransformsArray(this.sortWorkerTransforms);\r\n            }\r\n            if (!this.sharedMemoryForWorkers) {\r\n                sortMessage.indexesToSort = this.sortWorkerIndexesToSort;\r\n                sortMessage.transforms = this.sortWorkerTransforms;\r\n                if (this.gpuAcceleratedSort) {\r\n                    sortMessage.precomputedDistances = this.sortWorkerPrecomputedDistances;\r\n                }\r\n            }\r\n\r\n            this.sortPromise = new Promise((resolve) => {\r\n                this.sortPromiseResolver = resolve;\r\n            });\r\n\r\n            this.sortWorker.postMessage({\r\n                'sort': sortMessage\r\n            });\r\n\r\n            if (queuedSorts.length === 0) {\r\n                lastSortViewPos.copy(this.camera.position);\r\n                lastSortViewDir.copy(sortViewDir);\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Determine which splats to render by checking which are inside or close to the view frustum\r\n     */\r\n    gatherSceneNodesForSort = function() {\r\n\r\n        const nodeRenderList = [];\r\n        let allSplatsSortBuffer = null;\r\n        const tempVectorYZ = new THREE.Vector3();\r\n        const tempVectorXZ = new THREE.Vector3();\r\n        const tempVector = new THREE.Vector3();\r\n        const modelView = new THREE.Matrix4();\r\n        const baseModelView = new THREE.Matrix4();\r\n        const sceneTransform = new THREE.Matrix4();\r\n        const renderDimensions = new THREE.Vector3();\r\n        const forward = new THREE.Vector3(0, 0, -1);\r\n\r\n        const tempMax = new THREE.Vector3();\r\n        const nodeSize = (node) => {\r\n            return tempMax.copy(node.max).sub(node.min).length();\r\n        };\r\n\r\n        return function(gatherAllNodes = false) {\r\n\r\n            this.getRenderDimensions(renderDimensions);\r\n            const cameraFocalLength = (renderDimensions.y / 2.0) / Math.tan(this.camera.fov / 2.0 * THREE.MathUtils.DEG2RAD);\r\n            const fovXOver2 = Math.atan(renderDimensions.x / 2.0 / cameraFocalLength);\r\n            const fovYOver2 = Math.atan(renderDimensions.y / 2.0 / cameraFocalLength);\r\n            const cosFovXOver2 = Math.cos(fovXOver2);\r\n            const cosFovYOver2 = Math.cos(fovYOver2);\r\n\r\n            const splatTree = this.splatMesh.getSplatTree();\r\n\r\n            if (splatTree) {\r\n                baseModelView.copy(this.camera.matrixWorld).invert();\r\n                baseModelView.multiply(this.splatMesh.matrixWorld);\r\n\r\n                let nodeRenderCount = 0;\r\n                let splatRenderCount = 0;\r\n\r\n                for (let s = 0; s < splatTree.subTrees.length; s++) {\r\n                    const subTree = splatTree.subTrees[s];\r\n                    modelView.copy(baseModelView);\r\n                    if (this.splatMesh.dynamicMode) {\r\n                        this.splatMesh.getSceneTransform(s, sceneTransform);\r\n                        modelView.multiply(sceneTransform);\r\n                    }\r\n                    const nodeCount = subTree.nodesWithIndexes.length;\r\n                    for (let i = 0; i < nodeCount; i++) {\r\n                        const node = subTree.nodesWithIndexes[i];\r\n                        if (!node.data || !node.data.indexes || node.data.indexes.length === 0) continue;\r\n                        tempVector.copy(node.center).applyMatrix4(modelView);\r\n\r\n                        const distanceToNode = tempVector.length();\r\n                        tempVector.normalize();\r\n\r\n                        tempVectorYZ.copy(tempVector).setX(0).normalize();\r\n                        tempVectorXZ.copy(tempVector).setY(0).normalize();\r\n\r\n                        const cameraAngleXZDot = forward.dot(tempVectorXZ);\r\n                        const cameraAngleYZDot = forward.dot(tempVectorYZ);\r\n\r\n                        const ns = nodeSize(node);\r\n                        const outOfFovY = cameraAngleYZDot < (cosFovYOver2 - .6);\r\n                        const outOfFovX = cameraAngleXZDot < (cosFovXOver2 - .6);\r\n                        if (!gatherAllNodes && ((outOfFovX || outOfFovY) && distanceToNode > ns)) {\r\n                            continue;\r\n                        }\r\n                        splatRenderCount += node.data.indexes.length;\r\n                        nodeRenderList[nodeRenderCount] = node;\r\n                        node.data.distanceToNode = distanceToNode;\r\n                        nodeRenderCount++;\r\n                    }\r\n                }\r\n\r\n                nodeRenderList.length = nodeRenderCount;\r\n                nodeRenderList.sort((a, b) => {\r\n                    if (a.data.distanceToNode < b.data.distanceToNode) return -1;\r\n                    else return 1;\r\n                });\r\n\r\n                let currentByteOffset = splatRenderCount * Constants.BytesPerInt;\r\n                for (let i = 0; i < nodeRenderCount; i++) {\r\n                    const node = nodeRenderList[i];\r\n                    const windowSizeInts = node.data.indexes.length;\r\n                    const windowSizeBytes = windowSizeInts * Constants.BytesPerInt;\r\n                    let destView = new Uint32Array(this.sortWorkerIndexesToSort.buffer,\r\n                                                   currentByteOffset - windowSizeBytes, windowSizeInts);\r\n                    destView.set(node.data.indexes);\r\n                    currentByteOffset -= windowSizeBytes;\r\n                }\r\n\r\n                return {\r\n                    'splatRenderCount': splatRenderCount,\r\n                    'shouldSortAll': false\r\n                };\r\n            } else {\r\n                const totalSplatCount = this.splatMesh.getSplatCount();\r\n                if (!allSplatsSortBuffer || allSplatsSortBuffer.length !== totalSplatCount) {\r\n                    allSplatsSortBuffer = new Uint32Array(totalSplatCount);\r\n                    for (let i = 0; i < totalSplatCount; i++) {\r\n                        allSplatsSortBuffer[i] = i;\r\n                    }\r\n                }\r\n                this.sortWorkerIndexesToSort.set(allSplatsSortBuffer);\r\n                return {\r\n                    'splatRenderCount': totalSplatCount,\r\n                    'shouldSortAll': true\r\n                };\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    getSplatMesh() {\r\n        return this.splatMesh;\r\n    }\r\n\r\n    /**\r\n     * Get a reference to a splat scene.\r\n     * @param {number} sceneIndex The index of the scene to which the reference will be returned\r\n     * @return {SplatScene}\r\n     */\r\n    getSplatScene(sceneIndex) {\r\n        return this.splatMesh.getScene(sceneIndex);\r\n    }\r\n\r\n    isMobile() {\r\n        return navigator.userAgent.includes('Mobi');\r\n    }\r\n}\r\n","\u0000asm\u0001\u0000\u0000\u0000\u0000\u000f\bdylink.0\u0001\u0004\u0000\u0000\u0000\u0000\u0001\u0017\u0002`\u0000\u0000`\u0010\u0000\u0002\u000f\u0001\u0003env\u0006memory\u0002\u0000\u0000\u0003\u0003\u0002\u0000\u0001\u0007>\u0003\u0011__wasm_call_ctors\u0000\u0000\u0018__wasm_apply_data_relocs\u0000\u0000\u000bsortIndexes\u0000\u0001\n�\u000f\u0002\u0002\u0000\u000b�\u000f\u0004\u0001|\u0003{\u0007}\u0003 \u000b \nk!\f\u0002@\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0003 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00016\u0002\u0000 \u0001 \n \u0001 \nH\u001b!\n \u0001 \r \u0001 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0003\u000b \u000f\u0004@ \u000b \fM\r\u0002A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u001cj(\u0002\u0000\"\u001dA\u0002tj(\u0002\u0000\"\u001bG\u0004@\u0002 \u0005�\t\u00028 \b \u001bA\u0006tj\"\u000e�\t\u0002\f \u000e*\u0002\u001c� \u0001 \u000e*\u0002,� \u0002 \u000e*\u0002<� \u0003��\u0001 \u0005�\t\u0002( \u000e�\t\u0002\b \u000e*\u0002\u0018� \u0001 \u000e*\u0002(� \u0002 \u000e*\u00028� \u0003��\u0001 \u0005�\t\u0002\b \u000e�\t\u0002\u0000 \u000e*\u0002\u0010� \u0001 \u000e*\u0002 � \u0002 \u000e*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000e�\t\u0002\u0004 \u000e*\u0002\u0014� \u0001 \u000e*\u0002$� \u0002 \u000e*\u00024� \u0003��\u0001��\u0001��\u0001��\u0001\"\u0011�_�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@\"\u0012��\u0001\"\u0013�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e\u0002 \u0013�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u0011 \u000e�\u001c\u0001\u0002 \u0011 \u0011�\r\b\t\n\u000b\f\r\u000e\u000f\u0000\u0001\u0002\u0003\u0000\u0001\u0002\u0003�_ \u0012��\u0001\"\u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u001c\u0002\u0002 \u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u001c\u0003!\u0012 \u001b!\u000f\u000b \u0003 \u001cj \u0001 \u001dA\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j \u0011�\u001b\u0003j\"\u000e6\u0002\u0000 \u000e \n \n \u000eJ\u001b!\n \u000e \r \r \u000eH\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0003\u000b\u0002 \u0005*\u0002\b��\u0014 \u0005*\u0002\u0018��\"\u0001�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@��\u0001\"\u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e\u0002 \u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0005A����\u0007!\nA����x!\r \u000b \fM\r\u0002�\u0011 \u000e�\u001c\u0001 \u0005�\u001c\u0002!\u0012 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0002j \u0001 \u0000 \u0002j(\u0002\u0000A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j\"\u00026\u0002\u0000 \u0002 \n \u0002 \nH\u001b!\n \u0002 \r \u0002 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j\u0002 \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000fE\u0004@ \u000b \fM\r\u0001 \u0005*\u0002(!\u0014 \u0005*\u0002\u0018!\u0015 \u0005*\u0002\b!\u0016A����\u0007!\nA����x!\r \f!\u0005\u0003@\u0002 \u0014 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\b� \u0016 \u0002*\u0002\u0000� \u0015 \u0002*\u0002\u0004����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e \u0003 \u0007j \u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000b \fM\r\u0000A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u001bj(\u0002\u0000A\u0002t\"\u001cj(\u0002\u0000\"\u000eG\u0004@ \u0005*\u00028\"\u0014 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0015 \u000f*\u00028� \u0005*\u0002\b\"\u0016 \u000f*\u00020� \u0005*\u0002\u0018\"\u0017 \u000f*\u00024����!\u0018 \u0014 \u000f*\u0002,� \u0015 \u000f*\u0002(� \u0016 \u000f*\u0002 � \u0017 \u000f*\u0002$����!\u0019 \u0014 \u000f*\u0002\u001c� \u0015 \u000f*\u0002\u0018� \u0016 \u000f*\u0002\u0010� \u0017 \u000f*\u0002\u0014����!\u001a \u0014 \u000f*\u0002\f� \u0015 \u000f*\u0002\b� \u0016 \u000f*\u0002\u0000� \u0017 \u000f*\u0002\u0004����!\u0014 \u000e!\u000f\u000b \u0003 \u001bj\u0002 \u0018 \u0001 \u001cA\u0002tj\"\u000e*\u0002\f� \u0019 \u000e*\u0002\b� \u0014 \u000e*\u0002\u0000� \u001a \u000e*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000bA����x!\rA����\u0007!\n\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \n���!\u0014 \f!\r\u0003@\u0002 \u0014 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \nk��\"\u0015�C\u0000\u0000\u0000O]\u0004@ \u0015�\f\u0001\u000bA����x\u000b!\u000e \u0001 \u000e6\u0002\u0000 \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\n\u0003@ \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \nA\u0001j\"\n \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\n\u0003@ \u0006 \nA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \nA\u0001K \u0001!\n\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\n\u0003@ \u0006 \u000b \u0004 \u0003 \nA\u0001k\"\nA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \n \fJ\r\u0000\u000b\u000b\u000b","\u0000asm\u0001\u0000\u0000\u0000\u0000\u000f\bdylink.0\u0001\u0004\u0000\u0000\u0000\u0000\u0001\u0017\u0002`\u0000\u0000`\u0010\u0000\u0002\u000f\u0001\u0003env\u0006memory\u0002\u0000\u0000\u0003\u0003\u0002\u0000\u0001\u0007>\u0003\u0011__wasm_call_ctors\u0000\u0000\u0018__wasm_apply_data_relocs\u0000\u0000\u000bsortIndexes\u0000\u0001\n�\u000f\u0002\u0002\u0000\u000b�\u000f\u0003\u0001|\u0007}\u0006 \u000b \nk!\f\u0002@\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0003 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00016\u0002\u0000 \u0001 \n \u0001 \nH\u001b!\n \u0001 \r \u0001 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0003\u000b \u000f\u0004@ \u000b \fM\r\u0002A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u001aj(\u0002\u0000A\u0002t\"\u001bj(\u0002\u0000\"\u000eG\u0004@\u0002 \u0005*\u00028\"\u0011 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0012 \u000f*\u00028� \u0005*\u0002\b\"\u0013 \u000f*\u00020� \u0005*\u0002\u0018\"\u0014 \u000f*\u00024�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0018\u0002 \u0011 \u000f*\u0002,� \u0012 \u000f*\u0002(� \u0013 \u000f*\u0002 � \u0014 \u000f*\u0002$�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0019\u0002 \u0011 \u000f*\u0002\u001c� \u0012 \u000f*\u0002\u0018� \u0013 \u000f*\u0002\u0010� \u0014 \u000f*\u0002\u0014�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u001c\u0002 \u0011 \u000f*\u0002\f� \u0012 \u000f*\u0002\b� \u0013 \u000f*\u0002\u0000� \u0014 \u000f*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u001d \u000e!\u000f\u000b \u0003 \u001aj \u0001 \u001bA\u0002tj\"\u000e(\u0002\u0004 \u001cl \u000e(\u0002\u0000 \u001dlj \u000e(\u0002\b \u0019lj \u000e(\u0002\f \u0018lj\"\u000e6\u0002\u0000 \u000e \n \n \u000eJ\u001b!\n \u000e \r \r \u000eH\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0003\u000b\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0002\u0002 \u0005*\u0002\u0018�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0007 \u000b \fM\u0002 \u0005*\u0002\b�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000fA����\u0007!\nA����x!\r\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\bj \u0001 \u0000 \bj(\u0002\u0000A\u0004tj\"\b(\u0002\u0004 \u0007l \b(\u0002\u0000 \u000flj \b(\u0002\b \u0002lj\"\b6\u0002\u0000 \b \n \b \nH\u001b!\n \b \r \b \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j\u0002 \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000fE\u0004@ \u000b \fM\r\u0001 \u0005*\u0002(!\u0011 \u0005*\u0002\u0018!\u0012 \u0005*\u0002\b!\u0013A����\u0007!\nA����x!\r \f!\u0005\u0003@\u0002 \u0011 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\b� \u0013 \u0002*\u0002\u0000� \u0012 \u0002*\u0002\u0004����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e \u0003 \u0007j \u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000b \fM\r\u0000A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0018j(\u0002\u0000A\u0002t\"\u0019j(\u0002\u0000\"\u000eG\u0004@ \u0005*\u00028\"\u0011 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0012 \u000f*\u00028� \u0005*\u0002\b\"\u0013 \u000f*\u00020� \u0005*\u0002\u0018\"\u0014 \u000f*\u00024����!\u0015 \u0011 \u000f*\u0002,� \u0012 \u000f*\u0002(� \u0013 \u000f*\u0002 � \u0014 \u000f*\u0002$����!\u0016 \u0011 \u000f*\u0002\u001c� \u0012 \u000f*\u0002\u0018� \u0013 \u000f*\u0002\u0010� \u0014 \u000f*\u0002\u0014����!\u0017 \u0011 \u000f*\u0002\f� \u0012 \u000f*\u0002\b� \u0013 \u000f*\u0002\u0000� \u0014 \u000f*\u0002\u0004����!\u0011 \u000e!\u000f\u000b \u0003 \u0018j\u0002 \u0015 \u0001 \u0019A\u0002tj\"\u000e*\u0002\f� \u0016 \u000e*\u0002\b� \u0011 \u000e*\u0002\u0000� \u0017 \u000e*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000bA����x!\rA����\u0007!\n\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \n���!\u0011 \f!\r\u0003@\u0002 \u0011 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \nk��\"\u0012�C\u0000\u0000\u0000O]\u0004@ \u0012�\f\u0001\u000bA����x\u000b!\u000e \u0001 \u000e6\u0002\u0000 \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\n\u0003@ \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \nA\u0001j\"\n \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\n\u0003@ \u0006 \nA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \nA\u0001K \u0001!\n\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\n\u0003@ \u0006 \u000b \u0004 \u0003 \nA\u0001k\"\nA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \n \fJ\r\u0000\u000b\u000b\u000b","import * as THREE from 'three';\r\nimport { Viewer } from './Viewer.js';\r\n\r\n/**\r\n * DropInViewer: Wrapper for a Viewer instance that enables it to be added to a Three.js scene like\r\n * any other Three.js scene object (Mesh, Object3D, etc.)\r\n */\r\nexport class DropInViewer extends THREE.Group {\r\n\r\n    constructor(options = {}) {\r\n        super();\r\n\r\n        options.selfDrivenMode = false;\r\n        options.useBuiltInControls = false;\r\n        options.rootElement = null;\r\n        options.ignoreDevicePixelRatio = false;\r\n        options.dropInMode = true;\r\n        options.camera = undefined;\r\n        options.renderer = undefined;\r\n\r\n        this.viewer = new Viewer(options);\r\n        this.splatMesh = null;\r\n\r\n        this.callbackMesh = DropInViewer.createCallbackMesh();\r\n        this.add(this.callbackMesh);\r\n        this.callbackMesh.onBeforeRender = DropInViewer.onBeforeRender.bind(this, this.viewer);\r\n\r\n    }\r\n\r\n    /**\r\n     * Add a single splat scene to the viewer.\r\n     * @param {string} path Path to splat scene to be loaded\r\n     * @param {object} options {\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     *         showLoadingUI:         Display a loading spinner while the scene is loading, defaults to true\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     *\r\n     *         onProgress:                 Function to be called as file data are received\r\n     *\r\n     * }\r\n     * @return {AbortablePromise}\r\n     */\r\n    addSplatScene(path, options = {}) {\r\n        if (options.showLoadingUI !== false) options.showLoadingUI = true;\r\n        return this.viewer.addSplatScene(path, options);\r\n    }\r\n\r\n    /**\r\n     * Add multiple splat scenes to the viewer.\r\n     * @param {Array<object>} sceneOptions Array of per-scene options: {\r\n     *\r\n     *         path: Path to splat scene to be loaded\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     * }\r\n     * @param {boolean} showLoadingUI Display a loading spinner while the scene is loading, defaults to true\r\n     * @return {AbortablePromise}\r\n     */\r\n    addSplatScenes(sceneOptions, showLoadingUI) {\r\n        if (showLoadingUI !== false) showLoadingUI = true;\r\n        return this.viewer.addSplatScenes(sceneOptions, showLoadingUI);\r\n    }\r\n\r\n    /**\r\n     * Get a reference to a splat scene.\r\n     * @param {number} sceneIndex The index of the scene to which the reference will be returned\r\n     * @return {SplatScene}\r\n     */\r\n    getSplatScene(sceneIndex) {\r\n        return this.viewer.getSplatScene(sceneIndex);\r\n    }\r\n\r\n    removeSplatScene(index) {\r\n        return this.viewer.removeSplatScene(index);\r\n    }\r\n\r\n    dispose() {\r\n        return this.viewer.dispose();\r\n    }\r\n\r\n    static onBeforeRender(viewer, renderer, threeScene, camera) {\r\n        if (this.splatMesh !== this.viewer.splatMesh) {\r\n            if (this.splatMesh) {\r\n                this.remove(this.splatMesh);\r\n            }\r\n            this.splatMesh = this.viewer.splatMesh;\r\n            this.add(this.viewer.splatMesh);\r\n        }\r\n        viewer.update(renderer, camera);\r\n    }\r\n\r\n    static createCallbackMesh() {\r\n        const geometry = new THREE.SphereGeometry(1, 8, 8);\r\n        const material = new THREE.MeshBasicMaterial();\r\n        material.colorWrite = false;\r\n        material.depthWrite = false;\r\n        const mesh = new THREE.Mesh(geometry, material);\r\n        mesh.frustumCulled = false;\r\n        return mesh;\r\n    }\r\n\r\n}\r\n"],"names":["AbortablePromise","static","constructor","promiseFunc","abortHandler","resolver","rejecter","this","promise","Promise","resolve","reject","promiseResolve","bind","promiseReject","args","error","id","idGen","then","onResolve","onResolveResult","args2","catch","onFail","abort","AbortedPromiseError","Error","msg","super","floatView","Float32Array","int32View","Int32Array","buffer","uintEncodedFloat","f","fetchWithProgress","path","onProgress","saveChunks","abortController","AbortController","signal","aborted","rejectFunc","fetch","async","data","reader","body","getReader","bytesDownloaded","_fileSize","headers","get","fileSize","parseInt","undefined","chunks","value","chunk","done","read","Blob","arrayBuffer","percent","percentLabel","length","toFixed","push","reason","clamp","val","min","max","Math","getCurrentTime","performance","now","disposeAllMeshes","object3D","geometry","dispose","material","children","child","delayedExecute","func","fast","window","setTimeout","getSphericalHarmonicsComponentCountForDegree","sphericalHarmonicsDegree","nativePromiseWithExtractedComponents","abortablePromiseWithExtractedComponents","Semver","major","minor","patch","toString","isIOS","ua","navigator","userAgent","indexOf","getIOSSemever","extract","match","UncompressedSplatArray","X","Y","Z","SCALE0","SCALE1","SCALE2","ROTATION0","ROTATION1","ROTATION2","ROTATION3","FDC0","FDC1","FDC2","OPACITY","FRC0","FRC1","FRC2","FRC3","FRC4","FRC5","FRC6","FRC7","FRC8","FRC9","FRC10","FRC11","FRC12","FRC13","FRC14","FRC15","FRC16","FRC17","FRC18","FRC19","FRC20","FRC21","FRC22","FRC23","sphericalHarmonicsCount","componentCount","defaultSphericalHarmonics","Array","fill","splats","splatCount","createSplat","baseSplat","shEntries","i","addSplat","splat","getSplat","index","addDefaultSplat","newSplat","addSplatFromComonents","x","y","z","scale0","scale1","scale2","rot0","rot1","rot2","rot3","r","g","b","opacity","rest","addSplatFromArray","src","srcIndex","srcSplat","Constants","SphericalHarmonics8BitCompressionHalfRange","SphericalHarmonics8BitCompressionRange","toHalfFloat","THREE","DataUtils","toUint8","v","floor","fromHalfFloat","fromHalfFloatToUint8","toUncompressedFloat","compressionLevel","isSH","dataViewFloatForCompressionLevel","dataView","floatIndex","getFloat32","getUint16","getUint8","copyBetweenBuffers","srcBuffer","srcOffset","destBuffer","destOffset","byteCount","Uint8Array","dest","SplatBuffer","BytesPerCenter","BytesPerScale","BytesPerRotation","BytesPerColor","ScaleOffsetBytes","RotationffsetBytes","ColorOffsetBytes","SphericalHarmonicsOffsetBytes","ScaleRange","BytesPerSphericalHarmonicsComponent","SphericalHarmonicsOffsetFloat","SphericalHarmonicsDegrees","BytesPerSplat","bufferData","secLoadedCountsToMax","constructFromBuffer","getSplatCount","getMaxSplatCount","maxSplatCount","getMinSphericalHarmonicsDegree","minSphericalHarmonicsDegree","sections","section","getBucketIndex","localSplatIndex","bucketIndex","maxSplatIndexInFullBuckets","fullBucketCount","bucketSize","bucketSplatIndex","partiallyFullBucketIndex","currentPartiallyFilledBucketSize","partiallyFilledBucketLengths","getSplatCenter","globalSplatIndex","outCenter","transform","sectionIndex","globalSplatIndexToSectionMap","splatCountOffset","srcSplatCentersBase","bytesPerSplat","DataView","dataBase","bucketBase","BucketStorageSizeFloats","sf","compressionScaleFactor","sr","compressionScaleRange","bucketArray","applyMatrix4","getSplatScaleAndRotation","scaleMatrix","Matrix4","rotationMatrix","tempMatrix","tempPosition","Vector3","scale","rotation","Quaternion","outScale","outRotation","srcSplatScalesBase","CompressionLevels","set","makeScale","makeRotationFromQuaternion","copy","multiply","decompose","getSplatColor","outColor","srcSplatColorsBase","splatColorsArray","fillSplatCenterArray","outCenterArray","srcFrom","srcTo","destFrom","center","centerDestBase","CenterComponentCount","tempMatrix4","Matrix3","covarianceMatrix","transformedCovariance","transform3x3","transform3x3Transpose","outCovariance","outOffset","desiredOutputCompressionLevel","setFromMatrix4","transpose","premultiply","elements","fillSplatCovarianceArray","covarianceArray","covarianceDestBase","CovarianceComponentCount","computeCovariance","fillSplatColorArray","outColorArray","minimumAlpha","colorDestBase","ColorComponentCount","alpha","fillSphericalHarmonicsArray","sphericalHarmonicVectors","tempMatrix3","sh11","sh12","sh13","sh21","sh22","sh23","sh24","sh25","shIn1","shIn2","shIn3","shIn4","shIn5","shOut1","shOut2","shOut3","shOut4","shOut5","noop","set3","array","val1","val2","val3","set3FromArray","srcDestView","stride","srcBase","copy3","srcArray","destArray","setOutput3","destBase","conversionFunc","toUncompressedFloatArray3","outSphericalHarmonicsArray","outSphericalHarmonicsDegree","outSphericalHarmonicsComponentsCount","srcSplatSHBase","shDestBase","compressionLevelForOutputConversion","outputConversionFunc","rotateSphericalHarmonics3","rotateSphericalHarmonics5","v1","v2","v3","transformRow","outArray","t0","t1","t2","addInto3","v4","v5","t3","t4","in1","in2","in3","tsh11","tsh12","tsh13","out1","out2","out3","dot3","in4","in5","tsh21","tsh22","tsh23","tsh24","tsh25","out4","out5","kSqrt0104","sqrt","kSqrt0304","kSqrt0103","kSqrt0403","kSqrt0112","dot5","parseHeader","headerArrayUint8","HeaderSizeBytes","headerArrayUint16","Uint16Array","headerArrayUint32","Uint32Array","headerArrayFloat32","versionMajor","versionMinor","maxSectionCount","sectionCount","sceneCenter","writeHeaderCountsToBuffer","writeHeaderToBuffer","header","parseSectionHeaders","offset","sectionHeaderArrayUint16","SectionHeaderSizeBytes","sectionHeaderArrayUint32","sectionHeaderArrayFloat32","sectionHeaders","sectionHeaderBase","sectionHeaderBaseUint16","sectionHeaderBaseUint32","sectionBase","bucketCount","bucketBlockSize","halfBucketBlockSize","bucketStorageSizeBytes","partiallyFilledBucketCount","bucketsMetaDataSizeBytes","bucketsStorageSizeBytes","calculateComponentStorage","splatDataStorageSizeBytes","storageSizeBytes","sectionHeader","base","bucketsBase","writeSectionHeaderToBuffer","sectionHeadeArrayUint16","sectionHeadeArrayUint32","sectionHeadeArrayFloat32","BucketStorageSizeBytes","writeSectionHeaderSplatCountToBuffer","globalSplatIndexToLocalSplatIndexMap","linkBufferArrays","buildMaps","bytesPerCenter","bytesPerScale","bytesPerRotation","bytesPerColor","sphericalHarmonicsComponentsPerSplat","sphericalHarmonicsBytesPerSplat","cumulativeSplatCount","j","updateLoadedCounts","newSectionCount","newSplatCount","updateSectionLoadedCounts","sectionHeaderOffset","tempCenterBuffer","ArrayBuffer","tempScaleBuffer","tempRotationBuffer","tempColorBuffer","tempSHBuffer","tempRot","tempScale","bucketCenterDelta","OFFSET_X","OFFSET_Y","OFFSET_Z","OFFSET_SCALE0","OFFSET_SCALE1","OFFSET_SCALE2","OFFSET_ROT0","OFFSET_ROT1","OFFSET_ROT2","OFFSET_ROT3","OFFSET_FDC0","OFFSET_FDC1","OFFSET_FDC2","OFFSET_OPACITY","OFFSET_FRC0","OFFSET_FRC9","OFFSET","compressPositionOffset","doubleCompressionScaleRange","round","targetSplat","sectionBuffer","bufferOffset","bucketCenter","centerBase","scaleBase","rotationBase","colorBase","sphericalHarmonicsBase","normalize","rot","RotationComponentCount","ScaleComponentCount","w","shOut","s","sub","bytesPerSHComponent","srcVal","degree1ByteCount","rgba","Uint8ClampedArray","generateFromUncompressedSplatArrays","splatArrays","blockSize","options","shDegree","sa","splatArray","sectionBuffers","sectionHeaderBuffers","totalSplatCount","validSplats","sectionOptions","sectionBlockSize","blockSizeFactor","BucketBlockSize","sectionBucketSize","ceil","bucketSizeFactor","BucketSize","bucketInfo","computeBucketsForUncompressedSplatArray","fullBuckets","partiallyFullBucketLengths","partiallyFullBuckets","map","bucket","buckets","sectionDataSizeBytes","bucketMetaDataSizeBytes","bucketDataBytes","sectionSizeBytes","outSplatCount","fromArray","row","writeSplatDataToSectionBuffer","bucketMetaDataArray","pfb","sectionHeaderBuffer","sectionsCumulativeSizeBytes","byteLength","unifiedBufferSize","unifiedBuffer","currentUnifiedBase","halfBlockSize","dimensions","yBlocks","zBlocks","blockCenter","xBlock","yBlock","zBlock","bucketId","toArray","partiallyFullBucketArray","hasOwnProperty","HeaderMagicBytes","HeaderEndTokenBytes","HeaderEndToken","DataTypeMap","Map","Int8Array","Int16Array","Float64Array","unpackUnorm","bits","t","unpack111011","result","lerp","a","getElementPropStorage","element","name","properties","find","p","storage","PlayCanvasCompressedPlyParser","decodeHeaderText","headerText","chunkElement","vertexElement","headerLines","split","filter","line","startsWith","words","count","has","StorageType","storageSizeByes","BYTES_PER_ELEMENT","type","byteSize","headerSizeBytes","decodeHeader","plyBuffer","endHeaderTokenOffset","buf","search","endIndex","TextDecoder","decode","slice","readElementData","readBuffer","readOffset","fromIndex","toIndex","propertyFilter","e","property","requiredStorageSizeBytes","getInt8","getInt16","getInt32","getUint32","getFloat64","readPly","readIndex","getElementStorageArrays","minX","minY","minZ","maxX","maxY","maxZ","minScaleX","minScaleY","minScaleZ","positionExtremes","scaleExtremes","maxScaleX","maxScaleY","maxScaleZ","position","color","c","Vector4","chunkSplatIndexOffset","positionArray","scaleArray","rotationArray","colorArray","outSplat","chunkIndex","norm","m","unpackRot","exp","parseToUncompressedSplatBufferSection","vertexDataBuffer","veretxReadOffset","outBuffer","outBytesPerSplat","tempSplat","decompressSplat","outBase","parseToUncompressedSplatArray","identity","PlyFormat","FieldSizeIdDouble","FieldSizeIdInt","FieldSizeIdUInt","FieldSizeIdFloat","FieldSizeIdShort","FieldSizeIdUShort","FieldSizeIdUChar","FieldSizeStringMap","double","int","uint","float","short","ushort","uchar","FieldSize","PlyParserUtils","decodeSectionHeader","fieldNameIdMap","headerStartLine","extractedLines","processingSection","headerEndLine","vertexCount","endOfHeader","sectionName","fieldIds","fieldTypes","allFieldNames","usedFieldNames","fieldTypesByName","trim","lineComponents","validComponents","lineComponent","trimmedComponent","fieldMatch","fieldTypeStr","fieldName","fieldId","fieldType","fieldOffsets","bytesPerVertex","sphericalHarmonics","decodeSphericalHarmonicsFromSectionHeader","dataSizeBytes","degree","sphericalHarmonicsCoefficientsPerChannel","coefficientsPerChannel","sphericalHarmonicsDegree1Fields","degree1Fields","sphericalHarmonicsDegree2Fields","degree2Fields","fieldNames","sphericalHarmonicsFieldCount","rgb","getHeaderSectionNames","sectionNames","headerLine","checkTextForEndHeader","endHeaderTestText","includes","checkBufferForEndHeader","searchOfset","chunkSize","decoder","endHeaderTestChunk","extractHeaderFromBufferToText","headerOffset","readChunkSize","headerChunk","readHeaderFromBuffer","convertHeaderTextToLines","prunedLines","determineHeaderFormatFromHeaderText","headertText","format","determineHeaderFormatFromPlyBuffer","readVertex","vertexData","dataOffset","fieldsToRead","rawVertex","FieldNamesToRead","FieldsToReadIndexes","SCALE_0","SCALE_1","SCALE_2","ROT_0","ROT_1","ROT_2","ROT_3","F_DC_0","F_DC_1","F_DC_2","RED","GREEN","BLUE","F_REST_0","INRIAV1PlyParser","plyParserutils","decodeHeaderLines","reduce","acc","decodeHeaderFromBuffer","findSplatData","fromSplat","toSplat","splatData","splatDataOffset","toBuffer","toOffset","parsedSplat","parseToUncompressedSplat","decodeSectionSplatData","sectionSplatData","rawSplat","tempRotation","OFFSET_ROTATION0","OFFSET_ROTATION1","OFFSET_ROTATION2","OFFSET_ROTATION3","OFFSET_FRC","readSplat","SH_C0","CodeBookEntryNamesToRead","CodeBookEntriesToReadIndexes","CB_FEATURES_DC","CB_FEATURES_REST_0","CB_FEATURES_REST_3","CB_OPACITY","CB_SCALING","CB_ROTATION_RE","CB_ROTATION_IM","PLY_SCALE_0","PLY_SCALE_1","PLY_SCALE_2","PLY_ROT_0","PLY_ROT_1","PLY_ROT_2","PLY_ROT_3","PLY_X","PLY_Y","PLY_Z","PLY_F_DC_0","PLY_F_DC_1","PLY_F_DC_2","PLY_OPACITY","PLY_RED","PLY_GREEN","PLY_BLUE","hf","NaN","pow","INRIAV2PlyParser","decodeSectionHeadersFromHeaderLines","codeBookEntriesToReadIdMap","codeBookSectionIndex","currentStartLine","lastSectionFound","decodeSectionHeadersFromHeaderText","getSplatCountFromSectionHeaders","decodeHeaderFromHeaderText","findVertexData","targetSection","byteOffset","decodeCodeBook","codeBookData","codeBook","codeBookElementOffset","codeBookPage","page","baseValue","unified","PlyParser","plyFormat","SplatPartitioner","sectionFilters","groupingParameters","partitionGenerator","partitionUncompressedSplatArray","results","newArrays","sectionSplats","sectionFilter","parameters","getStandardPartitioner","partitionSize","clampDistance","forEach","point","centerDist","lengthSq","sort","patitionCount","currentStartSplat","startSplat","splatIndex","blocksSize","SplatBufferGenerator","splatPartitioner","alphaRemovalThreshold","sectionSize","generateFromUncompressedSplatArray","partitionResults","getStandardGenerator","LoaderStatus","storeChunksInBuffer","inBytes","sizeBytes","PlyLoader","loadFromURL","fileName","progressiveLoad","onStreamedSectionProgress","progressiveLoadSectionSizeBytes","ProgressiveLoadSectionSize","splatDataOffsetBytes","progressiveLoadBufferIn","progressiveLoadBufferOut","progressiveLoadSplatBuffer","compressedPlyHeaderChunksBuffer","headerLoaded","readyToLoadSplatData","compressed","progressiveLoadPromise","numBytesStreamed","numBytesParsed","numBytesDownloaded","textDecoder","inriaV1PlyParser","chunkData","loadComplete","startBytes","endBytes","sizeRequiredForHeaderAndChunks","shDescriptor","splatBufferSizeBytes","CurrentMajorVersion","CurrentMinorVersion","numBytesToProcess","addedSplatCount","numBytesToParse","numBytesLeftOver","parsedDataViewOffset","dataToParse","keepChunks","keepSize","unshift","plyFileData","loadFromFileData","splatBuffer","SplatParser","fromBuffer","fromOffset","outBytesPerCenter","outBytesPerScale","outBytesPerRotation","inBase","RowSizeBytes","inCenter","inScale","CenterSizeBytes","inColor","ScaleSizeBytes","inRotation","RotationSizeBytes","quat","parseStandardSplatToUncompressedSplatArray","inBuffer","ColorSizeBytes","SplatLoader","optimizeSplatData","numBytesLoaded","percentStr","bytesLoadedSinceLastSection","fullBuffer","splatFileData","KSplatLoader","checkVersion","minVersionMajor","minVersionMinor","externalOnProgress","onSectionBuilt","progressiveLoadBuffer","headerBuffer","sectionHeadersBuffer","headerLoading","sectionHeadersLoaded","sectionHeadersLoading","numBytesProgressivelyLoaded","totalBytesToDownload","downloadComplete","loadSectionQueued","queuedCheckAndLoadSectionsCount","checkAndLoadSectionHeaders","performLoad","totalSectionStorageStorageByes","totalStorageSizeBytes","checkAndLoadSections","baseDataOffset","reachedSections","loadedSplatCount","bytesRequiredToReachSectionSplatData","bytesPastSSectionSplatDataStart","loadedSplatsForSection","percentComplete","ProgressiveLoadSectionDelayDuration","fileData","downLoadLink","blob","document","createElement","appendChild","download","href","URL","createObjectURL","click","SceneFormat","Splat","KSplat","Ply","sceneFormatFromPath","endsWith","_changeEvent","_startEvent","_endEvent","_ray","Ray","_plane","Plane","TILT_LIMIT","cos","MathUtils","DEG2RAD","OrbitControls","EventDispatcher","object","domElement","style","touchAction","enabled","target","minDistance","maxDistance","Infinity","minZoom","maxZoom","minPolarAngle","maxPolarAngle","PI","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","panSpeed","screenSpacePanning","keyPanSpeed","zoomToCursor","autoRotate","autoRotateSpeed","keys","LEFT","UP","RIGHT","BOTTOM","mouseButtons","MOUSE","ROTATE","MIDDLE","DOLLY","PAN","touches","ONE","TOUCH","TWO","DOLLY_PAN","target0","clone","position0","zoom0","zoom","_domElementKeyEvents","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","getDistance","distanceTo","listenToKeyEvents","addEventListener","onKeyDown","stopListenToKeyEvents","removeEventListener","saveState","scope","reset","clearDampedRotation","clearDampedPan","updateProjectionMatrix","dispatchEvent","update","state","STATE","NONE","sphericalDelta","panOffset","setFromUnitVectors","up","quatInverse","invert","lastPosition","lastQuaternion","lastTargetPosition","twoPI","applyQuaternion","setFromVector3","rotateLeft","isFinite","makeSafe","addScaledVector","add","performCursorZoom","isOrthographicCamera","radius","setFromSpherical","lookAt","multiplyScalar","zoomChanged","newRadius","isPerspectiveCamera","prevRadius","radiusDelta","dollyDirection","updateMatrixWorld","mouseBefore","mouse","unproject","mouseAfter","console","warn","transformDirection","matrix","origin","direction","abs","dot","setFromNormalAndCoplanarPoint","intersectPlane","distanceToSquared","EPS","quaternion","onContextMenu","onPointerDown","onPointerUp","onMouseWheel","onPointerMove","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","Spherical","rotateStart","Vector2","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","pointers","pointerPositions","getZoomScale","angle","rotateUp","panLeft","distance","objectMatrix","setFromMatrixColumn","panUp","crossVectors","pan","deltaX","deltaY","targetDistance","tan","fov","clientHeight","right","left","clientWidth","top","bottom","dollyOut","dollyScale","dollyIn","updateMouseParameters","event","rect","getBoundingClientRect","clientX","clientY","width","h","height","dist","handleMouseDownRotate","handleMouseDownPan","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","dx","dy","handleTouchMoveRotate","getSecondPointerPosition","subVectors","handleTouchMovePan","handleTouchMoveDolly","setPointerCapture","pointerId","addPointer","pointerType","trackPointer","DOLLY_ROTATE","onTouchStart","mouseAction","button","handleMouseDownDolly","ctrlKey","metaKey","shiftKey","onMouseDown","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","onTouchMove","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","onMouseMove","splice","removePointer","releasePointerCapture","preventDefault","handleMouseWheel","needsUpdate","code","handleKeyDown","pointer","passive","LoadingSpinner","message","container","taskIDGen","elementID","elementIDGen","tasks","spinnerContainerOuter","className","display","spinnerContainerPrimary","spinnerPrimary","classList","messageContainerPrimary","innerHTML","spinnerContainerMin","spinnerMin","messageContainerMin","setMinimized","fadeTransitions","addTask","newTask","removeTask","task","removeAllTasks","setMessageForTask","show","setMessage","hide","visible","setContainer","removeChild","zIndex","minimized","instant","showHideSpinner","displayStyle","fadeTransitionsIndex","out","duration","onComplete","startTime","startOpacity","parseFloat","isNaN","interval","setInterval","elapsed","clearInterval","fadeElement","LoadingProgressBar","progressBarContainerOuter","progressBarBox","progressBarBackground","progressBar","setProgress","progress","InfoPanel","infoCells","layout","infoPanelContainer","append","infoPanel","infoTable","layoutEntry","labelCell","spacerCell","infoCell","renderDimensions","cameraPosition","cameraLookAtPosition","cameraUp","orthographicCamera","meshCursorPosition","currentFPS","splatRenderCount","splatRenderCountPct","lastSortTime","focalAdjustment","splatScale","pointCloudMode","cameraPosString","cla","cameraLookAtString","cameraLookAt","cameraUpString","cursPos","cursorPosString","cursorPosition","fps","renderWindow","renderSplatCount","sortTime","ArrowHelper","Object3D","dir","headLength","headRadius","lineGeometry","CylinderGeometry","translate","coneGeometry","Mesh","MeshBasicMaterial","toneMapped","matrixAutoUpdate","cone","setDirection","_axis","radians","acos","setFromAxisAngle","setColor","source","SceneHelper","threeScene","splatRenderTarget","renderTargetCopyQuad","renderTargetCopyCamera","meshCursor","focusMarker","controlPlane","debugRoot","secondaryDebugRoot","updateSplatRenderTargetForRenderDimensions","destroySplatRendertarget","WebGLRenderTarget","RGBAFormat","stencilBuffer","depthBuffer","depthTexture","DepthTexture","DepthFormat","UnsignedIntType","setupRenderTargetCopyObjects","renderTargetCopyMaterial","ShaderMaterial","vertexShader","fragmentShader","uniforms","sourceColorTexture","sourceDepthTexture","depthWrite","depthTest","transparent","blending","CustomBlending","blendSrc","SrcAlphaFactor","blendSrcAlpha","blendDst","OneMinusSrcAlphaFactor","blendDstAlpha","extensions","fragDepth","PlaneGeometry","OrthographicCamera","destroyRenderTargetCopyObjects","setupMeshCursor","ConeGeometry","coneMaterial","downArrow","upArrow","leftArrow","rightArrow","destroyMeshCursor","remove","setMeshCursorVisibility","getMeschCursorVisibility","setMeshCursorPosition","positionAndOrientMeshCursor","camera","setupFocusMarker","sphereGeometry","SphereGeometry","focusMarkerMaterial","buildFocusMarkerMaterial","destroyFocusMarker","updateFocusMarker","toCamera","viewport","matrixWorld","toCameraDistance","realFocusPosition","uniformsNeedUpdate","setFocusMarkerVisibility","setFocusMarkerOpacity","getFocusMarkerOpacity","setupControlPlane","planeGeometry","rotateX","planeMaterial","side","DoubleSide","planeMesh","arrowDir","arrowOrigin","arrowHelper","destroyControlPlane","setControlPlaneVisibility","positionAndOrientControlPlane","tempQuaternion","defaultUp","addDebugMeshes","createDebugMeshes","createSecondaryDebugMeshes","destroyDebugMeshes","renderOrder","debugMeshRoot","createMesh","sphereMesh","buildDebugMaterial","boxGeometry","BoxGeometry","boxMesh","separation","Color","FrontSide","VectorRight","VectorUp","VectorBackward","setParameters","boxContainsPoint","box","epsilon","intersectBox","planeIntersectionPoint","planeIntersectionPointArray","originArray","directionArray","outHit","normal","hitNormal","extremeVec","multiplier","sign","toSide","idx1","idx2","intersectSphere","toSphereCenterVec","toClosestApproach","toClosestApproachSq","diffSq","radiusSq","thc","Hit","hitClone","Raycaster","raycastAgainstTrueSplatEllipsoid","ray","setFromCameraAndScreenPosition","ndcCoords","screenPosition","screenDimensions","setFromMatrixPosition","near","far","intersectSplatMesh","toLocal","fromLocal","sceneTransform","localRay","tempPoint","splatMesh","outHits","splatTree","getSplatTree","subTrees","subTree","dynamicMode","getSceneTransform","outHitsForSubTree","rootNode","castRayAtSplatTreeNode","hit","tempColor","tempCenter","tempHit","scaleEpsilon","uniformScaleMatrix","toSphereSpace","fromSphereSpace","tempRay","node","boundingBox","indexes","splatGlobalIndex","splatSceneIndex","getSceneIndexForSplat","getScene","uniformScale","log10","SplatMaterial","build","enableOptionalEffects","antialiased","maxScreenSpaceSplatSize","pointCloudModeEnabled","maxSphericalHarmonicsDegree","vertexShaderSource","MaxScenes","fadeInComplete","orthographicMode","visibleRegionFadeStartRadius","visibleRegionRadius","currentTime","firstRenderTime","covariancesTexture","centersColorsTexture","sphericalHarmonicsTexture","sphericalHarmonicsTextureR","sphericalHarmonicsTextureG","sphericalHarmonicsTextureB","focal","orthoZoom","inverseFocalAdjustment","basisViewport","debugColor","covariancesTextureSize","centersColorsTextureSize","sphericalHarmonicsTextureSize","sphericalHarmonics8BitMode","sphericalHarmonicsMultiTextureMode","sceneOpacity","sceneVisibility","transformMatrices","alphaTest","NormalBlending","SplatGeometry","baseGeometry","BufferGeometry","setIndex","positionsArray","positions","BufferAttribute","setAttribute","setXYZ","InstancedBufferGeometry","splatIndexArray","splatIndexes","InstancedBufferAttribute","setUsage","DynamicDrawUsage","instanceCount","SplatScene","updateTransform","copyTransformData","otherScene","compose","SplatTreeNode","depth","Box3","SplatSubTree","maxDepth","maxCentersPerNode","sceneDimensions","sceneMin","sceneMax","nodesWithIndexes","convertWorkerSubTreeNode","workerSubTreeNode","minVector","maxVector","convertedNode","convertWorkerSubTree","workerSubTree","convertedSubTree","visitLeavesFromNode","visitFunc","createSplatTreeWorker","self","WorkerSplatTreeNodeIDGen","WorkerBox3","containsPoint","WorkerSplatSubTree","addedIndexes","disposed","WorkerSplatTreeNode","processSplatTreeNode","tree","indexToCenter","sceneCenters","newIndexes","nodeDimensions","halfDimensions","nodeCenter","childrenBounds","splatCounts","baseIndexes","childNode","buildSubTree","centerCount","onmessage","process","allCenters","postMessage","createSplatTree","centers","SplatTree","diposeSplatTreeWorker","splatTreeWorker","terminate","processSplatMesh","filterFunc","onIndexesUpload","onSplatTreeConstruction","Worker","addCentersForScene","splatOffset","addedCount","addBase","checkForEarlyExit","scenes","transferBuffers","workerProcessCenters","countLeaves","leafCount","visitLeaves","WebGLExtensions","gl","getExtension","extension","init","capabilities","isWebGL2","WebGLCapabilities","maxAnisotropy","getMaxPrecision","precision","getShaderPrecisionFormat","VERTEX_SHADER","HIGH_FLOAT","FRAGMENT_SHADER","MEDIUM_FLOAT","WebGL2RenderingContext","maxPrecision","drawBuffers","logarithmicDepthBuffer","maxTextures","getParameter","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","maxTextureSize","MAX_TEXTURE_SIZE","maxCubemapSize","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","MAX_VERTEX_ATTRIBS","maxVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","vertexTextures","floatFragmentTextures","getMaxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","floatVertexTextures","maxSamples","MAX_SAMPLES","SceneRevealMode","Default","Gradual","Instant","LogLevel","None","Warning","Info","Debug","dummyGeometry","dummyMaterial","SplatMesh","halfPrecisionCovariancesOnGPU","devicePixelRatio","enableDistancesComputationOnGPU","integerBasedDistancesComputation","logLevel","renderer","baseSplatTree","splatDataTextures","distancesTransformFeedback","program","centersBuffer","sceneIndexesBuffer","outDistancesBuffer","centersLoc","modelViewProjLoc","sceneIndexesLoc","transformsLocs","globalSplatIndexToSceneIndexMap","lastBuildSplatCount","lastBuildScenes","lastBuildMaxSplatCount","lastBuildSceneCount","finalBuild","webGLUtils","calculatedSceneCenter","maxSplatDistanceFromSceneCenter","visibleRegionBufferRadius","visibleRegionChanging","lastRenderer","buildScenes","splatBuffers","sceneOptions","createScene","splatAlphaRemovalThreshold","buildSplatIndexMaps","localSplatIndexMap","sceneIndexMap","buildSplatTree","minAlphas","onSplatTreeIndexesUpload","disposeSplatTree","buildStartTime","splatColor","sceneIndex","minAlpha","buildTime","log","leavesWithVertices","avgSplatCount","nodeCount","nodeSplatCount","keepSceneTransforms","preserveVisibleRegion","getTotalMaxSplatCountForSplatBuffers","newScenes","newScene","existingScene","splatBufferSphericalHarmonicsDegree","splatBuffersChanged","isUpdateBuild","disposeMeshData","indexMaps","setupDistancesComputationTransformFeedback","dataUpdateResults","refreshGPUDataFromSplatBuffers","onSplatTreeReadyCallback","freeIntermediateSplatData","deleteTextureData","texture","image","onUpdate","baseData","covariances","colors","centerColors","sceneIndexes","textures","disposeTextures","computeDistancesOnGPUSyncTimeout","clearTimeout","disposeDistancesComputationGPUResources","textureKey","textureContainer","onSplatTreeReady","callback","getDataForDistancesComputation","start","end","getIntegerCenters","getFloatCenters","getSceneIndexes","sinceLastBuildOnly","refreshDataTexturesFromSplatBuffers","updateStart","refreshGPUBuffersForDistancesComputation","from","to","updateGPUCentersBufferForDistancesComputation","updateGPUTransformIndexesBufferForDistancesComputation","updateBaseDataFromSplatBuffers","updateDataTexturesFromBaseData","setupDataTextures","updateVisibleRegion","computeDataTextureSize","elementsPerTexel","elementsPerSplat","texSize","covarianceCompressionLevel","getTargetCovarianceCompressionLevel","shCompressionLevel","getTargetSphericalHarmonicsCompressionLevel","SphericalHarmonicsArrayType","shComponentCount","shData","fillSplatDataArrays","covTexSize","CovariancesDataType","covariancesTextureType","HalfFloatType","FloatType","paddedCovariances","covTex","DataTexture","centersColsTexSize","paddedCentersCols","updateCenterColorsPaddedData","centersColsTex","RGBAIntegerFormat","internalFormat","size","shTextureType","UnsignedByteType","paddedSHComponentCount","shElementsPerTexel","texelFormat","RGFormat","shTexSize","paddedSHArray","shTexture","paddedComponentCount","textureCount","shComponentCountPerChannel","paddedSHArraySize","textureUniforms","paddedSHArrays","shTextures","componentCountPerChannel","sceneIndexesTexSize","paddedTransformIndexes","sceneIndexesTexture","RedIntegerFormat","sceneIndexesTextureSize","shTextureDesc","covariancesTextureDescriptor","covariancesEndSplat","covariance","covariancesTextureProps","__webglTexture","covaranceBytesPerElement","updateDataTexture","centerColorsTextureDescriptor","paddedCenterColors","centerColorsTexture","centerColorsTextureProps","shBytesPerElement","updateTexture","shTextureSize","shTextureProps","sceneIndexesTexDesc","sceneIndexesTextureProps","getMaximumSplatBufferCompressionLevel","maxCompressionLevel","getMinimumSplatBufferCompressionLevel","minCompressionLevel","computeTextureUpdateRegion","endSplat","textureWidth","texelsPerSplat","startSplatTexels","startRow","startRowElement","endSplatTexels","endRow","dataStart","dataEnd","paddedData","textureSize","textureProps","getContext","updateRegion","updateElementCount","updateDataView","updateHeight","glType","convert","glFormat","colorSpace","currentTexture","TEXTURE_BINDING_2D","bindTexture","TEXTURE_2D","texSubImage2D","colorsBase","centersBase","centerColorsBase","arr","avgCenter","scene","distFromCSceneCenter","updateVisibleRegionFadeDistance","sceneRevealMode","defaultFadeInRate","fadeInRate","shaderFadeInComplete","updateRenderIndexes","globalIndexes","attributes","updateTransforms","updateUniforms","cameraFocalLengthX","cameraFocalLengthY","orthographicZoom","transforms","setSplatScale","getSplatScale","setPointCloudModeEnabled","getPointCloudModeEnabled","getSplatDataTextures","getTotalSplatCountForScenes","getTotalSplatCountForSplatBuffers","getTotalMaxSplatCountForScenes","vao","deleteVertexArray","deleteProgram","deleteShader","disposeDistancesComputationGPUBufferResources","deleteTransformFeedback","deleteBuffer","setRenderer","WebGLUtils","currentMaxSplatCount","rebuildGPUObjects","rebuildBuffers","createShader","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","typeName","errors","getShaderInfoLog","vsSource","currentVao","VERTEX_ARRAY_BINDING","currentProgram","CURRENT_PROGRAM","currentProgramDeleted","getProgramParameter","DELETE_STATUS","createVertexArray","bindVertexArray","createProgram","attachShader","transformFeedbackVaryings","SEPARATE_ATTRIBS","linkProgram","LINK_STATUS","getProgramInfoLog","useProgram","getAttribLocation","getUniformLocation","createBuffer","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribIPointer","INT","vertexAttribPointer","FLOAT","UNSIGNED_INT","STATIC_READ","createTransformFeedback","bindTransformFeedback","TRANSFORM_FEEDBACK","bindBufferBase","TRANSFORM_FEEDBACK_BUFFER","isUpdate","offsetSplats","ArrayType","subBufferOffset","bufferSubData","maxArray","STATIC_DRAW","fillTransformsArray","tempArray","sceneTransformElements","computeDistancesOnGPU","modelViewProjMatrix","outComputedDistances","enable","RASTERIZER_DISCARD","iTempMatrix","getIntegerMatrixArray","iTransform","uniform4i","uniformMatrix4fv","iViewProjMatrix","iViewProj","uniform3i","viewProj","uniform3f","beginTransformFeedback","POINTS","drawArrays","endTransformFeedback","disable","sync","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","checkSync","timeout","bitflags","clientWaitSync","TIMEOUT_EXPIRED","WAIT_FAILED","deleteSync","getBufferSubData","getLocalSplatParameters","globalIndex","paramsObj","returnSceneTransform","getSplatBufferForSplat","localIndex","getSplatLocalIndex","getSceneTransformForSplat","applySceneTransform","sphericalHarmonicsCompressionLevel","srcStart","srcEnd","destStart","padFour","floatCenters","intCenters","paddedFloatCenters","outTransform","matrixElements","intMatrixArray","SorterWasmNoSIMD","sortWorker","wasmInstance","wasmMemory","useSharedMemory","integerBasedSort","indexesToSortOffset","sortedIndexesOffset","sceneIndexesOffset","transformsOffset","precomputedDistancesOffset","mappedDistancesOffset","frequenciesOffset","centersOffset","modelViewProjOffset","countsZero","sortedIndexesOut","range","BytesPerInt","BytesPerFloat","centerDataSet","renderCount","sortCount","splatSortCount","usePrecomputedDistances","copyIndexesToSort","copyPrecomputedDistances","copyTransforms","indexesToSort","precomputedDistances","modelViewProj","sortStartTime","DepthMapRange","exports","sortIndexes","sortMessage","sortDone","sortedIndexes","sortEndTime","CENTERS_BYTES_PER_ENTRY","sorterWasmBytes","matrixSize","memoryRequiredForIndexesToSort","memoryRequiredForCenters","memoryRequiredForModelViewProjectionMatrix","memoryRequiredForPrecomputedDistances","memoryRequiredForMappedDistances","memoryRequiredForSortedIndexes","memoryRequiredForIntermediateSortBuffers","memoryRequiredforTransformIndexes","memoryRequiredforTransforms","extraMemory","MemoryPageSize","totalRequiredMemory","totalPagesRequired","sorterWasmImport","module","env","memory","WebAssembly","Memory","initial","maximum","shared","compile","wasmModule","instantiate","instance","sortSetupPhase1Complete","indexesToSortBuffer","sortedIndexesBuffer","precomputedDistancesBuffer","transformsBuffer","WebXRMode","VR","AR","VRButton","createButton","disableButton","cursor","onmouseenter","onmouseleave","onclick","stylizeElement","padding","border","borderRadius","background","font","textAlign","outline","xr","isSessionSupported","supported","currentSession","onSessionStarted","session","onSessionEnded","setSession","textContent","sessionInit","optionalFeatures","requestSession","offerSession","err","showEnterVR","xrSessionIsGranted","exception","isSecureContext","location","replace","textDecoration","registerSessionGrantedListener","test","ARButton","domOverlay","overlay","svg","createElementNS","root","setReferenceSpaceType","showStartAR","RenderMode","Always","OnChange","Never","Viewer","initialCameraPosition","initialCameraLookAt","dropInMode","selfDrivenMode","selfDrivenUpdateFunc","selfDrivenUpdate","useBuiltInControls","rootElement","ignoreDevicePixelRatio","gpuAcceleratedSort","sharedMemoryForWorkers","dynamicScene","webXRMode","webXRActive","renderMode","enableSIMDInSort","plyInMemoryCompressionLevel","semver","createSplatMesh","controls","perspectiveControls","orthographicControls","perspectiveCamera","showMeshCursor","showControlPlane","showInfo","sceneHelper","sortRunning","sortWorkerIndexesToSort","sortWorkerSortedIndexes","sortWorkerPrecomputedDistances","sortWorkerTransforms","runAfterNextSort","selfDrivenModeRunning","splatRenderReady","raycaster","startInOrthographicMode","consecutiveRenderFrames","previousCameraTarget","nextCameraTarget","mousePosition","mouseDownPosition","mouseDownTime","resizeObserver","mouseMoveListener","mouseDownListener","mouseUpListener","keyDownListener","sortPromise","sortPromiseResolver","splatSceneDownloadPromises","splatSceneDownloadAndBuildPromise","splatSceneRemovalPromise","loadingSpinner","loadingProgressBar","usingExternalCamera","usingExternalRenderer","initialized","disposing","frustumCulled","parentElement","setupCamera","setupRenderer","setupWebXR","setupControls","setupEventHandlers","Scene","getRenderDimensions","PerspectiveCamera","WebGLRenderer","antialias","setPixelRatio","autoClear","setClearColor","setSize","ResizeObserver","forceRenderNextFrame","observe","onMouseUp","removeEventHandlers","setRenderMode","forward","tempMatrixLeft","tempMatrixRight","makeRotationAxis","setOrthographicMode","offsetX","offsetY","clickOffset","onMouseClick","checkForFocalPointChange","toNewFocalPoint","transitioningCameraTarget","intersectionPoint","transitioningCameraTargetStartTime","outDimensions","offsetWidth","offsetHeight","getSize","fromCamera","resetControls","fromControls","toControls","setCameraZoomFromPosition","setCameraPositionFromZoom","tempVector","positionCamera","zoomedCamera","toLookAtDistance","negate","zoomCamera","positionZamera","updateSplatMesh","focalLengthX","projectionMatrix","focalLengthY","focalMultiplier","adjustForWebXRStereo","xrCameraProj00","getCamera","cameraProj00","isLoadingOrUnloading","Object","isDisposingOrDisposed","addSplatSceneDownloadPromise","removeSplatSceneDownloadPromise","setSplatSceneDownloadAndBuildPromise","clearSplatSceneDownloadAndBuildPromise","addSplatScene","isProgressivelyLoadable","showLoadingUI","loadingUITaskId","onProgressUIUpdate","percentCompleteLabel","loaderStatus","suffix","downloadDone","downloadedPercentage","splatBuffersAddedUIUpdate","firstBuild","downloadAndBuildSingleSplatSceneProgressiveLoad","downloadAndBuildSingleSplatSceneStandardLoad","addSplatBufferOptions","orientation","addSplatBuffers","buildFunc","onException","downloadAndBuildPromise","downloadPromise","downloadSplatSceneToSplatBuffer","onDownloadProgress","onDownloadException","progressiveLoadedSectionBuildCount","progressiveLoadedSectionBuilding","queuedProgressiveLoadSectionBuilds","checkAndBuildProgressiveLoadSections","queuedBuild","shift","progressiveLoadFirstSectionBuildPromise","splatSceneDownloadPromise","addSplatScenes","fileCount","onLoadProgress","fileIndex","totalPercent","downloadPromises","nativeLoadPromises","abortHandlers","all","finally","progressiveBuild","splatBufferOptions","showLoadingUIForSplatTreeBuild","replaceExisting","enableRenderBeforeFirstSort","splatProcessingTaskId","finish","buildResults","updateSplatSort","addSplatBuffersToMesh","disposeSortWorker","setupSortWorker","splatOptimizingTaskId","allSplatBuffers","allSplatBufferOptions","finished","DistancesArrayType","worker","sourceWasm","iOSSemVer","sorterWasmBinaryString","atob","charCodeAt","createSortWorker","sortCanceled","removeSplatScene","revmovalTaskId","checkAndHideLoadingUI","onDone","savedSplatBuffers","savedSceneOptions","savedSceneTransformComponents","setAnimationLoop","requestFrameId","requestAnimationFrame","stop","cancelAnimationFrame","waitPromises","promisesToAbort","promiseKey","downloadPromiseToAbort","disposePromise","unobserve","toAbort","shouldRender","render","renderNextFrame","lastCameraPosition","lastCameraOrientation","changeEpsilon","cameraChanged","cp","co","savedAuoClear","hasRenderables","updateForDropInMode","updateForRendererSizeChanges","updateMeshCursor","updateFPS","timingSensitiveUpdates","updateInfoPanel","updateControlPlane","lastCalcTime","frameCount","lastRendererSize","currentRendererSize","lastCameraOrthographic","aspect","lastUpdateTime","timeDelta","updateCameraTransition","tempCameraTarget","toPreviousTarget","toNextTarget","rotationAngle","wasTransitioning","currentFocusMarkerOpacity","newFocusMarkerOpacity","mvpMatrix","cameraPositionArray","lastSortViewDir","sortViewDir","lastSortViewPos","sortViewOffset","queuedSorts","partialSorts","angleThreshold","sortFractions","force","angleDiff","positionDiff","needsRefreshForRotation","needsRefreshForPosition","shouldSortAll","gatherSceneNodesForSort","mvpCamera","partialSort","sortFraction","nodeRenderList","allSplatsSortBuffer","tempVectorYZ","tempVectorXZ","modelView","baseModelView","tempMax","nodeSize","gatherAllNodes","cameraFocalLength","fovXOver2","atan","fovYOver2","cosFovXOver2","cosFovYOver2","nodeRenderCount","distanceToNode","setX","setY","cameraAngleXZDot","cameraAngleYZDot","ns","currentByteOffset","windowSizeInts","windowSizeBytes","getSplatMesh","getSplatScene","isMobile","DropInViewer","Group","viewer","callbackMesh","createCallbackMesh","onBeforeRender","colorWrite","mesh"],"mappings":"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"}
import*as e from"three";import{Ray as t,Plane as s,MathUtils as n,EventDispatcher as r,Vector3 as i,MOUSE as o,TOUCH as a,Quaternion as l,Spherical as c,Vector2 as h}from"three";class d{static idGen=0;constructor(e,t){let s,n;this.promise=new Promise(((e,t)=>{s=e,n=t}));const r=s.bind(this),i=n.bind(this);e(((...e)=>{r(...e)}).bind(this),(e=>{i(e)}).bind(this)),this.abortHandler=t,this.id=d.idGen++}then(e){return new d(((t,s)=>{this.promise=this.promise.then(((...s)=>{const n=e(...s);n instanceof Promise||n instanceof d?n.then(((...e)=>{t(...e)})):t(n)})).catch((e=>{s(e)}))}),this.abortHandler)}catch(e){return new d((t=>{this.promise=this.promise.then(((...e)=>{t(...e)})).catch(e)}),this.abortHandler)}abort(){this.abortHandler&&this.abortHandler()}}class p extends Error{constructor(e){super(e)}}!function(){const e=new Float32Array(1),t=new Int32Array(e.buffer)}();const u=function(){const e=new Float32Array(1),t=new Int32Array(e.buffer);return function(s){return e[0]=s,t[0]}}(),A=function(e,t,s=!0){const n=new AbortController,r=n.signal;let i=!1,o=null;return new d(((n,a)=>{o=a,fetch(e,{signal:r}).then((async e=>{const r=e.body.getReader();let o=0,l=e.headers.get("Content-Length"),c=l?parseInt(l):void 0;const h=[];for(;!i;)try{const{value:e,done:i}=await r.read();if(i){if(t&&t(100,"100%",e,c),s){const e=new Blob(h).arrayBuffer();n(e)}else n();break}let a,l;if(o+=e.length,void 0!==c&&(a=o/c*100,l=`${a.toFixed(2)}%`),s&&h.push(e),t){t(a,l,e,c)&&(s=!1)}}catch(e){a(e);break}}))}),(e=>{n.abort(e),o(new p("Fetch aborted.")),i=!0}))},m=function(e,t,s){return Math.max(Math.min(e,s),t)},g=function(){return performance.now()/1e3},f=e=>{if(e.geometry&&(e.geometry.dispose(),e.geometry=null),e.material&&(e.material.dispose(),e.material=null),e.children)for(let t of e.children)f(t)},C=(e,t)=>new Promise((s=>{window.setTimeout((()=>{s(e())}),t?1:50)})),S=(e=0)=>{switch(e){case 1:return 9;case 2:return 24}return 0},y=()=>{let e,t;return{promise:new Promise(((s,n)=>{e=s,t=n})),resolve:e,reject:t}},x=e=>{let t,s;e||(e=()=>{});return{promise:new d(((e,n)=>{t=e,s=n}),e),resolve:t,reject:s}};class I{constructor(e,t,s){this.major=e,this.minor=t,this.patch=s}toString(){return`${this.major}_${this.minor}_${this.patch}`}}function v(){const e=navigator.userAgent;return e.indexOf("iPhone")>0||e.indexOf("iPad")>0}function B(){if(v()){const e=navigator.userAgent.match(/OS (\d+)_(\d+)_?(\d+)?/);return new I(parseInt(e[1]||0,10),parseInt(e[2]||0,10),parseInt(e[3]||0,10))}return null}class w{static OFFSET={X:0,Y:1,Z:2,SCALE0:3,SCALE1:4,SCALE2:5,ROTATION0:6,ROTATION1:7,ROTATION2:8,ROTATION3:9,FDC0:10,FDC1:11,FDC2:12,OPACITY:13,FRC0:14,FRC1:15,FRC2:16,FRC3:17,FRC4:18,FRC5:19,FRC6:20,FRC7:21,FRC8:22,FRC9:23,FRC10:24,FRC11:25,FRC12:26,FRC13:27,FRC14:28,FRC15:29,FRC16:30,FRC17:31,FRC18:32,FRC19:33,FRC20:34,FRC21:35,FRC22:36,FRC23:37};constructor(e=0){this.sphericalHarmonicsDegree=e,this.sphericalHarmonicsCount=S(this.sphericalHarmonicsDegree),this.componentCount=this.sphericalHarmonicsCount+14,this.defaultSphericalHarmonics=new Array(this.sphericalHarmonicsCount).fill(0),this.splats=[],this.splatCount=0}static createSplat(e=0){const t=[0,0,0,1,1,1,1,0,0,0,0,0,0,0];let s=S(e);for(let e=0;e<s;e++)t.push(0);return t}addSplat(e){this.splats.push(e),this.splatCount++}getSplat(e){return this.splats[e]}addDefaultSplat(){const e=w.createSplat(this.sphericalHarmonicsDegree);return this.addSplat(e),e}addSplatFromComonents(e,t,s,n,r,i,o,a,l,c,h,d,p,u,...A){const m=[e,t,s,n,r,i,o,a,l,c,h,d,p,u,...this.defaultSphericalHarmonics];for(let e=0;e<A.length&&e<this.sphericalHarmonicsCount;e++)m[e]=A[e];return this.addSplat(m),m}addSplatFromArray(e,t){const s=e.splats[t],n=w.createSplat(this.sphericalHarmonicsDegree);for(let e=0;e<this.componentCount&&e<s.length;e++)n[e]=s[e];this.addSplat(n)}}class b{static DepthMapRange=65536;static MemoryPageSize=65536;static BytesPerFloat=4;static BytesPerInt=4;static MaxScenes=32;static ProgressiveLoadSectionSize=262144;static ProgressiveLoadSectionDelayDuration=15;static SphericalHarmonics8BitCompressionRange=3}const E=b.SphericalHarmonics8BitCompressionRange/2,D=e.DataUtils.toHalfFloat.bind(e.DataUtils),T=e=>(e=m(e,-E,E),m(Math.floor(255*(e*(.5/E)+.5)),0,255)),M=e.DataUtils.fromHalfFloat.bind(e.DataUtils),F=e=>T(M(e)),R=(t,s,n=!1)=>0===s?t:1===s||2===s&&!n?e.DataUtils.fromHalfFloat(t):2===s?t/255*b.SphericalHarmonics8BitCompressionRange-E:void 0,P=(e,t,s,n=!1)=>0===s?e.getFloat32(4*t,!0):1===s||2===s&&!n?e.getUint16(2*t,!0):e.getUint8(t,!0),k=(e,t,s,n,r=0)=>{const i=new Uint8Array(e,t),o=new Uint8Array(s,n);for(let e=0;e<r;e++)o[e]=i[e]};class H{static CurrentMajorVersion=0;static CurrentMinorVersion=1;static CenterComponentCount=3;static ScaleComponentCount=3;static RotationComponentCount=4;static ColorComponentCount=4;static CovarianceComponentCount=6;static SplatScaleOffsetFloat=3;static SplatRotationOffsetFloat=6;static CompressionLevels={0:{BytesPerCenter:12,BytesPerScale:12,BytesPerRotation:16,BytesPerColor:4,ScaleOffsetBytes:12,RotationffsetBytes:24,ColorOffsetBytes:40,SphericalHarmonicsOffsetBytes:44,ScaleRange:1,BytesPerSphericalHarmonicsComponent:4,SphericalHarmonicsOffsetFloat:11,SphericalHarmonicsDegrees:{0:{BytesPerSplat:44},1:{BytesPerSplat:80},2:{BytesPerSplat:140}}},1:{BytesPerCenter:6,BytesPerScale:6,BytesPerRotation:8,BytesPerColor:4,ScaleOffsetBytes:6,RotationffsetBytes:12,ColorOffsetBytes:20,SphericalHarmonicsOffsetBytes:24,ScaleRange:32767,BytesPerSphericalHarmonicsComponent:2,SphericalHarmonicsOffsetFloat:12,SphericalHarmonicsDegrees:{0:{BytesPerSplat:24},1:{BytesPerSplat:42},2:{BytesPerSplat:72}}},2:{BytesPerCenter:6,BytesPerScale:6,BytesPerRotation:8,BytesPerColor:4,ScaleOffsetBytes:6,RotationffsetBytes:12,ColorOffsetBytes:20,SphericalHarmonicsOffsetBytes:24,ScaleRange:32767,BytesPerSphericalHarmonicsComponent:1,SphericalHarmonicsOffsetFloat:12,SphericalHarmonicsDegrees:{0:{BytesPerSplat:24},1:{BytesPerSplat:33},2:{BytesPerSplat:48}}}};static CovarianceSizeFloats=6;static HeaderSizeBytes=4096;static SectionHeaderSizeBytes=1024;static BucketStorageSizeBytes=12;static BucketStorageSizeFloats=3;static BucketBlockSize=5;static BucketSize=256;constructor(e,t=!0){this.constructFromBuffer(e,t)}getSplatCount(){return this.splatCount}getMaxSplatCount(){return this.maxSplatCount}getMinSphericalHarmonicsDegree(){let e=0;for(let t=0;t<this.sections.length;t++){const s=this.sections[t];(0===t||s.sphericalHarmonicsDegree<e)&&(e=s.sphericalHarmonicsDegree)}return e}getBucketIndex(e,t){let s;const n=e.fullBucketCount*e.bucketSize;if(t<n)s=Math.floor(t/e.bucketSize);else{let r=n;s=e.fullBucketCount;let i=0;for(;r<e.splatCount;){let n=e.partiallyFilledBucketLengths[i];if(t>=r&&t<r+n)break;r+=n,s++,i++}}return s}getSplatCenter(e,t,s){const n=this.globalSplatIndexToSectionMap[e],r=this.sections[n],i=e-r.splatCountOffset,o=r.bytesPerSplat*i,a=new DataView(this.bufferData,r.dataBase+o),l=P(a,0,this.compressionLevel),c=P(a,1,this.compressionLevel),h=P(a,2,this.compressionLevel);if(this.compressionLevel>=1){const e=this.getBucketIndex(r,i)*H.BucketStorageSizeFloats,s=r.compressionScaleFactor,n=r.compressionScaleRange;t.x=(l-n)*s+r.bucketArray[e],t.y=(c-n)*s+r.bucketArray[e+1],t.z=(h-n)*s+r.bucketArray[e+2]}else t.x=l,t.y=c,t.z=h;s&&t.applyMatrix4(s)}getSplatScaleAndRotation=function(){const t=new e.Matrix4,s=new e.Matrix4,n=new e.Matrix4,r=new e.Vector3,i=new e.Vector3,o=new e.Quaternion;return function(e,a,l,c){const h=this.globalSplatIndexToSectionMap[e],d=this.sections[h],p=e-d.splatCountOffset,u=d.bytesPerSplat*p+H.CompressionLevels[this.compressionLevel].ScaleOffsetBytes,A=new DataView(this.bufferData,d.dataBase+u);i.set(R(P(A,0,this.compressionLevel),this.compressionLevel),R(P(A,1,this.compressionLevel),this.compressionLevel),R(P(A,2,this.compressionLevel),this.compressionLevel)),o.set(R(P(A,4,this.compressionLevel),this.compressionLevel),R(P(A,5,this.compressionLevel),this.compressionLevel),R(P(A,6,this.compressionLevel),this.compressionLevel),R(P(A,3,this.compressionLevel),this.compressionLevel)),c?(t.makeScale(i.x,i.y,i.z),s.makeRotationFromQuaternion(o),n.copy(t).multiply(s).multiply(c),n.decompose(r,l,a)):(a.copy(i),l.copy(o))}}();getSplatColor(e,t){const s=this.globalSplatIndexToSectionMap[e],n=this.sections[s],r=e-n.splatCountOffset,i=n.bytesPerSplat*r+H.CompressionLevels[this.compressionLevel].ColorOffsetBytes,o=new Uint8Array(this.bufferData,n.dataBase+i,4);t.set(o[0],o[1],o[2],o[3])}fillSplatCenterArray(t,s,n,r,i){const o=this.splatCount;n=n||0,r=r||o-1,void 0===i&&(i=n);const a=new e.Vector3;for(let e=n;e<=r;e++){const r=this.globalSplatIndexToSectionMap[e],o=this.sections[r],l=e-o.splatCountOffset,c=(e-n+i)*H.CenterComponentCount,h=o.bytesPerSplat*l,d=new DataView(this.bufferData,o.dataBase+h),p=P(d,0,this.compressionLevel),u=P(d,1,this.compressionLevel),A=P(d,2,this.compressionLevel);if(this.compressionLevel>=1){const e=this.getBucketIndex(o,l)*H.BucketStorageSizeFloats,t=o.compressionScaleFactor,s=o.compressionScaleRange;a.x=(p-s)*t+o.bucketArray[e],a.y=(u-s)*t+o.bucketArray[e+1],a.z=(A-s)*t+o.bucketArray[e+2]}else a.x=p,a.y=u,a.z=A;s&&a.applyMatrix4(s),t[c]=a.x,t[c+1]=a.y,t[c+2]=a.z}}static computeCovariance=function(){const t=new e.Matrix4,s=new e.Matrix3,n=new e.Matrix3,r=new e.Matrix3,i=new e.Matrix3,o=new e.Matrix3,a=new e.Matrix3;return function(e,l,c,h,d=0,p){t.makeScale(e.x,e.y,e.z),s.setFromMatrix4(t),t.makeRotationFromQuaternion(l),n.setFromMatrix4(t),r.copy(n).multiply(s),i.copy(r).transpose().premultiply(r),c&&(o.setFromMatrix4(c),a.copy(o).transpose(),i.multiply(a),i.premultiply(o)),p>=1?(h[d]=D(i.elements[0]),h[d+1]=D(i.elements[3]),h[d+2]=D(i.elements[6]),h[d+3]=D(i.elements[4]),h[d+4]=D(i.elements[7]),h[d+5]=D(i.elements[8])):(h[d]=i.elements[0],h[d+1]=i.elements[3],h[d+2]=i.elements[6],h[d+3]=i.elements[4],h[d+4]=i.elements[7],h[d+5]=i.elements[8])}}();fillSplatCovarianceArray(t,s,n,r,i,o){const a=this.splatCount,l=new e.Vector3,c=new e.Quaternion;n=n||0,r=r||a-1,void 0===i&&(i=n);for(let e=n;e<=r;e++){const r=this.globalSplatIndexToSectionMap[e],a=this.sections[r],h=e-a.splatCountOffset,d=(e-n+i)*H.CovarianceComponentCount,p=a.bytesPerSplat*h+H.CompressionLevels[this.compressionLevel].ScaleOffsetBytes,u=new DataView(this.bufferData,a.dataBase+p);l.set(R(P(u,0,this.compressionLevel),this.compressionLevel),R(P(u,1,this.compressionLevel),this.compressionLevel),R(P(u,2,this.compressionLevel),this.compressionLevel)),c.set(R(P(u,4,this.compressionLevel),this.compressionLevel),R(P(u,5,this.compressionLevel),this.compressionLevel),R(P(u,6,this.compressionLevel),this.compressionLevel),R(P(u,3,this.compressionLevel),this.compressionLevel)),H.computeCovariance(l,c,s,t,d,o)}}fillSplatColorArray(e,t,s,n,r){const i=this.splatCount;s=s||0,n=n||i-1,void 0===r&&(r=s);for(let i=s;i<=n;i++){const n=this.globalSplatIndexToSectionMap[i],o=this.sections[n],a=i-o.splatCountOffset,l=(i-s+r)*H.ColorComponentCount,c=o.bytesPerSplat*a+H.CompressionLevels[this.compressionLevel].ColorOffsetBytes,h=new Uint8Array(this.bufferData,o.dataBase+c);let d=h[3];d=d>=t?d:0,e[l]=h[0],e[l+1]=h[1],e[l+2]=h[2],e[l+3]=d}}fillSphericalHarmonicsArray=function(){const t=[];for(let s=0;s<15;s++)t[s]=new e.Vector3;const s=new e.Matrix3,n=[],r=[],i=[],o=[],a=[],l=[],c=[],h=[],d=[],p=[],u=[],A=[],m=[],g=[],f=[],C=[],y=[],x=[],I=e=>e,v=(e,t,s,n)=>{e[0]=t,e[1]=s,e[2]=n},B=(e,t,s,n,r)=>{e[0]=P(t,n,r,!0),e[1]=P(t,n+s,r,!0),e[2]=P(t,n+s+s,r,!0)},w=(e,t)=>{t[0]=e[0],t[1]=e[1],t[2]=e[2]},b=(e,t,s,n)=>{t[s]=n(e[0]),t[s+1]=n(e[1]),t[s+2]=n(e[2])},E=(e,t,s)=>(t[0]=R(e[0],s,!0),t[1]=R(e[1],s,!0),t[2]=R(e[2],s,!0),t);return function(e,t,R,P,k,L,_){const O=this.splatCount;P=P||0,k=k||O-1,void 0===L&&(L=P),R&&t>=1&&(s.setFromMatrix4(R),v(n,s.elements[4],-s.elements[7],s.elements[1]),v(r,-s.elements[5],s.elements[8],-s.elements[2]),v(i,s.elements[3],-s.elements[6],s.elements[0]));for(let s=P;s<=k;s++){const v=this.globalSplatIndexToSectionMap[s],k=this.sections[v];t=Math.min(t,k.sphericalHarmonicsDegree);const O=S(t),U=s-k.splatCountOffset,Q=k.bytesPerSplat*U+H.CompressionLevels[this.compressionLevel].SphericalHarmonicsOffsetBytes,z=new DataView(this.bufferData,k.dataBase+Q),V=(s-P+L)*O;let N=R?0:this.compressionLevel,G=I;N!==_&&(1===N?0===_?G=M:2==_&&(G=F):0===N&&(1===_?G=D:2==_&&(G=T))),t>=1&&(B(d,z,3,0,this.compressionLevel),B(p,z,3,1,this.compressionLevel),B(u,z,3,2,this.compressionLevel),R?(E(d,d,this.compressionLevel),E(p,p,this.compressionLevel),E(u,u,this.compressionLevel),H.rotateSphericalHarmonics3(d,p,u,n,r,i,g,f,C)):(w(d,g),w(p,f),w(u,C)),b(g,e,V,G),b(f,e,V+3,G),b(C,e,V+6,G),t>=2&&(B(d,z,5,9,this.compressionLevel),B(p,z,5,10,this.compressionLevel),B(u,z,5,11,this.compressionLevel),B(A,z,5,12,this.compressionLevel),B(m,z,5,13,this.compressionLevel),R?(E(d,d,this.compressionLevel),E(p,p,this.compressionLevel),E(u,u,this.compressionLevel),E(A,A,this.compressionLevel),E(m,m,this.compressionLevel),H.rotateSphericalHarmonics5(d,p,u,A,m,n,r,i,o,a,l,c,h,g,f,C,y,x)):(w(d,g),w(p,f),w(u,C),w(A,y),w(m,x)),b(g,e,V+9,G),b(f,e,V+12,G),b(C,e,V+15,G),b(y,e,V+18,G),b(x,e,V+21,G)))}}}();static dot3=(e,t,s,n,r)=>{r[0]=r[1]=r[2]=0;const i=n[0],o=n[1],a=n[2];H.addInto3(e[0]*i,e[1]*i,e[2]*i,r),H.addInto3(t[0]*o,t[1]*o,t[2]*o,r),H.addInto3(s[0]*a,s[1]*a,s[2]*a,r)};static addInto3=(e,t,s,n)=>{n[0]=n[0]+e,n[1]=n[1]+t,n[2]=n[2]+s};static dot5=(e,t,s,n,r,i,o)=>{o[0]=o[1]=o[2]=0;const a=i[0],l=i[1],c=i[2],h=i[3],d=i[4];H.addInto3(e[0]*a,e[1]*a,e[2]*a,o),H.addInto3(t[0]*l,t[1]*l,t[2]*l,o),H.addInto3(s[0]*c,s[1]*c,s[2]*c,o),H.addInto3(n[0]*h,n[1]*h,n[2]*h,o),H.addInto3(r[0]*d,r[1]*d,r[2]*d,o)};static rotateSphericalHarmonics3=(e,t,s,n,r,i,o,a,l)=>{H.dot3(e,t,s,n,o),H.dot3(e,t,s,r,a),H.dot3(e,t,s,i,l)};static rotateSphericalHarmonics5=(e,t,s,n,r,i,o,a,l,c,h,d,p,u,A,m,g,f)=>{const C=Math.sqrt(1/4),S=Math.sqrt(3/4),y=Math.sqrt(1/3),x=Math.sqrt(4/3),I=Math.sqrt(1/12);l[0]=C*(a[2]*i[0]+a[0]*i[2]+(i[2]*a[0]+i[0]*a[2])),l[1]=a[1]*i[0]+i[1]*a[0],l[2]=S*(a[1]*i[1]+i[1]*a[1]),l[3]=a[1]*i[2]+i[1]*a[2],l[4]=C*(a[2]*i[2]-a[0]*i[0]+(i[2]*a[2]-i[0]*a[0])),H.dot5(e,t,s,n,r,l,u),c[0]=C*(o[2]*i[0]+o[0]*i[2]+(i[2]*o[0]+i[0]*o[2])),c[1]=o[1]*i[0]+i[1]*o[0],c[2]=S*(o[1]*i[1]+i[1]*o[1]),c[3]=o[1]*i[2]+i[1]*o[2],c[4]=C*(o[2]*i[2]-o[0]*i[0]+(i[2]*o[2]-i[0]*o[0])),H.dot5(e,t,s,n,r,c,A),h[0]=y*(o[2]*o[0]+o[0]*o[2])+-I*(a[2]*a[0]+a[0]*a[2]+(i[2]*i[0]+i[0]*i[2])),h[1]=x*o[1]*o[0]+-y*(a[1]*a[0]+i[1]*i[0]),h[2]=o[1]*o[1]+-C*(a[1]*a[1]+i[1]*i[1]),h[3]=x*o[1]*o[2]+-y*(a[1]*a[2]+i[1]*i[2]),h[4]=y*(o[2]*o[2]-o[0]*o[0])+-I*(a[2]*a[2]-a[0]*a[0]+(i[2]*i[2]-i[0]*i[0])),H.dot5(e,t,s,n,r,h,m),d[0]=C*(o[2]*a[0]+o[0]*a[2]+(a[2]*o[0]+a[0]*o[2])),d[1]=o[1]*a[0]+a[1]*o[0],d[2]=S*(o[1]*a[1]+a[1]*o[1]),d[3]=o[1]*a[2]+a[1]*o[2],d[4]=C*(o[2]*a[2]-o[0]*a[0]+(a[2]*o[2]-a[0]*o[0])),H.dot5(e,t,s,n,r,d,g),p[0]=C*(a[2]*a[0]+a[0]*a[2]-(i[2]*i[0]+i[0]*i[2])),p[1]=a[1]*a[0]-i[1]*i[0],p[2]=S*(a[1]*a[1]-i[1]*i[1]),p[3]=a[1]*a[2]-i[1]*i[2],p[4]=C*(a[2]*a[2]-a[0]*a[0]-(i[2]*i[2]-i[0]*i[0])),H.dot5(e,t,s,n,r,p,f)};static parseHeader(t){const s=new Uint8Array(t,0,H.HeaderSizeBytes),n=new Uint16Array(t,0,H.HeaderSizeBytes/2),r=new Uint32Array(t,0,H.HeaderSizeBytes/4),i=new Float32Array(t,0,H.HeaderSizeBytes/4);return{versionMajor:s[0],versionMinor:s[1],maxSectionCount:r[1],sectionCount:r[2],maxSplatCount:r[3],splatCount:r[4],compressionLevel:n[10],sceneCenter:new e.Vector3(i[6],i[7],i[8])}}static writeHeaderCountsToBuffer(e,t,s){const n=new Uint32Array(s,0,H.HeaderSizeBytes/4);n[2]=e,n[4]=t}static writeHeaderToBuffer(e,t){const s=new Uint8Array(t,0,H.HeaderSizeBytes),n=new Uint16Array(t,0,H.HeaderSizeBytes/2),r=new Uint32Array(t,0,H.HeaderSizeBytes/4),i=new Float32Array(t,0,H.HeaderSizeBytes/4);s[0]=e.versionMajor,s[1]=e.versionMinor,s[2]=0,s[3]=0,r[1]=e.maxSectionCount,r[2]=e.sectionCount,r[3]=e.maxSplatCount,r[4]=e.splatCount,n[10]=e.compressionLevel,i[6]=e.sceneCenter.x,i[7]=e.sceneCenter.y,i[8]=e.sceneCenter.z}static parseSectionHeaders(e,t,s=0,n){const r=e.compressionLevel,i=e.maxSectionCount,o=new Uint16Array(t,s,i*H.SectionHeaderSizeBytes/2),a=new Uint32Array(t,s,i*H.SectionHeaderSizeBytes/4),l=new Float32Array(t,s,i*H.SectionHeaderSizeBytes/4),c=[];let h=0,d=h/2,p=h/4,u=H.HeaderSizeBytes+e.maxSectionCount*H.SectionHeaderSizeBytes,A=0;for(let e=0;e<i;e++){const t=a[p+1],s=a[p+2],i=a[p+3],m=l[p+4],g=m/2,f=o[d+10],C=a[p+6]||H.CompressionLevels[r].ScaleRange,S=a[p+8],y=a[p+9],x=4*y,I=f*i+x,v=o[d+20],{bytesPerSplat:B}=H.calculateComponentStorage(r,v),w=B*t,b=w+I,E={bytesPerSplat:B,splatCountOffset:A,splatCount:n?t:0,maxSplatCount:t,bucketSize:s,bucketCount:i,bucketBlockSize:m,halfBucketBlockSize:g,bucketStorageSizeBytes:f,bucketsStorageSizeBytes:I,splatDataStorageSizeBytes:w,storageSizeBytes:b,compressionScaleRange:C,compressionScaleFactor:g/C,base:u,bucketsBase:u+x,dataBase:u+I,fullBucketCount:S,partiallyFilledBucketCount:y,sphericalHarmonicsDegree:v};c[e]=E,u+=b,h+=H.SectionHeaderSizeBytes,d=h/2,p=h/4,A+=t}return c}static writeSectionHeaderToBuffer(e,t,s,n=0){const r=new Uint16Array(s,n,H.SectionHeaderSizeBytes/2),i=new Uint32Array(s,n,H.SectionHeaderSizeBytes/4),o=new Float32Array(s,n,H.SectionHeaderSizeBytes/4);i[0]=e.splatCount,i[1]=e.maxSplatCount,i[2]=t>=1?e.bucketSize:0,i[3]=t>=1?e.bucketCount:0,o[4]=t>=1?e.bucketBlockSize:0,r[10]=t>=1?H.BucketStorageSizeBytes:0,i[6]=t>=1?e.compressionScaleRange:0,i[7]=e.storageSizeBytes,i[8]=t>=1?e.fullBucketCount:0,i[9]=t>=1?e.partiallyFilledBucketCount:0,r[20]=e.sphericalHarmonicsDegree}static writeSectionHeaderSplatCountToBuffer(e,t,s=0){new Uint32Array(t,s,H.SectionHeaderSizeBytes/4)[0]=e}constructFromBuffer(t,s){this.bufferData=t,this.globalSplatIndexToLocalSplatIndexMap=[],this.globalSplatIndexToSectionMap=[];const n=H.parseHeader(this.bufferData);this.versionMajor=n.versionMajor,this.versionMinor=n.versionMinor,this.maxSectionCount=n.maxSectionCount,this.sectionCount=s?n.maxSectionCount:0,this.maxSplatCount=n.maxSplatCount,this.splatCount=s?n.maxSplatCount:0,this.compressionLevel=n.compressionLevel,this.sceneCenter=(new e.Vector3).copy(n.sceneCenter),this.sections=H.parseSectionHeaders(n,this.bufferData,H.HeaderSizeBytes,s),this.linkBufferArrays(),this.buildMaps()}static calculateComponentStorage(e,t){const s=H.CompressionLevels[e].BytesPerCenter,n=H.CompressionLevels[e].BytesPerScale,r=H.CompressionLevels[e].BytesPerRotation,i=H.CompressionLevels[e].BytesPerColor,o=S(t),a=H.CompressionLevels[e].BytesPerSphericalHarmonicsComponent*o;return{bytesPerCenter:s,bytesPerScale:n,bytesPerRotation:r,bytesPerColor:i,sphericalHarmonicsComponentsPerSplat:o,sphericalHarmonicsBytesPerSplat:a,bytesPerSplat:s+n+r+i+a}}linkBufferArrays(){for(let e=0;e<this.maxSectionCount;e++){const t=this.sections[e];t.bucketArray=new Float32Array(this.bufferData,t.bucketsBase,t.bucketCount*H.BucketStorageSizeFloats),t.partiallyFilledBucketCount>0&&(t.partiallyFilledBucketLengths=new Uint32Array(this.bufferData,t.base,t.partiallyFilledBucketCount))}}buildMaps(){let e=0;for(let t=0;t<this.maxSectionCount;t++){const s=this.sections[t];for(let n=0;n<s.maxSplatCount;n++){const s=e+n;this.globalSplatIndexToLocalSplatIndexMap[s]=n,this.globalSplatIndexToSectionMap[s]=t}e+=s.maxSplatCount}}updateLoadedCounts(e,t){H.writeHeaderCountsToBuffer(e,t,this.bufferData),this.sectionCount=e,this.splatCount=t}updateSectionLoadedCounts(e,t){const s=H.HeaderSizeBytes+H.SectionHeaderSizeBytes*e;H.writeSectionHeaderSplatCountToBuffer(t,this.bufferData,s),this.sections[e].splatCount=t}static writeSplatDataToSectionBuffer=function(){const t=new ArrayBuffer(12),s=new ArrayBuffer(12),n=new ArrayBuffer(16),r=new ArrayBuffer(4),i=new ArrayBuffer(256),o=new e.Quaternion,a=new e.Vector3,l=new e.Vector3,{X:c,Y:h,Z:d,SCALE0:p,SCALE1:u,SCALE2:A,ROTATION0:g,ROTATION1:f,ROTATION2:C,ROTATION3:y,FDC0:x,FDC1:I,FDC2:v,OPACITY:B,FRC0:b,FRC9:E}=w.OFFSET,M=(e,t,s)=>{const n=2*s+1;return e=Math.round(e*t)+s,m(e,0,n)};return function(e,m,w,F,R,P,L,_){const O=S(R),U=w,Q=U+H.CompressionLevels[F].BytesPerCenter,z=Q+H.CompressionLevels[F].BytesPerScale,V=z+H.CompressionLevels[F].BytesPerRotation,N=V+H.CompressionLevels[F].BytesPerColor;if(void 0!==e[g]?(o.set(e[g],e[f],e[C],e[y]),o.normalize()):o.set(1,0,0,0),void 0!==e[p]?a.set(e[p],e[u],e[A]):a.set(.01,.01,.01),0===F){const t=new Float32Array(m,U,H.CenterComponentCount),s=new Float32Array(m,z,H.RotationComponentCount),n=new Float32Array(m,Q,H.ScaleComponentCount);if(s.set([o.x,o.y,o.z,o.w]),n.set([a.x,a.y,a.z]),t.set([e[c],e[h],e[d]]),R>0){const t=new Float32Array(m,N,O);if(R>=1){for(let s=0;s<9;s++)t[s]=e[b+s]||0;if(R>=2)for(let s=0;s<15;s++)t[s+9]=e[E+s]||0}}}else{const r=new Uint16Array(t,0,H.CenterComponentCount),p=new Uint16Array(n,0,H.RotationComponentCount),u=new Uint16Array(s,0,H.ScaleComponentCount);if(p.set([D(o.x),D(o.y),D(o.z),D(o.w)]),u.set([D(a.x),D(a.y),D(a.z)]),l.set(e[c],e[h],e[d]).sub(P),l.x=M(l.x,L,_),l.y=M(l.y,L,_),l.z=M(l.z,L,_),r.set([l.x,l.y,l.z]),R>0){const t=1===F?2:1,s=new(1===F?Uint16Array:Uint8Array)(i,0,O);if(R>=1){for(let t=0;t<9;t++){const n=e[b+t]||0;s[t]=1===F?D(n):T(n)}const n=9*t;if(k(s.buffer,0,m,N,n),R>=2){for(let t=0;t<15;t++){const n=e[E+t]||0;s[t+9]=1===F?D(n):T(n)}k(s.buffer,n,m,N+n,15*t)}}}k(r.buffer,0,m,U,6),k(u.buffer,0,m,Q,6),k(p.buffer,0,m,z,8)}const G=new Uint8ClampedArray(r,0,4);G.set([e[x]||0,e[I]||0,e[v]||0]),G[3]=e[B]||0,k(G.buffer,0,m,V,4)}}();static generateFromUncompressedSplatArrays(t,s,n,r,i,o,a=[]){let l=0;for(let e=0;e<t.length;e++){const s=t[e];l=Math.max(s.sphericalHarmonicsDegree,l)}const{bytesPerSplat:c}=H.calculateComponentStorage(n,l),h=H.CompressionLevels[n].ScaleRange,d=[],p=[];let u=0;for(let r=0;r<t.length;r++){const A=t[r],m=new w(l);for(let e=0;e<A.splatCount;e++){const t=A.splats[e];(t[w.OFFSET.OPACITY]||0)>=s&&m.addSplat(t)}const g=a[r]||{},f=(g.blockSizeFactor||1)*(i||H.BucketBlockSize),C=Math.ceil((g.bucketSizeFactor||1)*(o||H.BucketSize)),S=H.computeBucketsForUncompressedSplatArray(m,f,C),y=S.fullBuckets.length,x=S.partiallyFullBuckets.map((e=>e.splats.length)),I=x.length,v=[...S.fullBuckets,...S.partiallyFullBuckets],B=m.splats.length*c,b=4*I,E=n>=1?v.length*H.BucketStorageSizeBytes+b:0,D=B+E,T=new ArrayBuffer(D),M=h/(.5*f),F=new e.Vector3;let R=0;for(let e=0;e<v.length;e++){const t=v[e];F.fromArray(t.center);for(let e=0;e<t.splats.length;e++){let s=t.splats[e];const r=m.splats[s],i=E+R*c;H.writeSplatDataToSectionBuffer(r,T,i,n,l,F,M,h),R++}}if(u+=R,n>=1){const e=new Uint32Array(T,0,4*x.length);for(let t=0;t<x.length;t++)e[t]=x[t];const t=new Float32Array(T,b,v.length*H.BucketStorageSizeFloats);for(let e=0;e<v.length;e++){const s=v[e],n=3*e;t[n]=s.center[0],t[n+1]=s.center[1],t[n+2]=s.center[2]}}d.push(T);const P=new ArrayBuffer(H.SectionHeaderSizeBytes);H.writeSectionHeaderToBuffer({maxSplatCount:R,splatCount:R,bucketSize:C,bucketCount:v.length,bucketBlockSize:f,compressionScaleRange:h,storageSizeBytes:D,fullBucketCount:y,partiallyFilledBucketCount:I,sphericalHarmonicsDegree:l},n,P,0),p.push(P)}let A=0;for(let e of d)A+=e.byteLength;const m=H.HeaderSizeBytes+H.SectionHeaderSizeBytes*d.length+A,g=new ArrayBuffer(m);H.writeHeaderToBuffer({versionMajor:0,versionMinor:1,maxSectionCount:d.length,sectionCount:d.length,maxSplatCount:u,splatCount:u,compressionLevel:n,sceneCenter:r},g);let f=H.HeaderSizeBytes;for(let e of p)new Uint8Array(g,f,H.SectionHeaderSizeBytes).set(new Uint8Array(e)),f+=H.SectionHeaderSizeBytes;for(let e of d)new Uint8Array(g,f,e.byteLength).set(new Uint8Array(e)),f+=e.byteLength;return new H(g)}static computeBucketsForUncompressedSplatArray(t,s,n){let r=t.splatCount;const i=s/2,o=new e.Vector3,a=new e.Vector3;for(let e=0;e<r;e++){const s=t.splats[e],n=[s[w.OFFSET.X],s[w.OFFSET.Y],s[w.OFFSET.Z]];(0===e||n[0]<o.x)&&(o.x=n[0]),(0===e||n[0]>a.x)&&(a.x=n[0]),(0===e||n[1]<o.y)&&(o.y=n[1]),(0===e||n[1]>a.y)&&(a.y=n[1]),(0===e||n[2]<o.z)&&(o.z=n[2]),(0===e||n[2]>a.z)&&(a.z=n[2])}const l=(new e.Vector3).copy(a).sub(o),c=Math.ceil(l.y/s),h=Math.ceil(l.z/s),d=new e.Vector3,p=[],u={};for(let e=0;e<r;e++){const r=t.splats[e],a=[r[w.OFFSET.X],r[w.OFFSET.Y],r[w.OFFSET.Z]],l=Math.floor((a[0]-o.x)/s),A=Math.floor((a[1]-o.y)/s),m=Math.floor((a[2]-o.z)/s);d.x=l*s+o.x+i,d.y=A*s+o.y+i,d.z=m*s+o.z+i;const g=l*(c*h)+A*h+m;let f=u[g];f||(u[g]=f={splats:[],center:d.toArray()}),f.splats.push(e),f.splats.length>=n&&(p.push(f),u[g]=null)}const A=[];for(let e in u)if(u.hasOwnProperty(e)){const t=u[e];t&&A.push(t)}return{fullBuckets:p,partiallyFullBuckets:A}}}const L=new Uint8Array([112,108,121,10]),_=new Uint8Array([10,101,110,100,95,104,101,97,100,101,114,10]),O="end_header",U=new Map([["char",Int8Array],["uchar",Uint8Array],["short",Int16Array],["ushort",Uint16Array],["int",Int32Array],["uint",Uint32Array],["float",Float32Array],["double",Float64Array]]),Q=(e,t)=>{const s=(1<<t)-1;return(e&s)/s},z=(e,t)=>{e.x=Q(t>>>21,11),e.y=Q(t>>>11,10),e.z=Q(t,11)},V=(e,t,s)=>e*(1-s)+t*s,N=(e,t)=>e.properties.find((e=>e.name===t&&e.storage))?.storage;class G{static decodeHeaderText(e){let t,s,n;const r=e.split("\n").filter((e=>!e.startsWith("comment ")));let i=0,o=!1;for(let e=1;e<r.length;++e){const a=r[e].split(" ");switch(a[0]){case"format":if("binary_little_endian"!==a[1])throw new Error("Unsupported ply format");break;case"element":t={name:a[1],count:parseInt(a[2],10),properties:[],storageSizeBytes:0},"chunk"===t.name?s=t:"vertex"===t.name&&(n=t);break;case"property":{if(!U.has(a[1]))throw new Error(`Unrecognized property data type '${a[1]}' in ply header`);const e=U.get(a[1]),s=e.BYTES_PER_ELEMENT*t.count;"vertex"===t.name&&(i+=e.BYTES_PER_ELEMENT),t.properties.push({type:a[1],name:a[2],storage:null,byteSize:e.BYTES_PER_ELEMENT,storageSizeByes:s}),t.storageSizeBytes+=s;break}case O:o=!0;break;default:throw new Error(`Unrecognized header value '${a[0]}' in ply header`)}if(o)break}return{chunkElement:s,vertexElement:n,bytesPerSplat:i,headerSizeBytes:e.indexOf(O)+10+1,sphericalHarmonicsDegree:0}}static decodeHeader(e){let t,s=new Uint8Array(e);if(s.length>=L.length&&!((e,t)=>{if(e.length<t.length)return!1;for(let s=0;s<t.length;++s)if(e[s]!==t[s])return!1;return!0})(s,L))throw new Error("Invalid PLY header");if(t=((e,t)=>{const s=e.length-t.length;let n,r;for(n=0;n<=s;++n){for(r=0;r<t.length&&e[n+r]===t[r];++r);if(r===t.length)return n}return-1})(s,_),-1===t)throw new Error("End of PLY header not found");const n=new TextDecoder("ascii").decode(s.slice(0,t)),{chunkElement:r,vertexElement:i,bytesPerSplat:o}=G.decodeHeaderText(n);return{headerSizeBytes:t+_.length,bytesPerSplat:o,chunkElement:r,vertexElement:i}}static readElementData(e,t,s,n,r,i=null){let o=t instanceof DataView?t:new DataView(t);n=n||0,r=r||e.count-1;for(let t=n;t<=r;++t)for(let n=0;n<e.properties.length;++n){const r=e.properties[n],a=U.get(r.type),l=a.BYTES_PER_ELEMENT*e.count;if(r.storage&&!(r.storage.byteLength<l)||i&&!i(r.name)||(r.storage=new a(e.count)),r.storage)switch(r.type){case"char":r.storage[t]=o.getInt8(s);break;case"uchar":r.storage[t]=o.getUint8(s);break;case"short":r.storage[t]=o.getInt16(s,!0);break;case"ushort":r.storage[t]=o.getUint16(s,!0);break;case"int":r.storage[t]=o.getInt32(s,!0);break;case"uint":r.storage[t]=o.getUint32(s,!0);break;case"float":r.storage[t]=o.getFloat32(s,!0);break;case"double":r.storage[t]=o.getFloat64(s,!0)}s+=r.byteSize}return s}static readPly(e,t=null){const s=G.decodeHeader(e);let n=G.readElementData(s.chunkElement,e,s.headerSizeBytes,null,null,t);return G.readElementData(s.vertexElement,e,n,null,null,t),{chunkElement:s.chunkElement,vertexElement:s.vertexElement}}static getElementStorageArrays(e,t){const s=N(e,"min_x"),n=N(e,"min_y"),r=N(e,"min_z"),i=N(e,"max_x"),o=N(e,"max_y"),a=N(e,"max_z"),l=N(e,"min_scale_x"),c=N(e,"min_scale_y"),h=N(e,"min_scale_z");return{positionExtremes:{minX:s,maxX:i,minY:n,maxY:o,minZ:r,maxZ:a},scaleExtremes:{minScaleX:l,maxScaleX:N(e,"max_scale_x"),minScaleY:c,maxScaleY:N(e,"max_scale_y"),minScaleZ:h,maxScaleZ:N(e,"max_scale_z")},position:N(t,"packed_position"),rotation:N(t,"packed_rotation"),scale:N(t,"packed_scale"),color:N(t,"packed_color")}}static decompressSplat=function(){const t=new e.Vector3,s=new e.Quaternion,n=new e.Vector3,r=new e.Vector4,i=w.OFFSET;return function(e,o,a,l,c,h,d,p,u){u=u||w.createSplat();const A=Math.floor((o+e)/256);var g,f;return z(t,a[e]),((e,t)=>{const s=1/(.5*Math.sqrt(2)),n=(Q(t>>>20,10)-.5)*s,r=(Q(t>>>10,10)-.5)*s,i=(Q(t,10)-.5)*s,o=Math.sqrt(1-(n*n+r*r+i*i));switch(t>>>30){case 0:e.set(o,n,r,i);break;case 1:e.set(n,o,r,i);break;case 2:e.set(n,r,o,i);break;case 3:e.set(n,r,i,o)}})(s,d[e]),z(n,c[e]),g=r,f=p[e],g.x=Q(f>>>24,8),g.y=Q(f>>>16,8),g.z=Q(f>>>8,8),g.w=Q(f,8),u[i.X]=V(l.minX[A],l.maxX[A],t.x),u[i.Y]=V(l.minY[A],l.maxY[A],t.y),u[i.Z]=V(l.minZ[A],l.maxZ[A],t.z),u[i.ROTATION0]=s.x,u[i.ROTATION1]=s.y,u[i.ROTATION2]=s.z,u[i.ROTATION3]=s.w,u[i.SCALE0]=Math.exp(V(h.minScaleX[A],h.maxScaleX[A],n.x)),u[i.SCALE1]=Math.exp(V(h.minScaleY[A],h.maxScaleY[A],n.y)),u[i.SCALE2]=Math.exp(V(h.minScaleZ[A],h.maxScaleZ[A],n.z)),u[i.FDC0]=m(Math.floor(255*r.x),0,255),u[i.FDC1]=m(Math.floor(255*r.y),0,255),u[i.FDC2]=m(Math.floor(255*r.z),0,255),u[i.OPACITY]=m(Math.floor(255*r.w),0,255),u}}();static parseToUncompressedSplatBufferSection(e,t,s,n,r,i,o,a,l,c=null){G.readElementData(t,i,o,s,n,c);const h=H.CompressionLevels[0].SphericalHarmonicsDegrees[0].BytesPerSplat,{positionExtremes:d,scaleExtremes:p,position:u,rotation:A,scale:m,color:g}=G.getElementStorageArrays(e,t),f=w.createSplat();for(let e=s;e<=n;++e){G.decompressSplat(e,r,u,d,m,p,A,g,f);const t=e*h+l;H.writeSplatDataToSectionBuffer(f,a,t,0,0)}}static parseToUncompressedSplatArray(t){const{chunkElement:s,vertexElement:n}=G.readPly(t),r=new w,{positionExtremes:i,scaleExtremes:o,position:a,rotation:l,scale:c,color:h}=G.getElementStorageArrays(s,n);for(let e=0;e<n.count;++e){r.addDefaultSplat();const t=r.getSplat(r.splatCount-1);G.decompressSplat(e,0,a,i,c,o,l,h,t)}return(new e.Matrix4).identity(),r}}const K=0,j=1,W=2,[q,Y,X,J,Z,$,ee]=[0,1,2,3,4,5,6],te={double:q,int:Y,uint:X,float:J,short:Z,ushort:$,uchar:ee},se={[q]:8,[Y]:4,[X]:4,[J]:4,[Z]:2,[$]:2,[ee]:1};class ne{static HeaderEndToken="end_header";constructor(){}decodeSectionHeader(e,t,s=0){const n=[];let r=!1,i=-1,o=0,a=!1,l=null;const c=[],h=[],d=[],p=[],u={};for(let A=s;A<e.length;A++){const m=e[A].trim();if(m.startsWith("element")){if(r){i--;break}{r=!0,s=A,i=A;const e=m.split(" ");let t=0;for(let s of e){const e=s.trim();e.length>0&&(t++,2===t?l=e:3===t&&(o=parseInt(e)))}}}else if(m.startsWith("property")){const e=m.match(/(\w+)\s+(\w+)\s+(\w+)/);if(e){const s=e[2],n=e[3];d.push(n);const r=t[n];u[n]=s;const i=te[s];void 0!==r&&(p.push(n),c.push(r),h[r]=i)}}if(m===ne.HeaderEndToken){a=!0;break}r&&(n.push(m),i++)}const A=[];let m=0;for(let e of d){const s=u[e];if(u.hasOwnProperty(e)){const s=t[e];void 0!==s&&(A[s]=m)}m+=se[te[s]]}const g=this.decodeSphericalHarmonicsFromSectionHeader(d,t);return{headerLines:n,headerStartLine:s,headerEndLine:i,fieldTypes:h,fieldIds:c,fieldOffsets:A,bytesPerVertex:m,vertexCount:o,dataSizeBytes:m*o,endOfHeader:a,sectionName:l,sphericalHarmonicsDegree:g.degree,sphericalHarmonicsCoefficientsPerChannel:g.coefficientsPerChannel,sphericalHarmonicsDegree1Fields:g.degree1Fields,sphericalHarmonicsDegree2Fields:g.degree2Fields}}decodeSphericalHarmonicsFromSectionHeader(e,t){let s=0,n=0;for(let t of e)t.startsWith("f_rest")&&s++;n=s/3;let r=0;n>=3&&(r=1),n>=8&&(r=2);let i=[],o=[];for(let e=0;e<3;e++){if(r>=1)for(let s=0;s<3;s++)i.push(t["f_rest_"+(s+n*e)]);if(r>=2)for(let s=0;s<5;s++)o.push(t["f_rest_"+(s+n*e+3)])}return{degree:r,coefficientsPerChannel:n,degree1Fields:i,degree2Fields:o}}static getHeaderSectionNames(e){const t=[];for(let s of e)if(s.startsWith("element")){const e=s.split(" ");let n=0;for(let s of e){const e=s.trim();e.length>0&&(n++,2===n&&t.push(e))}}return t}static checkTextForEndHeader(e){return!!e.includes(ne.HeaderEndToken)}static checkBufferForEndHeader(e,t,s,n){const r=new Uint8Array(e,Math.max(0,t-s),s),i=n.decode(r);return ne.checkTextForEndHeader(i)}static extractHeaderFromBufferToText(e){const t=new TextDecoder;let s=0,n="";const r=100;for(;;){if(s+r>=e.byteLength)throw new Error("End of file reached while searching for end of header");const i=new Uint8Array(e,s,r);if(n+=t.decode(i),s+=r,ne.checkBufferForEndHeader(e,s,200,t))break}return n}readHeaderFromBuffer(e){const t=new TextDecoder;let s=0,n="";const r=100;for(;;){if(s+r>=e.byteLength)throw new Error("End of file reached while searching for end of header");const i=new Uint8Array(e,s,r);if(n+=t.decode(i),s+=r,ne.checkBufferForEndHeader(e,s,200,t))break}return n}static convertHeaderTextToLines(e){const t=e.split("\n"),s=[];for(let e=0;e<t.length;e++){const n=t[e].trim();if(s.push(n),n===ne.HeaderEndToken)break}return s}static determineHeaderFormatFromHeaderText(e){const t=ne.convertHeaderTextToLines(e);let s=K;for(let e=0;e<t.length;e++){const n=t[e].trim();if(n.startsWith("element chunk")||n.match(/[A-Za-z]*packed_[A-Za-z]*/))s=W;else if(n.startsWith("element codebook_centers"))s=j;else if(n===ne.HeaderEndToken)break}return s}static determineHeaderFormatFromPlyBuffer(e){const t=ne.extractHeaderFromBufferToText(e);return ne.determineHeaderFormatFromHeaderText(t)}static readVertex(e,t,s,n,r,i,o=!0){const a=s*t.bytesPerVertex+n,l=t.fieldOffsets,c=t.fieldTypes;for(let t of r){const s=c[t];s===J?i[t]=e.getFloat32(a+l[t],!0):s===Z?i[t]=e.getInt16(a+l[t],!0):s===$?i[t]=e.getUint16(a+l[t],!0):s===Y?i[t]=e.getInt32(a+l[t],!0):s===X?i[t]=e.getUint32(a+l[t],!0):s===ee&&(i[t]=o?e.getUint8(a+l[t])/255:e.getUint8(a+l[t]))}}}const re=["scale_0","scale_1","scale_2","rot_0","rot_1","rot_2","rot_3","x","y","z","f_dc_0","f_dc_1","f_dc_2","opacity","red","green","blue","f_rest_0","f_rest_1","f_rest_2","f_rest_15","f_rest_16","f_rest_17","f_rest_30","f_rest_31","f_rest_32","f_rest_3","f_rest_4","f_rest_5","f_rest_6","f_rest_7","f_rest_18","f_rest_19","f_rest_20","f_rest_21","f_rest_22","f_rest_33","f_rest_34","f_rest_35","f_rest_36","f_rest_37"],ie=re.map(((e,t)=>t)),[oe,ae,le,ce,he,de,pe,ue,Ae,me,ge,fe,Ce,Se,ye,xe,Ie,ve]=ie;class Be{constructor(){this.plyParserutils=new ne}decodeHeaderLines(e){const t=ie.reduce(((e,t)=>(e[re[t]]=t,e)),{}),s=this.plyParserutils.decodeSectionHeader(e,t,0);return s.splatCount=s.vertexCount,s.bytesPerSplat=s.bytesPerVertex,s}decodeHeaderText(e){const t=ne.convertHeaderTextToLines(e),s=this.decodeHeaderLines(t);return s.headerText=e,s.headerSizeBytes=e.indexOf(ne.HeaderEndToken)+ne.HeaderEndToken.length+1,s}decodeHeaderFromBuffer(e){const t=this.plyParserutils.readHeaderFromBuffer(e);return this.decodeHeaderText(t)}findSplatData(e,t){return new DataView(e,t.headerSizeBytes)}parseToUncompressedSplatBufferSection(e,t,s,n,r,i,o,a=0){a=Math.min(a,e.sphericalHarmonicsDegree);const l=H.CompressionLevels[0].SphericalHarmonicsDegrees[a].BytesPerSplat;for(let c=t;c<=s;c++){const t=Be.parseToUncompressedSplat(n,c,e,r,a),s=c*l+o;H.writeSplatDataToSectionBuffer(t,i,s,0,a)}}decodeSectionSplatData(e,t,s,n){n=Math.min(n,s.sphericalHarmonicsDegree);const r=new w(n);for(let i=0;i<t;i++){const t=Be.parseToUncompressedSplat(e,i,s,0,n);r.addSplat(t)}return r}static parseToUncompressedSplat=function(){let t=[];const s=new e.Quaternion,n=w.OFFSET.X,r=w.OFFSET.Y,i=w.OFFSET.Z,o=w.OFFSET.SCALE0,a=w.OFFSET.SCALE1,l=w.OFFSET.SCALE2,c=w.OFFSET.ROTATION0,h=w.OFFSET.ROTATION1,d=w.OFFSET.ROTATION2,p=w.OFFSET.ROTATION3,u=w.OFFSET.FDC0,A=w.OFFSET.FDC1,g=w.OFFSET.FDC2,f=w.OFFSET.OPACITY,C=[];for(let e=0;e<45;e++)C[e]=w.OFFSET.FRC0+e;return function(e,S,y,x=0,I=0){I=Math.min(I,y.sphericalHarmonicsDegree),Be.readSplat(e,y,S,x,t);const v=w.createSplat(I);if(void 0!==t[oe]?(v[o]=Math.exp(t[oe]),v[a]=Math.exp(t[ae]),v[l]=Math.exp(t[le])):(v[o]=.01,v[a]=.01,v[l]=.01),void 0!==t[ge]){const e=.28209479177387814;v[u]=255*(.5+e*t[ge]),v[A]=255*(.5+e*t[fe]),v[g]=255*(.5+e*t[Ce])}else void 0!==t[ye]?(v[u]=255*t[ye],v[A]=255*t[xe],v[g]=255*t[Ie]):(v[u]=0,v[A]=0,v[g]=0);if(void 0!==t[Se]&&(v[f]=1/(1+Math.exp(-t[Se]))*255),v[u]=m(Math.floor(v[u]),0,255),v[A]=m(Math.floor(v[A]),0,255),v[g]=m(Math.floor(v[g]),0,255),v[f]=m(Math.floor(v[f]),0,255),I>=1&&void 0!==t[ve]){for(let e=0;e<9;e++)v[C[e]]=t[y.sphericalHarmonicsDegree1Fields[e]];if(I>=2)for(let e=0;e<15;e++)v[C[9+e]]=t[y.sphericalHarmonicsDegree2Fields[e]]}return s.set(t[ce],t[he],t[de],t[pe]),s.normalize(),v[c]=s.x,v[h]=s.y,v[d]=s.z,v[p]=s.w,v[n]=t[ue],v[r]=t[Ae],v[i]=t[me],v}}();static readSplat(e,t,s,n,r){return ne.readVertex(e,t,s,n,ie,r,!0)}parseToUncompressedSplatArray(e,t=0){const s=this.decodeHeaderFromBuffer(e),n=s.splatCount,r=this.findSplatData(e,s);return this.decodeSectionSplatData(r,n,s,t)}}const we=["features_dc","features_rest_0","features_rest_1","features_rest_2","features_rest_3","features_rest_4","features_rest_5","features_rest_6","features_rest_7","features_rest_8","features_rest_9","features_rest_10","features_rest_11","features_rest_12","features_rest_13","features_rest_14","opacity","scaling","rotation_re","rotation_im"],be=we.map(((e,t)=>t)),[Ee,De,Te,Me,Fe,Re,Pe]=[0,1,4,16,17,18,19],ke=["scale_0","scale_1","scale_2","rot_0","rot_1","rot_2","rot_3","x","y","z","f_dc_0","f_dc_1","f_dc_2","opacity","red","green","blue","f_rest_0","f_rest_1","f_rest_2","f_rest_3","f_rest_4","f_rest_5","f_rest_6","f_rest_7","f_rest_8","f_rest_9","f_rest_10","f_rest_11","f_rest_12","f_rest_13","f_rest_14","f_rest_15","f_rest_16","f_rest_17","f_rest_18","f_rest_19","f_rest_20","f_rest_21","f_rest_22","f_rest_23","f_rest_24","f_rest_25","f_rest_26","f_rest_27","f_rest_28","f_rest_29","f_rest_30","f_rest_31","f_rest_32","f_rest_33","f_rest_34","f_rest_35","f_rest_36","f_rest_37","f_rest_38","f_rest_39","f_rest_40","f_rest_41","f_rest_42","f_rest_43","f_rest_44","f_rest_45"],He=ke.map(((e,t)=>t)),[Le,_e,Oe,Ue,Qe,ze,Ve,Ne,Ge,Ke,je,We,qe,Ye]=He,Xe=je,Je=We,Ze=qe,$e=e=>{const t=(31744&e)>>10,s=1023&e;return(e>>15?-1:1)*(t?31===t?s?NaN:1/0:Math.pow(2,t-15)*(1+s/1024):s/1024*6103515625e-14)};class et{constructor(){this.plyParserutils=new ne}decodeSectionHeadersFromHeaderLines(e){const t=He.reduce(((e,t)=>(e[ke[t]]=t,e)),{}),s=be.reduce(((e,t)=>(e[we[t]]=t,e)),{}),n=ne.getHeaderSectionNames(e);let r;for(let e=0;e<n.length;e++){"codebook_centers"===n[e]&&(r=e)}let i=0,o=!1;const a=[];let l=0;for(;!o;){let n;n=l===r?this.plyParserutils.decodeSectionHeader(e,s,i):this.plyParserutils.decodeSectionHeader(e,t,i),o=n.endOfHeader,i=n.headerEndLine+1,o||(n.splatCount=n.vertexCount,n.bytesPerSplat=n.bytesPerVertex),a.push(n),l++}return a}decodeSectionHeadersFromHeaderText(e){const t=ne.convertHeaderTextToLines(e);return this.decodeSectionHeadersFromHeaderLines(t)}getSplatCountFromSectionHeaders(e){let t=0;for(let s of e)"codebook_centers"!==s.sectionName&&(t+=s.vertexCount);return t}decodeHeaderFromHeaderText(e){const t=e.indexOf(ne.HeaderEndToken)+ne.HeaderEndToken.length+1,s=this.decodeSectionHeadersFromHeaderText(e);return{headerSizeBytes:t,sectionHeaders:s,splatCount:this.getSplatCountFromSectionHeaders(s)}}decodeHeaderFromBuffer(e){const t=this.plyParserutils.readHeaderFromBuffer(e);return this.decodeHeaderFromHeaderText(t)}findVertexData(e,t,s){let n=t.headerSizeBytes;for(let e=0;e<s&&e<t.sectionHeaders.length;e++){n+=t.sectionHeaders[e].dataSizeBytes}return new DataView(e,n,t.sectionHeaders[s].dataSizeBytes)}decodeCodeBook(e,t){const s=[],n=[];for(let r=0;r<t.vertexCount;r++){ne.readVertex(e,t,r,0,be,s);for(let e of be){const t=be[e];let r=n[t];r||(n[t]=r=[]),r.push(s[e])}}for(let e=0;e<n.length;e++){const t=n[e],s=.28209479177387814;for(let n=0;n<t.length;n++){const r=$e(t[n]);t[n]=e===Me?Math.round(1/(1+Math.exp(-r))*255):e===Ee?Math.round(255*(.5+s*r)):e===Fe?Math.exp(r):r}}return n}decodeSectionSplatData(e,t,s,n,r){r=Math.min(r,s.sphericalHarmonicsDegree);const i=new w(r);for(let o=0;o<t;o++){const t=et.parseToUncompressedSplat(e,o,s,n,0,r);i.addSplat(t)}return i}static parseToUncompressedSplat=function(){let t=[];const s=new e.Quaternion,n=w.OFFSET.X,r=w.OFFSET.Y,i=w.OFFSET.Z,o=w.OFFSET.SCALE0,a=w.OFFSET.SCALE1,l=w.OFFSET.SCALE2,c=w.OFFSET.ROTATION0,h=w.OFFSET.ROTATION1,d=w.OFFSET.ROTATION2,p=w.OFFSET.ROTATION3,u=w.OFFSET.FDC0,A=w.OFFSET.FDC1,g=w.OFFSET.FDC2,f=w.OFFSET.OPACITY,C=[];for(let e=0;e<45;e++)C[e]=w.OFFSET.FRC0+e;return function(e,S,y,x,I=0,v=0){v=Math.min(v,y.sphericalHarmonicsDegree),et.readSplat(e,y,S,I,t);const B=w.createSplat(v);if(void 0!==t[Le]?(B[o]=x[Fe][t[Le]],B[a]=x[Fe][t[_e]],B[l]=x[Fe][t[Oe]]):(B[o]=.01,B[a]=.01,B[l]=.01),void 0!==t[je]?(B[u]=x[Ee][t[je]],B[A]=x[Ee][t[We]],B[g]=x[Ee][t[qe]]):void 0!==t[Xe]?(B[u]=255*t[Xe],B[A]=255*t[Je],B[g]=255*t[Ze]):(B[u]=0,B[A]=0,B[g]=0),void 0!==t[Ye]&&(B[f]=x[Me][t[Ye]]),B[u]=m(Math.floor(B[u]),0,255),B[A]=m(Math.floor(B[A]),0,255),B[g]=m(Math.floor(B[g]),0,255),B[f]=m(Math.floor(B[f]),0,255),v>=1&&y.sphericalHarmonicsDegree>=1){for(let e=0;e<9;e++){const s=x[De+e%3];B[C[e]]=s[t[y.sphericalHarmonicsDegree1Fields[e]]]}if(v>=2&&y.sphericalHarmonicsDegree>=2)for(let e=0;e<15;e++){const s=x[Te+e%5];B[C[9+e]]=s[t[y.sphericalHarmonicsDegree2Fields[e]]]}}const b=x[Re][t[Ue]],E=x[Pe][t[Qe]],D=x[Pe][t[ze]],T=x[Pe][t[Ve]];return s.set(b,E,D,T),s.normalize(),B[c]=s.x,B[h]=s.y,B[d]=s.z,B[p]=s.w,B[n]=$e(t[Ne]),B[r]=$e(t[Ge]),B[i]=$e(t[Ke]),B}}();static readSplat(e,t,s,n,r){return ne.readVertex(e,t,s,n,He,r,!1)}parseToUncompressedSplatArray(e,t=0){const s=[],n=this.decodeHeaderFromBuffer(e,t);let r;for(let t=0;t<n.sectionHeaders.length;t++){const s=n.sectionHeaders[t];if("codebook_centers"===s.sectionName){const i=this.findVertexData(e,n,t);r=this.decodeCodeBook(i,s)}}for(let i=0;i<n.sectionHeaders.length;i++){const o=n.sectionHeaders[i];if("codebook_centers"!==o.sectionName){const a=o.vertexCount,l=this.findVertexData(e,n,i),c=this.decodeSectionSplatData(l,a,o,r,t);s.push(c)}}const i=new w(t);for(let e of s)for(let t of e.splats)i.addSplat(t);return i}}class tt{static parseToUncompressedSplatArray(e,t=0){const s=ne.determineHeaderFormatFromPlyBuffer(e);return s===W?G.parseToUncompressedSplatArray(e):s===K?(new Be).parseToUncompressedSplatArray(e,t):s===j?(new et).parseToUncompressedSplatArray(e,t):void 0}}class st{constructor(e,t,s,n){this.sectionCount=e,this.sectionFilters=t,this.groupingParameters=s,this.partitionGenerator=n}partitionUncompressedSplatArray(e){let t,s,n;if(this.partitionGenerator){const r=this.partitionGenerator(e);t=r.groupingParameters,s=r.sectionCount,n=r.sectionFilters}else t=this.groupingParameters,s=this.sectionCount,n=this.sectionFilters;const r=[];for(let t=0;t<s;t++){const s=new w(e.sphericalHarmonicsDegree),i=n[t];for(let t=0;t<e.splatCount;t++)i(t)&&s.addSplatFromArray(e,t);r.push(s)}return{splatArrays:r,parameters:t}}static getStandardPartitioner(t=0,s=new e.Vector3,n=H.BucketBlockSize,r=H.BucketSize){return new st(void 0,void 0,void 0,(i=>{const o=w.OFFSET.X,a=w.OFFSET.Y,l=w.OFFSET.Z;t<=0&&(t=i.splatCount);const c=new e.Vector3,h=.5;i.splats.forEach((e=>{var t;c.set(e[o],e[a],e[l]).sub(s),(t=c).x=Math.floor(t.x/h)*h,t.y=Math.floor(t.y/h)*h,t.z=Math.floor(t.z/h)*h,e.centerDist=c.lengthSq()})),i.splats.sort(((e,t)=>e.centerDist>t.centerDist?1:-1));const d=[],p=[];t=Math.min(i.splatCount,t);const u=Math.ceil(i.splatCount/t);let A=0;for(let e=0;e<u;e++){let e=A;d.push((s=>s>=e&&s<e+t)),p.push({blocksSize:n,bucketSize:r}),A+=t}return{sectionCount:d.length,sectionFilters:d,groupingParameters:p}}))}}class nt{constructor(t,s,n,r,i,o,a){this.splatPartitioner=t,this.alphaRemovalThreshold=s,this.compressionLevel=n,this.sectionSize=r,this.sceneCenter=i?(new e.Vector3).copy(i):void 0,this.blockSize=o,this.bucketSize=a}generateFromUncompressedSplatArray(e){const t=this.splatPartitioner.partitionUncompressedSplatArray(e);return H.generateFromUncompressedSplatArrays(t.splatArrays,this.alphaRemovalThreshold,this.compressionLevel,this.sceneCenter,this.blockSize,this.bucketSize,t.parameters)}static getStandardGenerator(t=1,s=1,n=0,r=new e.Vector3,i=H.BucketBlockSize,o=H.BucketSize){const a=st.getStandardPartitioner(n,r,i,o);return new nt(a,t,s,n,r,i,o)}}const rt=0,it=1,ot=2;function at(e,t){let s=0;for(let t of e)s+=t.sizeBytes;(!t||t.byteLength<s)&&(t=new ArrayBuffer(s));let n=0;for(let s of e)new Uint8Array(t,n,s.sizeBytes).set(s.data),n+=s.sizeBytes;return t}class lt{static loadFromURL(t,s,n,r,i,o,a=0,l,c,h,d){const p=b.ProgressiveLoadSectionSize,u=H.HeaderSizeBytes+H.SectionHeaderSizeBytes;let m,g,f,C,S=0,x=0,I=!1,v=!1,B=!1;const w=y();let E=0,D=0,T=0,M="",F=null,R=[];const P=new TextDecoder,k=new Be;return A(t,((t,i,o)=>{const l=t>=100;if(n){if(o&&(R.push({data:o,sizeBytes:o.byteLength,startBytes:T,endBytes:T+o.byteLength}),T+=o.byteLength),I){if(B&&!v){const e=F.headerSizeBytes+F.chunkElement.storageSizeBytes;C=at(R,C),C.byteLength>=e&&(G.readElementData(F.chunkElement,C,F.headerSizeBytes),E=e,D=e,v=!0)}}else if(M+=P.decode(o),ne.checkTextForEndHeader(M)){const t=ne.determineHeaderFormatFromHeaderText(M);if(t===K)F=k.decodeHeaderText(M),S=F.splatCount,v=!0,B=!1;else{if(t!==W)throw new Error("PlyLoader.loadFromURL() -> Selected Ply format cannot be progressively loaded.");F=G.decodeHeaderText(M),S=F.vertexElement.count,B=!0}a=Math.min(a,F.sphericalHarmonicsDegree);const s=H.CompressionLevels[0].SphericalHarmonicsDegrees[a],n=u+s.BytesPerSplat*S;g=new ArrayBuffer(n),H.writeHeaderToBuffer({versionMajor:H.CurrentMajorVersion,versionMinor:H.CurrentMinorVersion,maxSectionCount:1,sectionCount:1,maxSplatCount:S,splatCount:x,compressionLevel:0,sceneCenter:new e.Vector3},g),E=F.headerSizeBytes,D=F.headerSizeBytes,I=!0}if(I&&v){if(R.length>0){m=at(R,m);if(T-E>p||l){const e=T-D,t=Math.floor(e/F.bytesPerSplat),s=t*F.bytesPerSplat,n=e-s,i=x+t,o=D-R[0].startBytes,c=new DataView(m,o,s),h=H.CompressionLevels[0].SphericalHarmonicsDegrees[a],d=x*h.BytesPerSplat+u;if(B?G.parseToUncompressedSplatBufferSection(F.chunkElement,F.vertexElement,0,t-1,x,c,0,g,d):k.parseToUncompressedSplatBufferSection(F,0,t-1,c,0,g,d,a),x=i,f||(H.writeSectionHeaderToBuffer({maxSplatCount:S,splatCount:x,bucketSize:0,bucketCount:0,bucketBlockSize:0,compressionScaleRange:0,storageSizeBytes:0,fullBucketCount:0,partiallyFilledBucketCount:0,sphericalHarmonicsDegree:a},0,g,H.HeaderSizeBytes),f=new H(g,!1)),f.updateLoadedCounts(1,x),r(f,l),E+=p,D+=s,0===n)R=[];else{let e=[],t=0;for(let s=R.length-1;s>=0;s--){const r=R[s];if(t+=r.sizeBytes,e.unshift(r),t>=n)break}R=e}}}l&&w.resolve(f)}}s&&s(t,i,rt)}),!n).then((e=>{s&&s(0,"0%",it);return(n?w.promise:lt.loadFromFileData(e,i,o,a,l,c,h,d)).then((e=>(s&&s(100,"100%",ot),e)))}))}static loadFromFileData(e,t,s,n=0,r,i,o,a){return C((()=>tt.parseToUncompressedSplatArray(e,n))).then((e=>nt.getStandardGenerator(t,s,r,i,o,a).generateFromUncompressedSplatArray(e)))}}class ct{static RowSizeBytes=32;static CenterSizeBytes=12;static ScaleSizeBytes=12;static RotationSizeBytes=4;static ColorSizeBytes=4;static parseToUncompressedSplatBufferSection(t,s,n,r,i,o){const a=H.CompressionLevels[0].BytesPerCenter,l=H.CompressionLevels[0].BytesPerScale,c=H.CompressionLevels[0].BytesPerRotation,h=H.CompressionLevels[0].SphericalHarmonicsDegrees[0].BytesPerSplat;for(let d=t;d<=s;d++){const t=d*ct.RowSizeBytes+r,s=new Float32Array(n,t,3),p=new Float32Array(n,t+ct.CenterSizeBytes,3),u=new Uint8Array(n,t+ct.CenterSizeBytes+ct.ScaleSizeBytes,4),A=new Uint8Array(n,t+ct.CenterSizeBytes+ct.ScaleSizeBytes+ct.RotationSizeBytes,4),m=new e.Quaternion((A[1]-128)/128,(A[2]-128)/128,(A[3]-128)/128,(A[0]-128)/128);m.normalize();const g=d*h+o,f=new Float32Array(i,g,3),C=new Float32Array(i,g+a,3),S=new Float32Array(i,g+a+l,4),y=new Uint8Array(i,g+a+l+c,4);f[0]=s[0],f[1]=s[1],f[2]=s[2],C[0]=p[0],C[1]=p[1],C[2]=p[2],S[0]=m.w,S[1]=m.x,S[2]=m.y,S[3]=m.z,y[0]=u[0],y[1]=u[1],y[2]=u[2],y[3]=u[3]}}static parseStandardSplatToUncompressedSplatArray(t){const s=t.byteLength/ct.RowSizeBytes,n=new w;for(let r=0;r<s;r++){const s=r*ct.RowSizeBytes,i=new Float32Array(t,s,3),o=new Float32Array(t,s+ct.CenterSizeBytes,3),a=new Uint8Array(t,s+ct.CenterSizeBytes+ct.ScaleSizeBytes,4),l=new Uint8Array(t,s+ct.CenterSizeBytes+ct.ScaleSizeBytes+ct.ColorSizeBytes,4),c=new e.Quaternion((l[1]-128)/128,(l[2]-128)/128,(l[3]-128)/128,(l[0]-128)/128);c.normalize(),n.addSplatFromComonents(i[0],i[1],i[2],o[0],o[1],o[2],c.w,c.x,c.y,c.z,a[0],a[1],a[2],a[3])}return n}}class ht{static loadFromURL(t,s,n,r,i,o,a,l,c,h,d){const p=H.HeaderSizeBytes+H.SectionHeaderSizeBytes,u=b.ProgressiveLoadSectionSize;let m,g,f,C=0,S=0;const x=y();let I=0,v=0,B=[];return A(t,((t,i,o,a)=>{const l=t>=100;if(a||(n=!1),n){if(!m){C=a/ct.RowSizeBytes,m=new ArrayBuffer(a);const t=H.CompressionLevels[0].SphericalHarmonicsDegrees[0].BytesPerSplat;g=new ArrayBuffer(p+t*C),H.writeHeaderToBuffer({versionMajor:H.CurrentMajorVersion,versionMinor:H.CurrentMinorVersion,maxSectionCount:1,sectionCount:1,maxSplatCount:C,splatCount:S,compressionLevel:0,sceneCenter:new e.Vector3},g)}if(o){B.push(o),new Uint8Array(m,v,o.byteLength).set(new Uint8Array(o)),v+=o.byteLength;const e=v-I;if(e>u||l){const t=(l?e:u)/ct.RowSizeBytes,s=S+t;ct.parseToUncompressedSplatBufferSection(S,s-1,m,0,g,p),S=s,f||(H.writeSectionHeaderToBuffer({maxSplatCount:C,splatCount:S,bucketSize:0,bucketCount:0,bucketBlockSize:0,compressionScaleRange:0,storageSizeBytes:0,fullBucketCount:0,partiallyFilledBucketCount:0},0,g,H.HeaderSizeBytes),f=new H(g,!1)),f.updateLoadedCounts(1,S),r(f,l),I+=u}}l&&x.resolve(f)}return s&&s(t,i,rt),n}),!0).then((e=>{s&&s(0,"0%",it);return(n?x.promise:ht.loadFromFileData(e,i,o,a,l,c,h,d)).then((e=>(s&&s(100,"100%",ot),e)))}))}static loadFromFileData(t,s,n,r,i,o,a,l){return C((()=>{const c=ct.parseStandardSplatToUncompressedSplatArray(t);if(r){return nt.getStandardGenerator(s,n,i,o,a,l).generateFromUncompressedSplatArray(c)}return H.generateFromUncompressedSplatArrays([c],s,0,new e.Vector3)}))}}class dt{static checkVersion(e){const t=H.CurrentMajorVersion,s=H.CurrentMinorVersion,n=H.parseHeader(e);if(n.versionMajor===t&&n.versionMinor>=s||n.versionMajor>t)return!0;throw new Error(`KSplat version not supported: v${n.versionMajor}.${n.versionMinor}. Minimum required: v${t}.${s}`)}static loadFromURL(e,t,s,n){let r,i,o,a,l,c=!1,h=!1,d=[],p=!1,u=!1,m=0,g=0,f=0,C=!1,S=!1,x=!1,I=[];const v=y();let B=0;const w=()=>{const e=()=>{u=!0;new Blob(I).arrayBuffer().then((e=>{u=!1,p=!0,l=new ArrayBuffer(a.maxSectionCount*H.SectionHeaderSizeBytes),new Uint8Array(l).set(new Uint8Array(e,H.HeaderSizeBytes,a.maxSectionCount*H.SectionHeaderSizeBytes)),d=H.parseSectionHeaders(a,l,0,!1);let t=0;for(let e=0;e<a.maxSectionCount;e++)t+=d[e].storageSizeBytes;const s=H.HeaderSizeBytes+a.maxSectionCount*H.SectionHeaderSizeBytes+t;if(!r){r=new ArrayBuffer(s);let e=0;for(let t=0;t<I.length;t++){const s=I[t];new Uint8Array(r,e,s.byteLength).set(new Uint8Array(s)),e+=s.byteLength}}f=H.HeaderSizeBytes+H.SectionHeaderSizeBytes*a.maxSectionCount;for(let e=0;e<=d.length&&e<a.maxSectionCount;e++)f+=d[e].storageSizeBytes;0===B&&(B++,window.setTimeout((()=>{B--,E()}),1))}))};!u&&!p&&c&&m>=H.HeaderSizeBytes+H.SectionHeaderSizeBytes*a.maxSectionCount&&e()},E=()=>{if(x)return;x=!0;window.setTimeout((()=>{if(x=!1,p){if(S)return;if(C=m>=f,m-g>b.ProgressiveLoadSectionSize||C){g+=b.ProgressiveLoadSectionSize,S=g>=f,i||(i=new H(r,!1));const e=H.HeaderSizeBytes+H.SectionHeaderSizeBytes*a.maxSectionCount;let s=0,o=0,l=0;for(let t=0;t<a.maxSectionCount;t++){const n=d[t],r=e+(s+4*n.partiallyFilledBucketCount+n.bucketStorageSizeBytes*n.bucketCount);if(!(g>=r))break;{o++;const e=g-r,s=H.CompressionLevels[a.compressionLevel].SphericalHarmonicsDegrees[n.sphericalHarmonicsDegree].BytesPerSplat;let c=Math.floor(e/s);c=Math.min(c,n.maxSplatCount),l+=c,i.updateLoadedCounts(o,l),i.updateSectionLoadedCounts(t,c)}s+=n.storageSizeBytes}n(i,S);const c=g/f*100,h=c.toFixed(2)+"%";t&&t(c,h,rt),S?v.resolve(i):E()}}}),b.ProgressiveLoadSectionDelayDuration)};return A(e,((e,n,i)=>{i&&(I.push(i),r&&new Uint8Array(r,m,i.byteLength).set(new Uint8Array(i)),m+=i.byteLength),s?(!c&&!h&&m>=H.HeaderSizeBytes&&(h=!0,new Blob(I).arrayBuffer().then((e=>{o=new ArrayBuffer(H.HeaderSizeBytes),new Uint8Array(o).set(new Uint8Array(e,0,H.HeaderSizeBytes)),dt.checkVersion(o),h=!1,c=!0,a=H.parseHeader(o),window.setTimeout((()=>{w()}),1)}))),w(),E()):t&&t(e,n,rt)}),!s).then((e=>{t&&t(0,"0%",it);return(s?v.promise:dt.loadFromFileData(e)).then((e=>(t&&t(100,"100%",ot),e)))}))}static loadFromFileData(e){return C((()=>(dt.checkVersion(e),new H(e))))}static downloadFile=function(){let e;return function(t,s){const n=new Blob([t.bufferData],{type:"application/octet-stream"});e||(e=document.createElement("a"),document.body.appendChild(e)),e.download=s,e.href=URL.createObjectURL(n),e.click()}}()}const pt={Splat:0,KSplat:1,Ply:2},ut=e=>e.endsWith(".ply")?pt.Ply:e.endsWith(".splat")?pt.Splat:e.endsWith(".ksplat")?pt.KSplat:null;var At=Object.freeze({__proto__:null,sceneFormatFromPath:ut});const mt={type:"change"},gt={type:"start"},ft={type:"end"},Ct=new t,St=new s,yt=Math.cos(70*n.DEG2RAD);class xt extends r{constructor(e,t){super(),this.object=e,this.domElement=t,this.domElement.style.touchAction="none",this.enabled=!0,this.target=new i,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.zoomToCursor=!1,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"KeyA",UP:"KeyW",RIGHT:"KeyD",BOTTOM:"KeyS"},this.mouseButtons={LEFT:o.ROTATE,MIDDLE:o.DOLLY,RIGHT:o.PAN},this.touches={ONE:a.ROTATE,TWO:a.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this.getPolarAngle=function(){return p.phi},this.getAzimuthalAngle=function(){return p.theta},this.getDistance=function(){return this.object.position.distanceTo(this.target)},this.listenToKeyEvents=function(e){e.addEventListener("keydown",Z),this._domElementKeyEvents=e},this.stopListenToKeyEvents=function(){this._domElementKeyEvents.removeEventListener("keydown",Z),this._domElementKeyEvents=null},this.saveState=function(){s.target0.copy(s.target),s.position0.copy(s.object.position),s.zoom0=s.object.zoom},this.reset=function(){s.target.copy(s.target0),s.object.position.copy(s.position0),s.object.zoom=s.zoom0,this.clearDampedRotation(),this.clearDampedPan(),s.object.updateProjectionMatrix(),s.dispatchEvent(mt),s.update(),r=n.NONE},this.clearDampedRotation=function(){u.theta=0,u.phi=0},this.clearDampedPan=function(){m.set(0,0,0)},this.update=function(){const t=new i,o=(new l).setFromUnitVectors(e.up,new i(0,1,0)),a=o.clone().invert(),c=new i,h=new l,g=new i,f=2*Math.PI;return function(){o.setFromUnitVectors(e.up,new i(0,1,0)),a.copy(o).invert();const l=s.object.position;t.copy(l).sub(s.target),t.applyQuaternion(o),p.setFromVector3(t),s.autoRotate&&r===n.NONE&&F(2*Math.PI/60/60*s.autoRotateSpeed),s.enableDamping?(p.theta+=u.theta*s.dampingFactor,p.phi+=u.phi*s.dampingFactor):(p.theta+=u.theta,p.phi+=u.phi);let C=s.minAzimuthAngle,S=s.maxAzimuthAngle;isFinite(C)&&isFinite(S)&&(C<-Math.PI?C+=f:C>Math.PI&&(C-=f),S<-Math.PI?S+=f:S>Math.PI&&(S-=f),p.theta=C<=S?Math.max(C,Math.min(S,p.theta)):p.theta>(C+S)/2?Math.max(C,p.theta):Math.min(S,p.theta)),p.phi=Math.max(s.minPolarAngle,Math.min(s.maxPolarAngle,p.phi)),p.makeSafe(),!0===s.enableDamping?s.target.addScaledVector(m,s.dampingFactor):s.target.add(m),s.zoomToCursor&&E||s.object.isOrthographicCamera?p.radius=U(p.radius):p.radius=U(p.radius*A),t.setFromSpherical(p),t.applyQuaternion(a),l.copy(s.target).add(t),s.object.lookAt(s.target),!0===s.enableDamping?(u.theta*=1-s.dampingFactor,u.phi*=1-s.dampingFactor,m.multiplyScalar(1-s.dampingFactor)):(u.set(0,0,0),m.set(0,0,0));let y=!1;if(s.zoomToCursor&&E){let n=null;if(s.object.isPerspectiveCamera){const e=t.length();n=U(e*A);const r=e-n;s.object.position.addScaledVector(w,r),s.object.updateMatrixWorld()}else if(s.object.isOrthographicCamera){const e=new i(b.x,b.y,0);e.unproject(s.object),s.object.zoom=Math.max(s.minZoom,Math.min(s.maxZoom,s.object.zoom/A)),s.object.updateProjectionMatrix(),y=!0;const r=new i(b.x,b.y,0);r.unproject(s.object),s.object.position.sub(r).add(e),s.object.updateMatrixWorld(),n=t.length()}else console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled."),s.zoomToCursor=!1;null!==n&&(this.screenSpacePanning?s.target.set(0,0,-1).transformDirection(s.object.matrix).multiplyScalar(n).add(s.object.position):(Ct.origin.copy(s.object.position),Ct.direction.set(0,0,-1).transformDirection(s.object.matrix),Math.abs(s.object.up.dot(Ct.direction))<yt?e.lookAt(s.target):(St.setFromNormalAndCoplanarPoint(s.object.up,s.target),Ct.intersectPlane(St,s.target))))}else s.object.isOrthographicCamera&&(s.object.zoom=Math.max(s.minZoom,Math.min(s.maxZoom,s.object.zoom/A)),s.object.updateProjectionMatrix(),y=!0);return A=1,E=!1,!!(y||c.distanceToSquared(s.object.position)>d||8*(1-h.dot(s.object.quaternion))>d||g.distanceToSquared(s.target)>0)&&(s.dispatchEvent(mt),c.copy(s.object.position),h.copy(s.object.quaternion),g.copy(s.target),y=!1,!0)}}(),this.dispose=function(){s.domElement.removeEventListener("contextmenu",$),s.domElement.removeEventListener("pointerdown",q),s.domElement.removeEventListener("pointercancel",X),s.domElement.removeEventListener("wheel",J),s.domElement.removeEventListener("pointermove",Y),s.domElement.removeEventListener("pointerup",X),null!==s._domElementKeyEvents&&(s._domElementKeyEvents.removeEventListener("keydown",Z),s._domElementKeyEvents=null)};const s=this,n={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6};let r=n.NONE;const d=1e-6,p=new c,u=new c;let A=1;const m=new i,g=new h,f=new h,C=new h,S=new h,y=new h,x=new h,I=new h,v=new h,B=new h,w=new i,b=new h;let E=!1;const D=[],T={};function M(){return Math.pow(.95,s.zoomSpeed)}function F(e){u.theta-=e}function R(e){u.phi-=e}const P=function(){const e=new i;return function(t,s){e.setFromMatrixColumn(s,0),e.multiplyScalar(-t),m.add(e)}}(),k=function(){const e=new i;return function(t,n){!0===s.screenSpacePanning?e.setFromMatrixColumn(n,1):(e.setFromMatrixColumn(n,0),e.crossVectors(s.object.up,e)),e.multiplyScalar(t),m.add(e)}}(),H=function(){const e=new i;return function(t,n){const r=s.domElement;if(s.object.isPerspectiveCamera){const i=s.object.position;e.copy(i).sub(s.target);let o=e.length();o*=Math.tan(s.object.fov/2*Math.PI/180),P(2*t*o/r.clientHeight,s.object.matrix),k(2*n*o/r.clientHeight,s.object.matrix)}else s.object.isOrthographicCamera?(P(t*(s.object.right-s.object.left)/s.object.zoom/r.clientWidth,s.object.matrix),k(n*(s.object.top-s.object.bottom)/s.object.zoom/r.clientHeight,s.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),s.enablePan=!1)}}();function L(e){s.object.isPerspectiveCamera||s.object.isOrthographicCamera?A/=e:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),s.enableZoom=!1)}function _(e){s.object.isPerspectiveCamera||s.object.isOrthographicCamera?A*=e:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),s.enableZoom=!1)}function O(t){if(!s.zoomToCursor)return;E=!0;const n=s.domElement.getBoundingClientRect(),r=t.clientX-n.left,i=t.clientY-n.top,o=n.width,a=n.height;b.x=r/o*2-1,b.y=-i/a*2+1,w.set(b.x,b.y,1).unproject(e).sub(e.position).normalize()}function U(e){return Math.max(s.minDistance,Math.min(s.maxDistance,e))}function Q(e){g.set(e.clientX,e.clientY)}function z(e){S.set(e.clientX,e.clientY)}function V(){if(1===D.length)g.set(D[0].pageX,D[0].pageY);else{const e=.5*(D[0].pageX+D[1].pageX),t=.5*(D[0].pageY+D[1].pageY);g.set(e,t)}}function N(){if(1===D.length)S.set(D[0].pageX,D[0].pageY);else{const e=.5*(D[0].pageX+D[1].pageX),t=.5*(D[0].pageY+D[1].pageY);S.set(e,t)}}function G(){const e=D[0].pageX-D[1].pageX,t=D[0].pageY-D[1].pageY,s=Math.sqrt(e*e+t*t);I.set(0,s)}function K(e){if(1==D.length)f.set(e.pageX,e.pageY);else{const t=te(e),s=.5*(e.pageX+t.x),n=.5*(e.pageY+t.y);f.set(s,n)}C.subVectors(f,g).multiplyScalar(s.rotateSpeed);const t=s.domElement;F(2*Math.PI*C.x/t.clientHeight),R(2*Math.PI*C.y/t.clientHeight),g.copy(f)}function j(e){if(1===D.length)y.set(e.pageX,e.pageY);else{const t=te(e),s=.5*(e.pageX+t.x),n=.5*(e.pageY+t.y);y.set(s,n)}x.subVectors(y,S).multiplyScalar(s.panSpeed),H(x.x,x.y),S.copy(y)}function W(e){const t=te(e),n=e.pageX-t.x,r=e.pageY-t.y,i=Math.sqrt(n*n+r*r);v.set(0,i),B.set(0,Math.pow(v.y/I.y,s.zoomSpeed)),L(B.y),I.copy(v)}function q(e){!1!==s.enabled&&(0===D.length&&(s.domElement.setPointerCapture(e.pointerId),s.domElement.addEventListener("pointermove",Y),s.domElement.addEventListener("pointerup",X)),function(e){D.push(e)}(e),"touch"===e.pointerType?function(e){switch(ee(e),D.length){case 1:switch(s.touches.ONE){case a.ROTATE:if(!1===s.enableRotate)return;V(),r=n.TOUCH_ROTATE;break;case a.PAN:if(!1===s.enablePan)return;N(),r=n.TOUCH_PAN;break;default:r=n.NONE}break;case 2:switch(s.touches.TWO){case a.DOLLY_PAN:if(!1===s.enableZoom&&!1===s.enablePan)return;s.enableZoom&&G(),s.enablePan&&N(),r=n.TOUCH_DOLLY_PAN;break;case a.DOLLY_ROTATE:if(!1===s.enableZoom&&!1===s.enableRotate)return;s.enableZoom&&G(),s.enableRotate&&V(),r=n.TOUCH_DOLLY_ROTATE;break;default:r=n.NONE}break;default:r=n.NONE}r!==n.NONE&&s.dispatchEvent(gt)}(e):function(e){let t;switch(e.button){case 0:t=s.mouseButtons.LEFT;break;case 1:t=s.mouseButtons.MIDDLE;break;case 2:t=s.mouseButtons.RIGHT;break;default:t=-1}switch(t){case o.DOLLY:if(!1===s.enableZoom)return;!function(e){O(e),I.set(e.clientX,e.clientY)}(e),r=n.DOLLY;break;case o.ROTATE:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===s.enablePan)return;z(e),r=n.PAN}else{if(!1===s.enableRotate)return;Q(e),r=n.ROTATE}break;case o.PAN:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===s.enableRotate)return;Q(e),r=n.ROTATE}else{if(!1===s.enablePan)return;z(e),r=n.PAN}break;default:r=n.NONE}r!==n.NONE&&s.dispatchEvent(gt)}(e))}function Y(e){!1!==s.enabled&&("touch"===e.pointerType?function(e){switch(ee(e),r){case n.TOUCH_ROTATE:if(!1===s.enableRotate)return;K(e),s.update();break;case n.TOUCH_PAN:if(!1===s.enablePan)return;j(e),s.update();break;case n.TOUCH_DOLLY_PAN:if(!1===s.enableZoom&&!1===s.enablePan)return;!function(e){s.enableZoom&&W(e),s.enablePan&&j(e)}(e),s.update();break;case n.TOUCH_DOLLY_ROTATE:if(!1===s.enableZoom&&!1===s.enableRotate)return;!function(e){s.enableZoom&&W(e),s.enableRotate&&K(e)}(e),s.update();break;default:r=n.NONE}}(e):function(e){switch(r){case n.ROTATE:if(!1===s.enableRotate)return;!function(e){f.set(e.clientX,e.clientY),C.subVectors(f,g).multiplyScalar(s.rotateSpeed);const t=s.domElement;F(2*Math.PI*C.x/t.clientHeight),R(2*Math.PI*C.y/t.clientHeight),g.copy(f),s.update()}(e);break;case n.DOLLY:if(!1===s.enableZoom)return;!function(e){v.set(e.clientX,e.clientY),B.subVectors(v,I),B.y>0?L(M()):B.y<0&&_(M()),I.copy(v),s.update()}(e);break;case n.PAN:if(!1===s.enablePan)return;!function(e){y.set(e.clientX,e.clientY),x.subVectors(y,S).multiplyScalar(s.panSpeed),H(x.x,x.y),S.copy(y),s.update()}(e)}}(e))}function X(e){!function(e){delete T[e.pointerId];for(let t=0;t<D.length;t++)if(D[t].pointerId==e.pointerId)return void D.splice(t,1)}(e),0===D.length&&(s.domElement.releasePointerCapture(e.pointerId),s.domElement.removeEventListener("pointermove",Y),s.domElement.removeEventListener("pointerup",X)),s.dispatchEvent(ft),r=n.NONE}function J(e){!1!==s.enabled&&!1!==s.enableZoom&&r===n.NONE&&(e.preventDefault(),s.dispatchEvent(gt),function(e){O(e),e.deltaY<0?_(M()):e.deltaY>0&&L(M()),s.update()}(e),s.dispatchEvent(ft))}function Z(e){!1!==s.enabled&&!1!==s.enablePan&&function(e){let t=!1;switch(e.code){case s.keys.UP:e.ctrlKey||e.metaKey||e.shiftKey?R(2*Math.PI*s.rotateSpeed/s.domElement.clientHeight):H(0,s.keyPanSpeed),t=!0;break;case s.keys.BOTTOM:e.ctrlKey||e.metaKey||e.shiftKey?R(-2*Math.PI*s.rotateSpeed/s.domElement.clientHeight):H(0,-s.keyPanSpeed),t=!0;break;case s.keys.LEFT:e.ctrlKey||e.metaKey||e.shiftKey?F(2*Math.PI*s.rotateSpeed/s.domElement.clientHeight):H(s.keyPanSpeed,0),t=!0;break;case s.keys.RIGHT:e.ctrlKey||e.metaKey||e.shiftKey?F(-2*Math.PI*s.rotateSpeed/s.domElement.clientHeight):H(-s.keyPanSpeed,0),t=!0}t&&(e.preventDefault(),s.update())}(e)}function $(e){!1!==s.enabled&&e.preventDefault()}function ee(e){let t=T[e.pointerId];void 0===t&&(t=new h,T[e.pointerId]=t),t.set(e.pageX,e.pageY)}function te(e){const t=e.pointerId===D[0].pointerId?D[1]:D[0];return T[t.pointerId]}s.domElement.addEventListener("contextmenu",$),s.domElement.addEventListener("pointerdown",q),s.domElement.addEventListener("pointercancel",X),s.domElement.addEventListener("wheel",J,{passive:!1}),this.update()}}class It{static elementIDGen=0;constructor(e,t){this.taskIDGen=0,this.elementID=It.elementIDGen++,this.tasks=[],this.message=e||"Loading...",this.container=t||document.body,this.spinnerContainerOuter=document.createElement("div"),this.spinnerContainerOuter.className=`spinnerOuterContainer${this.elementID}`,this.spinnerContainerOuter.style.display="none",this.spinnerContainerPrimary=document.createElement("div"),this.spinnerContainerPrimary.className=`spinnerContainerPrimary${this.elementID}`,this.spinnerPrimary=document.createElement("div"),this.spinnerPrimary.classList.add(`spinner${this.elementID}`,`spinnerPrimary${this.elementID}`),this.messageContainerPrimary=document.createElement("div"),this.messageContainerPrimary.classList.add(`messageContainer${this.elementID}`,`messageContainerPrimary${this.elementID}`),this.messageContainerPrimary.innerHTML=this.message,this.spinnerContainerMin=document.createElement("div"),this.spinnerContainerMin.className=`spinnerContainerMin${this.elementID}`,this.spinnerMin=document.createElement("div"),this.spinnerMin.classList.add(`spinner${this.elementID}`,`spinnerMin${this.elementID}`),this.messageContainerMin=document.createElement("div"),this.messageContainerMin.classList.add(`messageContainer${this.elementID}`,`messageContainerMin${this.elementID}`),this.messageContainerMin.innerHTML=this.message,this.spinnerContainerPrimary.appendChild(this.spinnerPrimary),this.spinnerContainerPrimary.appendChild(this.messageContainerPrimary),this.spinnerContainerOuter.appendChild(this.spinnerContainerPrimary),this.spinnerContainerMin.appendChild(this.spinnerMin),this.spinnerContainerMin.appendChild(this.messageContainerMin),this.spinnerContainerOuter.appendChild(this.spinnerContainerMin);const s=document.createElement("style");s.innerHTML=`\n\n            .spinnerOuterContainer${this.elementID} {\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                top: 0;\n                left: 0;\n                position: absolute;\n                pointer-events: none;\n            }\n\n            .messageContainer${this.elementID} {\n                height: 20px;\n                font-family: arial;\n                font-size: 12pt;\n                color: #ffffff;\n                text-align: center;\n                vertical-align: middle;\n            }\n\n            .spinner${this.elementID} {\n                padding: 15px;\n                background: #07e8d6;\n                z-index:99999;\n            \n                aspect-ratio: 1;\n                border-radius: 50%;\n                --_m: \n                    conic-gradient(#0000,#000),\n                    linear-gradient(#000 0 0) content-box;\n                -webkit-mask: var(--_m);\n                    mask: var(--_m);\n                -webkit-mask-composite: source-out;\n                    mask-composite: subtract;\n                box-sizing: border-box;\n                animation: load 1s linear infinite;\n            }\n\n            .spinnerContainerPrimary${this.elementID} {\n                z-index:99999;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #666666 1px solid;\n                border-radius: 5px;\n                padding-top: 20px;\n                padding-bottom: 10px;\n                margin: 0;\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-80px, -80px);\n                width: 180px;\n                pointer-events: auto;\n            }\n\n            .spinnerPrimary${this.elementID} {\n                width: 120px;\n                margin-left: 30px;\n            }\n\n            .messageContainerPrimary${this.elementID} {\n                padding-top: 15px;\n            }\n\n            .spinnerContainerMin${this.elementID} {\n                z-index:99999;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #666666 1px solid;\n                border-radius: 5px;\n                padding-top: 20px;\n                padding-bottom: 15px;\n                margin: 0;\n                position: absolute;\n                bottom: 50px;\n                left: 50%;\n                transform: translate(-50%, 0);\n                display: flex;\n                flex-direction: left;\n                pointer-events: auto;\n                min-width: 250px;\n            }\n\n            .messageContainerMin${this.elementID} {\n                margin-right: 15px;\n            }\n\n            .spinnerMin${this.elementID} {\n                width: 50px;\n                height: 50px;\n                margin-left: 15px;\n                margin-right: 25px;\n            }\n\n            .messageContainerMin${this.elementID} {\n                padding-top: 15px;\n            }\n            \n            @keyframes load {\n                to{transform: rotate(1turn)}\n            }\n\n        `,this.spinnerContainerOuter.appendChild(s),this.container.appendChild(this.spinnerContainerOuter),this.setMinimized(!1,!0),this.fadeTransitions=[]}addTask(e){const t={message:e,id:this.taskIDGen++};return this.tasks.push(t),this.update(),t.id}removeTask(e){let t=0;for(let s of this.tasks){if(s.id===e){this.tasks.splice(t,1);break}t++}this.update()}removeAllTasks(){this.tasks=[],this.update()}setMessageForTask(e,t){for(let s of this.tasks)if(s.id===e){s.message=t;break}this.update()}update(){this.tasks.length>0?(this.show(),this.setMessage(this.tasks[this.tasks.length-1].message)):this.hide()}show(){this.spinnerContainerOuter.style.display="block",this.visible=!0}hide(){this.spinnerContainerOuter.style.display="none",this.visible=!1}setContainer(e){this.container&&this.container.removeChild(this.spinnerContainerOuter),e&&(this.container=e,this.container.appendChild(this.spinnerContainerOuter),this.spinnerContainerOuter.style.zIndex=this.container.style.zIndex+1)}setMinimized(e,t){const s=(e,t,s,n,r)=>{s?e.style.display=t?n:"none":this.fadeTransitions[r]=((e,t,s,n,r)=>{const i=performance.now();let o="none"===e.style.display?0:parseFloat(e.style.opacity);isNaN(o)&&(o=1);const a=window.setInterval((()=>{const l=performance.now()-i;let c,h=Math.min(l/n,1);h>.999&&(h=1),t?(c=(1-h)*o,c<1e-4&&(c=0)):c=(1-o)*h+o,c>0?(e.style.display=s,e.style.opacity=c):e.style.display="none",h>=1&&(r&&r(),window.clearInterval(a))}),16);return a})(e,!t,n,500,(()=>{this.fadeTransitions[r]=null}))};s(this.spinnerContainerPrimary,!e,t,"block",0),s(this.spinnerContainerMin,e,t,"flex",1),this.minimized=e}setMessage(e){this.messageContainerPrimary.innerHTML=e,this.messageContainerMin.innerHTML=e}}class vt{constructor(e){this.idGen=0,this.tasks=[],this.container=e||document.body,this.progressBarContainerOuter=document.createElement("div"),this.progressBarContainerOuter.className="progressBarOuterContainer",this.progressBarContainerOuter.style.display="none",this.progressBarBox=document.createElement("div"),this.progressBarBox.className="progressBarBox",this.progressBarBackground=document.createElement("div"),this.progressBarBackground.className="progressBarBackground",this.progressBar=document.createElement("div"),this.progressBar.className="progressBar",this.progressBarBackground.appendChild(this.progressBar),this.progressBarBox.appendChild(this.progressBarBackground),this.progressBarContainerOuter.appendChild(this.progressBarBox);const t=document.createElement("style");t.innerHTML="\n\n            .progressBarOuterContainer {\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                top: 0;\n                left: 0;\n                position: absolute;\n                pointer-events: none;\n            }\n\n            .progressBarBox {\n                z-index:99999;\n                padding: 7px 9px 5px 7px;\n                background-color: rgba(190, 190, 190, 0.75);\n                border: #555555 1px solid;\n                border-radius: 15px;\n                margin: 0;\n                position: absolute;\n                bottom: 50px;\n                left: 50%;\n                transform: translate(-50%, 0);\n                width: 180px;\n                height: 30px;\n                pointer-events: auto;\n            }\n\n            .progressBarBackground {\n                width: 100%;\n                height: 25px;\n                border-radius:10px;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #444444 1px solid;\n                box-shadow: inset 0 0 10px #333333;\n            }\n\n            .progressBar {\n                height: 25px;\n                width: 0px;\n                border-radius:10px;\n                background-color: rgba(0, 200, 0, 0.75);\n                box-shadow: inset 0 0 10px #003300;\n            }\n\n        ",this.progressBarContainerOuter.appendChild(t),this.container.appendChild(this.progressBarContainerOuter)}show(){this.progressBarContainerOuter.style.display="block"}hide(){this.progressBarContainerOuter.style.display="none"}setProgress(e){this.progressBar.style.width=e+"%"}setContainer(e){this.container&&this.container.removeChild(this.progressBarContainerOuter),e&&(this.container=e,this.container.appendChild(this.progressBarContainerOuter),this.progressBarContainerOuter.style.zIndex=this.container.style.zIndex+1)}}class Bt{constructor(e){this.container=e||document.body,this.infoCells={};const t=[["Camera position","cameraPosition"],["Camera look-at","cameraLookAt"],["Camera up","cameraUp"],["Camera mode","orthographicCamera"],["Cursor position","cursorPosition"],["FPS","fps"],["Rendering:","renderSplatCount"],["Sort time","sortTime"],["Render window","renderWindow"],["Focal adjustment","focalAdjustment"],["Splat scale","splatScale"],["Point cloud mode","pointCloudMode"]];this.infoPanelContainer=document.createElement("div");const s=document.createElement("style");s.innerHTML="\n\n            .infoPanel {\n                width: 430px;\n                padding: 10px;\n                background-color: rgba(50, 50, 50, 0.85);\n                border: #555555 2px solid;\n                color: #dddddd;\n                border-radius: 10px;\n                z-index: 9999;\n                font-family: arial;\n                font-size: 11pt;\n                text-align: left;\n                margin: 0;\n                top: 10px;\n                left:10px;\n                position: absolute;\n                pointer-events: auto;\n            }\n\n            .info-panel-cell {\n                margin-bottom: 5px;\n                padding-bottom: 2px;\n            }\n\n            .label-cell {\n                font-weight: bold;\n                font-size: 12pt;\n                width: 140px;\n            }\n\n        ",this.infoPanelContainer.append(s),this.infoPanel=document.createElement("div"),this.infoPanel.className="infoPanel";const n=document.createElement("div");n.style.display="table";for(let e of t){const t=document.createElement("div");t.style.display="table-row",t.className="info-panel-row";const s=document.createElement("div");s.style.display="table-cell",s.innerHTML=`${e[0]}: `,s.classList.add("info-panel-cell","label-cell");const r=document.createElement("div");r.style.display="table-cell",r.style.width="10px",r.innerHTML=" ",r.className="info-panel-cell";const i=document.createElement("div");i.style.display="table-cell",i.innerHTML="",i.className="info-panel-cell",this.infoCells[e[1]]=i,t.appendChild(s),t.appendChild(r),t.appendChild(i),n.appendChild(t)}this.infoPanel.appendChild(n),this.infoPanelContainer.append(this.infoPanel),this.infoPanelContainer.style.display="none",this.container.appendChild(this.infoPanelContainer),this.visible=!1}update=function(e,t,s,n,r,i,o,a,l,c,h,d,p,u){const A=`${t.x.toFixed(5)}, ${t.y.toFixed(5)}, ${t.z.toFixed(5)}`;if(this.infoCells.cameraPosition.innerHTML!==A&&(this.infoCells.cameraPosition.innerHTML=A),s){const e=s,t=`${e.x.toFixed(5)}, ${e.y.toFixed(5)}, ${e.z.toFixed(5)}`;this.infoCells.cameraLookAt.innerHTML!==t&&(this.infoCells.cameraLookAt.innerHTML=t)}const m=`${n.x.toFixed(5)}, ${n.y.toFixed(5)}, ${n.z.toFixed(5)}`;if(this.infoCells.cameraUp.innerHTML!==m&&(this.infoCells.cameraUp.innerHTML=m),this.infoCells.orthographicCamera.innerHTML=r?"Orthographic":"Perspective",i){const e=i,t=`${e.x.toFixed(5)}, ${e.y.toFixed(5)}, ${e.z.toFixed(5)}`;this.infoCells.cursorPosition.innerHTML=t}else this.infoCells.cursorPosition.innerHTML="N/A";this.infoCells.fps.innerHTML=o,this.infoCells.renderWindow.innerHTML=`${e.x} x ${e.y}`,this.infoCells.renderSplatCount.innerHTML=`${l} splats out of ${a} (${c.toFixed(2)}%)`,this.infoCells.sortTime.innerHTML=`${h.toFixed(3)} ms`,this.infoCells.focalAdjustment.innerHTML=`${d.toFixed(3)}`,this.infoCells.splatScale.innerHTML=`${p.toFixed(3)}`,this.infoCells.pointCloudMode.innerHTML=`${u}`};setContainer(e){this.container&&this.container.removeChild(this.infoPanelContainer),e&&(this.container=e,this.container.appendChild(this.infoPanelContainer),this.infoPanelContainer.style.zIndex=this.container.style.zIndex+1)}show(){this.infoPanelContainer.style.display="block",this.visible=!0}hide(){this.infoPanelContainer.style.display="none",this.visible=!1}}class wt extends e.Object3D{constructor(t=new e.Vector3(0,0,1),s=new e.Vector3(0,0,0),n=1,r=.1,i=16776960,o=.2*n,a=.2*o){super(),this.type="ArrowHelper";const l=new e.CylinderGeometry(r,r,n,32);l.translate(0,n/2,0);const c=new e.CylinderGeometry(0,a,o,32);c.translate(0,n,0),this.position.copy(s),this.line=new e.Mesh(l,new e.MeshBasicMaterial({color:i,toneMapped:!1})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new e.Mesh(c,new e.MeshBasicMaterial({color:i,toneMapped:!1})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(t)}setDirection(e){if(e.y>.99999)this.quaternion.set(0,0,0,1);else if(e.y<-.99999)this.quaternion.set(1,0,0,0);else{_axis.set(e.z,0,-e.x).normalize();const t=Math.acos(e.y);this.quaternion.setFromAxisAngle(_axis,t)}}setColor(e){this.line.material.color.set(e),this.cone.material.color.set(e)}copy(e){return super.copy(e,!1),this.line.copy(e.line),this.cone.copy(e.cone),this}dispose(){this.line.geometry.dispose(),this.line.material.dispose(),this.cone.geometry.dispose(),this.cone.material.dispose()}}class bt{constructor(e){this.threeScene=e,this.splatRenderTarget=null,this.renderTargetCopyQuad=null,this.renderTargetCopyCamera=null,this.meshCursor=null,this.focusMarker=null,this.controlPlane=null,this.debugRoot=null,this.secondaryDebugRoot=null}updateSplatRenderTargetForRenderDimensions(t,s){this.destroySplatRendertarget(),this.splatRenderTarget=new e.WebGLRenderTarget(t,s,{format:e.RGBAFormat,stencilBuffer:!1,depthBuffer:!0}),this.splatRenderTarget.depthTexture=new e.DepthTexture(t,s),this.splatRenderTarget.depthTexture.format=e.DepthFormat,this.splatRenderTarget.depthTexture.type=e.UnsignedIntType}destroySplatRendertarget(){this.splatRenderTarget&&(this.splatRenderTarget=null)}setupRenderTargetCopyObjects(){const t=new e.ShaderMaterial({vertexShader:"\n                varying vec2 vUv;\n                void main() {\n                    vUv = uv;\n                    gl_Position = vec4( position.xy, 0.0, 1.0 );    \n                }\n            ",fragmentShader:"\n                #include <common>\n                #include <packing>\n                varying vec2 vUv;\n                uniform sampler2D sourceColorTexture;\n                uniform sampler2D sourceDepthTexture;\n                void main() {\n                    vec4 color = texture2D(sourceColorTexture, vUv);\n                    float fragDepth = texture2D(sourceDepthTexture, vUv).x;\n                    gl_FragDepth = fragDepth;\n                    gl_FragColor = vec4(color.rgb, color.a * 2.0);\n              }\n            ",uniforms:{sourceColorTexture:{type:"t",value:null},sourceDepthTexture:{type:"t",value:null}},depthWrite:!1,depthTest:!1,transparent:!0,blending:e.CustomBlending,blendSrc:e.SrcAlphaFactor,blendSrcAlpha:e.SrcAlphaFactor,blendDst:e.OneMinusSrcAlphaFactor,blendDstAlpha:e.OneMinusSrcAlphaFactor});t.extensions.fragDepth=!0,this.renderTargetCopyQuad=new e.Mesh(new e.PlaneGeometry(2,2),t),this.renderTargetCopyCamera=new e.OrthographicCamera(-1,1,1,-1,0,1)}destroyRenderTargetCopyObjects(){this.renderTargetCopyQuad&&(f(this.renderTargetCopyQuad),this.renderTargetCopyQuad=null)}setupMeshCursor(){if(!this.meshCursor){const t=new e.ConeGeometry(.5,1.5,32),s=new e.MeshBasicMaterial({color:16777215}),n=new e.Mesh(t,s);n.rotation.set(0,0,Math.PI),n.position.set(0,1,0);const r=new e.Mesh(t,s);r.position.set(0,-1,0);const i=new e.Mesh(t,s);i.rotation.set(0,0,Math.PI/2),i.position.set(1,0,0);const o=new e.Mesh(t,s);o.rotation.set(0,0,-Math.PI/2),o.position.set(-1,0,0),this.meshCursor=new e.Object3D,this.meshCursor.add(n),this.meshCursor.add(r),this.meshCursor.add(i),this.meshCursor.add(o),this.meshCursor.scale.set(.1,.1,.1),this.threeScene.add(this.meshCursor),this.meshCursor.visible=!1}}destroyMeshCursor(){this.meshCursor&&(f(this.meshCursor),this.threeScene.remove(this.meshCursor),this.meshCursor=null)}setMeshCursorVisibility(e){this.meshCursor.visible=e}getMeschCursorVisibility(){return this.meshCursor.visible}setMeshCursorPosition(e){this.meshCursor.position.copy(e)}positionAndOrientMeshCursor(e,t){this.meshCursor.position.copy(e),this.meshCursor.up.copy(t.up),this.meshCursor.lookAt(t.position)}setupFocusMarker(){if(!this.focusMarker){const t=new e.SphereGeometry(.5,32,32),s=bt.buildFocusMarkerMaterial();s.depthTest=!1,s.depthWrite=!1,s.transparent=!0,this.focusMarker=new e.Mesh(t,s)}}destroyFocusMarker(){this.focusMarker&&(f(this.focusMarker),this.focusMarker=null)}updateFocusMarker=function(){const t=new e.Vector3,s=new e.Matrix4,n=new e.Vector3;return function(e,r,i){s.copy(r.matrixWorld).invert(),t.copy(e).applyMatrix4(s),t.normalize().multiplyScalar(10),t.applyMatrix4(r.matrixWorld),n.copy(r.position).sub(e);const o=n.length();this.focusMarker.position.copy(e),this.focusMarker.scale.set(o,o,o),this.focusMarker.material.uniforms.realFocusPosition.value.copy(e),this.focusMarker.material.uniforms.viewport.value.copy(i),this.focusMarker.material.uniformsNeedUpdate=!0}}();setFocusMarkerVisibility(e){this.focusMarker.visible=e}setFocusMarkerOpacity(e){this.focusMarker.material.uniforms.opacity.value=e,this.focusMarker.material.uniformsNeedUpdate=!0}getFocusMarkerOpacity(){return this.focusMarker.material.uniforms.opacity.value}setupControlPlane(){if(!this.controlPlane){const t=new e.PlaneGeometry(1,1);t.rotateX(-Math.PI/2);const s=new e.MeshBasicMaterial({color:16777215});s.transparent=!0,s.opacity=.6,s.depthTest=!1,s.depthWrite=!1,s.side=e.DoubleSide;const n=new e.Mesh(t,s),r=new e.Vector3(0,1,0);r.normalize();const i=new e.Vector3(0,0,0),o=new wt(r,i,.5,.01,56576,.1,.03);this.controlPlane=new e.Object3D,this.controlPlane.add(n),this.controlPlane.add(o)}}destroyControlPlane(){this.controlPlane&&(f(this.controlPlane),this.controlPlane=null)}setControlPlaneVisibility(e){this.controlPlane.visible=e}positionAndOrientControlPlane=function(){const t=new e.Quaternion,s=new e.Vector3(0,1,0);return function(e,n){t.setFromUnitVectors(s,n),this.controlPlane.position.copy(e),this.controlPlane.quaternion.copy(t)}}();addDebugMeshes(){this.debugRoot=this.createDebugMeshes(),this.secondaryDebugRoot=this.createSecondaryDebugMeshes(),this.threeScene.add(this.debugRoot),this.threeScene.add(this.secondaryDebugRoot)}destroyDebugMeshes(){for(let e of[this.debugRoot,this.secondaryDebugRoot])e&&(f(e),this.threeScene.remove(e));this.debugRoot=null,this.secondaryDebugRoot=null}createDebugMeshes(t){const s=new e.SphereGeometry(1,32,32),n=new e.Object3D,r=(r,i)=>{let o=new e.Mesh(s,bt.buildDebugMaterial(r));o.renderOrder=t,n.add(o),o.position.fromArray(i)};return r(16711680,[-50,0,0]),r(16711680,[50,0,0]),r(65280,[0,0,-50]),r(65280,[0,0,50]),r(16755200,[5,0,5]),n}createSecondaryDebugMeshes(t){const s=new e.BoxGeometry(3,3,3),n=new e.Object3D;const r=r=>{let i=new e.Mesh(s,bt.buildDebugMaterial(12303291));i.renderOrder=t,n.add(i),i.position.fromArray(r)};let i=10;return r([-10,0,-10]),r([-10,0,i]),r([i,0,-10]),r([i,0,i]),n}static buildDebugMaterial(t){const s={color:{type:"v3",value:new e.Color(t)}},n=new e.ShaderMaterial({uniforms:s,vertexShader:"\n            #include <common>\n            varying float ndcDepth;\n\n            void main() {\n                gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position.xyz, 1.0);\n                ndcDepth = gl_Position.z / gl_Position.w;\n                gl_Position.x = gl_Position.x / gl_Position.w;\n                gl_Position.y = gl_Position.y / gl_Position.w;\n                gl_Position.z = 0.0;\n                gl_Position.w = 1.0;\n    \n            }\n        ",fragmentShader:"\n            #include <common>\n            uniform vec3 color;\n            varying float ndcDepth;\n            void main() {\n                gl_FragDepth = (ndcDepth + 1.0) / 2.0;\n                gl_FragColor = vec4(color.rgb, 0.0);\n            }\n        ",transparent:!1,depthTest:!0,depthWrite:!0,side:e.FrontSide});return n.extensions.fragDepth=!0,n}static buildFocusMarkerMaterial(t){const s={color:{type:"v3",value:new e.Color(t)},realFocusPosition:{type:"v3",value:new e.Vector3},viewport:{type:"v2",value:new e.Vector2},opacity:{value:0}};return new e.ShaderMaterial({uniforms:s,vertexShader:"\n            #include <common>\n\n            uniform vec2 viewport;\n            uniform vec3 realFocusPosition;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                float radius = 0.01;\n\n                vec4 viewPosition = modelViewMatrix * vec4(position.xyz, 1.0);\n                vec4 viewCenter = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);\n\n                vec4 viewFocusPosition = modelViewMatrix * vec4(realFocusPosition, 1.0);\n\n                ndcPosition = projectionMatrix * viewPosition;\n                ndcPosition = ndcPosition * vec4(1.0 / ndcPosition.w);\n                ndcCenter = projectionMatrix * viewCenter;\n                ndcCenter = ndcCenter * vec4(1.0 / ndcCenter.w);\n\n                ndcFocusPosition = projectionMatrix * viewFocusPosition;\n                ndcFocusPosition = ndcFocusPosition * vec4(1.0 / ndcFocusPosition.w);\n\n                gl_Position = projectionMatrix * viewPosition;\n\n            }\n        ",fragmentShader:"\n            #include <common>\n            uniform vec3 color;\n            uniform vec2 viewport;\n            uniform float opacity;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                vec2 screenPosition = vec2(ndcPosition) * viewport;\n                vec2 screenCenter = vec2(ndcCenter) * viewport;\n\n                vec2 screenVec = screenPosition - screenCenter;\n\n                float projectedRadius = length(screenVec);\n\n                float lineWidth = 0.0005 * viewport.y;\n                float aaRange = 0.0025 * viewport.y;\n                float radius = 0.06 * viewport.y;\n                float radDiff = abs(projectedRadius - radius) - lineWidth;\n                float alpha = 1.0 - clamp(radDiff / 5.0, 0.0, 1.0); \n\n                gl_FragColor = vec4(color.rgb, alpha * opacity);\n            }\n        ",transparent:!0,depthTest:!1,depthWrite:!1,side:e.FrontSide})}dispose(){this.destroyMeshCursor(),this.destroyFocusMarker(),this.destroyDebugMeshes(),this.destroyControlPlane(),this.destroyRenderTargetCopyObjects(),this.destroySplatRendertarget()}}const Et=new e.Vector3(1,0,0),Dt=new e.Vector3(0,1,0),Tt=new e.Vector3(0,0,1);class Mt{constructor(t=new e.Vector3,s=new e.Vector3){this.origin=new e.Vector3,this.direction=new e.Vector3,this.setParameters(t,s)}setParameters(e,t){this.origin.copy(e),this.direction.copy(t).normalize()}boxContainsPoint(e,t,s){return!(t.x<e.min.x-s||t.x>e.max.x+s||t.y<e.min.y-s||t.y>e.max.y+s||t.z<e.min.z-s||t.z>e.max.z+s)}intersectBox=function(){const t=new e.Vector3,s=[],n=[],r=[];return function(e,i){if(n[0]=this.origin.x,n[1]=this.origin.y,n[2]=this.origin.z,r[0]=this.direction.x,r[1]=this.direction.y,r[2]=this.direction.z,this.boxContainsPoint(e,this.origin,1e-4))return i&&(i.origin.copy(this.origin),i.normal.set(0,0,0),i.distance=-1),!0;for(let o=0;o<3;o++){if(0==r[o])continue;const a=0==o?Et:1==o?Dt:Tt,l=r[o]<0?e.max:e.min;let c=-Math.sign(r[o]);s[0]=0==o?l.x:1==o?l.y:l.z;let h=s[0]-n[o];if(h*c<0){const l=(o+1)%3,d=(o+2)%3;if(s[2]=r[l]/r[o]*h+n[l],s[1]=r[d]/r[o]*h+n[d],t.set(s[o],s[d],s[l]),this.boxContainsPoint(e,t,1e-4))return i&&(i.origin.copy(t),i.normal.copy(a).multiplyScalar(c),i.distance=t.sub(this.origin).length()),!0}}return!1}}();intersectSphere=function(){const t=new e.Vector3;return function(e,s,n){t.copy(e).sub(this.origin);const r=t.dot(this.direction),i=r*r,o=t.dot(t)-i,a=s*s;if(o>a)return!1;const l=Math.sqrt(a-o),c=r-l,h=r+l;if(h<0)return!1;let d=c<0?h:c;return n&&(n.origin.copy(this.origin).addScaledVector(this.direction,d),n.normal.copy(n.origin).sub(e).normalize(),n.distance=d),!0}}()}class Ft{constructor(){this.origin=new e.Vector3,this.normal=new e.Vector3,this.distance=0,this.splatIndex=0}set(e,t,s,n){this.origin.copy(e),this.normal.copy(t),this.distance=s,this.splatIndex=n}clone(){const e=new Ft;return e.origin.copy(this.origin),e.normal.copy(this.normal),e.distance=this.distance,e.splatIndex=this.splatIndex,e}}class Rt{constructor(e,t,s=!1){this.ray=new Mt(e,t),this.raycastAgainstTrueSplatEllipsoid=s}setFromCameraAndScreenPosition=function(){const t=new e.Vector2;return function(e,s,n){if(t.x=s.x/n.x*2-1,t.y=(n.y-s.y)/n.y*2-1,e.isPerspectiveCamera)this.ray.origin.setFromMatrixPosition(e.matrixWorld),this.ray.direction.set(t.x,t.y,.5).unproject(e).sub(this.ray.origin).normalize(),this.camera=e;else{if(!e.isOrthographicCamera)throw new Error("Raycaster::setFromCameraAndScreenPosition() -> Unsupported camera type");this.ray.origin.set(t.x,t.y,(e.near+e.far)/(e.near-e.far)).unproject(e),this.ray.direction.set(0,0,-1).transformDirection(e.matrixWorld),this.camera=e}}}();intersectSplatMesh=function(){const t=new e.Matrix4,s=new e.Matrix4,n=new e.Matrix4,r=new Mt,i=new e.Vector3;return function(e,o=[]){const a=e.getSplatTree();if(a){for(let l=0;l<a.subTrees.length;l++){const c=a.subTrees[l];s.copy(e.matrixWorld),e.dynamicMode&&(e.getSceneTransform(l,n),s.multiply(n)),t.copy(s).invert(),r.origin.copy(this.ray.origin).applyMatrix4(t),r.direction.copy(this.ray.origin).add(this.ray.direction),r.direction.applyMatrix4(t).sub(r.origin).normalize();const h=[];c.rootNode&&this.castRayAtSplatTreeNode(r,a,c.rootNode,h),h.forEach((e=>{e.origin.applyMatrix4(s),e.normal.applyMatrix4(s).normalize(),e.distance=i.copy(e.origin).sub(this.ray.origin).length()})),o.push(...h)}return o.sort(((e,t)=>e.distance>t.distance?1:-1)),o}}}();castRayAtSplatTreeNode=function(){const t=new e.Vector4,s=new e.Vector3,n=new e.Vector3,r=new e.Quaternion,i=new Ft,o=1e-7,a=new e.Vector3(0,0,0),l=new e.Matrix4,c=new e.Matrix4,h=new e.Matrix4,d=new e.Matrix4,p=new e.Matrix4,u=new Mt;return function(e,A,m,g=[]){if(e.intersectBox(m.boundingBox)){if(m.data&&m.data.indexes&&m.data.indexes.length>0)for(let f=0;f<m.data.indexes.length;f++){const C=m.data.indexes[f],S=A.splatMesh.getSceneIndexForSplat(C);if(A.splatMesh.getScene(S).visible&&(A.splatMesh.getSplatColor(C,t),A.splatMesh.getSplatCenter(C,s),A.splatMesh.getSplatScaleAndRotation(C,n,r),!(n.x<=o||n.y<=o||n.z<=o)))if(this.raycastAgainstTrueSplatEllipsoid){c.makeScale(n.x,n.y,n.z),h.makeRotationFromQuaternion(r);const o=2*Math.log10(t.w);if(l.makeScale(o,o,o),p.copy(l).multiply(h).multiply(c),d.copy(p).invert(),u.origin.copy(e.origin).sub(s).applyMatrix4(d),u.direction.copy(e.origin).add(e.direction).sub(s),u.direction.applyMatrix4(d).sub(u.origin).normalize(),u.intersectSphere(a,1,i)){const e=i.clone();e.splatIndex=C,e.origin.applyMatrix4(p).add(s),g.push(e)}}else{const t=(n.x+n.y+n.z)/3;if(e.intersectSphere(s,t,i)){const e=i.clone();e.splatIndex=C,g.push(e)}}}if(m.children&&m.children.length>0)for(let t of m.children)this.castRayAtSplatTreeNode(e,A,t,g);return g}}}()}class Pt{static build(t=!1,s=!1,n=!1,r=2048,i=1,o=!1,a=0){let l="\n            precision highp float;\n            #include <common>\n\n            attribute uint splatIndex;\n\n            uniform highp sampler2D covariancesTexture;\n            uniform highp usampler2D centersColorsTexture;\n            uniform highp sampler2D sphericalHarmonicsTexture;\n            uniform highp sampler2D sphericalHarmonicsTextureR;\n            uniform highp sampler2D sphericalHarmonicsTextureG;\n            uniform highp sampler2D sphericalHarmonicsTextureB;";(s||t)&&(l+="\n                uniform highp usampler2D sceneIndexesTexture;\n                uniform vec2 sceneIndexesTextureSize;\n            "),s&&(l+=`\n                uniform float sceneOpacity[${b.MaxScenes}];\n                uniform int sceneVisibility[${b.MaxScenes}];\n            `),t&&(l+=`\n                uniform highp mat4 transforms[${b.MaxScenes}];\n            `),l+=`\n            uniform vec2 focal;\n            uniform float orthoZoom;\n            uniform int orthographicMode;\n            uniform int pointCloudModeEnabled;\n            uniform float inverseFocalAdjustment;\n            uniform vec2 viewport;\n            uniform vec2 basisViewport;\n            uniform vec2 covariancesTextureSize;\n            uniform vec2 centersColorsTextureSize;\n            uniform int sphericalHarmonicsDegree;\n            uniform vec2 sphericalHarmonicsTextureSize;\n            uniform int sphericalHarmonics8BitMode;\n            uniform int sphericalHarmonicsMultiTextureMode;\n            uniform float visibleRegionRadius;\n            uniform float visibleRegionFadeStartRadius;\n            uniform float firstRenderTime;\n            uniform float currentTime;\n            uniform int fadeInComplete;\n            uniform vec3 sceneCenter;\n            uniform float splatScale;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n\n            varying vec2 vPosition;\n\n            const float sqrt8 = sqrt(8.0);\n            const float minAlpha = 1.0 / 255.0;\n\n            const vec4 encodeNorm4 = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\n            const uvec4 mask4 = uvec4(uint(0x000000FF), uint(0x0000FF00), uint(0x00FF0000), uint(0xFF000000));\n            const uvec4 shift4 = uvec4(0, 8, 16, 24);\n            vec4 uintToRGBAVec (uint u) {\n               uvec4 urgba = mask4 & u;\n               urgba = urgba >> shift4;\n               vec4 rgba = vec4(urgba) * encodeNorm4;\n               return rgba;\n            }\n\n            vec2 getDataUV(in int stride, in int offset, in vec2 dimensions) {\n                vec2 samplerUV = vec2(0.0, 0.0);\n                float d = float(splatIndex * uint(stride) + uint(offset)) / dimensions.x;\n                samplerUV.y = float(floor(d)) / dimensions.y;\n                samplerUV.x = fract(d);\n                return samplerUV;\n            }\n\n            vec2 getDataUVF(in uint sIndex, in float stride, in uint offset, in vec2 dimensions) {\n                vec2 samplerUV = vec2(0.0, 0.0);\n                float d = float(uint(float(sIndex) * stride) + offset) / dimensions.x;\n                samplerUV.y = float(floor(d)) / dimensions.y;\n                samplerUV.x = fract(d);\n                return samplerUV;\n            }\n\n            const float SH_C1 = 0.4886025119029199f;\n            const float[5] SH_C2 = float[](1.0925484, -1.0925484, 0.3153916, -1.0925484, 0.5462742);\n\n            const float SphericalHarmonics8BitCompressionRange = ${b.SphericalHarmonics8BitCompressionRange.toFixed(1)};\n            const float SphericalHarmonics8BitCompressionHalfRange = SphericalHarmonics8BitCompressionRange / 2.0;\n            const vec3 vec8BitSHShift = vec3(SphericalHarmonics8BitCompressionHalfRange);\n\n            void main () {\n\n                uint oddOffset = splatIndex & uint(0x00000001);\n                uint doubleOddOffset = oddOffset * uint(2);\n                bool isEven = oddOffset == uint(0);\n                uint nearestEvenIndex = splatIndex - oddOffset;\n                float fOddOffset = float(oddOffset);\n\n                uvec4 sampledCenterColor = texture(centersColorsTexture, getDataUV(1, 0, centersColorsTextureSize));\n                vec3 splatCenter = uintBitsToFloat(uvec3(sampledCenterColor.gba));`,(t||s)&&(l+="\n                    uint sceneIndex = texture(sceneIndexesTexture, getDataUV(1, 0, sceneIndexesTextureSize)).r;\n                "),s&&(l+="\n                    float splatOpacityFromScene = sceneOpacity[sceneIndex];\n                    int sceneVisible = sceneVisibility[sceneIndex];\n                    if (splatOpacityFromScene <= 0.01 || sceneVisible == 0) {\n                        gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n                        return;\n                    }\n                "),l+=t?"\n                    mat4 transform = transforms[sceneIndex];\n                    mat4 transformModelViewMatrix = modelViewMatrix * transform;\n                ":"mat4 transformModelViewMatrix = modelViewMatrix;",l+="\n                vec4 viewCenter = transformModelViewMatrix * vec4(splatCenter, 1.0);\n\n                vec4 clipCenter = projectionMatrix * viewCenter;\n\n                float clip = 1.2 * clipCenter.w;\n                if (clipCenter.z < -clip || clipCenter.x < -clip || clipCenter.x > clip || clipCenter.y < -clip || clipCenter.y > clip) {\n                    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n                    return;\n                }\n\n                vPosition = position.xy;\n                vColor = uintToRGBAVec(sampledCenterColor.r);\n            ",a>=1&&(l+="   \n                if (sphericalHarmonicsDegree >= 1) {\n                ",l+=t?"\n                        mat4 mTransform = modelMatrix * transform;\n                        vec3 worldViewDir = normalize(splatCenter - vec3(inverse(mTransform) * vec4(cameraPosition, 1.0)));\n                    ":"\n                        vec3 worldViewDir = normalize(splatCenter - cameraPosition);\n                    ",l+="\n                    vec3 sh1;\n                    vec3 sh2;\n                    vec3 sh3;\n                ",l+=a>=2?"\n                        vec4 sampledSH0123;\n                        vec4 sampledSH4567;\n                        vec4 sampledSH891011;\n\n                        vec4 sampledSH0123R;\n                        vec4 sampledSH0123G;\n                        vec4 sampledSH0123B;\n                        \n                        if (sphericalHarmonicsMultiTextureMode == 0) {\n                            sampledSH0123 = texture(sphericalHarmonicsTexture, getDataUV(6, 0, sphericalHarmonicsTextureSize));\n                            sampledSH4567 = texture(sphericalHarmonicsTexture, getDataUV(6, 1, sphericalHarmonicsTextureSize));\n                            sampledSH891011 = texture(sphericalHarmonicsTexture, getDataUV(6, 2, sphericalHarmonicsTextureSize));\n                            sh1 = sampledSH0123.rgb;\n                            sh2 = vec3(sampledSH0123.a, sampledSH4567.rg);\n                            sh3 = vec3(sampledSH4567.ba, sampledSH891011.r);\n                        } else {\n                            sampledSH0123R = texture(sphericalHarmonicsTextureR, getDataUV(2, 0, sphericalHarmonicsTextureSize));\n                            sampledSH0123G = texture(sphericalHarmonicsTextureG, getDataUV(2, 0, sphericalHarmonicsTextureSize));\n                            sampledSH0123B = texture(sphericalHarmonicsTextureB, getDataUV(2, 0, sphericalHarmonicsTextureSize));\n                            sh1 = vec3(sampledSH0123R.rgb);\n                            sh2 = vec3(sampledSH0123G.rgb);\n                            sh3 = vec3(sampledSH0123B.rgb);\n                        }\n                    ":"\n                        if (sphericalHarmonicsMultiTextureMode == 0) {\n                            vec2 shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset, sphericalHarmonicsTextureSize);\n                            vec4 sampledSH0123 = texture(sphericalHarmonicsTexture, shUV);\n                            shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset + uint(1), sphericalHarmonicsTextureSize);\n                            vec4 sampledSH4567 = texture(sphericalHarmonicsTexture, shUV);\n                            shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset + uint(2), sphericalHarmonicsTextureSize);\n                            vec4 sampledSH891011 = texture(sphericalHarmonicsTexture, shUV);\n                            sh1 = vec3(sampledSH0123.rgb) * (1.0 - fOddOffset) + vec3(sampledSH0123.ba, sampledSH4567.r) * fOddOffset;\n                            sh2 = vec3(sampledSH0123.a, sampledSH4567.rg) * (1.0 - fOddOffset) + vec3(sampledSH4567.gba) * fOddOffset;\n                            sh3 = vec3(sampledSH4567.ba, sampledSH891011.r) * (1.0 - fOddOffset) + vec3(sampledSH891011.rgb) * fOddOffset;\n                        } else {\n                            vec2 sampledSH01R = texture(sphericalHarmonicsTextureR, getDataUV(2, 0, sphericalHarmonicsTextureSize)).rg;\n                            vec2 sampledSH23R = texture(sphericalHarmonicsTextureR, getDataUV(2, 1, sphericalHarmonicsTextureSize)).rg;\n                            vec2 sampledSH01G = texture(sphericalHarmonicsTextureG, getDataUV(2, 0, sphericalHarmonicsTextureSize)).rg;\n                            vec2 sampledSH23G = texture(sphericalHarmonicsTextureG, getDataUV(2, 1, sphericalHarmonicsTextureSize)).rg;\n                            vec2 sampledSH01B = texture(sphericalHarmonicsTextureB, getDataUV(2, 0, sphericalHarmonicsTextureSize)).rg;\n                            vec2 sampledSH23B = texture(sphericalHarmonicsTextureB, getDataUV(2, 1, sphericalHarmonicsTextureSize)).rg;\n                            sh1 = vec3(sampledSH01R.rg, sampledSH23R.r);\n                            sh2 = vec3(sampledSH01G.rg, sampledSH23G.r);\n                            sh3 = vec3(sampledSH01B.rg, sampledSH23B.r);\n                        }\n                    ",l+="\n                        if (sphericalHarmonics8BitMode == 1) {\n                            sh1 = sh1 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                            sh2 = sh2 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                            sh3 = sh3 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                        }\n                        float x = worldViewDir.x;\n                        float y = worldViewDir.y;\n                        float z = worldViewDir.z;\n                        vColor.rgb += SH_C1 * (-sh1 * y + sh2 * z - sh3 * x);\n                ",a>=2&&(l+="\n                        if (sphericalHarmonicsDegree >= 2) {\n                            float xx = x * x;\n                            float yy = y * y;\n                            float zz = z * z;\n                            float xy = x * y;\n                            float yz = y * z;\n                            float xz = x * z;\n\n                            vec3 sh4;\n                            vec3 sh5;\n                            vec3 sh6;\n                            vec3 sh7;\n                            vec3 sh8;\n\n                            if (sphericalHarmonicsMultiTextureMode == 0) {\n                                vec4 sampledSH12131415 = texture(sphericalHarmonicsTexture, getDataUV(6, 3, sphericalHarmonicsTextureSize));\n                                vec4 sampledSH16171819 = texture(sphericalHarmonicsTexture, getDataUV(6, 4, sphericalHarmonicsTextureSize));\n                                vec4 sampledSH20212223 = texture(sphericalHarmonicsTexture, getDataUV(6, 5, sphericalHarmonicsTextureSize));\n                                sh4 = sampledSH891011.gba;\n                                sh5 = sampledSH12131415.rgb;\n                                sh6 = vec3(sampledSH12131415.a, sampledSH16171819.rg);\n                                sh7 = vec3(sampledSH16171819.ba, sampledSH20212223.r);\n                                sh8 = sampledSH20212223.gba;\n                            } else {\n                                vec4 sampledSH4567R = texture(sphericalHarmonicsTextureR, getDataUV(2, 1, sphericalHarmonicsTextureSize));\n                                vec4 sampledSH4567G = texture(sphericalHarmonicsTextureG, getDataUV(2, 1, sphericalHarmonicsTextureSize));\n                                vec4 sampledSH4567B = texture(sphericalHarmonicsTextureB, getDataUV(2, 1, sphericalHarmonicsTextureSize));\n                                sh4 = vec3(sampledSH0123R.a, sampledSH4567R.rg);\n                                sh5 = vec3(sampledSH4567R.ba, sampledSH0123G.a);\n                                sh6 = vec3(sampledSH4567G.rgb);\n                                sh7 = vec3(sampledSH4567G.a, sampledSH0123B.a, sampledSH4567B.r);\n                                sh8 = vec3(sampledSH4567B.gba);\n                            }\n\n                            if (sphericalHarmonics8BitMode == 1) {\n                                sh4 = sh4 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                                sh5 = sh5 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                                sh6 = sh6 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                                sh7 = sh7 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                                sh8 = sh8 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                            }\n\n                            vColor.rgb +=\n                                (SH_C2[0] * xy) * sh4 +\n                                (SH_C2[1] * yz) * sh5 +\n                                (SH_C2[2] * (2.0 * zz - xx - yy)) * sh6 +\n                                (SH_C2[3] * xz) * sh7 +\n                                (SH_C2[4] * (xx - yy)) * sh8;\n                        }\n                    "),l+="\n               \n                    vColor.rgb = clamp(vColor.rgb, vec3(0.), vec3(1.));\n\n                }\n\n                "),l+="\n\n                vec4 sampledCovarianceA = texture(covariancesTexture,\n                                                  getDataUVF(nearestEvenIndex, 1.5, oddOffset, covariancesTextureSize));\n                vec4 sampledCovarianceB = texture(covariancesTexture,\n                                                  getDataUVF(nearestEvenIndex, 1.5, oddOffset + uint(1), covariancesTextureSize));\n\n                vec3 cov3D_M11_M12_M13 = vec3(sampledCovarianceA.rgb) * (1.0 - fOddOffset) +\n                                         vec3(sampledCovarianceA.ba, sampledCovarianceB.r) * fOddOffset;\n                vec3 cov3D_M22_M23_M33 = vec3(sampledCovarianceA.a, sampledCovarianceB.rg) * (1.0 - fOddOffset) +\n                                         vec3(sampledCovarianceB.gba) * fOddOffset;\n\n                // Construct the 3D covariance matrix\n                mat3 Vrk = mat3(\n                    cov3D_M11_M12_M13.x, cov3D_M11_M12_M13.y, cov3D_M11_M12_M13.z,\n                    cov3D_M11_M12_M13.y, cov3D_M22_M23_M33.x, cov3D_M22_M23_M33.y,\n                    cov3D_M11_M12_M13.z, cov3D_M22_M23_M33.y, cov3D_M22_M23_M33.z\n                );\n\n                mat3 J;\n                if (orthographicMode == 1) {\n                    // Since the projection is linear, we don't need an approximation\n                    J = transpose(mat3(orthoZoom, 0.0, 0.0,\n                                       0.0, orthoZoom, 0.0,\n                                       0.0, 0.0, 0.0));\n                } else {\n                    // Construct the Jacobian of the affine approximation of the projection matrix. It will be used to transform the\n                    // 3D covariance matrix instead of using the actual projection matrix because that transformation would\n                    // require a non-linear component (perspective division) which would yield a non-gaussian result.\n                    float s = 1.0 / (viewCenter.z * viewCenter.z);\n                    J = mat3(\n                        focal.x / viewCenter.z, 0., -(focal.x * viewCenter.x) * s,\n                        0., focal.y / viewCenter.z, -(focal.y * viewCenter.y) * s,\n                        0., 0., 0.\n                    );\n                }\n\n                // Concatenate the projection approximation with the model-view transformation\n                mat3 W = transpose(mat3(transformModelViewMatrix));\n                mat3 T = W * J;\n\n                // Transform the 3D covariance matrix (Vrk) to compute the 2D covariance matrix\n                mat3 cov2Dm = transpose(T) * Vrk * T;\n                ",l+=n?"\n                    float detOrig = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\n                    cov2Dm[0][0] += 0.3;\n                    cov2Dm[1][1] += 0.3;\n                    float detBlur = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\n                    vColor.a *= sqrt(max(detOrig / detBlur, 0.0));\n                    if (vColor.a < minAlpha) return;\n                ":"\n                    cov2Dm[0][0] += 0.3;\n                    cov2Dm[1][1] += 0.3;\n                ",l+=`\n\n                // We are interested in the upper-left 2x2 portion of the projected 3D covariance matrix because\n                // we only care about the X and Y values. We want the X-diagonal, cov2Dm[0][0],\n                // the Y-diagonal, cov2Dm[1][1], and the correlation between the two cov2Dm[0][1]. We don't\n                // need cov2Dm[1][0] because it is a symetric matrix.\n                vec3 cov2Dv = vec3(cov2Dm[0][0], cov2Dm[0][1], cov2Dm[1][1]);\n\n                vec3 ndcCenter = clipCenter.xyz / clipCenter.w;\n\n                // We now need to solve for the eigen-values and eigen vectors of the 2D covariance matrix\n                // so that we can determine the 2D basis for the splat. This is done using the method described\n                // here: https://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\n                // After calculating the eigen-values and eigen-vectors, we calculate the basis for rendering the splat\n                // by normalizing the eigen-vectors and then multiplying them by (sqrt(8) * sqrt(eigen-value)), which is\n                // equal to scaling them by sqrt(8) standard deviations.\n                //\n                // This is a different approach than in the original work at INRIA. In that work they compute the\n                // max extents of the projected splat in screen space to form a screen-space aligned bounding rectangle\n                // which forms the geometry that is actually rasterized. The dimensions of that bounding box are 3.0\n                // times the square root of the maximum eigen-value, or 3 standard deviations. They then use the inverse\n                // 2D covariance matrix (called 'conic') in the CUDA rendering thread to determine fragment opacity by\n                // calculating the full gaussian: exp(-0.5 * (X - mean) * conic * (X - mean)) * splat opacity\n                float a = cov2Dv.x;\n                float d = cov2Dv.z;\n                float b = cov2Dv.y;\n                float D = a * d - b * b;\n                float trace = a + d;\n                float traceOver2 = 0.5 * trace;\n                float term2 = sqrt(max(0.1f, traceOver2 * traceOver2 - D));\n                float eigenValue1 = traceOver2 + term2;\n                float eigenValue2 = traceOver2 - term2;\n\n                if (pointCloudModeEnabled == 1) {\n                    eigenValue1 = eigenValue2 = 0.2;\n                }\n\n                if (eigenValue2 <= 0.0) return;\n\n                vec2 eigenVector1 = normalize(vec2(b, eigenValue1 - a));\n                // since the eigen vectors are orthogonal, we derive the second one from the first\n                vec2 eigenVector2 = vec2(eigenVector1.y, -eigenVector1.x);\n\n                // We use sqrt(8) standard deviations instead of 3 to eliminate more of the splat with a very low opacity.\n                vec2 basisVector1 = eigenVector1 * splatScale * min(sqrt8 * sqrt(eigenValue1), ${parseInt(r)}.0);\n                vec2 basisVector2 = eigenVector2 * splatScale * min(sqrt8 * sqrt(eigenValue2), ${parseInt(r)}.0);\n\n                if (fadeInComplete == 0) {\n                    float opacityAdjust = 1.0;\n                    float centerDist = length(splatCenter - sceneCenter);\n                    float renderTime = max(currentTime - firstRenderTime, 0.0);\n\n                    float fadeDistance = 0.75;\n                    float distanceLoadFadeInFactor = step(visibleRegionFadeStartRadius, centerDist);\n                    distanceLoadFadeInFactor = (1.0 - distanceLoadFadeInFactor) +\n                                               (1.0 - clamp((centerDist - visibleRegionFadeStartRadius) / fadeDistance, 0.0, 1.0)) *\n                                               distanceLoadFadeInFactor;\n                    opacityAdjust *= distanceLoadFadeInFactor;\n                    vColor.a *= opacityAdjust;\n                }\n                `,s&&(l+="\n                     vColor.a *= splatOpacityFromScene;\n                "),l+="\n                vec2 ndcOffset = vec2(vPosition.x * basisVector1 + vPosition.y * basisVector2) *\n                                 basisViewport * 2.0 * inverseFocalAdjustment;\n\n                vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\n                gl_Position = quadPos;\n\n                // Scale the position data we send to the fragment shader\n                vPosition *= sqrt8;\n            }";const c={sceneCenter:{type:"v3",value:new e.Vector3},fadeInComplete:{type:"i",value:0},orthographicMode:{type:"i",value:0},visibleRegionFadeStartRadius:{type:"f",value:0},visibleRegionRadius:{type:"f",value:0},currentTime:{type:"f",value:0},firstRenderTime:{type:"f",value:0},covariancesTexture:{type:"t",value:null},centersColorsTexture:{type:"t",value:null},sphericalHarmonicsTexture:{type:"t",value:null},sphericalHarmonicsTextureR:{type:"t",value:null},sphericalHarmonicsTextureG:{type:"t",value:null},sphericalHarmonicsTextureB:{type:"t",value:null},focal:{type:"v2",value:new e.Vector2},orthoZoom:{type:"f",value:1},inverseFocalAdjustment:{type:"f",value:1},viewport:{type:"v2",value:new e.Vector2},basisViewport:{type:"v2",value:new e.Vector2},debugColor:{type:"v3",value:new e.Color},covariancesTextureSize:{type:"v2",value:new e.Vector2(1024,1024)},centersColorsTextureSize:{type:"v2",value:new e.Vector2(1024,1024)},sphericalHarmonicsDegree:{type:"i",value:a},sphericalHarmonicsTextureSize:{type:"v2",value:new e.Vector2(1024,1024)},sphericalHarmonics8BitMode:{type:"i",value:0},sphericalHarmonicsMultiTextureMode:{type:"i",value:0},splatScale:{type:"f",value:i},pointCloudModeEnabled:{type:"i",value:o?1:0}};if((t||s)&&(c.sceneIndexesTexture={type:"t",value:null},c.sceneIndexesTextureSize={type:"v2",value:new e.Vector2(1024,1024)}),s){const e=[];for(let t=0;t<b.MaxScenes;t++)e.push(1);c.sceneOpacity={type:"f",value:e};const t=[];for(let e=0;e<b.MaxScenes;e++)t.push(1);c.sceneVisibility={type:"i",value:t}}if(t){const t=[];for(let s=0;s<b.MaxScenes;s++)t.push(new e.Matrix4);c.transforms={type:"mat4",value:t}}return new e.ShaderMaterial({uniforms:c,vertexShader:l,fragmentShader:"\n            precision highp float;\n            #include <common>\n \n            uniform vec3 debugColor;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n\n            varying vec2 vPosition;\n\n            void main () {\n                // Compute the positional squared distance from the center of the splat to the current fragment.\n                float A = dot(vPosition, vPosition);\n                // Since the positional data in vPosition has been scaled by sqrt(8), the squared result will be\n                // scaled by a factor of 8. If the squared result is larger than 8, it means it is outside the ellipse\n                // defined by the rectangle formed by vPosition. It also means it's farther\n                // away than sqrt(8) standard deviations from the mean.\n                if (A > 8.0) discard;\n                vec3 color = vColor.rgb;\n\n                // Since the rendered splat is scaled by sqrt(8), the inverse covariance matrix that is part of\n                // the gaussian formula becomes the identity matrix. We're then left with (X - mean) * (X - mean),\n                // and since 'mean' is zero, we have X * X, which is the same as A:\n                float opacity = exp(-0.5 * A) * vColor.a;\n\n                gl_FragColor = vec4(color.rgb, opacity);\n            }",transparent:!0,alphaTest:1,blending:e.NormalBlending,depthTest:!0,depthWrite:!1,side:e.DoubleSide})}}class kt{static build(t){const s=new e.BufferGeometry;s.setIndex([0,1,2,0,2,3]);const n=new Float32Array(12),r=new e.BufferAttribute(n,3);s.setAttribute("position",r),r.setXYZ(0,-1,-1,0),r.setXYZ(1,-1,1,0),r.setXYZ(2,1,1,0),r.setXYZ(3,1,-1,0),r.needsUpdate=!0;const i=(new e.InstancedBufferGeometry).copy(s),o=new Uint32Array(t),a=new e.InstancedBufferAttribute(o,1,!1);return a.setUsage(e.DynamicDrawUsage),i.setAttribute("splatIndex",a),i.instanceCount=0,i}}class Ht{constructor(t,s=new e.Vector3,n=new e.Quaternion,r=new e.Vector3(1,1,1),i=1,o=1,a=!0){this.splatBuffer=t,this.position=s.clone(),this.quaternion=n.clone(),this.scale=r.clone(),this.transform=new e.Matrix4,this.minimumAlpha=i,this.opacity=o,this.visible=a,this.updateTransform()}copyTransformData(e){this.position.copy(e.position),this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.transform.copy(e.transform)}updateTransform(){this.transform.compose(this.position,this.quaternion,this.scale)}}class Lt{static idGen=0;constructor(t,s,n,r){this.min=(new e.Vector3).copy(t),this.max=(new e.Vector3).copy(s),this.boundingBox=new e.Box3(this.min,this.max),this.center=(new e.Vector3).copy(this.max).sub(this.min).multiplyScalar(.5).add(this.min),this.depth=n,this.children=[],this.data=null,this.id=r||Lt.idGen++}}class _t{constructor(t,s){this.maxDepth=t,this.maxCentersPerNode=s,this.sceneDimensions=new e.Vector3,this.sceneMin=new e.Vector3,this.sceneMax=new e.Vector3,this.rootNode=null,this.nodesWithIndexes=[],this.splatMesh=null}static convertWorkerSubTreeNode(t){const s=(new e.Vector3).fromArray(t.min),n=(new e.Vector3).fromArray(t.max),r=new Lt(s,n,t.depth,t.id);if(t.data.indexes){r.data={indexes:[]};for(let e of t.data.indexes)r.data.indexes.push(e)}if(t.children)for(let e of t.children)r.children.push(_t.convertWorkerSubTreeNode(e));return r}static convertWorkerSubTree(t,s){const n=new _t(t.maxDepth,t.maxCentersPerNode);n.sceneMin=(new e.Vector3).fromArray(t.sceneMin),n.sceneMax=(new e.Vector3).fromArray(t.sceneMax),n.splatMesh=s,n.rootNode=_t.convertWorkerSubTreeNode(t.rootNode);const r=(e,t)=>{0===e.children.length&&t(e);for(let s of e.children)r(s,t)};return n.nodesWithIndexes=[],r(n.rootNode,(e=>{e.data&&e.data.indexes&&e.data.indexes.length>0&&n.nodesWithIndexes.push(e)})),n}}function Ot(e){let t=0;class s{constructor(e,t){this.min=[e[0],e[1],e[2]],this.max=[t[0],t[1],t[2]]}containsPoint(e){return e[0]>=this.min[0]&&e[0]<=this.max[0]&&e[1]>=this.min[1]&&e[1]<=this.max[1]&&e[2]>=this.min[2]&&e[2]<=this.max[2]}}class n{constructor(e,t){this.maxDepth=e,this.maxCentersPerNode=t,this.sceneDimensions=[],this.sceneMin=[],this.sceneMax=[],this.rootNode=null,this.addedIndexes={},this.nodesWithIndexes=[],this.splatMesh=null,this.disposed=!1}}class r{constructor(e,s,n,r){this.min=[e[0],e[1],e[2]],this.max=[s[0],s[1],s[2]],this.center=[.5*(s[0]-e[0])+e[0],.5*(s[1]-e[1])+e[1],.5*(s[2]-e[2])+e[2]],this.depth=n,this.children=[],this.data=null,this.id=r||t++}}processSplatTreeNode=function(e,t,n,i){const o=t.data.indexes.length;if(o<e.maxCentersPerNode||t.depth>e.maxDepth){const s=[];for(let n=0;n<t.data.indexes.length;n++)e.addedIndexes[t.data.indexes[n]]||(s.push(t.data.indexes[n]),e.addedIndexes[t.data.indexes[n]]=!0);return t.data.indexes=s,t.data.indexes.sort(((e,t)=>e>t?1:-1)),void e.nodesWithIndexes.push(t)}const a=[t.max[0]-t.min[0],t.max[1]-t.min[1],t.max[2]-t.min[2]],l=[.5*a[0],.5*a[1],.5*a[2]],c=[t.min[0]+l[0],t.min[1]+l[1],t.min[2]+l[2]],h=[new s([c[0]-l[0],c[1],c[2]-l[2]],[c[0],c[1]+l[1],c[2]]),new s([c[0],c[1],c[2]-l[2]],[c[0]+l[0],c[1]+l[1],c[2]]),new s([c[0],c[1],c[2]],[c[0]+l[0],c[1]+l[1],c[2]+l[2]]),new s([c[0]-l[0],c[1],c[2]],[c[0],c[1]+l[1],c[2]+l[2]]),new s([c[0]-l[0],c[1]-l[1],c[2]-l[2]],[c[0],c[1],c[2]]),new s([c[0],c[1]-l[1],c[2]-l[2]],[c[0]+l[0],c[1],c[2]]),new s([c[0],c[1]-l[1],c[2]],[c[0]+l[0],c[1],c[2]+l[2]]),new s([c[0]-l[0],c[1]-l[1],c[2]],[c[0],c[1],c[2]+l[2]])],d=[],p=[];for(let e=0;e<h.length;e++)d[e]=0,p[e]=[];const u=[0,0,0];for(let e=0;e<o;e++){const s=t.data.indexes[e],r=n[s];u[0]=i[r],u[1]=i[r+1],u[2]=i[r+2];for(let e=0;e<h.length;e++)h[e].containsPoint(u)&&(d[e]++,p[e].push(s))}for(let e=0;e<h.length;e++){const s=new r(h[e].min,h[e].max,t.depth+1);s.data={indexes:p[e]},t.children.push(s)}t.data={};for(let s of t.children)processSplatTreeNode(e,s,n,i)};const i=(e,t,s)=>{const i=[0,0,0],o=[0,0,0],a=[],l=Math.floor(e.length/4);for(let t=0;t<l;t++){const s=4*t,n=e[s],r=e[s+1],l=e[s+2],c=Math.round(e[s+3]);(0===t||n<i[0])&&(i[0]=n),(0===t||n>o[0])&&(o[0]=n),(0===t||r<i[1])&&(i[1]=r),(0===t||r>o[1])&&(o[1]=r),(0===t||l<i[2])&&(i[2]=l),(0===t||l>o[2])&&(o[2]=l),a.push(c)}const c=new n(t,s);return c.sceneMin=i,c.sceneMax=o,c.rootNode=new r(c.sceneMin,c.sceneMax,0),c.rootNode.data={indexes:a},c};e.onmessage=t=>{t.data.process&&function(t,s,n){const r=[];for(let e of t){const t=Math.floor(e.length/4);for(let s=0;s<t;s++){const t=4*s;r[Math.round(e[t+3])]=t}}const o=[];for(let e of t){const t=i(e,s,n);o.push(t),processSplatTreeNode(t,t.rootNode,r,e)}e.postMessage({subTrees:o})}(t.data.process.centers,t.data.process.maxDepth,t.data.process.maxCentersPerNode)}}class Ut{constructor(e,t){this.maxDepth=e,this.maxCentersPerNode=t,this.subTrees=[],this.splatMesh=null}dispose(){this.diposeSplatTreeWorker(),this.disposed=!0}diposeSplatTreeWorker(){this.splatTreeWorker&&this.splatTreeWorker.terminate(),this.splatTreeWorker=null}processSplatMesh=function(t,s=(()=>!0),n,r){this.splatTreeWorker||(this.splatTreeWorker=new Worker(URL.createObjectURL(new Blob(["(",Ot.toString(),")(self)"],{type:"application/javascript"})))),this.splatMesh=t,this.subTrees=[];const i=new e.Vector3,o=(e,n)=>{const r=new Float32Array(4*n);let o=0;for(let a=0;a<n;a++){const n=a+e;if(s(n)){t.getSplatCenter(n,i);const e=4*o;r[e]=i.x,r[e+1]=i.y,r[e+2]=i.z,r[e+3]=n,o++}}return r};return new Promise((e=>{const s=()=>!!this.disposed&&(this.diposeSplatTreeWorker(),e(),!0);n&&n(!1),C((()=>{if(s())return;const i=[];if(t.dynamicMode){let e=0;for(let s=0;s<t.scenes.length;s++){const n=t.getScene(s).splatBuffer.getSplatCount(),r=o(e,n);i.push(r),e+=n}}else{const e=o(0,t.getSplatCount());i.push(e)}this.splatTreeWorker.onmessage=n=>{s()||n.data.subTrees&&(r&&r(!1),C((()=>{if(!s()){for(let e of n.data.subTrees){const s=_t.convertWorkerSubTree(e,t);this.subTrees.push(s)}this.diposeSplatTreeWorker(),r&&r(!0),C((()=>{e()}))}})))},C((()=>{if(s())return;n&&n(!0);const e=i.map((e=>e.buffer));!function(e,t,s,n,r){e.postMessage({process:{centers:t,maxDepth:n,maxCentersPerNode:r}},s)}(this.splatTreeWorker,i,e,this.maxDepth,this.maxCentersPerNode)}))}))}))};countLeaves(){let e=0;return this.visitLeaves((()=>{e++})),e}visitLeaves(e){const t=(e,s)=>{0===e.children.length&&s(e);for(let n of e.children)t(n,s)};for(let s of this.subTrees)t(s.rootNode,e)}}function Qt(e){const t={};function s(s){if(void 0!==t[s])return t[s];let n;switch(s){case"WEBGL_depth_texture":n=e.getExtension("WEBGL_depth_texture")||e.getExtension("MOZ_WEBGL_depth_texture")||e.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":n=e.getExtension("EXT_texture_filter_anisotropic")||e.getExtension("MOZ_EXT_texture_filter_anisotropic")||e.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":n=e.getExtension("WEBGL_compressed_texture_s3tc")||e.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":n=e.getExtension("WEBGL_compressed_texture_pvrtc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:n=e.getExtension(s)}return t[s]=n,n}return{has:function(e){return null!==s(e)},init:function(e){e.isWebGL2?(s("EXT_color_buffer_float"),s("WEBGL_clip_cull_distance")):(s("WEBGL_depth_texture"),s("OES_texture_float"),s("OES_texture_half_float"),s("OES_texture_half_float_linear"),s("OES_standard_derivatives"),s("OES_element_index_uint"),s("OES_vertex_array_object"),s("ANGLE_instanced_arrays")),s("OES_texture_float_linear"),s("EXT_color_buffer_half_float"),s("WEBGL_multisampled_render_to_texture")},get:function(e){const t=s(e);return null===t&&console.warn("THREE.WebGLRenderer: "+e+" extension not supported."),t}}}function zt(e,t,s){let n;function r(t){if("highp"===t){if(e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.HIGH_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.HIGH_FLOAT).precision>0)return"highp";t="mediump"}return"mediump"===t&&e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.MEDIUM_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}const i="undefined"!=typeof WebGL2RenderingContext&&"WebGL2RenderingContext"===e.constructor.name;let o=void 0!==s.precision?s.precision:"highp";const a=r(o);a!==o&&(console.warn("THREE.WebGLRenderer:",o,"not supported, using",a,"instead."),o=a);const l=i||t.has("WEBGL_draw_buffers"),c=!0===s.logarithmicDepthBuffer,h=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS),d=e.getParameter(e.MAX_VERTEX_TEXTURE_IMAGE_UNITS),p=e.getParameter(e.MAX_TEXTURE_SIZE),u=e.getParameter(e.MAX_CUBE_MAP_TEXTURE_SIZE),A=e.getParameter(e.MAX_VERTEX_ATTRIBS),m=e.getParameter(e.MAX_VERTEX_UNIFORM_VECTORS),g=e.getParameter(e.MAX_VARYING_VECTORS),f=e.getParameter(e.MAX_FRAGMENT_UNIFORM_VECTORS),C=d>0,S=i||t.has("OES_texture_float");return{isWebGL2:i,drawBuffers:l,getMaxAnisotropy:function(){if(void 0!==n)return n;if(!0===t.has("EXT_texture_filter_anisotropic")){const s=t.get("EXT_texture_filter_anisotropic");n=e.getParameter(s.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else n=0;return n},getMaxPrecision:r,precision:o,logarithmicDepthBuffer:c,maxTextures:h,maxVertexTextures:d,maxTextureSize:p,maxCubemapSize:u,maxAttributes:A,maxVertexUniforms:m,maxVaryings:g,maxFragmentUniforms:f,vertexTextures:C,floatFragmentTextures:S,floatVertexTextures:C&&S,maxSamples:i?e.getParameter(e.MAX_SAMPLES):0}}const Vt={Default:0,Gradual:1,Instant:2},Nt={None:0,Error:1,Warning:2,Info:3,Debug:4},Gt=new e.BufferGeometry,Kt=new e.MeshBasicMaterial;class jt extends e.Mesh{constructor(t=!0,s=!1,n=!1,r=1,i=!0,o=!1,a=!1,l=1024,c=Nt.None,h=0){super(Gt,Kt),this.renderer=void 0,this.halfPrecisionCovariancesOnGPU=n,this.dynamicMode=t,this.devicePixelRatio=r,this.enableDistancesComputationOnGPU=i,this.integerBasedDistancesComputation=o,this.antialiased=a,this.maxScreenSpaceSplatSize=l,this.logLevel=c,this.sphericalHarmonicsDegree=h,this.minSphericalHarmonicsDegree=0,this.enableOptionalEffects=s,this.scenes=[],this.splatTree=null,this.baseSplatTree=null,this.splatDataTextures={},this.distancesTransformFeedback={id:null,vertexShader:null,fragmentShader:null,program:null,centersBuffer:null,sceneIndexesBuffer:null,outDistancesBuffer:null,centersLoc:-1,modelViewProjLoc:-1,sceneIndexesLoc:-1,transformsLocs:[]},this.globalSplatIndexToLocalSplatIndexMap=[],this.globalSplatIndexToSceneIndexMap=[],this.lastBuildSplatCount=0,this.lastBuildScenes=[],this.lastBuildMaxSplatCount=0,this.lastBuildSceneCount=0,this.firstRenderTime=-1,this.finalBuild=!1,this.webGLUtils=null,this.boundingBox=new e.Box3,this.calculatedSceneCenter=new e.Vector3,this.maxSplatDistanceFromSceneCenter=0,this.visibleRegionBufferRadius=0,this.visibleRegionRadius=0,this.visibleRegionFadeStartRadius=0,this.visibleRegionChanging=!1,this.splatScale=1,this.pointCloudModeEnabled=!1,this.disposed=!1,this.lastRenderer=null,this.visible=!1}static buildScenes(t,s){const n=[];n.length=t.length;for(let r=0;r<t.length;r++){const i=t[r],o=s[r]||{};let a=o.position||[0,0,0],l=o.rotation||[0,0,0,1],c=o.scale||[1,1,1];const h=(new e.Vector3).fromArray(a),d=(new e.Quaternion).fromArray(l),p=(new e.Vector3).fromArray(c);n[r]=jt.createScene(i,h,d,p,o.splatAlphaRemovalThreshold||1)}return n}static createScene(e,t,s,n,r){return new Ht(e,t,s,n,r)}static buildSplatIndexMaps(e){const t=[],s=[];let n=0;for(let r=0;r<e.length;r++){const i=e[r].getMaxSplatCount();for(let e=0;e<i;e++)t[n]=e,s[n]=r,n++}return{localSplatIndexMap:t,sceneIndexMap:s}}buildSplatTree=function(t=[],s,n){return new Promise((r=>{this.disposeSplatTree(),this.baseSplatTree=new Ut(8,1e3);const i=performance.now(),o=new e.Vector4;this.baseSplatTree.processSplatMesh(this,(e=>{this.getSplatColor(e,o);const s=this.getSceneIndexForSplat(e),n=t[s]||1;return o.w>=n}),s,n).then((()=>{const e=performance.now()-i;if(this.logLevel>=Nt.Info&&console.log("SplatTree build: "+e+" ms"),this.disposed)r();else{this.splatTree=this.baseSplatTree,this.baseSplatTree=null;let e=0,t=0,s=0,n=0;this.splatTree.visitLeaves((r=>{const i=r.data.indexes.length;i>0&&(t+=i,s=Math.max(s,i),n++,e++)})),this.logLevel>=Nt.Info&&(console.log(`SplatTree leaves: ${this.splatTree.countLeaves()}`),console.log(`SplatTree leaves with splats:${e}`),t/=n,console.log(`Avg splat count per node: ${t}`),console.log(`Total splat count: ${this.getSplatCount()}`)),r()}}))}))};build(t,s,n=!0,r=!1,i,o,a=!0){this.sceneOptions=s,this.finalBuild=r;const l=jt.getTotalMaxSplatCountForSplatBuffers(t),c=jt.buildScenes(t,s);if(n)for(let e=0;e<this.scenes.length&&e<c.length;e++){const t=c[e],s=this.getScene(e);t.copyTransformData(s)}this.scenes=c;let h=3;for(let e of t){const t=e.getMinSphericalHarmonicsDegree();t<h&&(h=t)}this.minSphericalHarmonicsDegree=Math.min(h,this.sphericalHarmonicsDegree);let d=!1;if(t.length!==this.lastBuildScenes.length)d=!0;else for(let e=0;e<t.length;e++){if(t[e]!==this.lastBuildScenes[e].splatBuffer){d=!0;break}}let p=!0;if((1!==this.scenes.length||this.lastBuildSceneCount!==this.scenes.length||this.lastBuildMaxSplatCount!==l||d)&&(p=!1),!p){this.boundingBox=new e.Box3,a||(this.maxSplatDistanceFromSceneCenter=0,this.visibleRegionBufferRadius=0,this.visibleRegionRadius=0,this.visibleRegionFadeStartRadius=0,this.firstRenderTime=-1),this.lastBuildScenes=[],this.lastBuildSplatCount=0,this.lastBuildMaxSplatCount=0,this.disposeMeshData(),this.geometry=kt.build(l),this.material=Pt.build(this.dynamicMode,this.enableOptionalEffects,this.antialiased,this.maxScreenSpaceSplatSize,this.splatScale,this.pointCloudModeEnabled,this.minSphericalHarmonicsDegree);const s=jt.buildSplatIndexMaps(t);this.globalSplatIndexToLocalSplatIndexMap=s.localSplatIndexMap,this.globalSplatIndexToSceneIndexMap=s.sceneIndexMap}const u=this.getSplatCount();this.enableDistancesComputationOnGPU&&this.setupDistancesComputationTransformFeedback();const A=this.refreshGPUDataFromSplatBuffers(p);for(let e=0;e<this.scenes.length;e++)this.lastBuildScenes[e]=this.scenes[e];return this.lastBuildSplatCount=u,this.lastBuildMaxSplatCount=this.getMaxSplatCount(),this.lastBuildSceneCount=this.scenes.length,r&&this.scenes.length>0&&this.buildSplatTree(s.map((e=>e.splatAlphaRemovalThreshold||1)),i,o).then((()=>{this.onSplatTreeReadyCallback&&this.onSplatTreeReadyCallback(this.splatTree)})),this.visible=this.scenes.length>0,A}freeIntermediateSplatData(){const e=e=>{delete e.source.data,delete e.image,e.onUpdate=null};delete this.splatDataTextures.baseData.covariances,delete this.splatDataTextures.baseData.centers,delete this.splatDataTextures.baseData.colors,delete this.splatDataTextures.baseData.sphericalHarmonics,delete this.splatDataTextures.centerColors.data,delete this.splatDataTextures.covariances.data,this.splatDataTextures.sphericalHarmonics&&delete this.splatDataTextures.sphericalHarmonics.data,this.splatDataTextures.sceneIndexes&&delete this.splatDataTextures.sceneIndexes.data,this.splatDataTextures.centerColors.texture.needsUpdate=!0,this.splatDataTextures.centerColors.texture.onUpdate=()=>{e(this.splatDataTextures.centerColors.texture)},this.splatDataTextures.covariances.texture.needsUpdate=!0,this.splatDataTextures.covariances.texture.onUpdate=()=>{e(this.splatDataTextures.covariances.texture)},this.splatDataTextures.sphericalHarmonics&&(this.splatDataTextures.sphericalHarmonics.texture?(this.splatDataTextures.sphericalHarmonics.texture.needsUpdate=!0,this.splatDataTextures.sphericalHarmonics.texture.onUpdate=()=>{e(this.splatDataTextures.sphericalHarmonics.texture)}):this.splatDataTextures.sphericalHarmonics.textures.forEach((t=>{t.needsUpdate=!0,t.onUpdate=()=>{e(t)}}))),this.splatDataTextures.sceneIndexes&&(this.splatDataTextures.sceneIndexes.texture.needsUpdate=!0,this.splatDataTextures.sceneIndexes.texture.onUpdate=()=>{e(this.splatDataTextures.sceneIndexes.texture)})}dispose(){this.disposeMeshData(),this.disposeTextures(),this.disposeSplatTree(),this.enableDistancesComputationOnGPU&&(this.computeDistancesOnGPUSyncTimeout&&(clearTimeout(this.computeDistancesOnGPUSyncTimeout),this.computeDistancesOnGPUSyncTimeout=null),this.disposeDistancesComputationGPUResources()),this.scenes=[],this.distancesTransformFeedback={id:null,vertexShader:null,fragmentShader:null,program:null,centersBuffer:null,sceneIndexesBuffer:null,outDistancesBuffer:null,centersLoc:-1,modelViewProjLoc:-1,sceneIndexesLoc:-1,transformsLocs:[]},this.renderer=null,this.globalSplatIndexToLocalSplatIndexMap=[],this.globalSplatIndexToSceneIndexMap=[],this.lastBuildSplatCount=0,this.lastBuildScenes=[],this.lastBuildMaxSplatCount=0,this.lastBuildSceneCount=0,this.firstRenderTime=-1,this.finalBuild=!1,this.webGLUtils=null,this.boundingBox=new e.Box3,this.calculatedSceneCenter=new e.Vector3,this.maxSplatDistanceFromSceneCenter=0,this.visibleRegionBufferRadius=0,this.visibleRegionRadius=0,this.visibleRegionFadeStartRadius=0,this.visibleRegionChanging=!1,this.splatScale=1,this.pointCloudModeEnabled=!1,this.disposed=!0,this.lastRenderer=null,this.visible=!1}disposeMeshData(){this.geometry&&this.geometry!==Gt&&(this.geometry.dispose(),this.geometry=null),this.material&&(this.material.dispose(),this.material=null)}disposeTextures(){for(let e in this.splatDataTextures)if(this.splatDataTextures.hasOwnProperty(e)){const t=this.splatDataTextures[e];t.texture&&(t.texture.dispose(),t.texture=null)}this.splatDataTextures=null}disposeSplatTree(){this.splatTree?(this.splatTree.dispose(),this.splatTree=null):this.baseSplatTree&&(this.baseSplatTree.dispose(),this.baseSplatTree=null)}getSplatTree(){return this.splatTree}onSplatTreeReady(e){this.onSplatTreeReadyCallback=e}getDataForDistancesComputation(e,t){return{centers:this.integerBasedDistancesComputation?this.getIntegerCenters(e,t,!0):this.getFloatCenters(e,t,!0),sceneIndexes:this.getSceneIndexes(e,t)}}refreshGPUDataFromSplatBuffers(e){const t=this.getSplatCount();this.refreshDataTexturesFromSplatBuffers(e);const s=e?this.lastBuildSplatCount:0,{centers:n,sceneIndexes:r}=this.getDataForDistancesComputation(s,t-1);return this.enableDistancesComputationOnGPU&&this.refreshGPUBuffersForDistancesComputation(n,r,e),{from:s,to:t-1,count:t-s,centers:n,sceneIndexes:r}}refreshGPUBuffersForDistancesComputation(e,t,s=!1){const n=s?this.lastBuildSplatCount:0;this.updateGPUCentersBufferForDistancesComputation(s,e,n),this.updateGPUTransformIndexesBufferForDistancesComputation(s,t,n)}refreshDataTexturesFromSplatBuffers(e){if(e){const e=this.getSplatCount(),t=this.lastBuildSplatCount,s=e-1;this.updateBaseDataFromSplatBuffers(t,s),this.updateDataTexturesFromBaseData(t,s)}else this.setupDataTextures();this.updateVisibleRegion(e)}setupDataTextures(){const t=this.getMaxSplatCount(),s=this.getSplatCount();this.disposeTextures();const n=(s,n)=>{const r=new e.Vector2(4096,1024);for(;r.x*r.y*s<t*n;)r.y*=2;return r},r=this.getTargetCovarianceCompressionLevel(),i=this.getTargetSphericalHarmonicsCompressionLevel(),o=new Float32Array(6*t),a=new Float32Array(3*t),l=new Uint8Array(4*t);let c=Float32Array;1===i?c=Uint16Array:2===i&&(c=Uint8Array);const h=S(this.minSphericalHarmonicsDegree),d=this.minSphericalHarmonicsDegree?new c(t*h):void 0;this.fillSplatDataArrays(o,a,l,d,void 0,r,i);const p=n(4,6);let u=r>=1?Uint16Array:Float32Array,A=r>=1?e.HalfFloatType:e.FloatType;const m=new u(p.x*p.y*4);m.set(o);const g=new e.DataTexture(m,p.x,p.y,e.RGBAFormat,A);g.needsUpdate=!0,this.material.uniforms.covariancesTexture.value=g,this.material.uniforms.covariancesTextureSize.value.copy(p);const f=n(4,4),C=new Uint32Array(f.x*f.y*4);jt.updateCenterColorsPaddedData(0,s-1,a,l,C);const y=new e.DataTexture(C,f.x,f.y,e.RGBAIntegerFormat,e.UnsignedIntType);if(y.internalFormat="RGBA32UI",y.needsUpdate=!0,this.material.uniforms.centersColorsTexture.value=y,this.material.uniforms.centersColorsTextureSize.value.copy(f),this.material.uniformsNeedUpdate=!0,this.splatDataTextures={baseData:{covariances:o,centers:a,colors:l,sphericalHarmonics:d},covariances:{data:m,texture:g,size:p,compressionLevel:r},centerColors:{data:C,texture:y,size:f}},d){const t=2===i?e.UnsignedByteType:e.HalfFloatType;let r=h;r%2!=0&&r++;const o=2===this.minSphericalHarmonicsDegree?4:2,a=4===o?e.RGBAFormat:e.RGFormat;let l=n(o,r);if(l.x*l.y<=16777216){const n=new c(l.x*l.y*o);for(let e=0;e<s;e++){const t=h*e,s=r*e;for(let e=0;e<h;e++)n[s+e]=d[t+e]}const p=new e.DataTexture(n,l.x,l.y,a,t);p.needsUpdate=!0,this.material.uniforms.sphericalHarmonicsTexture.value=p,this.splatDataTextures.sphericalHarmonics={componentCount:h,paddedComponentCount:r,data:n,textureCount:1,texture:p,size:l,compressionLevel:i,elementsPerTexel:o}}else{const p=h/3;r=p,r%2!=0&&r++,l=n(o,r);const u=l.x*l.y*o,A=[this.material.uniforms.sphericalHarmonicsTextureR,this.material.uniforms.sphericalHarmonicsTextureG,this.material.uniforms.sphericalHarmonicsTextureB],m=[],g=[];for(let n=0;n<3;n++){const i=new c(u);m.push(i);for(let e=0;e<s;e++){const t=h*e,s=r*e;if(p>=3){for(let e=0;e<3;e++)i[s+e]=d[t+3*n+e];if(p>=8)for(let e=0;e<5;e++)i[s+3+e]=d[t+9+5*n+e]}}const o=new e.DataTexture(i,l.x,l.y,a,t);g.push(o),o.needsUpdate=!0,A[n].value=o}this.material.uniforms.sphericalHarmonicsMultiTextureMode.value=1,this.splatDataTextures.sphericalHarmonics={componentCount:h,componentCountPerChannel:p,paddedComponentCount:r,data:m,textureCount:3,textures:g,size:l,compressionLevel:i,elementsPerTexel:o}}this.material.uniforms.sphericalHarmonicsTextureSize.value.copy(l),this.material.uniforms.sphericalHarmonics8BitMode.value=2===i?1:0,this.material.uniformsNeedUpdate=!0}if(this.dynamicMode||this.enableOptionalEffects){const t=n(1,4),r=new Uint32Array(t.x*t.y*1);for(let e=0;e<s;e++)r[e]=this.globalSplatIndexToSceneIndexMap[e];const i=new e.DataTexture(r,t.x,t.y,e.RedIntegerFormat,e.UnsignedIntType);i.internalFormat="R32UI",i.needsUpdate=!0,this.material.uniforms.sceneIndexesTexture.value=i,this.material.uniforms.sceneIndexesTextureSize.value.copy(t),this.material.uniformsNeedUpdate=!0,this.splatDataTextures.sceneIndexes={data:r,texture:i,size:t}}}updateBaseDataFromSplatBuffers(e,t){const s=this.splatDataTextures.covariances.compressionLevel,n=this.splatDataTextures.sphericalHarmonics,r=n?n.compressionLevel:0;this.fillSplatDataArrays(this.splatDataTextures.baseData.covariances,this.splatDataTextures.baseData.centers,this.splatDataTextures.baseData.colors,this.splatDataTextures.baseData.sphericalHarmonics,void 0,s,r,e,t,e)}updateDataTexturesFromBaseData(e,t){const s=this.splatDataTextures.covariances.compressionLevel,n=this.splatDataTextures.sphericalHarmonics,r=n?n.compressionLevel:0,i=this.splatDataTextures.covariances,o=i.data,a=i.texture,l=6*t;for(let t=6*e;t<=l;t++){const e=this.splatDataTextures.baseData.covariances[t];o[t]=e}const c=this.renderer?this.renderer.properties.get(a):null;if(c&&c.__webglTexture){const n=s?2:4;this.updateDataTexture(o,i.texture,i.size,c,4,6,n,e,t)}else a.needsUpdate=!0;const h=this.splatDataTextures.centerColors,d=h.data,p=h.texture;jt.updateCenterColorsPaddedData(e,t,this.splatDataTextures.baseData.centers,this.splatDataTextures.baseData.colors,d);const u=this.renderer?this.renderer.properties.get(p):null;u&&u.__webglTexture?this.updateDataTexture(d,h.texture,h.size,u,4,4,4,e,t):p.needsUpdate=!0;const A=this.splatDataTextures.baseData.sphericalHarmonics;if(A){let s=4;1===r?s=2:2===r&&(s=1);const i=(n,r,i,o,a)=>{const l=this.renderer?this.renderer.properties.get(n):null;l&&l.__webglTexture?this.updateDataTexture(o,n,r,l,i,a,s,e,t):n.needsUpdate=!0},o=n.componentCount,a=n.paddedComponentCount;if(1===n.textureCount){const s=n.data;for(let n=e;n<=t;n++){const e=o*n,t=a*n;for(let n=0;n<o;n++)s[t+n]=A[e+n]}i(n.texture,n.size,n.elementsPerTexel,s,a)}else{const s=n.componentCountPerChannel;for(let r=0;r<3;r++){const l=n.data[r];for(let n=e;n<=t;n++){const e=o*n,t=a*n;if(s>=3){for(let s=0;s<3;s++)l[t+s]=A[e+3*r+s];if(s>=8)for(let s=0;s<5;s++)l[t+3+s]=A[e+9+5*r+s]}}i(n.textures[r],n.size,n.elementsPerTexel,l,a)}}}if(this.dynamicMode){const e=this.splatDataTextures.sceneIndexes,s=e.data;for(let e=this.lastBuildSplatCount;e<=t;e++)s[e]=this.globalSplatIndexToSceneIndexMap[e];const n=e.texture,r=this.renderer?this.renderer.properties.get(n):null;r&&r.__webglTexture?this.updateDataTexture(s,e.texture,e.size,r,1,1,1,this.lastBuildSplatCount,t):n.needsUpdate=!0}}getTargetCovarianceCompressionLevel(){return this.halfPrecisionCovariancesOnGPU?1:0}getTargetSphericalHarmonicsCompressionLevel(){return Math.max(1,this.getMaximumSplatBufferCompressionLevel())}getMaximumSplatBufferCompressionLevel(){let e;for(let t=0;t<this.scenes.length;t++){const s=this.getScene(t).splatBuffer;(0===t||s.compressionLevel>e)&&(e=s.compressionLevel)}return e}getMinimumSplatBufferCompressionLevel(){let e;for(let t=0;t<this.scenes.length;t++){const s=this.getScene(t).splatBuffer;(0===t||s.compressionLevel<e)&&(e=s.compressionLevel)}return e}static computeTextureUpdateRegion(e,t,s,n,r){const i=r/n,o=e*i,a=Math.floor(o/s),l=a*s*n,c=t*i,h=Math.floor(c/s);return{dataStart:l,dataEnd:h*s*n+s*n,startRow:a,endRow:h}}updateDataTexture(e,t,s,n,r,i,o,a,l){const c=this.renderer.getContext(),h=jt.computeTextureUpdateRegion(a,l,s.x,r,i),d=h.dataEnd-h.dataStart,p=new e.constructor(e.buffer,h.dataStart*o,d),u=h.endRow-h.startRow+1,A=this.webGLUtils.convert(t.type),m=this.webGLUtils.convert(t.format,t.colorSpace),g=c.getParameter(c.TEXTURE_BINDING_2D);c.bindTexture(c.TEXTURE_2D,n.__webglTexture),c.texSubImage2D(c.TEXTURE_2D,0,0,h.startRow,s.x,u,m,A,p),c.bindTexture(c.TEXTURE_2D,g)}static updateCenterColorsPaddedData(e,t,s,n,r){for(let a=e;a<=t;a++){const e=4*a,t=3*a,l=4*a;r[l]=(i=n)[o=e]+(i[o+1]<<8)+(i[o+2]<<16)+(i[o+3]<<24),r[l+1]=u(s[t]),r[l+2]=u(s[t+1]),r[l+3]=u(s[t+2])}var i,o}updateVisibleRegion(t){const s=this.getSplatCount(),n=new e.Vector3;if(!t){const t=new e.Vector3;this.scenes.forEach((e=>{t.add(e.splatBuffer.sceneCenter)})),t.multiplyScalar(1/this.scenes.length),this.calculatedSceneCenter.copy(t),this.material.uniforms.sceneCenter.value.copy(this.calculatedSceneCenter),this.material.uniformsNeedUpdate=!0}for(let e=t?this.lastBuildSplatCount:0;e<s;e++){this.getSplatCenter(e,n,!1);const t=n.sub(this.calculatedSceneCenter).length();t>this.maxSplatDistanceFromSceneCenter&&(this.maxSplatDistanceFromSceneCenter=t)}this.maxSplatDistanceFromSceneCenter-this.visibleRegionBufferRadius>1&&(this.visibleRegionBufferRadius=this.maxSplatDistanceFromSceneCenter,this.visibleRegionRadius=Math.max(this.visibleRegionBufferRadius-1,0)),this.finalBuild&&(this.visibleRegionRadius=this.visibleRegionBufferRadius=this.maxSplatDistanceFromSceneCenter),this.updateVisibleRegionFadeDistance()}updateVisibleRegionFadeDistance(e=Vt.Default){const t=this.finalBuild?.012:.003,s=e===Vt.Default?t:.003;this.visibleRegionFadeStartRadius=(this.visibleRegionRadius-this.visibleRegionFadeStartRadius)*s+this.visibleRegionFadeStartRadius;const n=(this.visibleRegionBufferRadius>0?this.visibleRegionFadeStartRadius/this.visibleRegionBufferRadius:0)>.99,r=n||e===Vt.Instant?1:0;this.material.uniforms.visibleRegionFadeStartRadius.value=this.visibleRegionFadeStartRadius,this.material.uniforms.visibleRegionRadius.value=this.visibleRegionRadius,this.material.uniforms.firstRenderTime.value=this.firstRenderTime,this.material.uniforms.currentTime.value=performance.now(),this.material.uniforms.fadeInComplete.value=r,this.material.uniformsNeedUpdate=!0,this.visibleRegionChanging=!n}updateRenderIndexes(e,t){const s=this.geometry;s.attributes.splatIndex.set(e),s.attributes.splatIndex.needsUpdate=!0,t>0&&-1===this.firstRenderTime&&(this.firstRenderTime=performance.now()),s.instanceCount=t}updateTransforms(){for(let e=0;e<this.scenes.length;e++){this.getScene(e).updateTransform()}}updateUniforms=function(){const t=new e.Vector2;return function(e,s,n,r,i,o){if(this.getSplatCount()>0){if(t.set(e.x*this.devicePixelRatio,e.y*this.devicePixelRatio),this.material.uniforms.viewport.value.copy(t),this.material.uniforms.basisViewport.value.set(1/t.x,1/t.y),this.material.uniforms.focal.value.set(s,n),this.material.uniforms.orthographicMode.value=r?1:0,this.material.uniforms.orthoZoom.value=i,this.material.uniforms.inverseFocalAdjustment.value=o,this.dynamicMode)for(let e=0;e<this.scenes.length;e++)this.material.uniforms.transforms.value[e].copy(this.getScene(e).transform);if(this.enableOptionalEffects)for(let e=0;e<this.scenes.length;e++)this.material.uniforms.sceneOpacity.value[e]=m(this.getScene(e).opacity,0,1),this.material.uniforms.sceneVisibility.value[e]=this.getScene(e).visible?1:0,this.material.uniformsNeedUpdate=!0;this.material.uniformsNeedUpdate=!0}}}();setSplatScale(e=1){this.splatScale=e,this.material.uniforms.splatScale.value=e,this.material.uniformsNeedUpdate=!0}getSplatScale(){return this.splatScale}setPointCloudModeEnabled(e){this.pointCloudModeEnabled=e,this.material.uniforms.pointCloudModeEnabled.value=e?1:0,this.material.uniformsNeedUpdate=!0}getPointCloudModeEnabled(){return this.pointCloudModeEnabled}getSplatDataTextures(){return this.splatDataTextures}getSplatCount(){return jt.getTotalSplatCountForScenes(this.scenes)}static getTotalSplatCountForScenes(e){let t=0;for(let s of e)s&&s.splatBuffer&&(t+=s.splatBuffer.getSplatCount());return t}static getTotalSplatCountForSplatBuffers(e){let t=0;for(let s of e)t+=s.getSplatCount();return t}getMaxSplatCount(){return jt.getTotalMaxSplatCountForScenes(this.scenes)}static getTotalMaxSplatCountForScenes(e){let t=0;for(let s of e)s&&s.splatBuffer&&(t+=s.splatBuffer.getMaxSplatCount());return t}static getTotalMaxSplatCountForSplatBuffers(e){let t=0;for(let s of e)t+=s.getMaxSplatCount();return t}disposeDistancesComputationGPUResources(){if(!this.renderer)return;const e=this.renderer.getContext();this.distancesTransformFeedback.vao&&(e.deleteVertexArray(this.distancesTransformFeedback.vao),this.distancesTransformFeedback.vao=null),this.distancesTransformFeedback.program&&(e.deleteProgram(this.distancesTransformFeedback.program),e.deleteShader(this.distancesTransformFeedback.vertexShader),e.deleteShader(this.distancesTransformFeedback.fragmentShader),this.distancesTransformFeedback.program=null,this.distancesTransformFeedback.vertexShader=null,this.distancesTransformFeedback.fragmentShader=null),this.disposeDistancesComputationGPUBufferResources(),this.distancesTransformFeedback.id&&(e.deleteTransformFeedback(this.distancesTransformFeedback.id),this.distancesTransformFeedback.id=null)}disposeDistancesComputationGPUBufferResources(){if(!this.renderer)return;const e=this.renderer.getContext();this.distancesTransformFeedback.centersBuffer&&(this.distancesTransformFeedback.centersBuffer=null,e.deleteBuffer(this.distancesTransformFeedback.centersBuffer)),this.distancesTransformFeedback.outDistancesBuffer&&(e.deleteBuffer(this.distancesTransformFeedback.outDistancesBuffer),this.distancesTransformFeedback.outDistancesBuffer=null)}setRenderer(t){if(t!==this.renderer){this.renderer=t;const s=this.renderer.getContext(),n=new Qt(s),r=new zt(s,n,{});if(n.init(r),this.webGLUtils=new e.WebGLUtils(s,n,r),this.enableDistancesComputationOnGPU&&this.getSplatCount()>0){this.setupDistancesComputationTransformFeedback();const{centers:e,sceneIndexes:t}=this.getDataForDistancesComputation(0,this.getSplatCount()-1);this.refreshGPUBuffersForDistancesComputation(e,t)}}}setupDistancesComputationTransformFeedback=function(){let e;return function(){const t=this.getMaxSplatCount();if(!this.renderer)return;const s=this.lastRenderer!==this.renderer,n=e!==t;if(!s&&!n)return;s?this.disposeDistancesComputationGPUResources():n&&this.disposeDistancesComputationGPUBufferResources();const r=this.renderer.getContext(),i=(e,t,s)=>{const n=e.createShader(t);if(!n)return console.error("Fatal error: gl could not create a shader object."),null;e.shaderSource(n,s),e.compileShader(n);if(!e.getShaderParameter(n,e.COMPILE_STATUS)){let s="unknown";t===e.VERTEX_SHADER?s="vertex shader":t===e.FRAGMENT_SHADER&&(s="fragement shader");const r=e.getShaderInfoLog(n);return console.error("Failed to compile "+s+" with these errors:"+r),e.deleteShader(n),null}return n};let o;this.integerBasedDistancesComputation?(o="#version 300 es\n                in ivec4 center;\n                flat out int distance;",this.dynamicMode?o+=`\n                        in uint sceneIndex;\n                        uniform ivec4 transforms[${b.MaxScenes}];\n                        void main(void) {\n                            ivec4 transform = transforms[sceneIndex];\n                            distance = center.x * transform.x + center.y * transform.y + center.z * transform.z + transform.w * center.w;\n                        }\n                    `:o+="\n                        uniform ivec3 modelViewProj;\n                        void main(void) {\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\n                        }\n                    "):(o="#version 300 es\n                in vec4 center;\n                flat out float distance;",this.dynamicMode?o+=`\n                        in uint sceneIndex;\n                        uniform mat4 transforms[${b.MaxScenes}];\n                        void main(void) {\n                            vec4 transformedCenter = transforms[sceneIndex] * vec4(center.xyz, 1.0);\n                            distance = transformedCenter.z;\n                        }\n                    `:o+="\n                        uniform vec3 modelViewProj;\n                        void main(void) {\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\n                        }\n                    ");const a=r.getParameter(r.VERTEX_ARRAY_BINDING),l=r.getParameter(r.CURRENT_PROGRAM),c=!!l&&r.getProgramParameter(l,r.DELETE_STATUS);if(s&&(this.distancesTransformFeedback.vao=r.createVertexArray()),r.bindVertexArray(this.distancesTransformFeedback.vao),s){const e=r.createProgram(),t=i(r,r.VERTEX_SHADER,o),s=i(r,r.FRAGMENT_SHADER,"#version 300 es\n                precision lowp float;\n                out vec4 fragColor;\n                void main(){}\n            ");if(!t||!s)throw new Error("Could not compile shaders for distances computation on GPU.");r.attachShader(e,t),r.attachShader(e,s),r.transformFeedbackVaryings(e,["distance"],r.SEPARATE_ATTRIBS),r.linkProgram(e);if(!r.getProgramParameter(e,r.LINK_STATUS)){const n=r.getProgramInfoLog(e);throw console.error("Fatal error: Failed to link program: "+n),r.deleteProgram(e),r.deleteShader(s),r.deleteShader(t),new Error("Could not link shaders for distances computation on GPU.")}this.distancesTransformFeedback.program=e,this.distancesTransformFeedback.vertexShader=t,this.distancesTransformFeedback.vertexShader=s}if(r.useProgram(this.distancesTransformFeedback.program),this.distancesTransformFeedback.centersLoc=r.getAttribLocation(this.distancesTransformFeedback.program,"center"),this.dynamicMode){this.distancesTransformFeedback.sceneIndexesLoc=r.getAttribLocation(this.distancesTransformFeedback.program,"sceneIndex");for(let e=0;e<this.scenes.length;e++)this.distancesTransformFeedback.transformsLocs[e]=r.getUniformLocation(this.distancesTransformFeedback.program,`transforms[${e}]`)}else this.distancesTransformFeedback.modelViewProjLoc=r.getUniformLocation(this.distancesTransformFeedback.program,"modelViewProj");(s||n)&&(this.distancesTransformFeedback.centersBuffer=r.createBuffer(),r.bindBuffer(r.ARRAY_BUFFER,this.distancesTransformFeedback.centersBuffer),r.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc),this.integerBasedDistancesComputation?r.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc,4,r.INT,0,0):r.vertexAttribPointer(this.distancesTransformFeedback.centersLoc,4,r.FLOAT,!1,0,0),this.dynamicMode&&(this.distancesTransformFeedback.sceneIndexesBuffer=r.createBuffer(),r.bindBuffer(r.ARRAY_BUFFER,this.distancesTransformFeedback.sceneIndexesBuffer),r.enableVertexAttribArray(this.distancesTransformFeedback.sceneIndexesLoc),r.vertexAttribIPointer(this.distancesTransformFeedback.sceneIndexesLoc,1,r.UNSIGNED_INT,0,0))),(s||n)&&(this.distancesTransformFeedback.outDistancesBuffer=r.createBuffer()),r.bindBuffer(r.ARRAY_BUFFER,this.distancesTransformFeedback.outDistancesBuffer),r.bufferData(r.ARRAY_BUFFER,4*t,r.STATIC_READ),s&&(this.distancesTransformFeedback.id=r.createTransformFeedback()),r.bindTransformFeedback(r.TRANSFORM_FEEDBACK,this.distancesTransformFeedback.id),r.bindBufferBase(r.TRANSFORM_FEEDBACK_BUFFER,0,this.distancesTransformFeedback.outDistancesBuffer),l&&!0!==c&&r.useProgram(l),a&&r.bindVertexArray(a),this.lastRenderer=this.renderer,e=t}}();updateGPUCentersBufferForDistancesComputation(e,t,s){if(!this.renderer)return;const n=this.renderer.getContext(),r=n.getParameter(n.VERTEX_ARRAY_BINDING);n.bindVertexArray(this.distancesTransformFeedback.vao);const i=this.integerBasedDistancesComputation?Uint32Array:Float32Array,o=16*s;if(n.bindBuffer(n.ARRAY_BUFFER,this.distancesTransformFeedback.centersBuffer),e)n.bufferSubData(n.ARRAY_BUFFER,o,t);else{const e=new i(16*this.getMaxSplatCount());e.set(t),n.bufferData(n.ARRAY_BUFFER,e,n.STATIC_DRAW)}n.bindBuffer(n.ARRAY_BUFFER,null),r&&n.bindVertexArray(r)}updateGPUTransformIndexesBufferForDistancesComputation(e,t,s){if(!this.renderer||!this.dynamicMode)return;const n=this.renderer.getContext(),r=n.getParameter(n.VERTEX_ARRAY_BINDING);n.bindVertexArray(this.distancesTransformFeedback.vao);const i=4*s;if(n.bindBuffer(n.ARRAY_BUFFER,this.distancesTransformFeedback.sceneIndexesBuffer),e)n.bufferSubData(n.ARRAY_BUFFER,i,t);else{const e=new Uint32Array(4*this.getMaxSplatCount());e.set(t),n.bufferData(n.ARRAY_BUFFER,e,n.STATIC_DRAW)}n.bindBuffer(n.ARRAY_BUFFER,null),r&&n.bindVertexArray(r)}getSceneIndexes(e,t){let s;s=new Uint32Array(t-e+1);for(let n=e;n<=t;n++)s[n]=this.globalSplatIndexToSceneIndexMap[n];return s}fillTransformsArray=function(){const e=[];return function(t){e.length!==t.length&&(e.length=t.length);for(let t=0;t<this.scenes.length;t++){const s=this.getScene(t).transform.elements;for(let n=0;n<16;n++)e[16*t+n]=s[n]}t.set(e)}}();computeDistancesOnGPU=function(){const t=new e.Matrix4;return function(e,s){if(!this.renderer)return;const n=this.renderer.getContext(),r=n.getParameter(n.VERTEX_ARRAY_BINDING),i=n.getParameter(n.CURRENT_PROGRAM),o=!!i&&n.getProgramParameter(i,n.DELETE_STATUS);if(n.bindVertexArray(this.distancesTransformFeedback.vao),n.useProgram(this.distancesTransformFeedback.program),n.enable(n.RASTERIZER_DISCARD),this.dynamicMode)for(let s=0;s<this.scenes.length;s++)if(t.copy(this.getScene(s).transform),t.premultiply(e),this.integerBasedDistancesComputation){const e=jt.getIntegerMatrixArray(t),r=[e[2],e[6],e[10],e[14]];n.uniform4i(this.distancesTransformFeedback.transformsLocs[s],r[0],r[1],r[2],r[3])}else n.uniformMatrix4fv(this.distancesTransformFeedback.transformsLocs[s],!1,t.elements);else if(this.integerBasedDistancesComputation){const t=jt.getIntegerMatrixArray(e),s=[t[2],t[6],t[10]];n.uniform3i(this.distancesTransformFeedback.modelViewProjLoc,s[0],s[1],s[2])}else{const t=[e.elements[2],e.elements[6],e.elements[10]];n.uniform3f(this.distancesTransformFeedback.modelViewProjLoc,t[0],t[1],t[2])}n.bindBuffer(n.ARRAY_BUFFER,this.distancesTransformFeedback.centersBuffer),n.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc),this.integerBasedDistancesComputation?n.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc,4,n.INT,0,0):n.vertexAttribPointer(this.distancesTransformFeedback.centersLoc,4,n.FLOAT,!1,0,0),this.dynamicMode&&(n.bindBuffer(n.ARRAY_BUFFER,this.distancesTransformFeedback.sceneIndexesBuffer),n.enableVertexAttribArray(this.distancesTransformFeedback.sceneIndexesLoc),n.vertexAttribIPointer(this.distancesTransformFeedback.sceneIndexesLoc,1,n.UNSIGNED_INT,0,0)),n.bindTransformFeedback(n.TRANSFORM_FEEDBACK,this.distancesTransformFeedback.id),n.bindBufferBase(n.TRANSFORM_FEEDBACK_BUFFER,0,this.distancesTransformFeedback.outDistancesBuffer),n.beginTransformFeedback(n.POINTS),n.drawArrays(n.POINTS,0,this.getSplatCount()),n.endTransformFeedback(),n.bindBufferBase(n.TRANSFORM_FEEDBACK_BUFFER,0,null),n.bindTransformFeedback(n.TRANSFORM_FEEDBACK,null),n.disable(n.RASTERIZER_DISCARD);const a=n.fenceSync(n.SYNC_GPU_COMMANDS_COMPLETE,0);n.flush();const l=new Promise((e=>{const t=()=>{if(this.disposed)e();else{const r=0,i=0;switch(n.clientWaitSync(a,i,r)){case n.TIMEOUT_EXPIRED:return this.computeDistancesOnGPUSyncTimeout=setTimeout(t),this.computeDistancesOnGPUSyncTimeout;case n.WAIT_FAILED:throw new Error("should never get here");default:this.computeDistancesOnGPUSyncTimeout=null,n.deleteSync(a);const r=n.getParameter(n.VERTEX_ARRAY_BINDING);n.bindVertexArray(this.distancesTransformFeedback.vao),n.bindBuffer(n.ARRAY_BUFFER,this.distancesTransformFeedback.outDistancesBuffer),n.getBufferSubData(n.ARRAY_BUFFER,0,s),n.bindBuffer(n.ARRAY_BUFFER,null),r&&n.bindVertexArray(r),e()}}};this.computeDistancesOnGPUSyncTimeout=setTimeout(t)}));return i&&!0!==o&&n.useProgram(i),r&&n.bindVertexArray(r),l}}();getLocalSplatParameters(e,t,s){null==s&&(s=!this.dynamicMode),t.splatBuffer=this.getSplatBufferForSplat(e),t.localIndex=this.getSplatLocalIndex(e),t.sceneTransform=s?this.getSceneTransformForSplat(e):null}fillSplatDataArrays(e,t,s,n,r,i=0,o=1,a,l,c=0){for(let h=0;h<this.scenes.length;h++){null==r&&(r=!this.dynamicMode);const d=this.getScene(h),p=d.splatBuffer,u=r?d.transform:null;e&&p.fillSplatCovarianceArray(e,u,a,l,c,i),t&&p.fillSplatCenterArray(t,u,a,l,c),s&&p.fillSplatColorArray(s,d.minimumAlpha,a,l,c),n&&p.fillSphericalHarmonicsArray(n,this.minSphericalHarmonicsDegree,u,a,l,c,o),c+=p.getSplatCount()}}getIntegerCenters(e,t,s=!1){const n=t-e+1,r=new Float32Array(3*n);let i;this.fillSplatDataArrays(null,r,null,null,void 0,void 0,void 0,e);let o=s?4:3;i=new Int32Array(n*o);for(let e=0;e<n;e++){for(let t=0;t<3;t++)i[e*o+t]=Math.round(1e3*r[3*e+t]);s&&(i[e*o+3]=1e3)}return i}getFloatCenters(e,t,s=!1){const n=t-e+1,r=new Float32Array(3*n);if(this.fillSplatDataArrays(null,r,null,null,void 0,void 0,void 0,e),!s)return r;let i=new Float32Array(4*n);for(let e=0;e<n;e++){for(let t=0;t<3;t++)i[4*e+t]=r[3*e+t];i[4*e+3]=1}return i}getSplatCenter=function(){const e={};return function(t,s,n){this.getLocalSplatParameters(t,e,n),e.splatBuffer.getSplatCenter(e.localIndex,s,e.sceneTransform)}}();getSplatScaleAndRotation=function(){const e={};return function(t,s,n,r){this.getLocalSplatParameters(t,e,r),e.splatBuffer.getSplatScaleAndRotation(e.localIndex,s,n,e.sceneTransform)}}();getSplatColor=function(){const e={};return function(t,s){this.getLocalSplatParameters(t,e),e.splatBuffer.getSplatColor(e.localIndex,s)}}();getSceneTransform(e,t){const s=this.getScene(e);s.updateTransform(),t.copy(s.transform)}getScene(e){if(e<0||e>=this.scenes.length)throw new Error("SplatMesh::getScene() -> Invalid scene index.");return this.scenes[e]}getSplatBufferForSplat(e){return this.getScene(this.globalSplatIndexToSceneIndexMap[e]).splatBuffer}getSceneIndexForSplat(e){return this.globalSplatIndexToSceneIndexMap[e]}getSceneTransformForSplat(e){return this.getScene(this.globalSplatIndexToSceneIndexMap[e]).transform}getSplatLocalIndex(e){return this.globalSplatIndexToLocalSplatIndexMap[e]}static getIntegerMatrixArray(e){const t=e.elements,s=[];for(let e=0;e<16;e++)s[e]=Math.round(1e3*t[e]);return s}}var Wt="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";function qt(e){let t,s,n,r,i,o,a,l,c,h,d,p,u,A,m,g,f,C;e.onmessage=S=>{if(S.data.centers)centers=S.data.centers,sceneIndexes=S.data.sceneIndexes,r?new Int32Array(s,A+S.data.range.from*C.BytesPerInt*4,4*S.data.range.count).set(new Int32Array(centers)):new Float32Array(s,A+S.data.range.from*C.BytesPerFloat*4,4*S.data.range.count).set(new Float32Array(centers)),i&&new Uint32Array(s,c+4*S.data.range.from,S.data.range.count).set(new Uint32Array(sceneIndexes)),e.postMessage({centerDataSet:!0});else if(S.data.sort){const y=S.data.sort.splatRenderCount||0,x=S.data.sort.splatSortCount||0,I=S.data.sort.usePrecomputedDistances;let v,B,w;n||(v=S.data.sort.indexesToSort,w=S.data.sort.transforms,I&&(B=S.data.sort.precomputedDistances)),function(S,y,x,I,v,B,w){const b=performance.now();if(!n&&(new Uint32Array(s,a,v.byteLength/C.BytesPerInt).set(v),new Float32Array(s,h,w.byteLength/C.BytesPerFloat).set(w),I)){let e;e=r?new Int32Array(s,d,B.byteLength/C.BytesPerInt):new Float32Array(s,d,B.byteLength/C.BytesPerFloat),e.set(B)}g||(g=new Uint32Array(C.DepthMapRange)),new Float32Array(s,m,16).set(x),new Uint32Array(s,u,C.DepthMapRange).set(g),t.exports.sortIndexes(a,A,d,p,u,m,l,c,h,C.DepthMapRange,S,y,o,I,r,i);const E={sortDone:!0,splatSortCount:S,splatRenderCount:y,sortTime:0};if(!n){const e=new Uint32Array(s,l,y);(!f||f.length<y)&&(f=new Uint32Array(y)),f.set(e),E.sortedIndexes=f}const D=performance.now();E.sortTime=D-b,e.postMessage(E)}(x,y,S.data.sort.modelViewProj,I,v,B,w)}else if(S.data.init){C=S.data.init.Constants,o=S.data.init.splatCount,n=S.data.init.useSharedMemory,r=S.data.init.integerBasedSort,i=S.data.init.dynamicMode;const g=r?4*C.BytesPerInt:4*C.BytesPerFloat,f=new Uint8Array(S.data.init.sorterWasmBytes),y=16*C.BytesPerFloat,x=o*C.BytesPerInt,I=o*g,v=y,B=r?o*C.BytesPerInt:o*C.BytesPerFloat,w=o*C.BytesPerInt,b=o*C.BytesPerInt,E=C.DepthMapRange*C.BytesPerInt*2,D=i?o*C.BytesPerInt:0,T=i?C.MaxScenes*y:0,M=32*C.MemoryPageSize,F=x+I+v+B+w+E+b+D+T+M,R=Math.floor(F/C.MemoryPageSize)+1,P={module:{},env:{memory:new WebAssembly.Memory({initial:R,maximum:R,shared:!0})}};WebAssembly.compile(f).then((e=>WebAssembly.instantiate(e,P))).then((r=>{t=r,a=0,A=a+x,m=A+I,d=m+v,p=d+B,u=p+w,l=u+E,c=l+b,h=c+D,s=P.env.memory.buffer,n?e.postMessage({sortSetupPhase1Complete:!0,indexesToSortBuffer:s,indexesToSortOffset:a,sortedIndexesBuffer:s,sortedIndexesOffset:l,precomputedDistancesBuffer:s,precomputedDistancesOffset:d,transformsBuffer:s,transformsOffset:h}):e.postMessage({sortSetupPhase1Complete:!0})}))}}}const Yt={None:0,VR:1,AR:2};class Xt{static createButton(e){const t=document.createElement("button");function s(){t.style.display="",t.style.cursor="auto",t.style.left="calc(50% - 75px)",t.style.width="150px",t.onmouseenter=null,t.onmouseleave=null,t.onclick=null}function n(e){e.style.position="absolute",e.style.bottom="20px",e.style.padding="12px 6px",e.style.border="1px solid #fff",e.style.borderRadius="4px",e.style.background="rgba(0,0,0,0.1)",e.style.color="#fff",e.style.font="normal 13px sans-serif",e.style.textAlign="center",e.style.opacity="0.5",e.style.outline="none",e.style.zIndex="999"}if("xr"in navigator)return t.id="VRButton",t.style.display="none",n(t),navigator.xr.isSessionSupported("immersive-vr").then((function(n){n?function(){let s=null;async function n(n){n.addEventListener("end",r),await e.xr.setSession(n),t.textContent="EXIT VR",s=n}function r(){s.removeEventListener("end",r),t.textContent="ENTER VR",s=null}t.style.display="",t.style.cursor="pointer",t.style.left="calc(50% - 50px)",t.style.width="100px",t.textContent="ENTER VR";const i={optionalFeatures:["local-floor","bounded-floor","hand-tracking","layers"]};t.onmouseenter=function(){t.style.opacity="1.0"},t.onmouseleave=function(){t.style.opacity="0.5"},t.onclick=function(){null===s?navigator.xr.requestSession("immersive-vr",i).then(n):(s.end(),void 0!==navigator.xr.offerSession&&navigator.xr.offerSession("immersive-vr",i).then(n).catch((e=>{console.warn(e)})))},void 0!==navigator.xr.offerSession&&navigator.xr.offerSession("immersive-vr",i).then(n).catch((e=>{console.warn(e)}))}():(s(),t.textContent="VR NOT SUPPORTED"),n&&Xt.xrSessionIsGranted&&t.click()})).catch((function(e){s(),console.warn("Exception when trying to call xr.isSessionSupported",e),t.textContent="VR NOT ALLOWED"})),t;{const e=document.createElement("a");return!1===window.isSecureContext?(e.href=document.location.href.replace(/^http:/,"https:"),e.innerHTML="WEBXR NEEDS HTTPS"):(e.href="https://immersiveweb.dev/",e.innerHTML="WEBXR NOT AVAILABLE"),e.style.left="calc(50% - 90px)",e.style.width="180px",e.style.textDecoration="none",n(e),e}}static registerSessionGrantedListener(){if("undefined"!=typeof navigator&&"xr"in navigator){if(/WebXRViewer\//i.test(navigator.userAgent))return;navigator.xr.addEventListener("sessiongranted",(()=>{Xt.xrSessionIsGranted=!0}))}}}Xt.xrSessionIsGranted=!1,Xt.registerSessionGrantedListener();class Jt{static createButton(e,t={}){const s=document.createElement("button");function n(){s.style.display="",s.style.cursor="auto",s.style.left="calc(50% - 75px)",s.style.width="150px",s.onmouseenter=null,s.onmouseleave=null,s.onclick=null}function r(e){e.style.position="absolute",e.style.bottom="20px",e.style.padding="12px 6px",e.style.border="1px solid #fff",e.style.borderRadius="4px",e.style.background="rgba(0,0,0,0.1)",e.style.color="#fff",e.style.font="normal 13px sans-serif",e.style.textAlign="center",e.style.opacity="0.5",e.style.outline="none",e.style.zIndex="999"}if("xr"in navigator)return s.id="ARButton",s.style.display="none",r(s),navigator.xr.isSessionSupported("immersive-ar").then((function(r){r?function(){if(void 0===t.domOverlay){const e=document.createElement("div");e.style.display="none",document.body.appendChild(e);const s=document.createElementNS("http://www.w3.org/2000/svg","svg");s.setAttribute("width",38),s.setAttribute("height",38),s.style.position="absolute",s.style.right="20px",s.style.top="20px",s.addEventListener("click",(function(){n.end()})),e.appendChild(s);const r=document.createElementNS("http://www.w3.org/2000/svg","path");r.setAttribute("d","M 12,12 L 28,28 M 28,12 12,28"),r.setAttribute("stroke","#fff"),r.setAttribute("stroke-width",2),s.appendChild(r),void 0===t.optionalFeatures&&(t.optionalFeatures=[]),t.optionalFeatures.push("dom-overlay"),t.domOverlay={root:e}}let n=null;async function r(r){r.addEventListener("end",i),e.xr.setReferenceSpaceType("local"),await e.xr.setSession(r),s.textContent="STOP AR",t.domOverlay.root.style.display="",n=r}function i(){n.removeEventListener("end",i),s.textContent="START AR",t.domOverlay.root.style.display="none",n=null}s.style.display="",s.style.cursor="pointer",s.style.left="calc(50% - 50px)",s.style.width="100px",s.textContent="START AR",s.onmouseenter=function(){s.style.opacity="1.0"},s.onmouseleave=function(){s.style.opacity="0.5"},s.onclick=function(){null===n?navigator.xr.requestSession("immersive-ar",t).then(r):(n.end(),void 0!==navigator.xr.offerSession&&navigator.xr.offerSession("immersive-ar",t).then(r).catch((e=>{console.warn(e)})))},void 0!==navigator.xr.offerSession&&navigator.xr.offerSession("immersive-ar",t).then(r).catch((e=>{console.warn(e)}))}():(n(),s.textContent="AR NOT SUPPORTED")})).catch((function(e){n(),console.warn("Exception when trying to call xr.isSessionSupported",e),s.textContent="AR NOT ALLOWED"})),s;{const e=document.createElement("a");return!1===window.isSecureContext?(e.href=document.location.href.replace(/^http:/,"https:"),e.innerHTML="WEBXR NEEDS HTTPS"):(e.href="https://immersiveweb.dev/",e.innerHTML="WEBXR NOT AVAILABLE"),e.style.left="calc(50% - 90px)",e.style.width="180px",e.style.textDecoration="none",r(e),e}}}const Zt={Always:0,OnChange:1,Never:2};class $t{constructor(t={}){if(t.cameraUp||(t.cameraUp=[0,1,0]),this.cameraUp=(new e.Vector3).fromArray(t.cameraUp),t.initialCameraPosition||(t.initialCameraPosition=[0,10,15]),this.initialCameraPosition=(new e.Vector3).fromArray(t.initialCameraPosition),t.initialCameraLookAt||(t.initialCameraLookAt=[0,0,0]),this.initialCameraLookAt=(new e.Vector3).fromArray(t.initialCameraLookAt),this.dropInMode=t.dropInMode||!1,void 0!==t.selfDrivenMode&&null!==t.selfDrivenMode||(t.selfDrivenMode=!0),this.selfDrivenMode=t.selfDrivenMode&&!this.dropInMode,this.selfDrivenUpdateFunc=this.selfDrivenUpdate.bind(this),void 0===t.useBuiltInControls&&(t.useBuiltInControls=!0),this.useBuiltInControls=t.useBuiltInControls,this.rootElement=t.rootElement,this.ignoreDevicePixelRatio=t.ignoreDevicePixelRatio||!1,this.devicePixelRatio=this.ignoreDevicePixelRatio?1:window.devicePixelRatio,this.halfPrecisionCovariancesOnGPU=t.halfPrecisionCovariancesOnGPU||!1,this.threeScene=t.threeScene,this.renderer=t.renderer,this.camera=t.camera,this.gpuAcceleratedSort=t.gpuAcceleratedSort||!1,void 0!==t.integerBasedSort&&null!==t.integerBasedSort||(t.integerBasedSort=!0),this.integerBasedSort=t.integerBasedSort,void 0!==t.sharedMemoryForWorkers&&null!==t.sharedMemoryForWorkers||(t.sharedMemoryForWorkers=!0),this.sharedMemoryForWorkers=t.sharedMemoryForWorkers,this.dynamicScene=!!t.dynamicScene,this.antialiased=t.antialiased||!1,this.webXRMode=t.webXRMode||Yt.None,this.webXRMode!==Yt.None&&(this.gpuAcceleratedSort=!1),this.webXRActive=!1,this.renderMode=t.renderMode||Zt.Always,this.sceneRevealMode=t.sceneRevealMode||Vt.Default,this.focalAdjustment=t.focalAdjustment||1,this.maxScreenSpaceSplatSize=t.maxScreenSpaceSplatSize||1024,this.logLevel=t.logLevel||Nt.None,this.sphericalHarmonicsDegree=t.sphericalHarmonicsDegree||0,this.enableOptionalEffects=t.enableOptionalEffects||!1,void 0!==t.enableSIMDInSort&&null!==t.enableSIMDInSort||(t.enableSIMDInSort=!0),this.enableSIMDInSort=t.enableSIMDInSort,void 0!==t.plyInMemoryCompressionLevel&&null!==t.plyInMemoryCompressionLevel||(t.plyInMemoryCompressionLevel=2),this.plyInMemoryCompressionLevel=t.plyInMemoryCompressionLevel,void 0!==t.freeIntermediateSplatData&&null!==t.freeIntermediateSplatData||(t.freeIntermediateSplatData=!1),this.freeIntermediateSplatData=t.freeIntermediateSplatData,v()){const e=B();e.major<17&&(this.enableSIMDInSort=!1),e.major<16&&(this.sharedMemoryForWorkers=!1)}this.createSplatMesh(),this.controls=null,this.perspectiveControls=null,this.orthographicControls=null,this.orthographicCamera=null,this.perspectiveCamera=null,this.showMeshCursor=!1,this.showControlPlane=!1,this.showInfo=!1,this.sceneHelper=null,this.sortWorker=null,this.sortRunning=!1,this.splatRenderCount=0,this.sortWorkerIndexesToSort=null,this.sortWorkerSortedIndexes=null,this.sortWorkerPrecomputedDistances=null,this.sortWorkerTransforms=null,this.runAfterNextSort=[],this.selfDrivenModeRunning=!1,this.splatRenderReady=!1,this.raycaster=new Rt,this.infoPanel=null,this.startInOrthographicMode=!1,this.currentFPS=0,this.lastSortTime=0,this.consecutiveRenderFrames=0,this.previousCameraTarget=new e.Vector3,this.nextCameraTarget=new e.Vector3,this.mousePosition=new e.Vector2,this.mouseDownPosition=new e.Vector2,this.mouseDownTime=null,this.resizeObserver=null,this.mouseMoveListener=null,this.mouseDownListener=null,this.mouseUpListener=null,this.keyDownListener=null,this.sortPromise=null,this.sortPromiseResolver=null,this.splatSceneDownloadPromises={},this.splatSceneDownloadAndBuildPromise=null,this.splatSceneRemovalPromise=null,this.loadingSpinner=new It(null,this.rootElement||document.body),this.loadingSpinner.hide(),this.loadingProgressBar=new vt(this.rootElement||document.body),this.loadingProgressBar.hide(),this.infoPanel=new Bt(this.rootElement||document.body),this.infoPanel.hide(),this.usingExternalCamera=!(!this.dropInMode&&!this.camera),this.usingExternalRenderer=!(!this.dropInMode&&!this.renderer),this.initialized=!1,this.disposing=!1,this.disposed=!1,this.dropInMode||this.init()}createSplatMesh(){this.splatMesh=new jt(this.dynamicScene,this.enableOptionalEffects,this.halfPrecisionCovariancesOnGPU,this.devicePixelRatio,this.gpuAcceleratedSort,this.integerBasedSort,this.antialiased,this.maxScreenSpaceSplatSize,this.logLevel,this.sphericalHarmonicsDegree),this.splatMesh.frustumCulled=!1}init(){this.initialized||(this.rootElement||(this.usingExternalRenderer?this.rootElement=this.renderer.domElement.parentElement||document.body:(this.rootElement=document.createElement("div"),this.rootElement.style.width="100%",this.rootElement.style.height="100%",this.rootElement.style.position="absolute",document.body.appendChild(this.rootElement))),this.setupCamera(),this.setupRenderer(),this.setupWebXR(),this.setupControls(),this.setupEventHandlers(),this.threeScene=this.threeScene||new e.Scene,this.sceneHelper=new bt(this.threeScene),this.sceneHelper.setupMeshCursor(),this.sceneHelper.setupFocusMarker(),this.sceneHelper.setupControlPlane(),this.loadingProgressBar.setContainer(this.rootElement),this.loadingSpinner.setContainer(this.rootElement),this.infoPanel.setContainer(this.rootElement),this.initialized=!0)}setupCamera(){if(!this.usingExternalCamera){const t=new e.Vector2;this.getRenderDimensions(t),this.perspectiveCamera=new e.PerspectiveCamera(50,t.x/t.y,.1,1e3),this.orthographicCamera=new e.OrthographicCamera(t.x/-2,t.x/2,t.y/2,t.y/-2,.1,1e3),this.camera=this.startInOrthographicMode?this.orthographicCamera:this.perspectiveCamera,this.camera.position.copy(this.initialCameraPosition),this.camera.up.copy(this.cameraUp).normalize(),this.camera.lookAt(this.initialCameraLookAt)}}setupRenderer(){if(!this.usingExternalRenderer){const t=new e.Vector2;this.getRenderDimensions(t),this.renderer=new e.WebGLRenderer({antialias:!1,precision:"highp"}),this.renderer.setPixelRatio(this.devicePixelRatio),this.renderer.autoClear=!0,this.renderer.setClearColor(new e.Color(0),0),this.renderer.setSize(t.x,t.y),this.resizeObserver=new ResizeObserver((()=>{this.getRenderDimensions(t),this.renderer.setSize(t.x,t.y),this.forceRenderNextFrame()})),this.resizeObserver.observe(this.rootElement),this.rootElement.appendChild(this.renderer.domElement)}}setupWebXR(){this.webXRMode&&(this.webXRMode===Yt.VR?this.rootElement.appendChild(Xt.createButton(this.renderer)):this.webXRMode===Yt.AR&&this.rootElement.appendChild(Jt.createButton(this.renderer)),this.renderer.xr.addEventListener("sessionstart",(e=>{this.webXRActive=!0})),this.renderer.xr.addEventListener("sessionend",(e=>{this.webXRActive=!1})),this.renderer.xr.enabled=!0,this.camera.position.copy(this.initialCameraPosition),this.camera.up.copy(this.cameraUp).normalize(),this.camera.lookAt(this.initialCameraLookAt))}setupControls(){if(this.useBuiltInControls&&this.webXRMode===Yt.None){this.usingExternalCamera?this.camera.isOrthographicCamera?this.orthographicControls=new xt(this.camera,this.renderer.domElement):this.perspectiveControls=new xt(this.camera,this.renderer.domElement):(this.perspectiveControls=new xt(this.perspectiveCamera,this.renderer.domElement),this.orthographicControls=new xt(this.orthographicCamera,this.renderer.domElement));for(let e of[this.perspectiveControls,this.orthographicControls])e&&(e.listenToKeyEvents(window),e.rotateSpeed=.5,e.maxPolarAngle=.75*Math.PI,e.minPolarAngle=.1,e.enableDamping=!0,e.dampingFactor=.05,e.target.copy(this.initialCameraLookAt));this.controls=this.camera.isOrthographicCamera?this.orthographicControls:this.perspectiveControls}}setupEventHandlers(){this.useBuiltInControls&&this.webXRMode===Yt.None&&(this.mouseMoveListener=this.onMouseMove.bind(this),this.renderer.domElement.addEventListener("pointermove",this.mouseMoveListener,!1),this.mouseDownListener=this.onMouseDown.bind(this),this.renderer.domElement.addEventListener("pointerdown",this.mouseDownListener,!1),this.mouseUpListener=this.onMouseUp.bind(this),this.renderer.domElement.addEventListener("pointerup",this.mouseUpListener,!1),this.keyDownListener=this.onKeyDown.bind(this),window.addEventListener("keydown",this.keyDownListener,!1))}removeEventHandlers(){this.useBuiltInControls&&(this.renderer.domElement.removeEventListener("pointermove",this.mouseMoveListener),this.mouseMoveListener=null,this.renderer.domElement.removeEventListener("pointerdown",this.mouseDownListener),this.mouseDownListener=null,this.renderer.domElement.removeEventListener("pointerup",this.mouseUpListener),this.mouseUpListener=null,window.removeEventListener("keydown",this.keyDownListener),this.keyDownListener=null)}setRenderMode(e){this.renderMode=e}onKeyDown=function(){const t=new e.Vector3,s=new e.Matrix4,n=new e.Matrix4;return function(e){switch(t.set(0,0,-1),t.transformDirection(this.camera.matrixWorld),s.makeRotationAxis(t,Math.PI/128),n.makeRotationAxis(t,-Math.PI/128),e.code){case"KeyG":this.focalAdjustment+=.02,this.forceRenderNextFrame();break;case"KeyF":this.focalAdjustment-=.02,this.forceRenderNextFrame();break;case"ArrowLeft":this.camera.up.transformDirection(s);break;case"ArrowRight":this.camera.up.transformDirection(n);break;case"KeyC":this.showMeshCursor=!this.showMeshCursor;break;case"KeyU":this.showControlPlane=!this.showControlPlane;break;case"KeyI":this.showInfo=!this.showInfo,this.showInfo?this.infoPanel.show():this.infoPanel.hide();break;case"KeyO":this.usingExternalCamera||this.setOrthographicMode(!this.camera.isOrthographicCamera);break;case"KeyP":this.usingExternalCamera||this.splatMesh.setPointCloudModeEnabled(!this.splatMesh.getPointCloudModeEnabled());break;case"Equal":this.usingExternalCamera||this.splatMesh.setSplatScale(this.splatMesh.getSplatScale()+.05);break;case"Minus":this.usingExternalCamera||this.splatMesh.setSplatScale(Math.max(this.splatMesh.getSplatScale()-.05,0))}}}();onMouseMove(e){this.mousePosition.set(e.offsetX,e.offsetY)}onMouseDown(){this.mouseDownPosition.copy(this.mousePosition),this.mouseDownTime=g()}onMouseUp=function(){const t=new e.Vector2;return function(e){t.copy(this.mousePosition).sub(this.mouseDownPosition);g()-this.mouseDownTime<.5&&t.length()<2&&this.onMouseClick(e)}}();onMouseClick(e){this.mousePosition.set(e.offsetX,e.offsetY),this.checkForFocalPointChange()}checkForFocalPointChange=function(){const t=new e.Vector2,s=new e.Vector3,n=[];return function(){if(!this.transitioningCameraTarget&&(this.getRenderDimensions(t),n.length=0,this.raycaster.setFromCameraAndScreenPosition(this.camera,this.mousePosition,t),this.raycaster.intersectSplatMesh(this.splatMesh,n),n.length>0)){const e=n[0].origin;s.copy(e).sub(this.camera.position),s.length()>.75&&(this.previousCameraTarget.copy(this.controls.target),this.nextCameraTarget.copy(e),this.transitioningCameraTarget=!0,this.transitioningCameraTargetStartTime=g())}}}();getRenderDimensions(e){this.rootElement?(e.x=this.rootElement.offsetWidth,e.y=this.rootElement.offsetHeight):this.renderer.getSize(e)}setOrthographicMode(e){if(e===this.camera.isOrthographicCamera)return;const t=this.camera,s=e?this.orthographicCamera:this.perspectiveCamera;if(s.position.copy(t.position),s.up.copy(t.up),s.rotation.copy(t.rotation),s.quaternion.copy(t.quaternion),s.matrix.copy(t.matrix),this.camera=s,this.controls){const n=e=>{e.saveState(),e.reset()},r=this.controls,i=e?this.orthographicControls:this.perspectiveControls;n(i),n(r),i.target.copy(r.target),e?$t.setCameraZoomFromPosition(s,t,r):$t.setCameraPositionFromZoom(s,t,i),this.controls=i,this.camera.lookAt(this.controls.target)}}static setCameraPositionFromZoom=function(){const t=new e.Vector3;return function(e,s,n){const r=1/(.001*s.zoom);t.copy(n.target).sub(e.position).normalize().multiplyScalar(r).negate(),e.position.copy(n.target).add(t)}}();static setCameraZoomFromPosition=function(){const t=new e.Vector3;return function(e,s,n){const r=t.copy(n.target).sub(s.position).length();e.zoom=1/(.001*r)}}();updateSplatMesh=function(){const t=new e.Vector2;return function(){if(!this.splatMesh)return;if(this.splatMesh.getSplatCount()>0){this.splatMesh.updateTransforms(),this.getRenderDimensions(t);const e=.5*this.camera.projectionMatrix.elements[0]*this.devicePixelRatio*t.x,s=.5*this.camera.projectionMatrix.elements[5]*this.devicePixelRatio*t.y,n=this.camera.isOrthographicCamera?1/this.devicePixelRatio:1,r=this.focalAdjustment*n,i=1/r;this.adjustForWebXRStereo(t),this.splatMesh.updateUniforms(t,e*r,s*r,this.camera.isOrthographicCamera,this.camera.zoom||1,i)}}}();adjustForWebXRStereo(e){if(this.camera&&this.webXRActive){const t=this.renderer.xr.getCamera().projectionMatrix.elements[0],s=this.camera.projectionMatrix.elements[0];e.x*=s/t}}isLoadingOrUnloading(){return Object.keys(this.splatSceneDownloadPromises).length>0||null!==this.splatSceneDownloadAndBuildPromise||null!==this.splatSceneRemovalPromise}isDisposingOrDisposed(){return this.disposing||this.disposed}addSplatSceneDownloadPromise(e){this.splatSceneDownloadPromises[e.id]=e}removeSplatSceneDownloadPromise(e){delete this.splatSceneDownloadPromises[e.id]}setSplatSceneDownloadAndBuildPromise(e){this.splatSceneDownloadAndBuildPromise=e}clearSplatSceneDownloadAndBuildPromise(){this.splatSceneDownloadAndBuildPromise=null}addSplatScene(e,t={}){if(this.isLoadingOrUnloading())throw new Error("Cannot add splat scene while another load or unload is already in progress.");if(this.isDisposingOrDisposed())throw new Error("Cannot add splat scene after dispose() is called.");t.progressiveLoad&&this.splatMesh.scenes&&this.splatMesh.scenes.length>0&&(console.log('addSplatScene(): "progressiveLoad" option ignore because there are multiple splat scenes'),t.progressiveLoad=!1);const s=void 0!==t.format&&null!==t.format?t.format:ut(e),n=$t.isProgressivelyLoadable(s)&&t.progressiveLoad,r=void 0===t.showLoadingUI||null===t.showLoadingUI||t.showLoadingUI;let i=null;r&&(this.loadingSpinner.removeAllTasks(),i=this.loadingSpinner.addTask("Downloading..."));const o=(e,t,s)=>{if(r)if(s===rt)if(100==e)this.loadingSpinner.setMessageForTask(i,"Download complete!");else if(n)this.loadingSpinner.setMessageForTask(i,"Downloading splats...");else{const e=t?`: ${t}`:"...";this.loadingSpinner.setMessageForTask(i,`Downloading${e}`)}else s===it&&this.loadingSpinner.setMessageForTask(i,"Processing splats...")};let a=!1,l=0;const c=(e,t)=>{r&&((e&&n||t&&!n)&&(this.loadingSpinner.removeTask(i),t||a||this.loadingProgressBar.show()),n&&(t?(a=!0,this.loadingProgressBar.hide()):this.loadingProgressBar.setProgress(l)))};return(n?this.downloadAndBuildSingleSplatSceneProgressiveLoad.bind(this):this.downloadAndBuildSingleSplatSceneStandardLoad.bind(this))(e,s,t.splatAlphaRemovalThreshold,((e,s,i)=>{!n&&t.onProgress&&t.onProgress(0,"0%",it);const o={rotation:t.rotation||t.orientation,position:t.position,scale:t.scale,splatAlphaRemovalThreshold:t.splatAlphaRemovalThreshold};return this.addSplatBuffers([e],[o],i,s&&r,r,n,n).then((()=>{!n&&t.onProgress&&t.onProgress(100,"100%",it),c(s,i)}))}).bind(this),((e,s,n)=>{l=e,o(e,s,n),t.onProgress&&t.onProgress(e,s,n)}),(()=>{this.loadingProgressBar.hide(),this.loadingSpinner.removeAllTasks()}).bind(this))}downloadAndBuildSingleSplatSceneStandardLoad(e,t,s,n,r,i){const o=y(),a=this.downloadSplatSceneToSplatBuffer(e,s,r,!1,void 0,t).then((e=>(this.removeSplatSceneDownloadPromise(a),n(e,!0,!0).then((()=>{o.resolve(),this.clearSplatSceneDownloadAndBuildPromise()}))))).catch((t=>{if(i&&i(),o.reject(),this.clearSplatSceneDownloadAndBuildPromise(),this.removeSplatSceneDownloadPromise(a),!(t instanceof p))throw new Error(`Viewer::addSplatScene -> Could not load file ${e}`)}));return this.addSplatSceneDownloadPromise(a),this.setSplatSceneDownloadAndBuildPromise(o.promise),o.promise}downloadAndBuildSingleSplatSceneProgressiveLoad(e,t,s,n,r,i){let o=0,a=!1;const l=[],c=()=>{if(l.length>0&&!a&&!this.isDisposingOrDisposed()){a=!0;const e=l.shift();n(e.splatBuffer,e.firstBuild,e.finalBuild).then((()=>{a=!1,e.firstBuild?(d.reject=null,d.resolve()):e.finalBuild&&(u.resolve(),this.clearSplatSceneDownloadAndBuildPromise()),l.length>0&&C((()=>c()))}))}};let h=this.downloadSplatSceneToSplatBuffer(e,s,r,!0,((e,t)=>{this.isDisposingOrDisposed()||(t||0===l.length||e.getSplatCount()>l[0].splatBuffer.getSplatCount())&&(l.push({splatBuffer:e,firstBuild:0===o,finalBuild:t}),o++,c())}),t);const d=x(h.abortHandler),u=x();return this.addSplatSceneDownloadPromise(h),this.setSplatSceneDownloadAndBuildPromise(u.promise),h.then((()=>{this.removeSplatSceneDownloadPromise(h)})).catch((e=>{this.clearSplatSceneDownloadAndBuildPromise(),this.removeSplatSceneDownloadPromise(h),e instanceof p||(u.reject(e),d.reject&&d.reject(e),i&&i(e))})),d.promise}addSplatScenes(e,t=!0,s=void 0){if(this.isLoadingOrUnloading())throw new Error("Cannot add splat scene while another load or unload is already in progress.");if(this.isDisposingOrDisposed())throw new Error("Cannot add splat scene after dispose() is called.");const n=e.length,r=[];let i;t&&(this.loadingSpinner.removeAllTasks(),i=this.loadingSpinner.addTask("Downloading..."));const o=(e,o,a,l)=>{r[e]=o;let c=0;for(let e=0;e<n;e++)c+=r[e]||0;c/=n,a=`${c.toFixed(2)}%`,t&&l===rt&&this.loadingSpinner.setMessageForTask(i,100==c?"Download complete!":`Downloading: ${a}`),s&&s(c,a,l)},a=[],l=[],c=[];for(let t=0;t<e.length;t++){const s=e[t],n=void 0!==s.format&&null!==s.format?s.format:ut(s.path),r=this.downloadSplatSceneToSplatBuffer(s.path,s.splatAlphaRemovalThreshold,o.bind(this,t),!1,void 0,n);c.push(r.abortHandler),a.push(r),l.push(r.promise),this.addSplatSceneDownloadPromise(r)}const h=new d(((n,r)=>{Promise.all(l).then((r=>{t&&this.loadingSpinner.removeTask(i),s&&s(0,"0%",it),this.addSplatBuffers(r,e,!0,t,t,!1,!1).then((()=>{s&&s(100,"100%",it),this.clearSplatSceneDownloadAndBuildPromise(),n()}))})).catch((e=>{t&&this.loadingSpinner.removeTask(i),this.clearSplatSceneDownloadAndBuildPromise(),e instanceof p?n():r(new Error("Viewer::addSplatScenes -> Could not load one or more splat scenes."))})).finally((()=>{for(let e of a)this.removeSplatSceneDownloadPromise(e)}))}),(()=>{for(let e of c)e()}));return this.setSplatSceneDownloadAndBuildPromise(h),h}downloadSplatSceneToSplatBuffer(e,t=1,s=void 0,n=!1,r=void 0,i){return i===pt.Splat?ht.loadFromURL(e,s,n,r,t,0,!1):i===pt.KSplat?dt.loadFromURL(e,s,n,r):i===pt.Ply?lt.loadFromURL(e,s,n,r,t,this.plyInMemoryCompressionLevel,this.sphericalHarmonicsDegree):d.reject(new Error(`Viewer::downloadSplatSceneToSplatBuffer -> File format not supported: ${e}`))}static isProgressivelyLoadable(e){return e===pt.Splat||e===pt.KSplat||e===pt.Ply}addSplatBuffers=function(){return function(e,t=[],s=!0,n=!0,r=!0,i=!1,o=!1,a=!0){if(this.isDisposingOrDisposed())return Promise.resolve();this.splatRenderReady=!1;let l=null;const c=(e,t)=>{this.isDisposingOrDisposed()||(!this.gpuAcceleratedSort&&this.sortWorker&&this.sortWorker.postMessage({centers:e.centers.buffer,sceneIndexes:e.sceneIndexes.buffer,range:{from:e.from,to:e.to,count:e.count}}),this.updateSplatSort(!0),o?this.splatRenderReady=!0:this.runAfterNextSort.push((()=>{this.splatRenderReady=!0})),this.runAfterNextSort.push((()=>{null!==l&&(this.loadingSpinner.removeTask(l),l=null),t()})))};return new Promise((o=>{n&&(l=this.loadingSpinner.addTask("Processing splats...")),C((()=>{if(this.isDisposingOrDisposed())o();else{const n=this.addSplatBuffersToMesh(e,t,s,r,i,a),l=this.splatMesh.getMaxSplatCount();this.sortWorker&&this.sortWorker.maxSplatCount!==l&&this.disposeSortWorker();(!this.sortWorker&&l>0?this.setupSortWorker(this.splatMesh):Promise.resolve()).then((()=>{c(n,o)}))}}),!0)}))}}();addSplatBuffersToMesh=function(){let e;return function(t,s,n=!0,r=!1,i=!1,o=!0){if(this.isDisposingOrDisposed())return;let a=[],l=[];i||(a=this.splatMesh.scenes.map((e=>e.splatBuffer))||[],l=this.splatMesh.sceneOptions?this.splatMesh.sceneOptions.map((e=>e)):[]),a.push(...t),l.push(...s),this.renderer&&this.splatMesh.setRenderer(this.renderer);const c=this.splatMesh.build(a,l,!0,n,(t=>{if(this.isDisposingOrDisposed())return;const s=this.splatMesh.getSplatCount();r&&s>=15e5&&(t||e||(this.loadingSpinner.setMinimized(!0,!0),e=this.loadingSpinner.addTask("Optimizing splats...")))}),(t=>{this.isDisposingOrDisposed()||t&&e&&(this.loadingSpinner.removeTask(e),e=null)}),o);return n&&this.freeIntermediateSplatData&&this.splatMesh.freeIntermediateSplatData(),c}}();setupSortWorker(e){if(!this.isDisposingOrDisposed())return new Promise((t=>{const s=this.integerBasedSort?Int32Array:Float32Array,n=e.getSplatCount(),r=e.getMaxSplatCount();this.sortWorker=function(e,t,s,n,r){const i=new Worker(URL.createObjectURL(new Blob(["(",qt.toString(),")(self)"],{type:"application/javascript"})));let o="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",a=v()?B():null;s||t?s?t||a&&a.major<16&&(o="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"):o=Wt:(o=Wt,a&&a.major<16&&(o="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"));const l=atob(o),c=new Uint8Array(l.length);for(let e=0;e<l.length;e++)c[e]=l.charCodeAt(e);return i.postMessage({init:{sorterWasmBytes:c.buffer,splatCount:e,useSharedMemory:t,integerBasedSort:n,dynamicMode:r,Constants:{BytesPerFloat:b.BytesPerFloat,BytesPerInt:b.BytesPerInt,DepthMapRange:b.DepthMapRange,MemoryPageSize:b.MemoryPageSize,MaxScenes:b.MaxScenes}}}),i}(r,this.sharedMemoryForWorkers,this.enableSIMDInSort,this.integerBasedSort,this.splatMesh.dynamicMode),this.sortWorker.onmessage=e=>{if(e.data.sortDone){if(this.sortRunning=!1,this.sharedMemoryForWorkers)this.splatMesh.updateRenderIndexes(this.sortWorkerSortedIndexes,e.data.splatRenderCount);else{const t=new Uint32Array(e.data.sortedIndexes.buffer,0,e.data.splatRenderCount);this.splatMesh.updateRenderIndexes(t,e.data.splatRenderCount)}this.lastSortTime=e.data.sortTime,this.sortPromiseResolver(),this.sortPromiseResolver=null,this.forceRenderNextFrame(),this.runAfterNextSort.length>0&&(this.runAfterNextSort.forEach((e=>{e()})),this.runAfterNextSort.length=0)}else if(e.data.sortCanceled)this.sortRunning=!1;else if(e.data.sortSetupPhase1Complete){this.logLevel>=Nt.Info&&console.log("Sorting web worker WASM setup complete."),this.sharedMemoryForWorkers?(this.sortWorkerSortedIndexes=new Uint32Array(e.data.sortedIndexesBuffer,e.data.sortedIndexesOffset,r),this.sortWorkerIndexesToSort=new Uint32Array(e.data.indexesToSortBuffer,e.data.indexesToSortOffset,r),this.sortWorkerPrecomputedDistances=new s(e.data.precomputedDistancesBuffer,e.data.precomputedDistancesOffset,r),this.sortWorkerTransforms=new Float32Array(e.data.transformsBuffer,e.data.transformsOffset,16*b.MaxScenes)):(this.sortWorkerIndexesToSort=new Uint32Array(r),this.sortWorkerPrecomputedDistances=new s(r),this.sortWorkerTransforms=new Float32Array(16*b.MaxScenes));for(let e=0;e<n;e++)this.sortWorkerIndexesToSort[e]=e;if(this.sortWorker.maxSplatCount=r,this.logLevel>=Nt.Info){console.log("Sorting web worker ready.");const e=this.splatMesh.getSplatDataTextures(),t=e.covariances.size,s=e.centerColors.size;console.log("Covariances texture size: "+t.x+" x "+t.y),console.log("Centers/colors texture size: "+s.x+" x "+s.y)}t()}}}))}disposeSortWorker(){this.sortWorker&&this.sortWorker.terminate(),this.sortWorker=null,this.sortPromise=null,this.sortPromiseResolver&&(this.sortPromiseResolver(),this.sortPromiseResolver=null),this.sortRunning=!1}removeSplatScene(e,t=!0){if(this.isLoadingOrUnloading())throw new Error("Cannot remove splat scene while another load or unload is already in progress.");if(this.isDisposingOrDisposed())throw new Error("Cannot remove splat scene after dispose() is called.");let s;return this.splatSceneRemovalPromise=new Promise(((n,r)=>{let i;t&&(this.loadingSpinner.removeAllTasks(),this.loadingSpinner.show(),i=this.loadingSpinner.addTask("Removing splat scene..."));const o=()=>{t&&(this.loadingSpinner.hide(),this.loadingSpinner.removeTask(i))},a=e=>{o(),this.splatSceneRemovalPromise=null,e?r(e):n()},l=()=>!!this.isDisposingOrDisposed()&&(a(),!0);s=this.sortPromise||Promise.resolve(),s.then((()=>{if(l())return;const t=[],n=[],r=[];for(let s=0;s<this.splatMesh.scenes.length;s++)if(s!==e){const e=this.splatMesh.scenes[s];t.push(e.splatBuffer),n.push(this.splatMesh.sceneOptions[s]),r.push({position:e.position.clone(),quaternion:e.quaternion.clone(),scale:e.scale.clone()})}this.disposeSortWorker(),this.splatMesh.dispose(),this.createSplatMesh(),this.addSplatBuffers(t,n,!0,!1,!0).then((()=>{l()||(o(),this.splatMesh.scenes.forEach(((e,t)=>{e.position.copy(r[t].position),e.quaternion.copy(r[t].quaternion),e.scale.copy(r[t].scale)})),this.splatMesh.updateTransforms(),this.splatRenderReady=!1,this.updateSplatSort(!0).then((()=>{l()?this.splatRenderReady=!0:(s=this.sortPromise||Promise.resolve(),s.then((()=>{this.splatRenderReady=!0,a()})))})))})).catch((e=>{a(e)}))}))})),this.splatSceneRemovalPromise}start(){if(!this.selfDrivenMode)throw new Error("Cannot start viewer unless it is in self driven mode.");this.webXRMode?this.renderer.setAnimationLoop(this.selfDrivenUpdateFunc):this.requestFrameId=requestAnimationFrame(this.selfDrivenUpdateFunc),this.selfDrivenModeRunning=!0}stop(){this.selfDrivenMode&&this.selfDrivenModeRunning&&(this.webXRMode||cancelAnimationFrame(this.requestFrameId),this.selfDrivenModeRunning=!1)}async dispose(){this.disposing=!0;let e=[],t=[];for(let s in this.splatSceneDownloadPromises)if(this.splatSceneDownloadPromises.hasOwnProperty(s)){const n=this.splatSceneDownloadPromises[s];t.push(n),e.push(n.promise)}this.sortPromise&&e.push(this.sortPromise);const s=Promise.all(e).finally((()=>{this.stop(),this.controls&&(this.controls.dispose(),this.controls=null),this.splatMesh&&(this.splatMesh.dispose(),this.splatMesh=null),this.sceneHelper&&(this.sceneHelper.dispose(),this.sceneHelper=null),this.resizeObserver&&(this.resizeObserver.unobserve(this.rootElement),this.resizeObserver=null),this.disposeSortWorker(),this.removeEventHandlers(),this.loadingSpinner.removeAllTasks(),this.loadingSpinner.setContainer(null),this.loadingProgressBar.hide(),this.loadingProgressBar.setContainer(null),this.infoPanel.setContainer(null),this.camera=null,this.threeScene=null,this.splatRenderReady=!1,this.initialized=!1,this.renderer&&(this.usingExternalRenderer||(this.rootElement.removeChild(this.renderer.domElement),this.renderer.dispose()),this.renderer=null),this.usingExternalRenderer||document.body.removeChild(this.rootElement),this.sortWorkerSortedIndexes=null,this.sortWorkerIndexesToSort=null,this.sortWorkerPrecomputedDistances=null,this.sortWorkerTransforms=null,this.disposed=!0,this.disposing=!1}));return t.forEach((e=>{e.abort("Scene disposed")})),s}selfDrivenUpdate(){this.selfDrivenMode&&!this.webXRMode&&(this.requestFrameId=requestAnimationFrame(this.selfDrivenUpdateFunc)),this.update(),this.shouldRender()?(this.render(),this.consecutiveRenderFrames++):this.consecutiveRenderFrames=0,this.renderNextFrame=!1}forceRenderNextFrame(){this.renderNextFrame=!0}shouldRender=function(){let t=0;const s=new e.Vector3,n=new e.Quaternion,r=1e-4;return function(){let e=!1,i=!1;if(this.camera){const e=this.camera.position,t=this.camera.quaternion;i=Math.abs(e.x-s.x)>r||Math.abs(e.y-s.y)>r||Math.abs(e.z-s.z)>r||Math.abs(t.x-n.x)>r||Math.abs(t.y-n.y)>r||Math.abs(t.z-n.z)>r||Math.abs(t.w-n.w)>r}return e=this.renderMode!==Zt.Never&&(0===t||this.splatMesh.visibleRegionChanging||i||this.renderMode===Zt.Always||!0===this.dynamicMode||this.renderNextFrame),this.camera&&(s.copy(this.camera.position),n.copy(this.camera.quaternion)),t++,e}}();render=function(){if(!this.initialized||!this.splatRenderReady)return;const e=this.renderer.autoClear;(e=>{for(let t of e.children)if(t.visible)return!0;return!1})(this.threeScene)&&(this.renderer.render(this.threeScene,this.camera),this.renderer.autoClear=!1),this.renderer.render(this.splatMesh,this.camera),this.renderer.autoClear=!1,this.sceneHelper.getFocusMarkerOpacity()>0&&this.renderer.render(this.sceneHelper.focusMarker,this.camera),this.showControlPlane&&this.renderer.render(this.sceneHelper.controlPlane,this.camera),this.renderer.autoClear=e};update(e,t){this.dropInMode&&this.updateForDropInMode(e,t),this.initialized&&this.splatRenderReady&&(this.controls&&(this.controls.update(),this.camera.isOrthographicCamera&&!this.usingExternalCamera&&$t.setCameraPositionFromZoom(this.camera,this.camera,this.controls)),this.splatMesh.updateVisibleRegionFadeDistance(this.sceneRevealMode),this.updateSplatSort(),this.updateForRendererSizeChanges(),this.updateSplatMesh(),this.updateMeshCursor(),this.updateFPS(),this.timingSensitiveUpdates(),this.updateInfoPanel(),this.updateControlPlane())}updateForDropInMode(e,t){this.renderer=e,this.splatMesh&&this.splatMesh.setRenderer(this.renderer),this.camera=t,this.controls&&(this.controls.object=t),this.init()}updateFPS=function(){let e=g(),t=0;return function(){if(this.consecutiveRenderFrames>60){const s=g();s-e>=1?(this.currentFPS=t,t=0,e=s):t++}else this.currentFPS=null}}();updateForRendererSizeChanges=function(){const t=new e.Vector2,s=new e.Vector2;let n;return function(){this.usingExternalCamera||(this.renderer.getSize(s),void 0!==n&&n===this.camera.isOrthographicCamera&&s.x===t.x&&s.y===t.y||(this.camera.isOrthographicCamera?(this.camera.left=-s.x/2,this.camera.right=s.x/2,this.camera.top=s.y/2,this.camera.bottom=-s.y/2):this.camera.aspect=s.x/s.y,this.camera.updateProjectionMatrix(),t.copy(s),n=this.camera.isOrthographicCamera))}}();timingSensitiveUpdates=function(){let e;return function(){const t=g();e||(e=t);const s=t-e;this.updateCameraTransition(t),this.updateFocusMarker(s),e=t}}();updateCameraTransition=function(){let t=new e.Vector3,s=new e.Vector3,n=new e.Vector3;return function(e){if(this.transitioningCameraTarget){s.copy(this.previousCameraTarget).sub(this.camera.position).normalize(),n.copy(this.nextCameraTarget).sub(this.camera.position).normalize();const r=Math.acos(s.dot(n)),i=(r/(Math.PI/3)*.65+.3)/r*(e-this.transitioningCameraTargetStartTime);t.copy(this.previousCameraTarget).lerp(this.nextCameraTarget,i),this.camera.lookAt(t),this.controls.target.copy(t),i>=1&&(this.transitioningCameraTarget=!1)}}}();updateFocusMarker=function(){const t=new e.Vector2;let s=!1;return function(e){if(this.getRenderDimensions(t),this.transitioningCameraTarget){this.sceneHelper.setFocusMarkerVisibility(!0);const n=Math.max(this.sceneHelper.getFocusMarkerOpacity(),0);let r=Math.min(n+10*e,1);this.sceneHelper.setFocusMarkerOpacity(r),this.sceneHelper.updateFocusMarker(this.nextCameraTarget,this.camera,t),s=!0,this.forceRenderNextFrame()}else{let n;if(n=s?1:Math.min(this.sceneHelper.getFocusMarkerOpacity(),1),n>0){this.sceneHelper.updateFocusMarker(this.nextCameraTarget,this.camera,t);let s=Math.max(n-2.5*e,0);this.sceneHelper.setFocusMarkerOpacity(s),0===s&&this.sceneHelper.setFocusMarkerVisibility(!1)}n>0&&this.forceRenderNextFrame(),s=!1}}}();updateMeshCursor=function(){const t=[],s=new e.Vector2;return function(){this.showMeshCursor?(this.forceRenderNextFrame(),this.getRenderDimensions(s),t.length=0,this.raycaster.setFromCameraAndScreenPosition(this.camera,this.mousePosition,s),this.raycaster.intersectSplatMesh(this.splatMesh,t),t.length>0?(this.sceneHelper.setMeshCursorVisibility(!0),this.sceneHelper.positionAndOrientMeshCursor(t[0].origin,this.camera)):this.sceneHelper.setMeshCursorVisibility(!1)):(this.sceneHelper.getMeschCursorVisibility()&&this.forceRenderNextFrame(),this.sceneHelper.setMeshCursorVisibility(!1))}}();updateInfoPanel=function(){const t=new e.Vector2;return function(){if(!this.showInfo)return;const e=this.splatMesh.getSplatCount();this.getRenderDimensions(t);const s=this.controls?this.controls.target:null,n=this.showMeshCursor?this.sceneHelper.meshCursor.position:null,r=e>0?this.splatRenderCount/e*100:0;this.infoPanel.update(t,this.camera.position,s,this.camera.up,this.camera.isOrthographicCamera,n,this.currentFPS||"N/A",e,this.splatRenderCount,r,this.lastSortTime,this.focalAdjustment,this.splatMesh.getSplatScale(),this.splatMesh.getPointCloudModeEnabled())}}();updateControlPlane(){this.showControlPlane?(this.sceneHelper.setControlPlaneVisibility(!0),this.sceneHelper.positionAndOrientControlPlane(this.controls.target,this.camera.up)):this.sceneHelper.setControlPlaneVisibility(!1)}updateSplatSort=function(){const t=new e.Matrix4,s=[],n=new e.Vector3(0,0,-1),r=new e.Vector3(0,0,-1),i=new e.Vector3,o=new e.Vector3,a=[],l=[{angleThreshold:.55,sortFractions:[.125,.33333,.75]},{angleThreshold:.65,sortFractions:[.33333,.66667]},{angleThreshold:.8,sortFractions:[.5]}];return async function(e=!1){if(this.sortRunning)return;if(this.splatMesh.getSplatCount()<=0)return;let c=0,h=0,d=!1,p=!1;if(r.set(0,0,-1).applyQuaternion(this.camera.quaternion),c=r.dot(n),h=o.copy(this.camera.position).sub(i).length(),!(e||this.splatMesh.dynamicMode||0!==a.length||(c<=.99&&(d=!0),h>=1&&(p=!0),d||p)))return;this.sortRunning=!0;const{splatRenderCount:u,shouldSortAll:A}=this.gatherSceneNodesForSort();this.splatRenderCount=u,t.copy(this.camera.matrixWorld).invert();const m=this.perspectiveCamera||this.camera;if(t.premultiply(m.projectionMatrix),t.multiply(this.splatMesh.matrixWorld),this.gpuAcceleratedSort&&(a.length<=1||a.length%2==0)&&await this.splatMesh.computeDistancesOnGPU(t,this.sortWorkerPrecomputedDistances),this.splatMesh.dynamicMode||A)a.push(this.splatRenderCount);else if(0===a.length){for(let e of l)if(c<e.angleThreshold){for(let t of e.sortFractions)a.push(Math.floor(this.splatRenderCount*t));break}a.push(this.splatRenderCount)}let g=Math.min(a.shift(),this.splatRenderCount);s[0]=this.camera.position.x,s[1]=this.camera.position.y,s[2]=this.camera.position.z;const f={modelViewProj:t.elements,cameraPosition:s,splatRenderCount:this.splatRenderCount,splatSortCount:g,usePrecomputedDistances:this.gpuAcceleratedSort};this.splatMesh.dynamicMode&&this.splatMesh.fillTransformsArray(this.sortWorkerTransforms),this.sharedMemoryForWorkers||(f.indexesToSort=this.sortWorkerIndexesToSort,f.transforms=this.sortWorkerTransforms,this.gpuAcceleratedSort&&(f.precomputedDistances=this.sortWorkerPrecomputedDistances)),this.sortPromise=new Promise((e=>{this.sortPromiseResolver=e})),this.sortWorker.postMessage({sort:f}),0===a.length&&(i.copy(this.camera.position),n.copy(r))}}();gatherSceneNodesForSort=function(){const t=[];let s=null;const n=new e.Vector3,r=new e.Vector3,i=new e.Vector3,o=new e.Matrix4,a=new e.Matrix4,l=new e.Matrix4,c=new e.Vector3,h=new e.Vector3(0,0,-1),d=new e.Vector3,p=e=>d.copy(e.max).sub(e.min).length();return function(d=!1){this.getRenderDimensions(c);const u=c.y/2/Math.tan(this.camera.fov/2*e.MathUtils.DEG2RAD),A=Math.atan(c.x/2/u),m=Math.atan(c.y/2/u),g=Math.cos(A),f=Math.cos(m),C=this.splatMesh.getSplatTree();if(C){a.copy(this.camera.matrixWorld).invert(),a.multiply(this.splatMesh.matrixWorld);let e=0,s=0;for(let c=0;c<C.subTrees.length;c++){const u=C.subTrees[c];o.copy(a),this.splatMesh.dynamicMode&&(this.splatMesh.getSceneTransform(c,l),o.multiply(l));const A=u.nodesWithIndexes.length;for(let a=0;a<A;a++){const l=u.nodesWithIndexes[a];if(!l.data||!l.data.indexes||0===l.data.indexes.length)continue;i.copy(l.center).applyMatrix4(o);const c=i.length();i.normalize(),n.copy(i).setX(0).normalize(),r.copy(i).setY(0).normalize();const A=h.dot(r),m=h.dot(n),C=p(l);!d&&(A<g-.6||m<f-.6)&&c>C||(s+=l.data.indexes.length,t[e]=l,l.data.distanceToNode=c,e++)}}t.length=e,t.sort(((e,t)=>e.data.distanceToNode<t.data.distanceToNode?-1:1));let c=s*b.BytesPerInt;for(let s=0;s<e;s++){const e=t[s],n=e.data.indexes.length,r=n*b.BytesPerInt;new Uint32Array(this.sortWorkerIndexesToSort.buffer,c-r,n).set(e.data.indexes),c-=r}return{splatRenderCount:s,shouldSortAll:!1}}{const e=this.splatMesh.getSplatCount();if(!s||s.length!==e){s=new Uint32Array(e);for(let t=0;t<e;t++)s[t]=t}return this.sortWorkerIndexesToSort.set(s),{splatRenderCount:e,shouldSortAll:!0}}}}();getSplatMesh(){return this.splatMesh}getSplatScene(e){return this.splatMesh.getScene(e)}isMobile(){return navigator.userAgent.includes("Mobi")}}class es extends e.Group{constructor(e={}){super(),e.selfDrivenMode=!1,e.useBuiltInControls=!1,e.rootElement=null,e.ignoreDevicePixelRatio=!1,e.dropInMode=!0,e.camera=void 0,e.renderer=void 0,this.viewer=new $t(e),this.splatMesh=null,this.callbackMesh=es.createCallbackMesh(),this.add(this.callbackMesh),this.callbackMesh.onBeforeRender=es.onBeforeRender.bind(this,this.viewer)}addSplatScene(e,t={}){return!1!==t.showLoadingUI&&(t.showLoadingUI=!0),this.viewer.addSplatScene(e,t)}addSplatScenes(e,t){return!1!==t&&(t=!0),this.viewer.addSplatScenes(e,t)}getSplatScene(e){return this.viewer.getSplatScene(e)}removeSplatScene(e){return this.viewer.removeSplatScene(e)}dispose(){return this.viewer.dispose()}static onBeforeRender(e,t,s,n){this.splatMesh!==this.viewer.splatMesh&&(this.splatMesh&&this.remove(this.splatMesh),this.splatMesh=this.viewer.splatMesh,this.add(this.viewer.splatMesh)),e.update(t,n)}static createCallbackMesh(){const t=new e.SphereGeometry(1,8,8),s=new e.MeshBasicMaterial;s.colorWrite=!1,s.depthWrite=!1;const n=new e.Mesh(t,s);return n.frustumCulled=!1,n}}export{d as AbortablePromise,es as DropInViewer,dt as KSplatLoader,At as LoaderUtils,Nt as LogLevel,xt as OrbitControls,G as PlayCanvasCompressedPlyParser,lt as PlyLoader,tt as PlyParser,Zt as RenderMode,pt as SceneFormat,Vt as SceneRevealMode,H as SplatBuffer,nt as SplatBufferGenerator,ht as SplatLoader,ct as SplatParser,st as SplatPartitioner,$t as Viewer,Yt as WebXRMode};
//# sourceMappingURL=gaussian-splats-3d.module.min.js.map
